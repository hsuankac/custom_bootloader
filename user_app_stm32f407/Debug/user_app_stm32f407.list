
user_app_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008380  08008188  08008188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08010508  08010508  00010508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010524  08010524  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08010524  08010524  00010524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801052c  0801052c  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801052c  0801052c  0001052c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010530  08010530  00010530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08010534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          0000089c  200000ac  200000ac  000200ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000948  20000948  000200ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001da18  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d4c  00000000  00000000  0003daf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001330  00000000  00000000  00041840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011f0  00000000  00000000  00042b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024005  00000000  00000000  00043d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019e13  00000000  00000000  00067d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdc66  00000000  00000000  00081b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014f7de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005244  00000000  00000000  0014f834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008188 <__do_global_dtors_aux>:
 8008188:	b510      	push	{r4, lr}
 800818a:	4c05      	ldr	r4, [pc, #20]	; (80081a0 <__do_global_dtors_aux+0x18>)
 800818c:	7823      	ldrb	r3, [r4, #0]
 800818e:	b933      	cbnz	r3, 800819e <__do_global_dtors_aux+0x16>
 8008190:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <__do_global_dtors_aux+0x1c>)
 8008192:	b113      	cbz	r3, 800819a <__do_global_dtors_aux+0x12>
 8008194:	4804      	ldr	r0, [pc, #16]	; (80081a8 <__do_global_dtors_aux+0x20>)
 8008196:	f3af 8000 	nop.w
 800819a:	2301      	movs	r3, #1
 800819c:	7023      	strb	r3, [r4, #0]
 800819e:	bd10      	pop	{r4, pc}
 80081a0:	200000ac 	.word	0x200000ac
 80081a4:	00000000 	.word	0x00000000
 80081a8:	080104f0 	.word	0x080104f0

080081ac <frame_dummy>:
 80081ac:	b508      	push	{r3, lr}
 80081ae:	4b03      	ldr	r3, [pc, #12]	; (80081bc <frame_dummy+0x10>)
 80081b0:	b11b      	cbz	r3, 80081ba <frame_dummy+0xe>
 80081b2:	4903      	ldr	r1, [pc, #12]	; (80081c0 <frame_dummy+0x14>)
 80081b4:	4803      	ldr	r0, [pc, #12]	; (80081c4 <frame_dummy+0x18>)
 80081b6:	f3af 8000 	nop.w
 80081ba:	bd08      	pop	{r3, pc}
 80081bc:	00000000 	.word	0x00000000
 80081c0:	200000b0 	.word	0x200000b0
 80081c4:	080104f0 	.word	0x080104f0

080081c8 <__aeabi_uldivmod>:
 80081c8:	b953      	cbnz	r3, 80081e0 <__aeabi_uldivmod+0x18>
 80081ca:	b94a      	cbnz	r2, 80081e0 <__aeabi_uldivmod+0x18>
 80081cc:	2900      	cmp	r1, #0
 80081ce:	bf08      	it	eq
 80081d0:	2800      	cmpeq	r0, #0
 80081d2:	bf1c      	itt	ne
 80081d4:	f04f 31ff 	movne.w	r1, #4294967295
 80081d8:	f04f 30ff 	movne.w	r0, #4294967295
 80081dc:	f000 b96e 	b.w	80084bc <__aeabi_idiv0>
 80081e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80081e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80081e8:	f000 f806 	bl	80081f8 <__udivmoddi4>
 80081ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80081f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081f4:	b004      	add	sp, #16
 80081f6:	4770      	bx	lr

080081f8 <__udivmoddi4>:
 80081f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081fc:	9d08      	ldr	r5, [sp, #32]
 80081fe:	4604      	mov	r4, r0
 8008200:	468c      	mov	ip, r1
 8008202:	2b00      	cmp	r3, #0
 8008204:	f040 8083 	bne.w	800830e <__udivmoddi4+0x116>
 8008208:	428a      	cmp	r2, r1
 800820a:	4617      	mov	r7, r2
 800820c:	d947      	bls.n	800829e <__udivmoddi4+0xa6>
 800820e:	fab2 f282 	clz	r2, r2
 8008212:	b142      	cbz	r2, 8008226 <__udivmoddi4+0x2e>
 8008214:	f1c2 0020 	rsb	r0, r2, #32
 8008218:	fa24 f000 	lsr.w	r0, r4, r0
 800821c:	4091      	lsls	r1, r2
 800821e:	4097      	lsls	r7, r2
 8008220:	ea40 0c01 	orr.w	ip, r0, r1
 8008224:	4094      	lsls	r4, r2
 8008226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800822a:	0c23      	lsrs	r3, r4, #16
 800822c:	fbbc f6f8 	udiv	r6, ip, r8
 8008230:	fa1f fe87 	uxth.w	lr, r7
 8008234:	fb08 c116 	mls	r1, r8, r6, ip
 8008238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800823c:	fb06 f10e 	mul.w	r1, r6, lr
 8008240:	4299      	cmp	r1, r3
 8008242:	d909      	bls.n	8008258 <__udivmoddi4+0x60>
 8008244:	18fb      	adds	r3, r7, r3
 8008246:	f106 30ff 	add.w	r0, r6, #4294967295
 800824a:	f080 8119 	bcs.w	8008480 <__udivmoddi4+0x288>
 800824e:	4299      	cmp	r1, r3
 8008250:	f240 8116 	bls.w	8008480 <__udivmoddi4+0x288>
 8008254:	3e02      	subs	r6, #2
 8008256:	443b      	add	r3, r7
 8008258:	1a5b      	subs	r3, r3, r1
 800825a:	b2a4      	uxth	r4, r4
 800825c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008260:	fb08 3310 	mls	r3, r8, r0, r3
 8008264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008268:	fb00 fe0e 	mul.w	lr, r0, lr
 800826c:	45a6      	cmp	lr, r4
 800826e:	d909      	bls.n	8008284 <__udivmoddi4+0x8c>
 8008270:	193c      	adds	r4, r7, r4
 8008272:	f100 33ff 	add.w	r3, r0, #4294967295
 8008276:	f080 8105 	bcs.w	8008484 <__udivmoddi4+0x28c>
 800827a:	45a6      	cmp	lr, r4
 800827c:	f240 8102 	bls.w	8008484 <__udivmoddi4+0x28c>
 8008280:	3802      	subs	r0, #2
 8008282:	443c      	add	r4, r7
 8008284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008288:	eba4 040e 	sub.w	r4, r4, lr
 800828c:	2600      	movs	r6, #0
 800828e:	b11d      	cbz	r5, 8008298 <__udivmoddi4+0xa0>
 8008290:	40d4      	lsrs	r4, r2
 8008292:	2300      	movs	r3, #0
 8008294:	e9c5 4300 	strd	r4, r3, [r5]
 8008298:	4631      	mov	r1, r6
 800829a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829e:	b902      	cbnz	r2, 80082a2 <__udivmoddi4+0xaa>
 80082a0:	deff      	udf	#255	; 0xff
 80082a2:	fab2 f282 	clz	r2, r2
 80082a6:	2a00      	cmp	r2, #0
 80082a8:	d150      	bne.n	800834c <__udivmoddi4+0x154>
 80082aa:	1bcb      	subs	r3, r1, r7
 80082ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80082b0:	fa1f f887 	uxth.w	r8, r7
 80082b4:	2601      	movs	r6, #1
 80082b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80082ba:	0c21      	lsrs	r1, r4, #16
 80082bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80082c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80082c4:	fb08 f30c 	mul.w	r3, r8, ip
 80082c8:	428b      	cmp	r3, r1
 80082ca:	d907      	bls.n	80082dc <__udivmoddi4+0xe4>
 80082cc:	1879      	adds	r1, r7, r1
 80082ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80082d2:	d202      	bcs.n	80082da <__udivmoddi4+0xe2>
 80082d4:	428b      	cmp	r3, r1
 80082d6:	f200 80e9 	bhi.w	80084ac <__udivmoddi4+0x2b4>
 80082da:	4684      	mov	ip, r0
 80082dc:	1ac9      	subs	r1, r1, r3
 80082de:	b2a3      	uxth	r3, r4
 80082e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80082e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80082e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80082ec:	fb08 f800 	mul.w	r8, r8, r0
 80082f0:	45a0      	cmp	r8, r4
 80082f2:	d907      	bls.n	8008304 <__udivmoddi4+0x10c>
 80082f4:	193c      	adds	r4, r7, r4
 80082f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80082fa:	d202      	bcs.n	8008302 <__udivmoddi4+0x10a>
 80082fc:	45a0      	cmp	r8, r4
 80082fe:	f200 80d9 	bhi.w	80084b4 <__udivmoddi4+0x2bc>
 8008302:	4618      	mov	r0, r3
 8008304:	eba4 0408 	sub.w	r4, r4, r8
 8008308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800830c:	e7bf      	b.n	800828e <__udivmoddi4+0x96>
 800830e:	428b      	cmp	r3, r1
 8008310:	d909      	bls.n	8008326 <__udivmoddi4+0x12e>
 8008312:	2d00      	cmp	r5, #0
 8008314:	f000 80b1 	beq.w	800847a <__udivmoddi4+0x282>
 8008318:	2600      	movs	r6, #0
 800831a:	e9c5 0100 	strd	r0, r1, [r5]
 800831e:	4630      	mov	r0, r6
 8008320:	4631      	mov	r1, r6
 8008322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008326:	fab3 f683 	clz	r6, r3
 800832a:	2e00      	cmp	r6, #0
 800832c:	d14a      	bne.n	80083c4 <__udivmoddi4+0x1cc>
 800832e:	428b      	cmp	r3, r1
 8008330:	d302      	bcc.n	8008338 <__udivmoddi4+0x140>
 8008332:	4282      	cmp	r2, r0
 8008334:	f200 80b8 	bhi.w	80084a8 <__udivmoddi4+0x2b0>
 8008338:	1a84      	subs	r4, r0, r2
 800833a:	eb61 0103 	sbc.w	r1, r1, r3
 800833e:	2001      	movs	r0, #1
 8008340:	468c      	mov	ip, r1
 8008342:	2d00      	cmp	r5, #0
 8008344:	d0a8      	beq.n	8008298 <__udivmoddi4+0xa0>
 8008346:	e9c5 4c00 	strd	r4, ip, [r5]
 800834a:	e7a5      	b.n	8008298 <__udivmoddi4+0xa0>
 800834c:	f1c2 0320 	rsb	r3, r2, #32
 8008350:	fa20 f603 	lsr.w	r6, r0, r3
 8008354:	4097      	lsls	r7, r2
 8008356:	fa01 f002 	lsl.w	r0, r1, r2
 800835a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800835e:	40d9      	lsrs	r1, r3
 8008360:	4330      	orrs	r0, r6
 8008362:	0c03      	lsrs	r3, r0, #16
 8008364:	fbb1 f6fe 	udiv	r6, r1, lr
 8008368:	fa1f f887 	uxth.w	r8, r7
 800836c:	fb0e 1116 	mls	r1, lr, r6, r1
 8008370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008374:	fb06 f108 	mul.w	r1, r6, r8
 8008378:	4299      	cmp	r1, r3
 800837a:	fa04 f402 	lsl.w	r4, r4, r2
 800837e:	d909      	bls.n	8008394 <__udivmoddi4+0x19c>
 8008380:	18fb      	adds	r3, r7, r3
 8008382:	f106 3cff 	add.w	ip, r6, #4294967295
 8008386:	f080 808d 	bcs.w	80084a4 <__udivmoddi4+0x2ac>
 800838a:	4299      	cmp	r1, r3
 800838c:	f240 808a 	bls.w	80084a4 <__udivmoddi4+0x2ac>
 8008390:	3e02      	subs	r6, #2
 8008392:	443b      	add	r3, r7
 8008394:	1a5b      	subs	r3, r3, r1
 8008396:	b281      	uxth	r1, r0
 8008398:	fbb3 f0fe 	udiv	r0, r3, lr
 800839c:	fb0e 3310 	mls	r3, lr, r0, r3
 80083a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80083a4:	fb00 f308 	mul.w	r3, r0, r8
 80083a8:	428b      	cmp	r3, r1
 80083aa:	d907      	bls.n	80083bc <__udivmoddi4+0x1c4>
 80083ac:	1879      	adds	r1, r7, r1
 80083ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80083b2:	d273      	bcs.n	800849c <__udivmoddi4+0x2a4>
 80083b4:	428b      	cmp	r3, r1
 80083b6:	d971      	bls.n	800849c <__udivmoddi4+0x2a4>
 80083b8:	3802      	subs	r0, #2
 80083ba:	4439      	add	r1, r7
 80083bc:	1acb      	subs	r3, r1, r3
 80083be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80083c2:	e778      	b.n	80082b6 <__udivmoddi4+0xbe>
 80083c4:	f1c6 0c20 	rsb	ip, r6, #32
 80083c8:	fa03 f406 	lsl.w	r4, r3, r6
 80083cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80083d0:	431c      	orrs	r4, r3
 80083d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80083d6:	fa01 f306 	lsl.w	r3, r1, r6
 80083da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80083de:	fa21 f10c 	lsr.w	r1, r1, ip
 80083e2:	431f      	orrs	r7, r3
 80083e4:	0c3b      	lsrs	r3, r7, #16
 80083e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80083ea:	fa1f f884 	uxth.w	r8, r4
 80083ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80083f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80083f6:	fb09 fa08 	mul.w	sl, r9, r8
 80083fa:	458a      	cmp	sl, r1
 80083fc:	fa02 f206 	lsl.w	r2, r2, r6
 8008400:	fa00 f306 	lsl.w	r3, r0, r6
 8008404:	d908      	bls.n	8008418 <__udivmoddi4+0x220>
 8008406:	1861      	adds	r1, r4, r1
 8008408:	f109 30ff 	add.w	r0, r9, #4294967295
 800840c:	d248      	bcs.n	80084a0 <__udivmoddi4+0x2a8>
 800840e:	458a      	cmp	sl, r1
 8008410:	d946      	bls.n	80084a0 <__udivmoddi4+0x2a8>
 8008412:	f1a9 0902 	sub.w	r9, r9, #2
 8008416:	4421      	add	r1, r4
 8008418:	eba1 010a 	sub.w	r1, r1, sl
 800841c:	b2bf      	uxth	r7, r7
 800841e:	fbb1 f0fe 	udiv	r0, r1, lr
 8008422:	fb0e 1110 	mls	r1, lr, r0, r1
 8008426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800842a:	fb00 f808 	mul.w	r8, r0, r8
 800842e:	45b8      	cmp	r8, r7
 8008430:	d907      	bls.n	8008442 <__udivmoddi4+0x24a>
 8008432:	19e7      	adds	r7, r4, r7
 8008434:	f100 31ff 	add.w	r1, r0, #4294967295
 8008438:	d22e      	bcs.n	8008498 <__udivmoddi4+0x2a0>
 800843a:	45b8      	cmp	r8, r7
 800843c:	d92c      	bls.n	8008498 <__udivmoddi4+0x2a0>
 800843e:	3802      	subs	r0, #2
 8008440:	4427      	add	r7, r4
 8008442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008446:	eba7 0708 	sub.w	r7, r7, r8
 800844a:	fba0 8902 	umull	r8, r9, r0, r2
 800844e:	454f      	cmp	r7, r9
 8008450:	46c6      	mov	lr, r8
 8008452:	4649      	mov	r1, r9
 8008454:	d31a      	bcc.n	800848c <__udivmoddi4+0x294>
 8008456:	d017      	beq.n	8008488 <__udivmoddi4+0x290>
 8008458:	b15d      	cbz	r5, 8008472 <__udivmoddi4+0x27a>
 800845a:	ebb3 020e 	subs.w	r2, r3, lr
 800845e:	eb67 0701 	sbc.w	r7, r7, r1
 8008462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8008466:	40f2      	lsrs	r2, r6
 8008468:	ea4c 0202 	orr.w	r2, ip, r2
 800846c:	40f7      	lsrs	r7, r6
 800846e:	e9c5 2700 	strd	r2, r7, [r5]
 8008472:	2600      	movs	r6, #0
 8008474:	4631      	mov	r1, r6
 8008476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800847a:	462e      	mov	r6, r5
 800847c:	4628      	mov	r0, r5
 800847e:	e70b      	b.n	8008298 <__udivmoddi4+0xa0>
 8008480:	4606      	mov	r6, r0
 8008482:	e6e9      	b.n	8008258 <__udivmoddi4+0x60>
 8008484:	4618      	mov	r0, r3
 8008486:	e6fd      	b.n	8008284 <__udivmoddi4+0x8c>
 8008488:	4543      	cmp	r3, r8
 800848a:	d2e5      	bcs.n	8008458 <__udivmoddi4+0x260>
 800848c:	ebb8 0e02 	subs.w	lr, r8, r2
 8008490:	eb69 0104 	sbc.w	r1, r9, r4
 8008494:	3801      	subs	r0, #1
 8008496:	e7df      	b.n	8008458 <__udivmoddi4+0x260>
 8008498:	4608      	mov	r0, r1
 800849a:	e7d2      	b.n	8008442 <__udivmoddi4+0x24a>
 800849c:	4660      	mov	r0, ip
 800849e:	e78d      	b.n	80083bc <__udivmoddi4+0x1c4>
 80084a0:	4681      	mov	r9, r0
 80084a2:	e7b9      	b.n	8008418 <__udivmoddi4+0x220>
 80084a4:	4666      	mov	r6, ip
 80084a6:	e775      	b.n	8008394 <__udivmoddi4+0x19c>
 80084a8:	4630      	mov	r0, r6
 80084aa:	e74a      	b.n	8008342 <__udivmoddi4+0x14a>
 80084ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80084b0:	4439      	add	r1, r7
 80084b2:	e713      	b.n	80082dc <__udivmoddi4+0xe4>
 80084b4:	3802      	subs	r0, #2
 80084b6:	443c      	add	r4, r7
 80084b8:	e724      	b.n	8008304 <__udivmoddi4+0x10c>
 80084ba:	bf00      	nop

080084bc <__aeabi_idiv0>:
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop

080084c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80084c6:	f000 fd2d 	bl	8008f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80084ca:	f000 f829 	bl	8008520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80084ce:	f000 f979 	bl	80087c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80084d2:	f000 f88f 	bl	80085f4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80084d6:	f000 f8bb 	bl	8008650 <MX_I2S3_Init>
  MX_SPI1_Init();
 80084da:	f000 f8e9 	bl	80086b0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80084de:	f007 fbf5 	bl	800fccc <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80084e2:	f000 f91b 	bl	800871c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80084e6:	f000 f943 	bl	8008770 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80084ea:	f007 fc15 	bl	800fd18 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_UART_Transmit(&huart2, (uint8_t*)userdata, sizeof(userdata), HAL_MAX_DELAY);
 80084ee:	f04f 33ff 	mov.w	r3, #4294967295
 80084f2:	2219      	movs	r2, #25
 80084f4:	4908      	ldr	r1, [pc, #32]	; (8008518 <main+0x58>)
 80084f6:	4809      	ldr	r0, [pc, #36]	; (800851c <main+0x5c>)
 80084f8:	f004 fa74 	bl	800c9e4 <HAL_UART_Transmit>
    uint32_t current_tick = HAL_GetTick();
 80084fc:	f000 fd78 	bl	8008ff0 <HAL_GetTick>
 8008500:	6078      	str	r0, [r7, #4]
    while(HAL_GetTick() <= current_tick + 1000);
 8008502:	bf00      	nop
 8008504:	f000 fd74 	bl	8008ff0 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8008510:	429a      	cmp	r2, r3
 8008512:	d9f7      	bls.n	8008504 <main+0x44>
  {
 8008514:	e7e9      	b.n	80084ea <main+0x2a>
 8008516:	bf00      	nop
 8008518:	20000000 	.word	0x20000000
 800851c:	200001cc 	.word	0x200001cc

08008520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b094      	sub	sp, #80	; 0x50
 8008524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008526:	f107 0320 	add.w	r3, r7, #32
 800852a:	2230      	movs	r2, #48	; 0x30
 800852c:	2100      	movs	r1, #0
 800852e:	4618      	mov	r0, r3
 8008530:	f007 ff0e 	bl	8010350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008534:	f107 030c 	add.w	r3, r7, #12
 8008538:	2200      	movs	r2, #0
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	605a      	str	r2, [r3, #4]
 800853e:	609a      	str	r2, [r3, #8]
 8008540:	60da      	str	r2, [r3, #12]
 8008542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008544:	2300      	movs	r3, #0
 8008546:	60bb      	str	r3, [r7, #8]
 8008548:	4b28      	ldr	r3, [pc, #160]	; (80085ec <SystemClock_Config+0xcc>)
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	4a27      	ldr	r2, [pc, #156]	; (80085ec <SystemClock_Config+0xcc>)
 800854e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008552:	6413      	str	r3, [r2, #64]	; 0x40
 8008554:	4b25      	ldr	r3, [pc, #148]	; (80085ec <SystemClock_Config+0xcc>)
 8008556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800855c:	60bb      	str	r3, [r7, #8]
 800855e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008560:	2300      	movs	r3, #0
 8008562:	607b      	str	r3, [r7, #4]
 8008564:	4b22      	ldr	r3, [pc, #136]	; (80085f0 <SystemClock_Config+0xd0>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a21      	ldr	r2, [pc, #132]	; (80085f0 <SystemClock_Config+0xd0>)
 800856a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800856e:	6013      	str	r3, [r2, #0]
 8008570:	4b1f      	ldr	r3, [pc, #124]	; (80085f0 <SystemClock_Config+0xd0>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008578:	607b      	str	r3, [r7, #4]
 800857a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800857c:	2301      	movs	r3, #1
 800857e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008586:	2302      	movs	r3, #2
 8008588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800858a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800858e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008590:	2308      	movs	r3, #8
 8008592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8008594:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8008598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800859a:	2302      	movs	r3, #2
 800859c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800859e:	2307      	movs	r3, #7
 80085a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80085a2:	f107 0320 	add.w	r3, r7, #32
 80085a6:	4618      	mov	r0, r3
 80085a8:	f003 fb92 	bl	800bcd0 <HAL_RCC_OscConfig>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80085b2:	f000 fa0d 	bl	80089d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085b6:	230f      	movs	r3, #15
 80085b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085ba:	2302      	movs	r3, #2
 80085bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085be:	2300      	movs	r3, #0
 80085c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80085c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80085c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80085c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80085ce:	f107 030c 	add.w	r3, r7, #12
 80085d2:	2105      	movs	r1, #5
 80085d4:	4618      	mov	r0, r3
 80085d6:	f003 fdf3 	bl	800c1c0 <HAL_RCC_ClockConfig>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80085e0:	f000 f9f6 	bl	80089d0 <Error_Handler>
  }
}
 80085e4:	bf00      	nop
 80085e6:	3750      	adds	r7, #80	; 0x50
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	40023800 	.word	0x40023800
 80085f0:	40007000 	.word	0x40007000

080085f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80085f8:	4b12      	ldr	r3, [pc, #72]	; (8008644 <MX_I2C1_Init+0x50>)
 80085fa:	4a13      	ldr	r2, [pc, #76]	; (8008648 <MX_I2C1_Init+0x54>)
 80085fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80085fe:	4b11      	ldr	r3, [pc, #68]	; (8008644 <MX_I2C1_Init+0x50>)
 8008600:	4a12      	ldr	r2, [pc, #72]	; (800864c <MX_I2C1_Init+0x58>)
 8008602:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008604:	4b0f      	ldr	r3, [pc, #60]	; (8008644 <MX_I2C1_Init+0x50>)
 8008606:	2200      	movs	r2, #0
 8008608:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800860a:	4b0e      	ldr	r3, [pc, #56]	; (8008644 <MX_I2C1_Init+0x50>)
 800860c:	2200      	movs	r2, #0
 800860e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008610:	4b0c      	ldr	r3, [pc, #48]	; (8008644 <MX_I2C1_Init+0x50>)
 8008612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008616:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008618:	4b0a      	ldr	r3, [pc, #40]	; (8008644 <MX_I2C1_Init+0x50>)
 800861a:	2200      	movs	r2, #0
 800861c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800861e:	4b09      	ldr	r3, [pc, #36]	; (8008644 <MX_I2C1_Init+0x50>)
 8008620:	2200      	movs	r2, #0
 8008622:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008624:	4b07      	ldr	r3, [pc, #28]	; (8008644 <MX_I2C1_Init+0x50>)
 8008626:	2200      	movs	r2, #0
 8008628:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800862a:	4b06      	ldr	r3, [pc, #24]	; (8008644 <MX_I2C1_Init+0x50>)
 800862c:	2200      	movs	r2, #0
 800862e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008630:	4804      	ldr	r0, [pc, #16]	; (8008644 <MX_I2C1_Init+0x50>)
 8008632:	f002 fd69 	bl	800b108 <HAL_I2C_Init>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800863c:	f000 f9c8 	bl	80089d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008640:	bf00      	nop
 8008642:	bd80      	pop	{r7, pc}
 8008644:	20000120 	.word	0x20000120
 8008648:	40005400 	.word	0x40005400
 800864c:	000186a0 	.word	0x000186a0

08008650 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8008654:	4b13      	ldr	r3, [pc, #76]	; (80086a4 <MX_I2S3_Init+0x54>)
 8008656:	4a14      	ldr	r2, [pc, #80]	; (80086a8 <MX_I2S3_Init+0x58>)
 8008658:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800865a:	4b12      	ldr	r3, [pc, #72]	; (80086a4 <MX_I2S3_Init+0x54>)
 800865c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008660:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8008662:	4b10      	ldr	r3, [pc, #64]	; (80086a4 <MX_I2S3_Init+0x54>)
 8008664:	2200      	movs	r2, #0
 8008666:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8008668:	4b0e      	ldr	r3, [pc, #56]	; (80086a4 <MX_I2S3_Init+0x54>)
 800866a:	2200      	movs	r2, #0
 800866c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800866e:	4b0d      	ldr	r3, [pc, #52]	; (80086a4 <MX_I2S3_Init+0x54>)
 8008670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008674:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8008676:	4b0b      	ldr	r3, [pc, #44]	; (80086a4 <MX_I2S3_Init+0x54>)
 8008678:	4a0c      	ldr	r2, [pc, #48]	; (80086ac <MX_I2S3_Init+0x5c>)
 800867a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800867c:	4b09      	ldr	r3, [pc, #36]	; (80086a4 <MX_I2S3_Init+0x54>)
 800867e:	2200      	movs	r2, #0
 8008680:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8008682:	4b08      	ldr	r3, [pc, #32]	; (80086a4 <MX_I2S3_Init+0x54>)
 8008684:	2200      	movs	r2, #0
 8008686:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8008688:	4b06      	ldr	r3, [pc, #24]	; (80086a4 <MX_I2S3_Init+0x54>)
 800868a:	2200      	movs	r2, #0
 800868c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800868e:	4805      	ldr	r0, [pc, #20]	; (80086a4 <MX_I2S3_Init+0x54>)
 8008690:	f002 fe7e 	bl	800b390 <HAL_I2S_Init>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800869a:	f000 f999 	bl	80089d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800869e:	bf00      	nop
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	20000210 	.word	0x20000210
 80086a8:	40003c00 	.word	0x40003c00
 80086ac:	00017700 	.word	0x00017700

080086b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80086b4:	4b17      	ldr	r3, [pc, #92]	; (8008714 <MX_SPI1_Init+0x64>)
 80086b6:	4a18      	ldr	r2, [pc, #96]	; (8008718 <MX_SPI1_Init+0x68>)
 80086b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80086ba:	4b16      	ldr	r3, [pc, #88]	; (8008714 <MX_SPI1_Init+0x64>)
 80086bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80086c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80086c2:	4b14      	ldr	r3, [pc, #80]	; (8008714 <MX_SPI1_Init+0x64>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80086c8:	4b12      	ldr	r3, [pc, #72]	; (8008714 <MX_SPI1_Init+0x64>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80086ce:	4b11      	ldr	r3, [pc, #68]	; (8008714 <MX_SPI1_Init+0x64>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80086d4:	4b0f      	ldr	r3, [pc, #60]	; (8008714 <MX_SPI1_Init+0x64>)
 80086d6:	2200      	movs	r2, #0
 80086d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80086da:	4b0e      	ldr	r3, [pc, #56]	; (8008714 <MX_SPI1_Init+0x64>)
 80086dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80086e2:	4b0c      	ldr	r3, [pc, #48]	; (8008714 <MX_SPI1_Init+0x64>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80086e8:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <MX_SPI1_Init+0x64>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80086ee:	4b09      	ldr	r3, [pc, #36]	; (8008714 <MX_SPI1_Init+0x64>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086f4:	4b07      	ldr	r3, [pc, #28]	; (8008714 <MX_SPI1_Init+0x64>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80086fa:	4b06      	ldr	r3, [pc, #24]	; (8008714 <MX_SPI1_Init+0x64>)
 80086fc:	220a      	movs	r2, #10
 80086fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008700:	4804      	ldr	r0, [pc, #16]	; (8008714 <MX_SPI1_Init+0x64>)
 8008702:	f004 f899 	bl	800c838 <HAL_SPI_Init>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800870c:	f000 f960 	bl	80089d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008710:	bf00      	nop
 8008712:	bd80      	pop	{r7, pc}
 8008714:	20000174 	.word	0x20000174
 8008718:	40013000 	.word	0x40013000

0800871c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008720:	4b11      	ldr	r3, [pc, #68]	; (8008768 <MX_USART2_UART_Init+0x4c>)
 8008722:	4a12      	ldr	r2, [pc, #72]	; (800876c <MX_USART2_UART_Init+0x50>)
 8008724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008726:	4b10      	ldr	r3, [pc, #64]	; (8008768 <MX_USART2_UART_Init+0x4c>)
 8008728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800872c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800872e:	4b0e      	ldr	r3, [pc, #56]	; (8008768 <MX_USART2_UART_Init+0x4c>)
 8008730:	2200      	movs	r2, #0
 8008732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008734:	4b0c      	ldr	r3, [pc, #48]	; (8008768 <MX_USART2_UART_Init+0x4c>)
 8008736:	2200      	movs	r2, #0
 8008738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800873a:	4b0b      	ldr	r3, [pc, #44]	; (8008768 <MX_USART2_UART_Init+0x4c>)
 800873c:	2200      	movs	r2, #0
 800873e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008740:	4b09      	ldr	r3, [pc, #36]	; (8008768 <MX_USART2_UART_Init+0x4c>)
 8008742:	220c      	movs	r2, #12
 8008744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008746:	4b08      	ldr	r3, [pc, #32]	; (8008768 <MX_USART2_UART_Init+0x4c>)
 8008748:	2200      	movs	r2, #0
 800874a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800874c:	4b06      	ldr	r3, [pc, #24]	; (8008768 <MX_USART2_UART_Init+0x4c>)
 800874e:	2200      	movs	r2, #0
 8008750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008752:	4805      	ldr	r0, [pc, #20]	; (8008768 <MX_USART2_UART_Init+0x4c>)
 8008754:	f004 f8f9 	bl	800c94a <HAL_UART_Init>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800875e:	f000 f937 	bl	80089d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008762:	bf00      	nop
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	200001cc 	.word	0x200001cc
 800876c:	40004400 	.word	0x40004400

08008770 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008774:	4b11      	ldr	r3, [pc, #68]	; (80087bc <MX_USART3_UART_Init+0x4c>)
 8008776:	4a12      	ldr	r2, [pc, #72]	; (80087c0 <MX_USART3_UART_Init+0x50>)
 8008778:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800877a:	4b10      	ldr	r3, [pc, #64]	; (80087bc <MX_USART3_UART_Init+0x4c>)
 800877c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008780:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008782:	4b0e      	ldr	r3, [pc, #56]	; (80087bc <MX_USART3_UART_Init+0x4c>)
 8008784:	2200      	movs	r2, #0
 8008786:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008788:	4b0c      	ldr	r3, [pc, #48]	; (80087bc <MX_USART3_UART_Init+0x4c>)
 800878a:	2200      	movs	r2, #0
 800878c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800878e:	4b0b      	ldr	r3, [pc, #44]	; (80087bc <MX_USART3_UART_Init+0x4c>)
 8008790:	2200      	movs	r2, #0
 8008792:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008794:	4b09      	ldr	r3, [pc, #36]	; (80087bc <MX_USART3_UART_Init+0x4c>)
 8008796:	220c      	movs	r2, #12
 8008798:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800879a:	4b08      	ldr	r3, [pc, #32]	; (80087bc <MX_USART3_UART_Init+0x4c>)
 800879c:	2200      	movs	r2, #0
 800879e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80087a0:	4b06      	ldr	r3, [pc, #24]	; (80087bc <MX_USART3_UART_Init+0x4c>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80087a6:	4805      	ldr	r0, [pc, #20]	; (80087bc <MX_USART3_UART_Init+0x4c>)
 80087a8:	f004 f8cf 	bl	800c94a <HAL_UART_Init>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80087b2:	f000 f90d 	bl	80089d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80087b6:	bf00      	nop
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	200000dc 	.word	0x200000dc
 80087c0:	40004800 	.word	0x40004800

080087c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b08c      	sub	sp, #48	; 0x30
 80087c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087ca:	f107 031c 	add.w	r3, r7, #28
 80087ce:	2200      	movs	r2, #0
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	605a      	str	r2, [r3, #4]
 80087d4:	609a      	str	r2, [r3, #8]
 80087d6:	60da      	str	r2, [r3, #12]
 80087d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80087da:	2300      	movs	r3, #0
 80087dc:	61bb      	str	r3, [r7, #24]
 80087de:	4b76      	ldr	r3, [pc, #472]	; (80089b8 <MX_GPIO_Init+0x1f4>)
 80087e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e2:	4a75      	ldr	r2, [pc, #468]	; (80089b8 <MX_GPIO_Init+0x1f4>)
 80087e4:	f043 0310 	orr.w	r3, r3, #16
 80087e8:	6313      	str	r3, [r2, #48]	; 0x30
 80087ea:	4b73      	ldr	r3, [pc, #460]	; (80089b8 <MX_GPIO_Init+0x1f4>)
 80087ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ee:	f003 0310 	and.w	r3, r3, #16
 80087f2:	61bb      	str	r3, [r7, #24]
 80087f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80087f6:	2300      	movs	r3, #0
 80087f8:	617b      	str	r3, [r7, #20]
 80087fa:	4b6f      	ldr	r3, [pc, #444]	; (80089b8 <MX_GPIO_Init+0x1f4>)
 80087fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fe:	4a6e      	ldr	r2, [pc, #440]	; (80089b8 <MX_GPIO_Init+0x1f4>)
 8008800:	f043 0304 	orr.w	r3, r3, #4
 8008804:	6313      	str	r3, [r2, #48]	; 0x30
 8008806:	4b6c      	ldr	r3, [pc, #432]	; (80089b8 <MX_GPIO_Init+0x1f4>)
 8008808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880a:	f003 0304 	and.w	r3, r3, #4
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008812:	2300      	movs	r3, #0
 8008814:	613b      	str	r3, [r7, #16]
 8008816:	4b68      	ldr	r3, [pc, #416]	; (80089b8 <MX_GPIO_Init+0x1f4>)
 8008818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881a:	4a67      	ldr	r2, [pc, #412]	; (80089b8 <MX_GPIO_Init+0x1f4>)
 800881c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008820:	6313      	str	r3, [r2, #48]	; 0x30
 8008822:	4b65      	ldr	r3, [pc, #404]	; (80089b8 <MX_GPIO_Init+0x1f4>)
 8008824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800882a:	613b      	str	r3, [r7, #16]
 800882c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800882e:	2300      	movs	r3, #0
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	4b61      	ldr	r3, [pc, #388]	; (80089b8 <MX_GPIO_Init+0x1f4>)
 8008834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008836:	4a60      	ldr	r2, [pc, #384]	; (80089b8 <MX_GPIO_Init+0x1f4>)
 8008838:	f043 0301 	orr.w	r3, r3, #1
 800883c:	6313      	str	r3, [r2, #48]	; 0x30
 800883e:	4b5e      	ldr	r3, [pc, #376]	; (80089b8 <MX_GPIO_Init+0x1f4>)
 8008840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800884a:	2300      	movs	r3, #0
 800884c:	60bb      	str	r3, [r7, #8]
 800884e:	4b5a      	ldr	r3, [pc, #360]	; (80089b8 <MX_GPIO_Init+0x1f4>)
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	4a59      	ldr	r2, [pc, #356]	; (80089b8 <MX_GPIO_Init+0x1f4>)
 8008854:	f043 0302 	orr.w	r3, r3, #2
 8008858:	6313      	str	r3, [r2, #48]	; 0x30
 800885a:	4b57      	ldr	r3, [pc, #348]	; (80089b8 <MX_GPIO_Init+0x1f4>)
 800885c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885e:	f003 0302 	and.w	r3, r3, #2
 8008862:	60bb      	str	r3, [r7, #8]
 8008864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008866:	2300      	movs	r3, #0
 8008868:	607b      	str	r3, [r7, #4]
 800886a:	4b53      	ldr	r3, [pc, #332]	; (80089b8 <MX_GPIO_Init+0x1f4>)
 800886c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886e:	4a52      	ldr	r2, [pc, #328]	; (80089b8 <MX_GPIO_Init+0x1f4>)
 8008870:	f043 0308 	orr.w	r3, r3, #8
 8008874:	6313      	str	r3, [r2, #48]	; 0x30
 8008876:	4b50      	ldr	r3, [pc, #320]	; (80089b8 <MX_GPIO_Init+0x1f4>)
 8008878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887a:	f003 0308 	and.w	r3, r3, #8
 800887e:	607b      	str	r3, [r7, #4]
 8008880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8008882:	2200      	movs	r2, #0
 8008884:	2108      	movs	r1, #8
 8008886:	484d      	ldr	r0, [pc, #308]	; (80089bc <MX_GPIO_Init+0x1f8>)
 8008888:	f000 fe90 	bl	80095ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800888c:	2201      	movs	r2, #1
 800888e:	2101      	movs	r1, #1
 8008890:	484b      	ldr	r0, [pc, #300]	; (80089c0 <MX_GPIO_Init+0x1fc>)
 8008892:	f000 fe8b 	bl	80095ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8008896:	2200      	movs	r2, #0
 8008898:	f24f 0110 	movw	r1, #61456	; 0xf010
 800889c:	4849      	ldr	r0, [pc, #292]	; (80089c4 <MX_GPIO_Init+0x200>)
 800889e:	f000 fe85 	bl	80095ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80088a2:	2308      	movs	r3, #8
 80088a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088a6:	2301      	movs	r3, #1
 80088a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088ae:	2300      	movs	r3, #0
 80088b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80088b2:	f107 031c 	add.w	r3, r7, #28
 80088b6:	4619      	mov	r1, r3
 80088b8:	4840      	ldr	r0, [pc, #256]	; (80089bc <MX_GPIO_Init+0x1f8>)
 80088ba:	f000 fcdb 	bl	8009274 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80088be:	2301      	movs	r3, #1
 80088c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088c2:	2301      	movs	r3, #1
 80088c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088ca:	2300      	movs	r3, #0
 80088cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80088ce:	f107 031c 	add.w	r3, r7, #28
 80088d2:	4619      	mov	r1, r3
 80088d4:	483a      	ldr	r0, [pc, #232]	; (80089c0 <MX_GPIO_Init+0x1fc>)
 80088d6:	f000 fccd 	bl	8009274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80088da:	2308      	movs	r3, #8
 80088dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088de:	2302      	movs	r3, #2
 80088e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088e6:	2300      	movs	r3, #0
 80088e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80088ea:	2305      	movs	r3, #5
 80088ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80088ee:	f107 031c 	add.w	r3, r7, #28
 80088f2:	4619      	mov	r1, r3
 80088f4:	4832      	ldr	r0, [pc, #200]	; (80089c0 <MX_GPIO_Init+0x1fc>)
 80088f6:	f000 fcbd 	bl	8009274 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80088fa:	2301      	movs	r3, #1
 80088fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80088fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008904:	2300      	movs	r3, #0
 8008906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008908:	f107 031c 	add.w	r3, r7, #28
 800890c:	4619      	mov	r1, r3
 800890e:	482e      	ldr	r0, [pc, #184]	; (80089c8 <MX_GPIO_Init+0x204>)
 8008910:	f000 fcb0 	bl	8009274 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8008914:	2304      	movs	r3, #4
 8008916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008918:	2300      	movs	r3, #0
 800891a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800891c:	2300      	movs	r3, #0
 800891e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8008920:	f107 031c 	add.w	r3, r7, #28
 8008924:	4619      	mov	r1, r3
 8008926:	4829      	ldr	r0, [pc, #164]	; (80089cc <MX_GPIO_Init+0x208>)
 8008928:	f000 fca4 	bl	8009274 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800892c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008932:	2302      	movs	r3, #2
 8008934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008936:	2300      	movs	r3, #0
 8008938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800893a:	2300      	movs	r3, #0
 800893c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800893e:	2305      	movs	r3, #5
 8008940:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8008942:	f107 031c 	add.w	r3, r7, #28
 8008946:	4619      	mov	r1, r3
 8008948:	4820      	ldr	r0, [pc, #128]	; (80089cc <MX_GPIO_Init+0x208>)
 800894a:	f000 fc93 	bl	8009274 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800894e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8008952:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008954:	2301      	movs	r3, #1
 8008956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008958:	2300      	movs	r3, #0
 800895a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800895c:	2300      	movs	r3, #0
 800895e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008960:	f107 031c 	add.w	r3, r7, #28
 8008964:	4619      	mov	r1, r3
 8008966:	4817      	ldr	r0, [pc, #92]	; (80089c4 <MX_GPIO_Init+0x200>)
 8008968:	f000 fc84 	bl	8009274 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800896c:	2320      	movs	r3, #32
 800896e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008970:	2300      	movs	r3, #0
 8008972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008974:	2300      	movs	r3, #0
 8008976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008978:	f107 031c 	add.w	r3, r7, #28
 800897c:	4619      	mov	r1, r3
 800897e:	4811      	ldr	r0, [pc, #68]	; (80089c4 <MX_GPIO_Init+0x200>)
 8008980:	f000 fc78 	bl	8009274 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8008984:	2302      	movs	r3, #2
 8008986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008988:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800898c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800898e:	2300      	movs	r3, #0
 8008990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8008992:	f107 031c 	add.w	r3, r7, #28
 8008996:	4619      	mov	r1, r3
 8008998:	4808      	ldr	r0, [pc, #32]	; (80089bc <MX_GPIO_Init+0x1f8>)
 800899a:	f000 fc6b 	bl	8009274 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800899e:	2200      	movs	r2, #0
 80089a0:	2100      	movs	r1, #0
 80089a2:	2006      	movs	r0, #6
 80089a4:	f000 fc2f 	bl	8009206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80089a8:	2006      	movs	r0, #6
 80089aa:	f000 fc48 	bl	800923e <HAL_NVIC_EnableIRQ>

}
 80089ae:	bf00      	nop
 80089b0:	3730      	adds	r7, #48	; 0x30
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	40023800 	.word	0x40023800
 80089bc:	40021000 	.word	0x40021000
 80089c0:	40020800 	.word	0x40020800
 80089c4:	40020c00 	.word	0x40020c00
 80089c8:	40020000 	.word	0x40020000
 80089cc:	40020400 	.word	0x40020400

080089d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80089d0:	b480      	push	{r7}
 80089d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80089d4:	b672      	cpsid	i
}
 80089d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80089d8:	e7fe      	b.n	80089d8 <Error_Handler+0x8>
	...

080089dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089e2:	2300      	movs	r3, #0
 80089e4:	607b      	str	r3, [r7, #4]
 80089e6:	4b10      	ldr	r3, [pc, #64]	; (8008a28 <HAL_MspInit+0x4c>)
 80089e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ea:	4a0f      	ldr	r2, [pc, #60]	; (8008a28 <HAL_MspInit+0x4c>)
 80089ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089f0:	6453      	str	r3, [r2, #68]	; 0x44
 80089f2:	4b0d      	ldr	r3, [pc, #52]	; (8008a28 <HAL_MspInit+0x4c>)
 80089f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089fa:	607b      	str	r3, [r7, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80089fe:	2300      	movs	r3, #0
 8008a00:	603b      	str	r3, [r7, #0]
 8008a02:	4b09      	ldr	r3, [pc, #36]	; (8008a28 <HAL_MspInit+0x4c>)
 8008a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a06:	4a08      	ldr	r2, [pc, #32]	; (8008a28 <HAL_MspInit+0x4c>)
 8008a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8008a0e:	4b06      	ldr	r3, [pc, #24]	; (8008a28 <HAL_MspInit+0x4c>)
 8008a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a16:	603b      	str	r3, [r7, #0]
 8008a18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008a1a:	2007      	movs	r0, #7
 8008a1c:	f000 fbe8 	bl	80091f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008a20:	bf00      	nop
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	40023800 	.word	0x40023800

08008a2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b08a      	sub	sp, #40	; 0x28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a34:	f107 0314 	add.w	r3, r7, #20
 8008a38:	2200      	movs	r2, #0
 8008a3a:	601a      	str	r2, [r3, #0]
 8008a3c:	605a      	str	r2, [r3, #4]
 8008a3e:	609a      	str	r2, [r3, #8]
 8008a40:	60da      	str	r2, [r3, #12]
 8008a42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a19      	ldr	r2, [pc, #100]	; (8008ab0 <HAL_I2C_MspInit+0x84>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d12c      	bne.n	8008aa8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a4e:	2300      	movs	r3, #0
 8008a50:	613b      	str	r3, [r7, #16]
 8008a52:	4b18      	ldr	r3, [pc, #96]	; (8008ab4 <HAL_I2C_MspInit+0x88>)
 8008a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a56:	4a17      	ldr	r2, [pc, #92]	; (8008ab4 <HAL_I2C_MspInit+0x88>)
 8008a58:	f043 0302 	orr.w	r3, r3, #2
 8008a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a5e:	4b15      	ldr	r3, [pc, #84]	; (8008ab4 <HAL_I2C_MspInit+0x88>)
 8008a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a62:	f003 0302 	and.w	r3, r3, #2
 8008a66:	613b      	str	r3, [r7, #16]
 8008a68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8008a6a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008a70:	2312      	movs	r3, #18
 8008a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008a74:	2301      	movs	r3, #1
 8008a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008a7c:	2304      	movs	r3, #4
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a80:	f107 0314 	add.w	r3, r7, #20
 8008a84:	4619      	mov	r1, r3
 8008a86:	480c      	ldr	r0, [pc, #48]	; (8008ab8 <HAL_I2C_MspInit+0x8c>)
 8008a88:	f000 fbf4 	bl	8009274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	4b08      	ldr	r3, [pc, #32]	; (8008ab4 <HAL_I2C_MspInit+0x88>)
 8008a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a94:	4a07      	ldr	r2, [pc, #28]	; (8008ab4 <HAL_I2C_MspInit+0x88>)
 8008a96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8008a9c:	4b05      	ldr	r3, [pc, #20]	; (8008ab4 <HAL_I2C_MspInit+0x88>)
 8008a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008aa8:	bf00      	nop
 8008aaa:	3728      	adds	r7, #40	; 0x28
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	40005400 	.word	0x40005400
 8008ab4:	40023800 	.word	0x40023800
 8008ab8:	40020400 	.word	0x40020400

08008abc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b08e      	sub	sp, #56	; 0x38
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ac8:	2200      	movs	r2, #0
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	605a      	str	r2, [r3, #4]
 8008ace:	609a      	str	r2, [r3, #8]
 8008ad0:	60da      	str	r2, [r3, #12]
 8008ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008ad4:	f107 0314 	add.w	r3, r7, #20
 8008ad8:	2200      	movs	r2, #0
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	605a      	str	r2, [r3, #4]
 8008ade:	609a      	str	r2, [r3, #8]
 8008ae0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a31      	ldr	r2, [pc, #196]	; (8008bac <HAL_I2S_MspInit+0xf0>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d15a      	bne.n	8008ba2 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8008aec:	2301      	movs	r3, #1
 8008aee:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8008af0:	23c0      	movs	r3, #192	; 0xc0
 8008af2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8008af4:	2302      	movs	r3, #2
 8008af6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008af8:	f107 0314 	add.w	r3, r7, #20
 8008afc:	4618      	mov	r0, r3
 8008afe:	f003 fd5b 	bl	800c5b8 <HAL_RCCEx_PeriphCLKConfig>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d001      	beq.n	8008b0c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8008b08:	f7ff ff62 	bl	80089d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	613b      	str	r3, [r7, #16]
 8008b10:	4b27      	ldr	r3, [pc, #156]	; (8008bb0 <HAL_I2S_MspInit+0xf4>)
 8008b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b14:	4a26      	ldr	r2, [pc, #152]	; (8008bb0 <HAL_I2S_MspInit+0xf4>)
 8008b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8008b1c:	4b24      	ldr	r3, [pc, #144]	; (8008bb0 <HAL_I2S_MspInit+0xf4>)
 8008b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b24:	613b      	str	r3, [r7, #16]
 8008b26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b28:	2300      	movs	r3, #0
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	4b20      	ldr	r3, [pc, #128]	; (8008bb0 <HAL_I2S_MspInit+0xf4>)
 8008b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b30:	4a1f      	ldr	r2, [pc, #124]	; (8008bb0 <HAL_I2S_MspInit+0xf4>)
 8008b32:	f043 0301 	orr.w	r3, r3, #1
 8008b36:	6313      	str	r3, [r2, #48]	; 0x30
 8008b38:	4b1d      	ldr	r3, [pc, #116]	; (8008bb0 <HAL_I2S_MspInit+0xf4>)
 8008b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	60fb      	str	r3, [r7, #12]
 8008b42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008b44:	2300      	movs	r3, #0
 8008b46:	60bb      	str	r3, [r7, #8]
 8008b48:	4b19      	ldr	r3, [pc, #100]	; (8008bb0 <HAL_I2S_MspInit+0xf4>)
 8008b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4c:	4a18      	ldr	r2, [pc, #96]	; (8008bb0 <HAL_I2S_MspInit+0xf4>)
 8008b4e:	f043 0304 	orr.w	r3, r3, #4
 8008b52:	6313      	str	r3, [r2, #48]	; 0x30
 8008b54:	4b16      	ldr	r3, [pc, #88]	; (8008bb0 <HAL_I2S_MspInit+0xf4>)
 8008b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b58:	f003 0304 	and.w	r3, r3, #4
 8008b5c:	60bb      	str	r3, [r7, #8]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8008b60:	2310      	movs	r3, #16
 8008b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b64:	2302      	movs	r3, #2
 8008b66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008b70:	2306      	movs	r3, #6
 8008b72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8008b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b78:	4619      	mov	r1, r3
 8008b7a:	480e      	ldr	r0, [pc, #56]	; (8008bb4 <HAL_I2S_MspInit+0xf8>)
 8008b7c:	f000 fb7a 	bl	8009274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8008b80:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8008b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b86:	2302      	movs	r3, #2
 8008b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008b92:	2306      	movs	r3, #6
 8008b94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4806      	ldr	r0, [pc, #24]	; (8008bb8 <HAL_I2S_MspInit+0xfc>)
 8008b9e:	f000 fb69 	bl	8009274 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8008ba2:	bf00      	nop
 8008ba4:	3738      	adds	r7, #56	; 0x38
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	40003c00 	.word	0x40003c00
 8008bb0:	40023800 	.word	0x40023800
 8008bb4:	40020000 	.word	0x40020000
 8008bb8:	40020800 	.word	0x40020800

08008bbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08a      	sub	sp, #40	; 0x28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bc4:	f107 0314 	add.w	r3, r7, #20
 8008bc8:	2200      	movs	r2, #0
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	605a      	str	r2, [r3, #4]
 8008bce:	609a      	str	r2, [r3, #8]
 8008bd0:	60da      	str	r2, [r3, #12]
 8008bd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a19      	ldr	r2, [pc, #100]	; (8008c40 <HAL_SPI_MspInit+0x84>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d12b      	bne.n	8008c36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008bde:	2300      	movs	r3, #0
 8008be0:	613b      	str	r3, [r7, #16]
 8008be2:	4b18      	ldr	r3, [pc, #96]	; (8008c44 <HAL_SPI_MspInit+0x88>)
 8008be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be6:	4a17      	ldr	r2, [pc, #92]	; (8008c44 <HAL_SPI_MspInit+0x88>)
 8008be8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bec:	6453      	str	r3, [r2, #68]	; 0x44
 8008bee:	4b15      	ldr	r3, [pc, #84]	; (8008c44 <HAL_SPI_MspInit+0x88>)
 8008bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bf6:	613b      	str	r3, [r7, #16]
 8008bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60fb      	str	r3, [r7, #12]
 8008bfe:	4b11      	ldr	r3, [pc, #68]	; (8008c44 <HAL_SPI_MspInit+0x88>)
 8008c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c02:	4a10      	ldr	r2, [pc, #64]	; (8008c44 <HAL_SPI_MspInit+0x88>)
 8008c04:	f043 0301 	orr.w	r3, r3, #1
 8008c08:	6313      	str	r3, [r2, #48]	; 0x30
 8008c0a:	4b0e      	ldr	r3, [pc, #56]	; (8008c44 <HAL_SPI_MspInit+0x88>)
 8008c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	60fb      	str	r3, [r7, #12]
 8008c14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8008c16:	23e0      	movs	r3, #224	; 0xe0
 8008c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c22:	2300      	movs	r3, #0
 8008c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008c26:	2305      	movs	r3, #5
 8008c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c2a:	f107 0314 	add.w	r3, r7, #20
 8008c2e:	4619      	mov	r1, r3
 8008c30:	4805      	ldr	r0, [pc, #20]	; (8008c48 <HAL_SPI_MspInit+0x8c>)
 8008c32:	f000 fb1f 	bl	8009274 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008c36:	bf00      	nop
 8008c38:	3728      	adds	r7, #40	; 0x28
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	40013000 	.word	0x40013000
 8008c44:	40023800 	.word	0x40023800
 8008c48:	40020000 	.word	0x40020000

08008c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b08c      	sub	sp, #48	; 0x30
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c54:	f107 031c 	add.w	r3, r7, #28
 8008c58:	2200      	movs	r2, #0
 8008c5a:	601a      	str	r2, [r3, #0]
 8008c5c:	605a      	str	r2, [r3, #4]
 8008c5e:	609a      	str	r2, [r3, #8]
 8008c60:	60da      	str	r2, [r3, #12]
 8008c62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a42      	ldr	r2, [pc, #264]	; (8008d74 <HAL_UART_MspInit+0x128>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d12c      	bne.n	8008cc8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008c6e:	2300      	movs	r3, #0
 8008c70:	61bb      	str	r3, [r7, #24]
 8008c72:	4b41      	ldr	r3, [pc, #260]	; (8008d78 <HAL_UART_MspInit+0x12c>)
 8008c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c76:	4a40      	ldr	r2, [pc, #256]	; (8008d78 <HAL_UART_MspInit+0x12c>)
 8008c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8008c7e:	4b3e      	ldr	r3, [pc, #248]	; (8008d78 <HAL_UART_MspInit+0x12c>)
 8008c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c86:	61bb      	str	r3, [r7, #24]
 8008c88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	617b      	str	r3, [r7, #20]
 8008c8e:	4b3a      	ldr	r3, [pc, #232]	; (8008d78 <HAL_UART_MspInit+0x12c>)
 8008c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c92:	4a39      	ldr	r2, [pc, #228]	; (8008d78 <HAL_UART_MspInit+0x12c>)
 8008c94:	f043 0301 	orr.w	r3, r3, #1
 8008c98:	6313      	str	r3, [r2, #48]	; 0x30
 8008c9a:	4b37      	ldr	r3, [pc, #220]	; (8008d78 <HAL_UART_MspInit+0x12c>)
 8008c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	617b      	str	r3, [r7, #20]
 8008ca4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008ca6:	230c      	movs	r3, #12
 8008ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008caa:	2302      	movs	r3, #2
 8008cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008cb6:	2307      	movs	r3, #7
 8008cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cba:	f107 031c 	add.w	r3, r7, #28
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	482e      	ldr	r0, [pc, #184]	; (8008d7c <HAL_UART_MspInit+0x130>)
 8008cc2:	f000 fad7 	bl	8009274 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008cc6:	e050      	b.n	8008d6a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a2c      	ldr	r2, [pc, #176]	; (8008d80 <HAL_UART_MspInit+0x134>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d14b      	bne.n	8008d6a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	613b      	str	r3, [r7, #16]
 8008cd6:	4b28      	ldr	r3, [pc, #160]	; (8008d78 <HAL_UART_MspInit+0x12c>)
 8008cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cda:	4a27      	ldr	r2, [pc, #156]	; (8008d78 <HAL_UART_MspInit+0x12c>)
 8008cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8008ce2:	4b25      	ldr	r3, [pc, #148]	; (8008d78 <HAL_UART_MspInit+0x12c>)
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cea:	613b      	str	r3, [r7, #16]
 8008cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008cee:	2300      	movs	r3, #0
 8008cf0:	60fb      	str	r3, [r7, #12]
 8008cf2:	4b21      	ldr	r3, [pc, #132]	; (8008d78 <HAL_UART_MspInit+0x12c>)
 8008cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf6:	4a20      	ldr	r2, [pc, #128]	; (8008d78 <HAL_UART_MspInit+0x12c>)
 8008cf8:	f043 0302 	orr.w	r3, r3, #2
 8008cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8008cfe:	4b1e      	ldr	r3, [pc, #120]	; (8008d78 <HAL_UART_MspInit+0x12c>)
 8008d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d02:	f003 0302 	and.w	r3, r3, #2
 8008d06:	60fb      	str	r3, [r7, #12]
 8008d08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	60bb      	str	r3, [r7, #8]
 8008d0e:	4b1a      	ldr	r3, [pc, #104]	; (8008d78 <HAL_UART_MspInit+0x12c>)
 8008d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d12:	4a19      	ldr	r2, [pc, #100]	; (8008d78 <HAL_UART_MspInit+0x12c>)
 8008d14:	f043 0308 	orr.w	r3, r3, #8
 8008d18:	6313      	str	r3, [r2, #48]	; 0x30
 8008d1a:	4b17      	ldr	r3, [pc, #92]	; (8008d78 <HAL_UART_MspInit+0x12c>)
 8008d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1e:	f003 0308 	and.w	r3, r3, #8
 8008d22:	60bb      	str	r3, [r7, #8]
 8008d24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008d26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d30:	2300      	movs	r3, #0
 8008d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d34:	2303      	movs	r3, #3
 8008d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008d38:	2307      	movs	r3, #7
 8008d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d3c:	f107 031c 	add.w	r3, r7, #28
 8008d40:	4619      	mov	r1, r3
 8008d42:	4810      	ldr	r0, [pc, #64]	; (8008d84 <HAL_UART_MspInit+0x138>)
 8008d44:	f000 fa96 	bl	8009274 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d4e:	2302      	movs	r3, #2
 8008d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d52:	2300      	movs	r3, #0
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d56:	2303      	movs	r3, #3
 8008d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008d5a:	2307      	movs	r3, #7
 8008d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008d5e:	f107 031c 	add.w	r3, r7, #28
 8008d62:	4619      	mov	r1, r3
 8008d64:	4808      	ldr	r0, [pc, #32]	; (8008d88 <HAL_UART_MspInit+0x13c>)
 8008d66:	f000 fa85 	bl	8009274 <HAL_GPIO_Init>
}
 8008d6a:	bf00      	nop
 8008d6c:	3730      	adds	r7, #48	; 0x30
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	40004400 	.word	0x40004400
 8008d78:	40023800 	.word	0x40023800
 8008d7c:	40020000 	.word	0x40020000
 8008d80:	40004800 	.word	0x40004800
 8008d84:	40020400 	.word	0x40020400
 8008d88:	40020c00 	.word	0x40020c00

08008d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008d90:	e7fe      	b.n	8008d90 <NMI_Handler+0x4>

08008d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008d92:	b480      	push	{r7}
 8008d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d96:	e7fe      	b.n	8008d96 <HardFault_Handler+0x4>

08008d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008d9c:	e7fe      	b.n	8008d9c <MemManage_Handler+0x4>

08008d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008da2:	e7fe      	b.n	8008da2 <BusFault_Handler+0x4>

08008da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008da4:	b480      	push	{r7}
 8008da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008da8:	e7fe      	b.n	8008da8 <UsageFault_Handler+0x4>

08008daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008daa:	b480      	push	{r7}
 8008dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008dae:	bf00      	nop
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008db8:	b480      	push	{r7}
 8008dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008dbc:	bf00      	nop
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008dca:	bf00      	nop
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008dd8:	f000 f8f6 	bl	8008fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ddc:	bf00      	nop
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <EXTI0_IRQHandler>:
  * @brief This function handles EXTI line0 interrupt.
  */

uint8_t flag = 0;
void EXTI0_IRQHandler(void)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, !flag);
 8008de4:	4b0d      	ldr	r3, [pc, #52]	; (8008e1c <EXTI0_IRQHandler+0x3c>)
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	bf0c      	ite	eq
 8008dec:	2301      	moveq	r3, #1
 8008dee:	2300      	movne	r3, #0
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	461a      	mov	r2, r3
 8008df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008df8:	4809      	ldr	r0, [pc, #36]	; (8008e20 <EXTI0_IRQHandler+0x40>)
 8008dfa:	f000 fbd7 	bl	80095ac <HAL_GPIO_WritePin>
  flag = !flag;
 8008dfe:	4b07      	ldr	r3, [pc, #28]	; (8008e1c <EXTI0_IRQHandler+0x3c>)
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	bf0c      	ite	eq
 8008e06:	2301      	moveq	r3, #1
 8008e08:	2300      	movne	r3, #0
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	4b03      	ldr	r3, [pc, #12]	; (8008e1c <EXTI0_IRQHandler+0x3c>)
 8008e10:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008e12:	2001      	movs	r0, #1
 8008e14:	f000 fbe4 	bl	80095e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008e18:	bf00      	nop
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	200000c8 	.word	0x200000c8
 8008e20:	40020c00 	.word	0x40020c00

08008e24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8008e28:	4802      	ldr	r0, [pc, #8]	; (8008e34 <OTG_FS_IRQHandler+0x10>)
 8008e2a:	f000 fe67 	bl	8009afc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008e2e:	bf00      	nop
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	20000634 	.word	0x20000634

08008e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b086      	sub	sp, #24
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008e40:	4a14      	ldr	r2, [pc, #80]	; (8008e94 <_sbrk+0x5c>)
 8008e42:	4b15      	ldr	r3, [pc, #84]	; (8008e98 <_sbrk+0x60>)
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008e4c:	4b13      	ldr	r3, [pc, #76]	; (8008e9c <_sbrk+0x64>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d102      	bne.n	8008e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008e54:	4b11      	ldr	r3, [pc, #68]	; (8008e9c <_sbrk+0x64>)
 8008e56:	4a12      	ldr	r2, [pc, #72]	; (8008ea0 <_sbrk+0x68>)
 8008e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008e5a:	4b10      	ldr	r3, [pc, #64]	; (8008e9c <_sbrk+0x64>)
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4413      	add	r3, r2
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d207      	bcs.n	8008e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008e68:	f007 fa38 	bl	80102dc <__errno>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	220c      	movs	r2, #12
 8008e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008e72:	f04f 33ff 	mov.w	r3, #4294967295
 8008e76:	e009      	b.n	8008e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008e78:	4b08      	ldr	r3, [pc, #32]	; (8008e9c <_sbrk+0x64>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008e7e:	4b07      	ldr	r3, [pc, #28]	; (8008e9c <_sbrk+0x64>)
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4413      	add	r3, r2
 8008e86:	4a05      	ldr	r2, [pc, #20]	; (8008e9c <_sbrk+0x64>)
 8008e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	20020000 	.word	0x20020000
 8008e98:	00000400 	.word	0x00000400
 8008e9c:	200000cc 	.word	0x200000cc
 8008ea0:	20000948 	.word	0x20000948

08008ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008ea8:	4b07      	ldr	r3, [pc, #28]	; (8008ec8 <SystemInit+0x24>)
 8008eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eae:	4a06      	ldr	r2, [pc, #24]	; (8008ec8 <SystemInit+0x24>)
 8008eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8008eb8:	4b03      	ldr	r3, [pc, #12]	; (8008ec8 <SystemInit+0x24>)
 8008eba:	4a04      	ldr	r2, [pc, #16]	; (8008ecc <SystemInit+0x28>)
 8008ebc:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008ebe:	bf00      	nop
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr
 8008ec8:	e000ed00 	.word	0xe000ed00
 8008ecc:	08008000 	.word	0x08008000

08008ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008f08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008ed4:	480d      	ldr	r0, [pc, #52]	; (8008f0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008ed6:	490e      	ldr	r1, [pc, #56]	; (8008f10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008ed8:	4a0e      	ldr	r2, [pc, #56]	; (8008f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008edc:	e002      	b.n	8008ee4 <LoopCopyDataInit>

08008ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008ee2:	3304      	adds	r3, #4

08008ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008ee8:	d3f9      	bcc.n	8008ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008eea:	4a0b      	ldr	r2, [pc, #44]	; (8008f18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008eec:	4c0b      	ldr	r4, [pc, #44]	; (8008f1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8008eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008ef0:	e001      	b.n	8008ef6 <LoopFillZerobss>

08008ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ef4:	3204      	adds	r2, #4

08008ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ef8:	d3fb      	bcc.n	8008ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008efa:	f7ff ffd3 	bl	8008ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008efe:	f007 f9f3 	bl	80102e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008f02:	f7ff fadd 	bl	80084c0 <main>
  bx  lr    
 8008f06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008f08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008f10:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8008f14:	08010534 	.word	0x08010534
  ldr r2, =_sbss
 8008f18:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8008f1c:	20000948 	.word	0x20000948

08008f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008f20:	e7fe      	b.n	8008f20 <ADC_IRQHandler>
	...

08008f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008f28:	4b0e      	ldr	r3, [pc, #56]	; (8008f64 <HAL_Init+0x40>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a0d      	ldr	r2, [pc, #52]	; (8008f64 <HAL_Init+0x40>)
 8008f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008f34:	4b0b      	ldr	r3, [pc, #44]	; (8008f64 <HAL_Init+0x40>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a0a      	ldr	r2, [pc, #40]	; (8008f64 <HAL_Init+0x40>)
 8008f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008f40:	4b08      	ldr	r3, [pc, #32]	; (8008f64 <HAL_Init+0x40>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a07      	ldr	r2, [pc, #28]	; (8008f64 <HAL_Init+0x40>)
 8008f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008f4c:	2003      	movs	r0, #3
 8008f4e:	f000 f94f 	bl	80091f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008f52:	2000      	movs	r0, #0
 8008f54:	f000 f808 	bl	8008f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008f58:	f7ff fd40 	bl	80089dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	40023c00 	.word	0x40023c00

08008f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008f70:	4b12      	ldr	r3, [pc, #72]	; (8008fbc <HAL_InitTick+0x54>)
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	4b12      	ldr	r3, [pc, #72]	; (8008fc0 <HAL_InitTick+0x58>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 f967 	bl	800925a <HAL_SYSTICK_Config>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e00e      	b.n	8008fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b0f      	cmp	r3, #15
 8008f9a:	d80a      	bhi.n	8008fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	6879      	ldr	r1, [r7, #4]
 8008fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa4:	f000 f92f 	bl	8009206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008fa8:	4a06      	ldr	r2, [pc, #24]	; (8008fc4 <HAL_InitTick+0x5c>)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	e000      	b.n	8008fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	2000001c 	.word	0x2000001c
 8008fc0:	20000024 	.word	0x20000024
 8008fc4:	20000020 	.word	0x20000020

08008fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008fcc:	4b06      	ldr	r3, [pc, #24]	; (8008fe8 <HAL_IncTick+0x20>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	4b06      	ldr	r3, [pc, #24]	; (8008fec <HAL_IncTick+0x24>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	4a04      	ldr	r2, [pc, #16]	; (8008fec <HAL_IncTick+0x24>)
 8008fda:	6013      	str	r3, [r2, #0]
}
 8008fdc:	bf00      	nop
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	20000024 	.word	0x20000024
 8008fec:	20000258 	.word	0x20000258

08008ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8008ff4:	4b03      	ldr	r3, [pc, #12]	; (8009004 <HAL_GetTick+0x14>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	20000258 	.word	0x20000258

08009008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009010:	f7ff ffee 	bl	8008ff0 <HAL_GetTick>
 8009014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009020:	d005      	beq.n	800902e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009022:	4b0a      	ldr	r3, [pc, #40]	; (800904c <HAL_Delay+0x44>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	461a      	mov	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	4413      	add	r3, r2
 800902c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800902e:	bf00      	nop
 8009030:	f7ff ffde 	bl	8008ff0 <HAL_GetTick>
 8009034:	4602      	mov	r2, r0
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	429a      	cmp	r2, r3
 800903e:	d8f7      	bhi.n	8009030 <HAL_Delay+0x28>
  {
  }
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	20000024 	.word	0x20000024

08009050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f003 0307 	and.w	r3, r3, #7
 800905e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009060:	4b0c      	ldr	r3, [pc, #48]	; (8009094 <__NVIC_SetPriorityGrouping+0x44>)
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800906c:	4013      	ands	r3, r2
 800906e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800907c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009082:	4a04      	ldr	r2, [pc, #16]	; (8009094 <__NVIC_SetPriorityGrouping+0x44>)
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	60d3      	str	r3, [r2, #12]
}
 8009088:	bf00      	nop
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	e000ed00 	.word	0xe000ed00

08009098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009098:	b480      	push	{r7}
 800909a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800909c:	4b04      	ldr	r3, [pc, #16]	; (80090b0 <__NVIC_GetPriorityGrouping+0x18>)
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	0a1b      	lsrs	r3, r3, #8
 80090a2:	f003 0307 	and.w	r3, r3, #7
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	e000ed00 	.word	0xe000ed00

080090b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	4603      	mov	r3, r0
 80090bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	db0b      	blt.n	80090de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	f003 021f 	and.w	r2, r3, #31
 80090cc:	4907      	ldr	r1, [pc, #28]	; (80090ec <__NVIC_EnableIRQ+0x38>)
 80090ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090d2:	095b      	lsrs	r3, r3, #5
 80090d4:	2001      	movs	r0, #1
 80090d6:	fa00 f202 	lsl.w	r2, r0, r2
 80090da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80090de:	bf00      	nop
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	e000e100 	.word	0xe000e100

080090f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	6039      	str	r1, [r7, #0]
 80090fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009100:	2b00      	cmp	r3, #0
 8009102:	db0a      	blt.n	800911a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	b2da      	uxtb	r2, r3
 8009108:	490c      	ldr	r1, [pc, #48]	; (800913c <__NVIC_SetPriority+0x4c>)
 800910a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800910e:	0112      	lsls	r2, r2, #4
 8009110:	b2d2      	uxtb	r2, r2
 8009112:	440b      	add	r3, r1
 8009114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009118:	e00a      	b.n	8009130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	b2da      	uxtb	r2, r3
 800911e:	4908      	ldr	r1, [pc, #32]	; (8009140 <__NVIC_SetPriority+0x50>)
 8009120:	79fb      	ldrb	r3, [r7, #7]
 8009122:	f003 030f 	and.w	r3, r3, #15
 8009126:	3b04      	subs	r3, #4
 8009128:	0112      	lsls	r2, r2, #4
 800912a:	b2d2      	uxtb	r2, r2
 800912c:	440b      	add	r3, r1
 800912e:	761a      	strb	r2, [r3, #24]
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	e000e100 	.word	0xe000e100
 8009140:	e000ed00 	.word	0xe000ed00

08009144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009144:	b480      	push	{r7}
 8009146:	b089      	sub	sp, #36	; 0x24
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f003 0307 	and.w	r3, r3, #7
 8009156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	f1c3 0307 	rsb	r3, r3, #7
 800915e:	2b04      	cmp	r3, #4
 8009160:	bf28      	it	cs
 8009162:	2304      	movcs	r3, #4
 8009164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	3304      	adds	r3, #4
 800916a:	2b06      	cmp	r3, #6
 800916c:	d902      	bls.n	8009174 <NVIC_EncodePriority+0x30>
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	3b03      	subs	r3, #3
 8009172:	e000      	b.n	8009176 <NVIC_EncodePriority+0x32>
 8009174:	2300      	movs	r3, #0
 8009176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009178:	f04f 32ff 	mov.w	r2, #4294967295
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	fa02 f303 	lsl.w	r3, r2, r3
 8009182:	43da      	mvns	r2, r3
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	401a      	ands	r2, r3
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800918c:	f04f 31ff 	mov.w	r1, #4294967295
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	fa01 f303 	lsl.w	r3, r1, r3
 8009196:	43d9      	mvns	r1, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800919c:	4313      	orrs	r3, r2
         );
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3724      	adds	r7, #36	; 0x24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
	...

080091ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091bc:	d301      	bcc.n	80091c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80091be:	2301      	movs	r3, #1
 80091c0:	e00f      	b.n	80091e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80091c2:	4a0a      	ldr	r2, [pc, #40]	; (80091ec <SysTick_Config+0x40>)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	3b01      	subs	r3, #1
 80091c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80091ca:	210f      	movs	r1, #15
 80091cc:	f04f 30ff 	mov.w	r0, #4294967295
 80091d0:	f7ff ff8e 	bl	80090f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80091d4:	4b05      	ldr	r3, [pc, #20]	; (80091ec <SysTick_Config+0x40>)
 80091d6:	2200      	movs	r2, #0
 80091d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80091da:	4b04      	ldr	r3, [pc, #16]	; (80091ec <SysTick_Config+0x40>)
 80091dc:	2207      	movs	r2, #7
 80091de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	e000e010 	.word	0xe000e010

080091f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7ff ff29 	bl	8009050 <__NVIC_SetPriorityGrouping>
}
 80091fe:	bf00      	nop
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009206:	b580      	push	{r7, lr}
 8009208:	b086      	sub	sp, #24
 800920a:	af00      	add	r7, sp, #0
 800920c:	4603      	mov	r3, r0
 800920e:	60b9      	str	r1, [r7, #8]
 8009210:	607a      	str	r2, [r7, #4]
 8009212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009214:	2300      	movs	r3, #0
 8009216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009218:	f7ff ff3e 	bl	8009098 <__NVIC_GetPriorityGrouping>
 800921c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	68b9      	ldr	r1, [r7, #8]
 8009222:	6978      	ldr	r0, [r7, #20]
 8009224:	f7ff ff8e 	bl	8009144 <NVIC_EncodePriority>
 8009228:	4602      	mov	r2, r0
 800922a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800922e:	4611      	mov	r1, r2
 8009230:	4618      	mov	r0, r3
 8009232:	f7ff ff5d 	bl	80090f0 <__NVIC_SetPriority>
}
 8009236:	bf00      	nop
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	af00      	add	r7, sp, #0
 8009244:	4603      	mov	r3, r0
 8009246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800924c:	4618      	mov	r0, r3
 800924e:	f7ff ff31 	bl	80090b4 <__NVIC_EnableIRQ>
}
 8009252:	bf00      	nop
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b082      	sub	sp, #8
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7ff ffa2 	bl	80091ac <SysTick_Config>
 8009268:	4603      	mov	r3, r0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
	...

08009274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009274:	b480      	push	{r7}
 8009276:	b089      	sub	sp, #36	; 0x24
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800927e:	2300      	movs	r3, #0
 8009280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009282:	2300      	movs	r3, #0
 8009284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009286:	2300      	movs	r3, #0
 8009288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800928a:	2300      	movs	r3, #0
 800928c:	61fb      	str	r3, [r7, #28]
 800928e:	e16b      	b.n	8009568 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009290:	2201      	movs	r2, #1
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	fa02 f303 	lsl.w	r3, r2, r3
 8009298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	4013      	ands	r3, r2
 80092a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	f040 815a 	bne.w	8009562 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	f003 0303 	and.w	r3, r3, #3
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d005      	beq.n	80092c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d130      	bne.n	8009328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	005b      	lsls	r3, r3, #1
 80092d0:	2203      	movs	r2, #3
 80092d2:	fa02 f303 	lsl.w	r3, r2, r3
 80092d6:	43db      	mvns	r3, r3
 80092d8:	69ba      	ldr	r2, [r7, #24]
 80092da:	4013      	ands	r3, r2
 80092dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	68da      	ldr	r2, [r3, #12]
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	005b      	lsls	r3, r3, #1
 80092e6:	fa02 f303 	lsl.w	r3, r2, r3
 80092ea:	69ba      	ldr	r2, [r7, #24]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	69ba      	ldr	r2, [r7, #24]
 80092f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80092fc:	2201      	movs	r2, #1
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	fa02 f303 	lsl.w	r3, r2, r3
 8009304:	43db      	mvns	r3, r3
 8009306:	69ba      	ldr	r2, [r7, #24]
 8009308:	4013      	ands	r3, r2
 800930a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	091b      	lsrs	r3, r3, #4
 8009312:	f003 0201 	and.w	r2, r3, #1
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	fa02 f303 	lsl.w	r3, r2, r3
 800931c:	69ba      	ldr	r2, [r7, #24]
 800931e:	4313      	orrs	r3, r2
 8009320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	69ba      	ldr	r2, [r7, #24]
 8009326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	f003 0303 	and.w	r3, r3, #3
 8009330:	2b03      	cmp	r3, #3
 8009332:	d017      	beq.n	8009364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	2203      	movs	r2, #3
 8009340:	fa02 f303 	lsl.w	r3, r2, r3
 8009344:	43db      	mvns	r3, r3
 8009346:	69ba      	ldr	r2, [r7, #24]
 8009348:	4013      	ands	r3, r2
 800934a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	689a      	ldr	r2, [r3, #8]
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	fa02 f303 	lsl.w	r3, r2, r3
 8009358:	69ba      	ldr	r2, [r7, #24]
 800935a:	4313      	orrs	r3, r2
 800935c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	f003 0303 	and.w	r3, r3, #3
 800936c:	2b02      	cmp	r3, #2
 800936e:	d123      	bne.n	80093b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	08da      	lsrs	r2, r3, #3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	3208      	adds	r2, #8
 8009378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800937c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	f003 0307 	and.w	r3, r3, #7
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	220f      	movs	r2, #15
 8009388:	fa02 f303 	lsl.w	r3, r2, r3
 800938c:	43db      	mvns	r3, r3
 800938e:	69ba      	ldr	r2, [r7, #24]
 8009390:	4013      	ands	r3, r2
 8009392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	691a      	ldr	r2, [r3, #16]
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	f003 0307 	and.w	r3, r3, #7
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	fa02 f303 	lsl.w	r3, r2, r3
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	08da      	lsrs	r2, r3, #3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	3208      	adds	r2, #8
 80093b2:	69b9      	ldr	r1, [r7, #24]
 80093b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	005b      	lsls	r3, r3, #1
 80093c2:	2203      	movs	r2, #3
 80093c4:	fa02 f303 	lsl.w	r3, r2, r3
 80093c8:	43db      	mvns	r3, r3
 80093ca:	69ba      	ldr	r2, [r7, #24]
 80093cc:	4013      	ands	r3, r2
 80093ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	f003 0203 	and.w	r2, r3, #3
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	fa02 f303 	lsl.w	r3, r2, r3
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 80b4 	beq.w	8009562 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093fa:	2300      	movs	r3, #0
 80093fc:	60fb      	str	r3, [r7, #12]
 80093fe:	4b60      	ldr	r3, [pc, #384]	; (8009580 <HAL_GPIO_Init+0x30c>)
 8009400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009402:	4a5f      	ldr	r2, [pc, #380]	; (8009580 <HAL_GPIO_Init+0x30c>)
 8009404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009408:	6453      	str	r3, [r2, #68]	; 0x44
 800940a:	4b5d      	ldr	r3, [pc, #372]	; (8009580 <HAL_GPIO_Init+0x30c>)
 800940c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800940e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009412:	60fb      	str	r3, [r7, #12]
 8009414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009416:	4a5b      	ldr	r2, [pc, #364]	; (8009584 <HAL_GPIO_Init+0x310>)
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	089b      	lsrs	r3, r3, #2
 800941c:	3302      	adds	r3, #2
 800941e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	f003 0303 	and.w	r3, r3, #3
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	220f      	movs	r2, #15
 800942e:	fa02 f303 	lsl.w	r3, r2, r3
 8009432:	43db      	mvns	r3, r3
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	4013      	ands	r3, r2
 8009438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a52      	ldr	r2, [pc, #328]	; (8009588 <HAL_GPIO_Init+0x314>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d02b      	beq.n	800949a <HAL_GPIO_Init+0x226>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a51      	ldr	r2, [pc, #324]	; (800958c <HAL_GPIO_Init+0x318>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d025      	beq.n	8009496 <HAL_GPIO_Init+0x222>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a50      	ldr	r2, [pc, #320]	; (8009590 <HAL_GPIO_Init+0x31c>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d01f      	beq.n	8009492 <HAL_GPIO_Init+0x21e>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a4f      	ldr	r2, [pc, #316]	; (8009594 <HAL_GPIO_Init+0x320>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d019      	beq.n	800948e <HAL_GPIO_Init+0x21a>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a4e      	ldr	r2, [pc, #312]	; (8009598 <HAL_GPIO_Init+0x324>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d013      	beq.n	800948a <HAL_GPIO_Init+0x216>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a4d      	ldr	r2, [pc, #308]	; (800959c <HAL_GPIO_Init+0x328>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d00d      	beq.n	8009486 <HAL_GPIO_Init+0x212>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a4c      	ldr	r2, [pc, #304]	; (80095a0 <HAL_GPIO_Init+0x32c>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d007      	beq.n	8009482 <HAL_GPIO_Init+0x20e>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a4b      	ldr	r2, [pc, #300]	; (80095a4 <HAL_GPIO_Init+0x330>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d101      	bne.n	800947e <HAL_GPIO_Init+0x20a>
 800947a:	2307      	movs	r3, #7
 800947c:	e00e      	b.n	800949c <HAL_GPIO_Init+0x228>
 800947e:	2308      	movs	r3, #8
 8009480:	e00c      	b.n	800949c <HAL_GPIO_Init+0x228>
 8009482:	2306      	movs	r3, #6
 8009484:	e00a      	b.n	800949c <HAL_GPIO_Init+0x228>
 8009486:	2305      	movs	r3, #5
 8009488:	e008      	b.n	800949c <HAL_GPIO_Init+0x228>
 800948a:	2304      	movs	r3, #4
 800948c:	e006      	b.n	800949c <HAL_GPIO_Init+0x228>
 800948e:	2303      	movs	r3, #3
 8009490:	e004      	b.n	800949c <HAL_GPIO_Init+0x228>
 8009492:	2302      	movs	r3, #2
 8009494:	e002      	b.n	800949c <HAL_GPIO_Init+0x228>
 8009496:	2301      	movs	r3, #1
 8009498:	e000      	b.n	800949c <HAL_GPIO_Init+0x228>
 800949a:	2300      	movs	r3, #0
 800949c:	69fa      	ldr	r2, [r7, #28]
 800949e:	f002 0203 	and.w	r2, r2, #3
 80094a2:	0092      	lsls	r2, r2, #2
 80094a4:	4093      	lsls	r3, r2
 80094a6:	69ba      	ldr	r2, [r7, #24]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80094ac:	4935      	ldr	r1, [pc, #212]	; (8009584 <HAL_GPIO_Init+0x310>)
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	089b      	lsrs	r3, r3, #2
 80094b2:	3302      	adds	r3, #2
 80094b4:	69ba      	ldr	r2, [r7, #24]
 80094b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80094ba:	4b3b      	ldr	r3, [pc, #236]	; (80095a8 <HAL_GPIO_Init+0x334>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	43db      	mvns	r3, r3
 80094c4:	69ba      	ldr	r2, [r7, #24]
 80094c6:	4013      	ands	r3, r2
 80094c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d003      	beq.n	80094de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80094d6:	69ba      	ldr	r2, [r7, #24]
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	4313      	orrs	r3, r2
 80094dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80094de:	4a32      	ldr	r2, [pc, #200]	; (80095a8 <HAL_GPIO_Init+0x334>)
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80094e4:	4b30      	ldr	r3, [pc, #192]	; (80095a8 <HAL_GPIO_Init+0x334>)
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	43db      	mvns	r3, r3
 80094ee:	69ba      	ldr	r2, [r7, #24]
 80094f0:	4013      	ands	r3, r2
 80094f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d003      	beq.n	8009508 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009500:	69ba      	ldr	r2, [r7, #24]
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	4313      	orrs	r3, r2
 8009506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009508:	4a27      	ldr	r2, [pc, #156]	; (80095a8 <HAL_GPIO_Init+0x334>)
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800950e:	4b26      	ldr	r3, [pc, #152]	; (80095a8 <HAL_GPIO_Init+0x334>)
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	43db      	mvns	r3, r3
 8009518:	69ba      	ldr	r2, [r7, #24]
 800951a:	4013      	ands	r3, r2
 800951c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009526:	2b00      	cmp	r3, #0
 8009528:	d003      	beq.n	8009532 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800952a:	69ba      	ldr	r2, [r7, #24]
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	4313      	orrs	r3, r2
 8009530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009532:	4a1d      	ldr	r2, [pc, #116]	; (80095a8 <HAL_GPIO_Init+0x334>)
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009538:	4b1b      	ldr	r3, [pc, #108]	; (80095a8 <HAL_GPIO_Init+0x334>)
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	43db      	mvns	r3, r3
 8009542:	69ba      	ldr	r2, [r7, #24]
 8009544:	4013      	ands	r3, r2
 8009546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009550:	2b00      	cmp	r3, #0
 8009552:	d003      	beq.n	800955c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009554:	69ba      	ldr	r2, [r7, #24]
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	4313      	orrs	r3, r2
 800955a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800955c:	4a12      	ldr	r2, [pc, #72]	; (80095a8 <HAL_GPIO_Init+0x334>)
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	3301      	adds	r3, #1
 8009566:	61fb      	str	r3, [r7, #28]
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	2b0f      	cmp	r3, #15
 800956c:	f67f ae90 	bls.w	8009290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009570:	bf00      	nop
 8009572:	bf00      	nop
 8009574:	3724      	adds	r7, #36	; 0x24
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	40023800 	.word	0x40023800
 8009584:	40013800 	.word	0x40013800
 8009588:	40020000 	.word	0x40020000
 800958c:	40020400 	.word	0x40020400
 8009590:	40020800 	.word	0x40020800
 8009594:	40020c00 	.word	0x40020c00
 8009598:	40021000 	.word	0x40021000
 800959c:	40021400 	.word	0x40021400
 80095a0:	40021800 	.word	0x40021800
 80095a4:	40021c00 	.word	0x40021c00
 80095a8:	40013c00 	.word	0x40013c00

080095ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	807b      	strh	r3, [r7, #2]
 80095b8:	4613      	mov	r3, r2
 80095ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80095bc:	787b      	ldrb	r3, [r7, #1]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d003      	beq.n	80095ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80095c2:	887a      	ldrh	r2, [r7, #2]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80095c8:	e003      	b.n	80095d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80095ca:	887b      	ldrh	r3, [r7, #2]
 80095cc:	041a      	lsls	r2, r3, #16
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	619a      	str	r2, [r3, #24]
}
 80095d2:	bf00      	nop
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
	...

080095e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	4603      	mov	r3, r0
 80095e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80095ea:	4b08      	ldr	r3, [pc, #32]	; (800960c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80095ec:	695a      	ldr	r2, [r3, #20]
 80095ee:	88fb      	ldrh	r3, [r7, #6]
 80095f0:	4013      	ands	r3, r2
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d006      	beq.n	8009604 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80095f6:	4a05      	ldr	r2, [pc, #20]	; (800960c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80095f8:	88fb      	ldrh	r3, [r7, #6]
 80095fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80095fc:	88fb      	ldrh	r3, [r7, #6]
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 f806 	bl	8009610 <HAL_GPIO_EXTI_Callback>
  }
}
 8009604:	bf00      	nop
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	40013c00 	.word	0x40013c00

08009610 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800961a:	bf00      	nop
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8009626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009628:	b08f      	sub	sp, #60	; 0x3c
 800962a:	af0a      	add	r7, sp, #40	; 0x28
 800962c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d101      	bne.n	8009638 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	e054      	b.n	80096e2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d106      	bne.n	8009658 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f006 fb98 	bl	800fd88 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2203      	movs	r2, #3
 800965c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009668:	2b00      	cmp	r3, #0
 800966a:	d102      	bne.n	8009672 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4618      	mov	r0, r3
 8009678:	f003 fcee 	bl	800d058 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	603b      	str	r3, [r7, #0]
 8009682:	687e      	ldr	r6, [r7, #4]
 8009684:	466d      	mov	r5, sp
 8009686:	f106 0410 	add.w	r4, r6, #16
 800968a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800968c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800968e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009692:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009696:	e885 0003 	stmia.w	r5, {r0, r1}
 800969a:	1d33      	adds	r3, r6, #4
 800969c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800969e:	6838      	ldr	r0, [r7, #0]
 80096a0:	f003 fc68 	bl	800cf74 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2101      	movs	r1, #1
 80096aa:	4618      	mov	r0, r3
 80096ac:	f003 fce5 	bl	800d07a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	603b      	str	r3, [r7, #0]
 80096b6:	687e      	ldr	r6, [r7, #4]
 80096b8:	466d      	mov	r5, sp
 80096ba:	f106 0410 	add.w	r4, r6, #16
 80096be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80096c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80096c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80096ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80096ce:	1d33      	adds	r3, r6, #4
 80096d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096d2:	6838      	ldr	r0, [r7, #0]
 80096d4:	f003 fe4c 	bl	800d370 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3714      	adds	r7, #20
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096ea <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80096ea:	b590      	push	{r4, r7, lr}
 80096ec:	b089      	sub	sp, #36	; 0x24
 80096ee:	af04      	add	r7, sp, #16
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	4608      	mov	r0, r1
 80096f4:	4611      	mov	r1, r2
 80096f6:	461a      	mov	r2, r3
 80096f8:	4603      	mov	r3, r0
 80096fa:	70fb      	strb	r3, [r7, #3]
 80096fc:	460b      	mov	r3, r1
 80096fe:	70bb      	strb	r3, [r7, #2]
 8009700:	4613      	mov	r3, r2
 8009702:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800970a:	2b01      	cmp	r3, #1
 800970c:	d101      	bne.n	8009712 <HAL_HCD_HC_Init+0x28>
 800970e:	2302      	movs	r3, #2
 8009710:	e076      	b.n	8009800 <HAL_HCD_HC_Init+0x116>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800971a:	78fb      	ldrb	r3, [r7, #3]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	212c      	movs	r1, #44	; 0x2c
 8009720:	fb01 f303 	mul.w	r3, r1, r3
 8009724:	4413      	add	r3, r2
 8009726:	333d      	adds	r3, #61	; 0x3d
 8009728:	2200      	movs	r2, #0
 800972a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800972c:	78fb      	ldrb	r3, [r7, #3]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	212c      	movs	r1, #44	; 0x2c
 8009732:	fb01 f303 	mul.w	r3, r1, r3
 8009736:	4413      	add	r3, r2
 8009738:	3338      	adds	r3, #56	; 0x38
 800973a:	787a      	ldrb	r2, [r7, #1]
 800973c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800973e:	78fb      	ldrb	r3, [r7, #3]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	212c      	movs	r1, #44	; 0x2c
 8009744:	fb01 f303 	mul.w	r3, r1, r3
 8009748:	4413      	add	r3, r2
 800974a:	3340      	adds	r3, #64	; 0x40
 800974c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800974e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009750:	78fb      	ldrb	r3, [r7, #3]
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	212c      	movs	r1, #44	; 0x2c
 8009756:	fb01 f303 	mul.w	r3, r1, r3
 800975a:	4413      	add	r3, r2
 800975c:	3339      	adds	r3, #57	; 0x39
 800975e:	78fa      	ldrb	r2, [r7, #3]
 8009760:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8009762:	78fb      	ldrb	r3, [r7, #3]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	212c      	movs	r1, #44	; 0x2c
 8009768:	fb01 f303 	mul.w	r3, r1, r3
 800976c:	4413      	add	r3, r2
 800976e:	333f      	adds	r3, #63	; 0x3f
 8009770:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009774:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8009776:	78fb      	ldrb	r3, [r7, #3]
 8009778:	78ba      	ldrb	r2, [r7, #2]
 800977a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800977e:	b2d0      	uxtb	r0, r2
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	212c      	movs	r1, #44	; 0x2c
 8009784:	fb01 f303 	mul.w	r3, r1, r3
 8009788:	4413      	add	r3, r2
 800978a:	333a      	adds	r3, #58	; 0x3a
 800978c:	4602      	mov	r2, r0
 800978e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8009790:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009794:	2b00      	cmp	r3, #0
 8009796:	da09      	bge.n	80097ac <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	212c      	movs	r1, #44	; 0x2c
 800979e:	fb01 f303 	mul.w	r3, r1, r3
 80097a2:	4413      	add	r3, r2
 80097a4:	333b      	adds	r3, #59	; 0x3b
 80097a6:	2201      	movs	r2, #1
 80097a8:	701a      	strb	r2, [r3, #0]
 80097aa:	e008      	b.n	80097be <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80097ac:	78fb      	ldrb	r3, [r7, #3]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	212c      	movs	r1, #44	; 0x2c
 80097b2:	fb01 f303 	mul.w	r3, r1, r3
 80097b6:	4413      	add	r3, r2
 80097b8:	333b      	adds	r3, #59	; 0x3b
 80097ba:	2200      	movs	r2, #0
 80097bc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80097be:	78fb      	ldrb	r3, [r7, #3]
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	212c      	movs	r1, #44	; 0x2c
 80097c4:	fb01 f303 	mul.w	r3, r1, r3
 80097c8:	4413      	add	r3, r2
 80097ca:	333c      	adds	r3, #60	; 0x3c
 80097cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80097d0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6818      	ldr	r0, [r3, #0]
 80097d6:	787c      	ldrb	r4, [r7, #1]
 80097d8:	78ba      	ldrb	r2, [r7, #2]
 80097da:	78f9      	ldrb	r1, [r7, #3]
 80097dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80097de:	9302      	str	r3, [sp, #8]
 80097e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80097e4:	9301      	str	r3, [sp, #4]
 80097e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	4623      	mov	r3, r4
 80097ee:	f003 ff39 	bl	800d664 <USB_HC_Init>
 80097f2:	4603      	mov	r3, r0
 80097f4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	bd90      	pop	{r4, r7, pc}

08009808 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	460b      	mov	r3, r1
 8009812:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800981e:	2b01      	cmp	r3, #1
 8009820:	d101      	bne.n	8009826 <HAL_HCD_HC_Halt+0x1e>
 8009822:	2302      	movs	r3, #2
 8009824:	e00f      	b.n	8009846 <HAL_HCD_HC_Halt+0x3e>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	78fa      	ldrb	r2, [r7, #3]
 8009834:	4611      	mov	r1, r2
 8009836:	4618      	mov	r0, r3
 8009838:	f004 f975 	bl	800db26 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8009844:	7bfb      	ldrb	r3, [r7, #15]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
	...

08009850 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	4608      	mov	r0, r1
 800985a:	4611      	mov	r1, r2
 800985c:	461a      	mov	r2, r3
 800985e:	4603      	mov	r3, r0
 8009860:	70fb      	strb	r3, [r7, #3]
 8009862:	460b      	mov	r3, r1
 8009864:	70bb      	strb	r3, [r7, #2]
 8009866:	4613      	mov	r3, r2
 8009868:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800986a:	78fb      	ldrb	r3, [r7, #3]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	212c      	movs	r1, #44	; 0x2c
 8009870:	fb01 f303 	mul.w	r3, r1, r3
 8009874:	4413      	add	r3, r2
 8009876:	333b      	adds	r3, #59	; 0x3b
 8009878:	78ba      	ldrb	r2, [r7, #2]
 800987a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800987c:	78fb      	ldrb	r3, [r7, #3]
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	212c      	movs	r1, #44	; 0x2c
 8009882:	fb01 f303 	mul.w	r3, r1, r3
 8009886:	4413      	add	r3, r2
 8009888:	333f      	adds	r3, #63	; 0x3f
 800988a:	787a      	ldrb	r2, [r7, #1]
 800988c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800988e:	7c3b      	ldrb	r3, [r7, #16]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d112      	bne.n	80098ba <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8009894:	78fb      	ldrb	r3, [r7, #3]
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	212c      	movs	r1, #44	; 0x2c
 800989a:	fb01 f303 	mul.w	r3, r1, r3
 800989e:	4413      	add	r3, r2
 80098a0:	3342      	adds	r3, #66	; 0x42
 80098a2:	2203      	movs	r2, #3
 80098a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80098a6:	78fb      	ldrb	r3, [r7, #3]
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	212c      	movs	r1, #44	; 0x2c
 80098ac:	fb01 f303 	mul.w	r3, r1, r3
 80098b0:	4413      	add	r3, r2
 80098b2:	333d      	adds	r3, #61	; 0x3d
 80098b4:	7f3a      	ldrb	r2, [r7, #28]
 80098b6:	701a      	strb	r2, [r3, #0]
 80098b8:	e008      	b.n	80098cc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80098ba:	78fb      	ldrb	r3, [r7, #3]
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	212c      	movs	r1, #44	; 0x2c
 80098c0:	fb01 f303 	mul.w	r3, r1, r3
 80098c4:	4413      	add	r3, r2
 80098c6:	3342      	adds	r3, #66	; 0x42
 80098c8:	2202      	movs	r2, #2
 80098ca:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80098cc:	787b      	ldrb	r3, [r7, #1]
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	f200 80c6 	bhi.w	8009a60 <HAL_HCD_HC_SubmitRequest+0x210>
 80098d4:	a201      	add	r2, pc, #4	; (adr r2, 80098dc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80098d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098da:	bf00      	nop
 80098dc:	080098ed 	.word	0x080098ed
 80098e0:	08009a4d 	.word	0x08009a4d
 80098e4:	08009951 	.word	0x08009951
 80098e8:	080099cf 	.word	0x080099cf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80098ec:	7c3b      	ldrb	r3, [r7, #16]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	f040 80b8 	bne.w	8009a64 <HAL_HCD_HC_SubmitRequest+0x214>
 80098f4:	78bb      	ldrb	r3, [r7, #2]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f040 80b4 	bne.w	8009a64 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80098fc:	8b3b      	ldrh	r3, [r7, #24]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d108      	bne.n	8009914 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8009902:	78fb      	ldrb	r3, [r7, #3]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	212c      	movs	r1, #44	; 0x2c
 8009908:	fb01 f303 	mul.w	r3, r1, r3
 800990c:	4413      	add	r3, r2
 800990e:	3355      	adds	r3, #85	; 0x55
 8009910:	2201      	movs	r2, #1
 8009912:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009914:	78fb      	ldrb	r3, [r7, #3]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	212c      	movs	r1, #44	; 0x2c
 800991a:	fb01 f303 	mul.w	r3, r1, r3
 800991e:	4413      	add	r3, r2
 8009920:	3355      	adds	r3, #85	; 0x55
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d109      	bne.n	800993c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009928:	78fb      	ldrb	r3, [r7, #3]
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	212c      	movs	r1, #44	; 0x2c
 800992e:	fb01 f303 	mul.w	r3, r1, r3
 8009932:	4413      	add	r3, r2
 8009934:	3342      	adds	r3, #66	; 0x42
 8009936:	2200      	movs	r2, #0
 8009938:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800993a:	e093      	b.n	8009a64 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800993c:	78fb      	ldrb	r3, [r7, #3]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	212c      	movs	r1, #44	; 0x2c
 8009942:	fb01 f303 	mul.w	r3, r1, r3
 8009946:	4413      	add	r3, r2
 8009948:	3342      	adds	r3, #66	; 0x42
 800994a:	2202      	movs	r2, #2
 800994c:	701a      	strb	r2, [r3, #0]
      break;
 800994e:	e089      	b.n	8009a64 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8009950:	78bb      	ldrb	r3, [r7, #2]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d11d      	bne.n	8009992 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009956:	78fb      	ldrb	r3, [r7, #3]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	212c      	movs	r1, #44	; 0x2c
 800995c:	fb01 f303 	mul.w	r3, r1, r3
 8009960:	4413      	add	r3, r2
 8009962:	3355      	adds	r3, #85	; 0x55
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d109      	bne.n	800997e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800996a:	78fb      	ldrb	r3, [r7, #3]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	212c      	movs	r1, #44	; 0x2c
 8009970:	fb01 f303 	mul.w	r3, r1, r3
 8009974:	4413      	add	r3, r2
 8009976:	3342      	adds	r3, #66	; 0x42
 8009978:	2200      	movs	r2, #0
 800997a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800997c:	e073      	b.n	8009a66 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800997e:	78fb      	ldrb	r3, [r7, #3]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	212c      	movs	r1, #44	; 0x2c
 8009984:	fb01 f303 	mul.w	r3, r1, r3
 8009988:	4413      	add	r3, r2
 800998a:	3342      	adds	r3, #66	; 0x42
 800998c:	2202      	movs	r2, #2
 800998e:	701a      	strb	r2, [r3, #0]
      break;
 8009990:	e069      	b.n	8009a66 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009992:	78fb      	ldrb	r3, [r7, #3]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	212c      	movs	r1, #44	; 0x2c
 8009998:	fb01 f303 	mul.w	r3, r1, r3
 800999c:	4413      	add	r3, r2
 800999e:	3354      	adds	r3, #84	; 0x54
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d109      	bne.n	80099ba <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80099a6:	78fb      	ldrb	r3, [r7, #3]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	212c      	movs	r1, #44	; 0x2c
 80099ac:	fb01 f303 	mul.w	r3, r1, r3
 80099b0:	4413      	add	r3, r2
 80099b2:	3342      	adds	r3, #66	; 0x42
 80099b4:	2200      	movs	r2, #0
 80099b6:	701a      	strb	r2, [r3, #0]
      break;
 80099b8:	e055      	b.n	8009a66 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80099ba:	78fb      	ldrb	r3, [r7, #3]
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	212c      	movs	r1, #44	; 0x2c
 80099c0:	fb01 f303 	mul.w	r3, r1, r3
 80099c4:	4413      	add	r3, r2
 80099c6:	3342      	adds	r3, #66	; 0x42
 80099c8:	2202      	movs	r2, #2
 80099ca:	701a      	strb	r2, [r3, #0]
      break;
 80099cc:	e04b      	b.n	8009a66 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80099ce:	78bb      	ldrb	r3, [r7, #2]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d11d      	bne.n	8009a10 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80099d4:	78fb      	ldrb	r3, [r7, #3]
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	212c      	movs	r1, #44	; 0x2c
 80099da:	fb01 f303 	mul.w	r3, r1, r3
 80099de:	4413      	add	r3, r2
 80099e0:	3355      	adds	r3, #85	; 0x55
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d109      	bne.n	80099fc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80099e8:	78fb      	ldrb	r3, [r7, #3]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	212c      	movs	r1, #44	; 0x2c
 80099ee:	fb01 f303 	mul.w	r3, r1, r3
 80099f2:	4413      	add	r3, r2
 80099f4:	3342      	adds	r3, #66	; 0x42
 80099f6:	2200      	movs	r2, #0
 80099f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80099fa:	e034      	b.n	8009a66 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80099fc:	78fb      	ldrb	r3, [r7, #3]
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	212c      	movs	r1, #44	; 0x2c
 8009a02:	fb01 f303 	mul.w	r3, r1, r3
 8009a06:	4413      	add	r3, r2
 8009a08:	3342      	adds	r3, #66	; 0x42
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	701a      	strb	r2, [r3, #0]
      break;
 8009a0e:	e02a      	b.n	8009a66 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	212c      	movs	r1, #44	; 0x2c
 8009a16:	fb01 f303 	mul.w	r3, r1, r3
 8009a1a:	4413      	add	r3, r2
 8009a1c:	3354      	adds	r3, #84	; 0x54
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d109      	bne.n	8009a38 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009a24:	78fb      	ldrb	r3, [r7, #3]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	212c      	movs	r1, #44	; 0x2c
 8009a2a:	fb01 f303 	mul.w	r3, r1, r3
 8009a2e:	4413      	add	r3, r2
 8009a30:	3342      	adds	r3, #66	; 0x42
 8009a32:	2200      	movs	r2, #0
 8009a34:	701a      	strb	r2, [r3, #0]
      break;
 8009a36:	e016      	b.n	8009a66 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009a38:	78fb      	ldrb	r3, [r7, #3]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	212c      	movs	r1, #44	; 0x2c
 8009a3e:	fb01 f303 	mul.w	r3, r1, r3
 8009a42:	4413      	add	r3, r2
 8009a44:	3342      	adds	r3, #66	; 0x42
 8009a46:	2202      	movs	r2, #2
 8009a48:	701a      	strb	r2, [r3, #0]
      break;
 8009a4a:	e00c      	b.n	8009a66 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009a4c:	78fb      	ldrb	r3, [r7, #3]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	212c      	movs	r1, #44	; 0x2c
 8009a52:	fb01 f303 	mul.w	r3, r1, r3
 8009a56:	4413      	add	r3, r2
 8009a58:	3342      	adds	r3, #66	; 0x42
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	701a      	strb	r2, [r3, #0]
      break;
 8009a5e:	e002      	b.n	8009a66 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8009a60:	bf00      	nop
 8009a62:	e000      	b.n	8009a66 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8009a64:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8009a66:	78fb      	ldrb	r3, [r7, #3]
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	212c      	movs	r1, #44	; 0x2c
 8009a6c:	fb01 f303 	mul.w	r3, r1, r3
 8009a70:	4413      	add	r3, r2
 8009a72:	3344      	adds	r3, #68	; 0x44
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	8b3a      	ldrh	r2, [r7, #24]
 8009a7c:	6879      	ldr	r1, [r7, #4]
 8009a7e:	202c      	movs	r0, #44	; 0x2c
 8009a80:	fb00 f303 	mul.w	r3, r0, r3
 8009a84:	440b      	add	r3, r1
 8009a86:	334c      	adds	r3, #76	; 0x4c
 8009a88:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	212c      	movs	r1, #44	; 0x2c
 8009a90:	fb01 f303 	mul.w	r3, r1, r3
 8009a94:	4413      	add	r3, r2
 8009a96:	3360      	adds	r3, #96	; 0x60
 8009a98:	2200      	movs	r2, #0
 8009a9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8009a9c:	78fb      	ldrb	r3, [r7, #3]
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	212c      	movs	r1, #44	; 0x2c
 8009aa2:	fb01 f303 	mul.w	r3, r1, r3
 8009aa6:	4413      	add	r3, r2
 8009aa8:	3350      	adds	r3, #80	; 0x50
 8009aaa:	2200      	movs	r2, #0
 8009aac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009aae:	78fb      	ldrb	r3, [r7, #3]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	212c      	movs	r1, #44	; 0x2c
 8009ab4:	fb01 f303 	mul.w	r3, r1, r3
 8009ab8:	4413      	add	r3, r2
 8009aba:	3339      	adds	r3, #57	; 0x39
 8009abc:	78fa      	ldrb	r2, [r7, #3]
 8009abe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8009ac0:	78fb      	ldrb	r3, [r7, #3]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	212c      	movs	r1, #44	; 0x2c
 8009ac6:	fb01 f303 	mul.w	r3, r1, r3
 8009aca:	4413      	add	r3, r2
 8009acc:	3361      	adds	r3, #97	; 0x61
 8009ace:	2200      	movs	r2, #0
 8009ad0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6818      	ldr	r0, [r3, #0]
 8009ad6:	78fb      	ldrb	r3, [r7, #3]
 8009ad8:	222c      	movs	r2, #44	; 0x2c
 8009ada:	fb02 f303 	mul.w	r3, r2, r3
 8009ade:	3338      	adds	r3, #56	; 0x38
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	18d1      	adds	r1, r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	461a      	mov	r2, r3
 8009aec:	f003 fec8 	bl	800d880 <USB_HC_StartXfer>
 8009af0:	4603      	mov	r3, r0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop

08009afc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f003 fbeb 	bl	800d2ee <USB_GetMode>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	f040 80f6 	bne.w	8009d0c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f003 fbcf 	bl	800d2c8 <USB_ReadInterrupts>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f000 80ec 	beq.w	8009d0a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f003 fbc6 	bl	800d2c8 <USB_ReadInterrupts>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b46:	d104      	bne.n	8009b52 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009b50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f003 fbb6 	bl	800d2c8 <USB_ReadInterrupts>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b66:	d104      	bne.n	8009b72 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009b70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4618      	mov	r0, r3
 8009b78:	f003 fba6 	bl	800d2c8 <USB_ReadInterrupts>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b86:	d104      	bne.n	8009b92 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009b90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f003 fb96 	bl	800d2c8 <USB_ReadInterrupts>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	f003 0302 	and.w	r3, r3, #2
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d103      	bne.n	8009bae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2202      	movs	r2, #2
 8009bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f003 fb88 	bl	800d2c8 <USB_ReadInterrupts>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bc2:	d11c      	bne.n	8009bfe <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009bcc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10f      	bne.n	8009bfe <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8009bde:	2110      	movs	r1, #16
 8009be0:	6938      	ldr	r0, [r7, #16]
 8009be2:	f003 fa97 	bl	800d114 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8009be6:	6938      	ldr	r0, [r7, #16]
 8009be8:	f003 fab8 	bl	800d15c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f003 fc70 	bl	800d4d8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f006 f943 	bl	800fe84 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f003 fb60 	bl	800d2c8 <USB_ReadInterrupts>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c12:	d102      	bne.n	8009c1a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f001 fa03 	bl	800b020 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f003 fb52 	bl	800d2c8 <USB_ReadInterrupts>
 8009c24:	4603      	mov	r3, r0
 8009c26:	f003 0308 	and.w	r3, r3, #8
 8009c2a:	2b08      	cmp	r3, #8
 8009c2c:	d106      	bne.n	8009c3c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f006 f90c 	bl	800fe4c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2208      	movs	r2, #8
 8009c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f003 fb41 	bl	800d2c8 <USB_ReadInterrupts>
 8009c46:	4603      	mov	r3, r0
 8009c48:	f003 0310 	and.w	r3, r3, #16
 8009c4c:	2b10      	cmp	r3, #16
 8009c4e:	d101      	bne.n	8009c54 <HAL_HCD_IRQHandler+0x158>
 8009c50:	2301      	movs	r3, #1
 8009c52:	e000      	b.n	8009c56 <HAL_HCD_IRQHandler+0x15a>
 8009c54:	2300      	movs	r3, #0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d012      	beq.n	8009c80 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	699a      	ldr	r2, [r3, #24]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f022 0210 	bic.w	r2, r2, #16
 8009c68:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f001 f906 	bl	800ae7c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	699a      	ldr	r2, [r3, #24]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f042 0210 	orr.w	r2, r2, #16
 8009c7e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f003 fb1f 	bl	800d2c8 <USB_ReadInterrupts>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c94:	d13a      	bne.n	8009d0c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f003 ff32 	bl	800db04 <USB_HC_ReadInterrupt>
 8009ca0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	617b      	str	r3, [r7, #20]
 8009ca6:	e025      	b.n	8009cf4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	f003 030f 	and.w	r3, r3, #15
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8009cb4:	f003 0301 	and.w	r3, r3, #1
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d018      	beq.n	8009cee <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	015a      	lsls	r2, r3, #5
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cd2:	d106      	bne.n	8009ce2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	4619      	mov	r1, r3
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f8ab 	bl	8009e36 <HCD_HC_IN_IRQHandler>
 8009ce0:	e005      	b.n	8009cee <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fcc6 	bl	800a67a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	617b      	str	r3, [r7, #20]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d3d4      	bcc.n	8009ca8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009d06:	615a      	str	r2, [r3, #20]
 8009d08:	e000      	b.n	8009d0c <HAL_HCD_IRQHandler+0x210>
      return;
 8009d0a:	bf00      	nop
    }
  }
}
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b082      	sub	sp, #8
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d101      	bne.n	8009d28 <HAL_HCD_Start+0x16>
 8009d24:	2302      	movs	r3, #2
 8009d26:	e013      	b.n	8009d50 <HAL_HCD_Start+0x3e>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2101      	movs	r1, #1
 8009d36:	4618      	mov	r0, r3
 8009d38:	f003 fc32 	bl	800d5a0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4618      	mov	r0, r3
 8009d42:	f003 f978 	bl	800d036 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8009d4e:	2300      	movs	r3, #0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d101      	bne.n	8009d6e <HAL_HCD_Stop+0x16>
 8009d6a:	2302      	movs	r3, #2
 8009d6c:	e00d      	b.n	8009d8a <HAL_HCD_Stop+0x32>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2201      	movs	r2, #1
 8009d72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f004 f82c 	bl	800ddd8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b082      	sub	sp, #8
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f003 fbd4 	bl	800d54c <USB_ResetPort>
 8009da4:	4603      	mov	r3, r0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b083      	sub	sp, #12
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	460b      	mov	r3, r1
 8009db8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8009dba:	78fb      	ldrb	r3, [r7, #3]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	212c      	movs	r1, #44	; 0x2c
 8009dc0:	fb01 f303 	mul.w	r3, r1, r3
 8009dc4:	4413      	add	r3, r2
 8009dc6:	3360      	adds	r3, #96	; 0x60
 8009dc8:	781b      	ldrb	r3, [r3, #0]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	370c      	adds	r7, #12
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr

08009dd6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009dd6:	b480      	push	{r7}
 8009dd8:	b083      	sub	sp, #12
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
 8009dde:	460b      	mov	r3, r1
 8009de0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8009de2:	78fb      	ldrb	r3, [r7, #3]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	212c      	movs	r1, #44	; 0x2c
 8009de8:	fb01 f303 	mul.w	r3, r1, r3
 8009dec:	4413      	add	r3, r2
 8009dee:	3350      	adds	r3, #80	; 0x50
 8009df0:	681b      	ldr	r3, [r3, #0]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	370c      	adds	r7, #12
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b082      	sub	sp, #8
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f003 fc18 	bl	800d640 <USB_GetCurrentFrame>
 8009e10:	4603      	mov	r3, r0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b082      	sub	sp, #8
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f003 fbf3 	bl	800d612 <USB_GetHostSpeed>
 8009e2c:	4603      	mov	r3, r0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3708      	adds	r7, #8
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b086      	sub	sp, #24
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	460b      	mov	r3, r1
 8009e40:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8009e4c:	78fb      	ldrb	r3, [r7, #3]
 8009e4e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	015a      	lsls	r2, r3, #5
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	4413      	add	r3, r2
 8009e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	f003 0304 	and.w	r3, r3, #4
 8009e62:	2b04      	cmp	r3, #4
 8009e64:	d119      	bne.n	8009e9a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	015a      	lsls	r2, r3, #5
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e72:	461a      	mov	r2, r3
 8009e74:	2304      	movs	r3, #4
 8009e76:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	015a      	lsls	r2, r3, #5
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	4413      	add	r3, r2
 8009e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	0151      	lsls	r1, r2, #5
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	440a      	add	r2, r1
 8009e8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e92:	f043 0302 	orr.w	r3, r3, #2
 8009e96:	60d3      	str	r3, [r2, #12]
 8009e98:	e101      	b.n	800a09e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	015a      	lsls	r2, r3, #5
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eb0:	d12b      	bne.n	8009f0a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	015a      	lsls	r2, r3, #5
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	4413      	add	r3, r2
 8009eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ec4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	212c      	movs	r1, #44	; 0x2c
 8009ecc:	fb01 f303 	mul.w	r3, r1, r3
 8009ed0:	4413      	add	r3, r2
 8009ed2:	3361      	adds	r3, #97	; 0x61
 8009ed4:	2207      	movs	r2, #7
 8009ed6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	015a      	lsls	r2, r3, #5
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	4413      	add	r3, r2
 8009ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	0151      	lsls	r1, r2, #5
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	440a      	add	r2, r1
 8009eee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ef2:	f043 0302 	orr.w	r3, r3, #2
 8009ef6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	b2d2      	uxtb	r2, r2
 8009f00:	4611      	mov	r1, r2
 8009f02:	4618      	mov	r0, r3
 8009f04:	f003 fe0f 	bl	800db26 <USB_HC_Halt>
 8009f08:	e0c9      	b.n	800a09e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	015a      	lsls	r2, r3, #5
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	4413      	add	r3, r2
 8009f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	f003 0320 	and.w	r3, r3, #32
 8009f1c:	2b20      	cmp	r3, #32
 8009f1e:	d109      	bne.n	8009f34 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	015a      	lsls	r2, r3, #5
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	4413      	add	r3, r2
 8009f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	2320      	movs	r3, #32
 8009f30:	6093      	str	r3, [r2, #8]
 8009f32:	e0b4      	b.n	800a09e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	015a      	lsls	r2, r3, #5
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	f003 0308 	and.w	r3, r3, #8
 8009f46:	2b08      	cmp	r3, #8
 8009f48:	d133      	bne.n	8009fb2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	015a      	lsls	r2, r3, #5
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	4413      	add	r3, r2
 8009f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	0151      	lsls	r1, r2, #5
 8009f5c:	693a      	ldr	r2, [r7, #16]
 8009f5e:	440a      	add	r2, r1
 8009f60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f64:	f043 0302 	orr.w	r3, r3, #2
 8009f68:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	212c      	movs	r1, #44	; 0x2c
 8009f70:	fb01 f303 	mul.w	r3, r1, r3
 8009f74:	4413      	add	r3, r2
 8009f76:	3361      	adds	r3, #97	; 0x61
 8009f78:	2205      	movs	r2, #5
 8009f7a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	015a      	lsls	r2, r3, #5
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f88:	461a      	mov	r2, r3
 8009f8a:	2310      	movs	r3, #16
 8009f8c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	015a      	lsls	r2, r3, #5
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	2308      	movs	r3, #8
 8009f9e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	b2d2      	uxtb	r2, r2
 8009fa8:	4611      	mov	r1, r2
 8009faa:	4618      	mov	r0, r3
 8009fac:	f003 fdbb 	bl	800db26 <USB_HC_Halt>
 8009fb0:	e075      	b.n	800a09e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	015a      	lsls	r2, r3, #5
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	4413      	add	r3, r2
 8009fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fc8:	d134      	bne.n	800a034 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	015a      	lsls	r2, r3, #5
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	0151      	lsls	r1, r2, #5
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	440a      	add	r2, r1
 8009fe0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fe4:	f043 0302 	orr.w	r3, r3, #2
 8009fe8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	212c      	movs	r1, #44	; 0x2c
 8009ff0:	fb01 f303 	mul.w	r3, r1, r3
 8009ff4:	4413      	add	r3, r2
 8009ff6:	3361      	adds	r3, #97	; 0x61
 8009ff8:	2208      	movs	r2, #8
 8009ffa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	015a      	lsls	r2, r3, #5
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	4413      	add	r3, r2
 800a004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a008:	461a      	mov	r2, r3
 800a00a:	2310      	movs	r3, #16
 800a00c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	015a      	lsls	r2, r3, #5
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	4413      	add	r3, r2
 800a016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a01a:	461a      	mov	r2, r3
 800a01c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a020:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	b2d2      	uxtb	r2, r2
 800a02a:	4611      	mov	r1, r2
 800a02c:	4618      	mov	r0, r3
 800a02e:	f003 fd7a 	bl	800db26 <USB_HC_Halt>
 800a032:	e034      	b.n	800a09e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	015a      	lsls	r2, r3, #5
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	4413      	add	r3, r2
 800a03c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a046:	2b80      	cmp	r3, #128	; 0x80
 800a048:	d129      	bne.n	800a09e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	015a      	lsls	r2, r3, #5
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	4413      	add	r3, r2
 800a052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	0151      	lsls	r1, r2, #5
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	440a      	add	r2, r1
 800a060:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a064:	f043 0302 	orr.w	r3, r3, #2
 800a068:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	212c      	movs	r1, #44	; 0x2c
 800a070:	fb01 f303 	mul.w	r3, r1, r3
 800a074:	4413      	add	r3, r2
 800a076:	3361      	adds	r3, #97	; 0x61
 800a078:	2206      	movs	r2, #6
 800a07a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	b2d2      	uxtb	r2, r2
 800a084:	4611      	mov	r1, r2
 800a086:	4618      	mov	r0, r3
 800a088:	f003 fd4d 	bl	800db26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	015a      	lsls	r2, r3, #5
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	4413      	add	r3, r2
 800a094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a098:	461a      	mov	r2, r3
 800a09a:	2380      	movs	r3, #128	; 0x80
 800a09c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	015a      	lsls	r2, r3, #5
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0b4:	d122      	bne.n	800a0fc <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	015a      	lsls	r2, r3, #5
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	4413      	add	r3, r2
 800a0be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	0151      	lsls	r1, r2, #5
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	440a      	add	r2, r1
 800a0cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0d0:	f043 0302 	orr.w	r3, r3, #2
 800a0d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	b2d2      	uxtb	r2, r2
 800a0de:	4611      	mov	r1, r2
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f003 fd20 	bl	800db26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	015a      	lsls	r2, r3, #5
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0f8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800a0fa:	e2ba      	b.n	800a672 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	015a      	lsls	r2, r3, #5
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	4413      	add	r3, r2
 800a104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	f003 0301 	and.w	r3, r3, #1
 800a10e:	2b01      	cmp	r3, #1
 800a110:	f040 811b 	bne.w	800a34a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d019      	beq.n	800a150 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	212c      	movs	r1, #44	; 0x2c
 800a122:	fb01 f303 	mul.w	r3, r1, r3
 800a126:	4413      	add	r3, r2
 800a128:	3348      	adds	r3, #72	; 0x48
 800a12a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	0159      	lsls	r1, r3, #5
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	440b      	add	r3, r1
 800a134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800a13e:	1ad2      	subs	r2, r2, r3
 800a140:	6879      	ldr	r1, [r7, #4]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	202c      	movs	r0, #44	; 0x2c
 800a146:	fb00 f303 	mul.w	r3, r0, r3
 800a14a:	440b      	add	r3, r1
 800a14c:	3350      	adds	r3, #80	; 0x50
 800a14e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	212c      	movs	r1, #44	; 0x2c
 800a156:	fb01 f303 	mul.w	r3, r1, r3
 800a15a:	4413      	add	r3, r2
 800a15c:	3361      	adds	r3, #97	; 0x61
 800a15e:	2201      	movs	r2, #1
 800a160:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	212c      	movs	r1, #44	; 0x2c
 800a168:	fb01 f303 	mul.w	r3, r1, r3
 800a16c:	4413      	add	r3, r2
 800a16e:	335c      	adds	r3, #92	; 0x5c
 800a170:	2200      	movs	r2, #0
 800a172:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	015a      	lsls	r2, r3, #5
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	4413      	add	r3, r2
 800a17c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a180:	461a      	mov	r2, r3
 800a182:	2301      	movs	r3, #1
 800a184:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	212c      	movs	r1, #44	; 0x2c
 800a18c:	fb01 f303 	mul.w	r3, r1, r3
 800a190:	4413      	add	r3, r2
 800a192:	333f      	adds	r3, #63	; 0x3f
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d009      	beq.n	800a1ae <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	212c      	movs	r1, #44	; 0x2c
 800a1a0:	fb01 f303 	mul.w	r3, r1, r3
 800a1a4:	4413      	add	r3, r2
 800a1a6:	333f      	adds	r3, #63	; 0x3f
 800a1a8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d121      	bne.n	800a1f2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	015a      	lsls	r2, r3, #5
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	0151      	lsls	r1, r2, #5
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	440a      	add	r2, r1
 800a1c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1c8:	f043 0302 	orr.w	r3, r3, #2
 800a1cc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	b2d2      	uxtb	r2, r2
 800a1d6:	4611      	mov	r1, r2
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f003 fca4 	bl	800db26 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	015a      	lsls	r2, r3, #5
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	2310      	movs	r3, #16
 800a1ee:	6093      	str	r3, [r2, #8]
 800a1f0:	e066      	b.n	800a2c0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	212c      	movs	r1, #44	; 0x2c
 800a1f8:	fb01 f303 	mul.w	r3, r1, r3
 800a1fc:	4413      	add	r3, r2
 800a1fe:	333f      	adds	r3, #63	; 0x3f
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	2b03      	cmp	r3, #3
 800a204:	d127      	bne.n	800a256 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	015a      	lsls	r2, r3, #5
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	4413      	add	r3, r2
 800a20e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	0151      	lsls	r1, r2, #5
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	440a      	add	r2, r1
 800a21c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a220:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a224:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	212c      	movs	r1, #44	; 0x2c
 800a22c:	fb01 f303 	mul.w	r3, r1, r3
 800a230:	4413      	add	r3, r2
 800a232:	3360      	adds	r3, #96	; 0x60
 800a234:	2201      	movs	r2, #1
 800a236:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	b2d9      	uxtb	r1, r3
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	202c      	movs	r0, #44	; 0x2c
 800a242:	fb00 f303 	mul.w	r3, r0, r3
 800a246:	4413      	add	r3, r2
 800a248:	3360      	adds	r3, #96	; 0x60
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	461a      	mov	r2, r3
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f005 fe26 	bl	800fea0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a254:	e034      	b.n	800a2c0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	212c      	movs	r1, #44	; 0x2c
 800a25c:	fb01 f303 	mul.w	r3, r1, r3
 800a260:	4413      	add	r3, r2
 800a262:	333f      	adds	r3, #63	; 0x3f
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	2b01      	cmp	r3, #1
 800a268:	d12a      	bne.n	800a2c0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	212c      	movs	r1, #44	; 0x2c
 800a270:	fb01 f303 	mul.w	r3, r1, r3
 800a274:	4413      	add	r3, r2
 800a276:	3360      	adds	r3, #96	; 0x60
 800a278:	2201      	movs	r2, #1
 800a27a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	212c      	movs	r1, #44	; 0x2c
 800a282:	fb01 f303 	mul.w	r3, r1, r3
 800a286:	4413      	add	r3, r2
 800a288:	3354      	adds	r3, #84	; 0x54
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	f083 0301 	eor.w	r3, r3, #1
 800a290:	b2d8      	uxtb	r0, r3
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	212c      	movs	r1, #44	; 0x2c
 800a298:	fb01 f303 	mul.w	r3, r1, r3
 800a29c:	4413      	add	r3, r2
 800a29e:	3354      	adds	r3, #84	; 0x54
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	b2d9      	uxtb	r1, r3
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	202c      	movs	r0, #44	; 0x2c
 800a2ae:	fb00 f303 	mul.w	r3, r0, r3
 800a2b2:	4413      	add	r3, r2
 800a2b4:	3360      	adds	r3, #96	; 0x60
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f005 fdf0 	bl	800fea0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d12b      	bne.n	800a320 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	212c      	movs	r1, #44	; 0x2c
 800a2ce:	fb01 f303 	mul.w	r3, r1, r3
 800a2d2:	4413      	add	r3, r2
 800a2d4:	3348      	adds	r3, #72	; 0x48
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	6879      	ldr	r1, [r7, #4]
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	202c      	movs	r0, #44	; 0x2c
 800a2de:	fb00 f202 	mul.w	r2, r0, r2
 800a2e2:	440a      	add	r2, r1
 800a2e4:	3240      	adds	r2, #64	; 0x40
 800a2e6:	8812      	ldrh	r2, [r2, #0]
 800a2e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2ec:	f003 0301 	and.w	r3, r3, #1
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f000 81be 	beq.w	800a672 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	212c      	movs	r1, #44	; 0x2c
 800a2fc:	fb01 f303 	mul.w	r3, r1, r3
 800a300:	4413      	add	r3, r2
 800a302:	3354      	adds	r3, #84	; 0x54
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	f083 0301 	eor.w	r3, r3, #1
 800a30a:	b2d8      	uxtb	r0, r3
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	212c      	movs	r1, #44	; 0x2c
 800a312:	fb01 f303 	mul.w	r3, r1, r3
 800a316:	4413      	add	r3, r2
 800a318:	3354      	adds	r3, #84	; 0x54
 800a31a:	4602      	mov	r2, r0
 800a31c:	701a      	strb	r2, [r3, #0]
}
 800a31e:	e1a8      	b.n	800a672 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	212c      	movs	r1, #44	; 0x2c
 800a326:	fb01 f303 	mul.w	r3, r1, r3
 800a32a:	4413      	add	r3, r2
 800a32c:	3354      	adds	r3, #84	; 0x54
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	f083 0301 	eor.w	r3, r3, #1
 800a334:	b2d8      	uxtb	r0, r3
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	212c      	movs	r1, #44	; 0x2c
 800a33c:	fb01 f303 	mul.w	r3, r1, r3
 800a340:	4413      	add	r3, r2
 800a342:	3354      	adds	r3, #84	; 0x54
 800a344:	4602      	mov	r2, r0
 800a346:	701a      	strb	r2, [r3, #0]
}
 800a348:	e193      	b.n	800a672 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	015a      	lsls	r2, r3, #5
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	4413      	add	r3, r2
 800a352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f003 0302 	and.w	r3, r3, #2
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	f040 8106 	bne.w	800a56e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	0151      	lsls	r1, r2, #5
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	440a      	add	r2, r1
 800a378:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a37c:	f023 0302 	bic.w	r3, r3, #2
 800a380:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	212c      	movs	r1, #44	; 0x2c
 800a388:	fb01 f303 	mul.w	r3, r1, r3
 800a38c:	4413      	add	r3, r2
 800a38e:	3361      	adds	r3, #97	; 0x61
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	2b01      	cmp	r3, #1
 800a394:	d109      	bne.n	800a3aa <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	212c      	movs	r1, #44	; 0x2c
 800a39c:	fb01 f303 	mul.w	r3, r1, r3
 800a3a0:	4413      	add	r3, r2
 800a3a2:	3360      	adds	r3, #96	; 0x60
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	701a      	strb	r2, [r3, #0]
 800a3a8:	e0c9      	b.n	800a53e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	212c      	movs	r1, #44	; 0x2c
 800a3b0:	fb01 f303 	mul.w	r3, r1, r3
 800a3b4:	4413      	add	r3, r2
 800a3b6:	3361      	adds	r3, #97	; 0x61
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	2b05      	cmp	r3, #5
 800a3bc:	d109      	bne.n	800a3d2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	212c      	movs	r1, #44	; 0x2c
 800a3c4:	fb01 f303 	mul.w	r3, r1, r3
 800a3c8:	4413      	add	r3, r2
 800a3ca:	3360      	adds	r3, #96	; 0x60
 800a3cc:	2205      	movs	r2, #5
 800a3ce:	701a      	strb	r2, [r3, #0]
 800a3d0:	e0b5      	b.n	800a53e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	212c      	movs	r1, #44	; 0x2c
 800a3d8:	fb01 f303 	mul.w	r3, r1, r3
 800a3dc:	4413      	add	r3, r2
 800a3de:	3361      	adds	r3, #97	; 0x61
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	2b06      	cmp	r3, #6
 800a3e4:	d009      	beq.n	800a3fa <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	212c      	movs	r1, #44	; 0x2c
 800a3ec:	fb01 f303 	mul.w	r3, r1, r3
 800a3f0:	4413      	add	r3, r2
 800a3f2:	3361      	adds	r3, #97	; 0x61
 800a3f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a3f6:	2b08      	cmp	r3, #8
 800a3f8:	d150      	bne.n	800a49c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	212c      	movs	r1, #44	; 0x2c
 800a400:	fb01 f303 	mul.w	r3, r1, r3
 800a404:	4413      	add	r3, r2
 800a406:	335c      	adds	r3, #92	; 0x5c
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	1c5a      	adds	r2, r3, #1
 800a40c:	6879      	ldr	r1, [r7, #4]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	202c      	movs	r0, #44	; 0x2c
 800a412:	fb00 f303 	mul.w	r3, r0, r3
 800a416:	440b      	add	r3, r1
 800a418:	335c      	adds	r3, #92	; 0x5c
 800a41a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	212c      	movs	r1, #44	; 0x2c
 800a422:	fb01 f303 	mul.w	r3, r1, r3
 800a426:	4413      	add	r3, r2
 800a428:	335c      	adds	r3, #92	; 0x5c
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d912      	bls.n	800a456 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	212c      	movs	r1, #44	; 0x2c
 800a436:	fb01 f303 	mul.w	r3, r1, r3
 800a43a:	4413      	add	r3, r2
 800a43c:	335c      	adds	r3, #92	; 0x5c
 800a43e:	2200      	movs	r2, #0
 800a440:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	212c      	movs	r1, #44	; 0x2c
 800a448:	fb01 f303 	mul.w	r3, r1, r3
 800a44c:	4413      	add	r3, r2
 800a44e:	3360      	adds	r3, #96	; 0x60
 800a450:	2204      	movs	r2, #4
 800a452:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a454:	e073      	b.n	800a53e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	212c      	movs	r1, #44	; 0x2c
 800a45c:	fb01 f303 	mul.w	r3, r1, r3
 800a460:	4413      	add	r3, r2
 800a462:	3360      	adds	r3, #96	; 0x60
 800a464:	2202      	movs	r2, #2
 800a466:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a47e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a486:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	015a      	lsls	r2, r3, #5
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a494:	461a      	mov	r2, r3
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a49a:	e050      	b.n	800a53e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	212c      	movs	r1, #44	; 0x2c
 800a4a2:	fb01 f303 	mul.w	r3, r1, r3
 800a4a6:	4413      	add	r3, r2
 800a4a8:	3361      	adds	r3, #97	; 0x61
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	2b03      	cmp	r3, #3
 800a4ae:	d122      	bne.n	800a4f6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	212c      	movs	r1, #44	; 0x2c
 800a4b6:	fb01 f303 	mul.w	r3, r1, r3
 800a4ba:	4413      	add	r3, r2
 800a4bc:	3360      	adds	r3, #96	; 0x60
 800a4be:	2202      	movs	r2, #2
 800a4c0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	015a      	lsls	r2, r3, #5
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a4d8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a4e0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	015a      	lsls	r2, r3, #5
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	6013      	str	r3, [r2, #0]
 800a4f4:	e023      	b.n	800a53e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	212c      	movs	r1, #44	; 0x2c
 800a4fc:	fb01 f303 	mul.w	r3, r1, r3
 800a500:	4413      	add	r3, r2
 800a502:	3361      	adds	r3, #97	; 0x61
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	2b07      	cmp	r3, #7
 800a508:	d119      	bne.n	800a53e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	212c      	movs	r1, #44	; 0x2c
 800a510:	fb01 f303 	mul.w	r3, r1, r3
 800a514:	4413      	add	r3, r2
 800a516:	335c      	adds	r3, #92	; 0x5c
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	1c5a      	adds	r2, r3, #1
 800a51c:	6879      	ldr	r1, [r7, #4]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	202c      	movs	r0, #44	; 0x2c
 800a522:	fb00 f303 	mul.w	r3, r0, r3
 800a526:	440b      	add	r3, r1
 800a528:	335c      	adds	r3, #92	; 0x5c
 800a52a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	212c      	movs	r1, #44	; 0x2c
 800a532:	fb01 f303 	mul.w	r3, r1, r3
 800a536:	4413      	add	r3, r2
 800a538:	3360      	adds	r3, #96	; 0x60
 800a53a:	2204      	movs	r2, #4
 800a53c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	015a      	lsls	r2, r3, #5
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	4413      	add	r3, r2
 800a546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a54a:	461a      	mov	r2, r3
 800a54c:	2302      	movs	r3, #2
 800a54e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	b2d9      	uxtb	r1, r3
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	202c      	movs	r0, #44	; 0x2c
 800a55a:	fb00 f303 	mul.w	r3, r0, r3
 800a55e:	4413      	add	r3, r2
 800a560:	3360      	adds	r3, #96	; 0x60
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	461a      	mov	r2, r3
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f005 fc9a 	bl	800fea0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800a56c:	e081      	b.n	800a672 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	015a      	lsls	r2, r3, #5
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	4413      	add	r3, r2
 800a576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	f003 0310 	and.w	r3, r3, #16
 800a580:	2b10      	cmp	r3, #16
 800a582:	d176      	bne.n	800a672 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	212c      	movs	r1, #44	; 0x2c
 800a58a:	fb01 f303 	mul.w	r3, r1, r3
 800a58e:	4413      	add	r3, r2
 800a590:	333f      	adds	r3, #63	; 0x3f
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	2b03      	cmp	r3, #3
 800a596:	d121      	bne.n	800a5dc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	212c      	movs	r1, #44	; 0x2c
 800a59e:	fb01 f303 	mul.w	r3, r1, r3
 800a5a2:	4413      	add	r3, r2
 800a5a4:	335c      	adds	r3, #92	; 0x5c
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	015a      	lsls	r2, r3, #5
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	0151      	lsls	r1, r2, #5
 800a5bc:	693a      	ldr	r2, [r7, #16]
 800a5be:	440a      	add	r2, r1
 800a5c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5c4:	f043 0302 	orr.w	r3, r3, #2
 800a5c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	b2d2      	uxtb	r2, r2
 800a5d2:	4611      	mov	r1, r2
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f003 faa6 	bl	800db26 <USB_HC_Halt>
 800a5da:	e041      	b.n	800a660 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	212c      	movs	r1, #44	; 0x2c
 800a5e2:	fb01 f303 	mul.w	r3, r1, r3
 800a5e6:	4413      	add	r3, r2
 800a5e8:	333f      	adds	r3, #63	; 0x3f
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d009      	beq.n	800a604 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	212c      	movs	r1, #44	; 0x2c
 800a5f6:	fb01 f303 	mul.w	r3, r1, r3
 800a5fa:	4413      	add	r3, r2
 800a5fc:	333f      	adds	r3, #63	; 0x3f
 800a5fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a600:	2b02      	cmp	r3, #2
 800a602:	d12d      	bne.n	800a660 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	212c      	movs	r1, #44	; 0x2c
 800a60a:	fb01 f303 	mul.w	r3, r1, r3
 800a60e:	4413      	add	r3, r2
 800a610:	335c      	adds	r3, #92	; 0x5c
 800a612:	2200      	movs	r2, #0
 800a614:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d120      	bne.n	800a660 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	212c      	movs	r1, #44	; 0x2c
 800a624:	fb01 f303 	mul.w	r3, r1, r3
 800a628:	4413      	add	r3, r2
 800a62a:	3361      	adds	r3, #97	; 0x61
 800a62c:	2203      	movs	r2, #3
 800a62e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	015a      	lsls	r2, r3, #5
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	4413      	add	r3, r2
 800a638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	0151      	lsls	r1, r2, #5
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	440a      	add	r2, r1
 800a646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a64a:	f043 0302 	orr.w	r3, r3, #2
 800a64e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	b2d2      	uxtb	r2, r2
 800a658:	4611      	mov	r1, r2
 800a65a:	4618      	mov	r0, r3
 800a65c:	f003 fa63 	bl	800db26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	015a      	lsls	r2, r3, #5
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	4413      	add	r3, r2
 800a668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a66c:	461a      	mov	r2, r3
 800a66e:	2310      	movs	r3, #16
 800a670:	6093      	str	r3, [r2, #8]
}
 800a672:	bf00      	nop
 800a674:	3718      	adds	r7, #24
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b088      	sub	sp, #32
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
 800a682:	460b      	mov	r3, r1
 800a684:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800a690:	78fb      	ldrb	r3, [r7, #3]
 800a692:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	015a      	lsls	r2, r3, #5
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	4413      	add	r3, r2
 800a69c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	f003 0304 	and.w	r3, r3, #4
 800a6a6:	2b04      	cmp	r3, #4
 800a6a8:	d119      	bne.n	800a6de <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	015a      	lsls	r2, r3, #5
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	2304      	movs	r3, #4
 800a6ba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	015a      	lsls	r2, r3, #5
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	697a      	ldr	r2, [r7, #20]
 800a6cc:	0151      	lsls	r1, r2, #5
 800a6ce:	69ba      	ldr	r2, [r7, #24]
 800a6d0:	440a      	add	r2, r1
 800a6d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6d6:	f043 0302 	orr.w	r3, r3, #2
 800a6da:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800a6dc:	e3ca      	b.n	800ae74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	015a      	lsls	r2, r3, #5
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	f003 0320 	and.w	r3, r3, #32
 800a6f0:	2b20      	cmp	r3, #32
 800a6f2:	d13e      	bne.n	800a772 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	015a      	lsls	r2, r3, #5
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a700:	461a      	mov	r2, r3
 800a702:	2320      	movs	r3, #32
 800a704:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	212c      	movs	r1, #44	; 0x2c
 800a70c:	fb01 f303 	mul.w	r3, r1, r3
 800a710:	4413      	add	r3, r2
 800a712:	333d      	adds	r3, #61	; 0x3d
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	2b01      	cmp	r3, #1
 800a718:	f040 83ac 	bne.w	800ae74 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	212c      	movs	r1, #44	; 0x2c
 800a722:	fb01 f303 	mul.w	r3, r1, r3
 800a726:	4413      	add	r3, r2
 800a728:	333d      	adds	r3, #61	; 0x3d
 800a72a:	2200      	movs	r2, #0
 800a72c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	212c      	movs	r1, #44	; 0x2c
 800a734:	fb01 f303 	mul.w	r3, r1, r3
 800a738:	4413      	add	r3, r2
 800a73a:	3360      	adds	r3, #96	; 0x60
 800a73c:	2202      	movs	r2, #2
 800a73e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	015a      	lsls	r2, r3, #5
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	4413      	add	r3, r2
 800a748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	0151      	lsls	r1, r2, #5
 800a752:	69ba      	ldr	r2, [r7, #24]
 800a754:	440a      	add	r2, r1
 800a756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a75a:	f043 0302 	orr.w	r3, r3, #2
 800a75e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	b2d2      	uxtb	r2, r2
 800a768:	4611      	mov	r1, r2
 800a76a:	4618      	mov	r0, r3
 800a76c:	f003 f9db 	bl	800db26 <USB_HC_Halt>
}
 800a770:	e380      	b.n	800ae74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	015a      	lsls	r2, r3, #5
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	4413      	add	r3, r2
 800a77a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a788:	d122      	bne.n	800a7d0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	015a      	lsls	r2, r3, #5
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	4413      	add	r3, r2
 800a792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	697a      	ldr	r2, [r7, #20]
 800a79a:	0151      	lsls	r1, r2, #5
 800a79c:	69ba      	ldr	r2, [r7, #24]
 800a79e:	440a      	add	r2, r1
 800a7a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7a4:	f043 0302 	orr.w	r3, r3, #2
 800a7a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	697a      	ldr	r2, [r7, #20]
 800a7b0:	b2d2      	uxtb	r2, r2
 800a7b2:	4611      	mov	r1, r2
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f003 f9b6 	bl	800db26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	015a      	lsls	r2, r3, #5
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7cc:	6093      	str	r3, [r2, #8]
}
 800a7ce:	e351      	b.n	800ae74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	015a      	lsls	r2, r3, #5
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f003 0301 	and.w	r3, r3, #1
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d150      	bne.n	800a888 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	212c      	movs	r1, #44	; 0x2c
 800a7ec:	fb01 f303 	mul.w	r3, r1, r3
 800a7f0:	4413      	add	r3, r2
 800a7f2:	335c      	adds	r3, #92	; 0x5c
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	015a      	lsls	r2, r3, #5
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	4413      	add	r3, r2
 800a800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a80a:	2b40      	cmp	r3, #64	; 0x40
 800a80c:	d111      	bne.n	800a832 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	212c      	movs	r1, #44	; 0x2c
 800a814:	fb01 f303 	mul.w	r3, r1, r3
 800a818:	4413      	add	r3, r2
 800a81a:	333d      	adds	r3, #61	; 0x3d
 800a81c:	2201      	movs	r2, #1
 800a81e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	4413      	add	r3, r2
 800a828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a82c:	461a      	mov	r2, r3
 800a82e:	2340      	movs	r3, #64	; 0x40
 800a830:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	015a      	lsls	r2, r3, #5
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	4413      	add	r3, r2
 800a83a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	697a      	ldr	r2, [r7, #20]
 800a842:	0151      	lsls	r1, r2, #5
 800a844:	69ba      	ldr	r2, [r7, #24]
 800a846:	440a      	add	r2, r1
 800a848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a84c:	f043 0302 	orr.w	r3, r3, #2
 800a850:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	697a      	ldr	r2, [r7, #20]
 800a858:	b2d2      	uxtb	r2, r2
 800a85a:	4611      	mov	r1, r2
 800a85c:	4618      	mov	r0, r3
 800a85e:	f003 f962 	bl	800db26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	015a      	lsls	r2, r3, #5
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	4413      	add	r3, r2
 800a86a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a86e:	461a      	mov	r2, r3
 800a870:	2301      	movs	r3, #1
 800a872:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	212c      	movs	r1, #44	; 0x2c
 800a87a:	fb01 f303 	mul.w	r3, r1, r3
 800a87e:	4413      	add	r3, r2
 800a880:	3361      	adds	r3, #97	; 0x61
 800a882:	2201      	movs	r2, #1
 800a884:	701a      	strb	r2, [r3, #0]
}
 800a886:	e2f5      	b.n	800ae74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	015a      	lsls	r2, r3, #5
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	4413      	add	r3, r2
 800a890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a89a:	2b40      	cmp	r3, #64	; 0x40
 800a89c:	d13c      	bne.n	800a918 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	212c      	movs	r1, #44	; 0x2c
 800a8a4:	fb01 f303 	mul.w	r3, r1, r3
 800a8a8:	4413      	add	r3, r2
 800a8aa:	3361      	adds	r3, #97	; 0x61
 800a8ac:	2204      	movs	r2, #4
 800a8ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	212c      	movs	r1, #44	; 0x2c
 800a8b6:	fb01 f303 	mul.w	r3, r1, r3
 800a8ba:	4413      	add	r3, r2
 800a8bc:	333d      	adds	r3, #61	; 0x3d
 800a8be:	2201      	movs	r2, #1
 800a8c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	212c      	movs	r1, #44	; 0x2c
 800a8c8:	fb01 f303 	mul.w	r3, r1, r3
 800a8cc:	4413      	add	r3, r2
 800a8ce:	335c      	adds	r3, #92	; 0x5c
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	015a      	lsls	r2, r3, #5
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	0151      	lsls	r1, r2, #5
 800a8e6:	69ba      	ldr	r2, [r7, #24]
 800a8e8:	440a      	add	r2, r1
 800a8ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8ee:	f043 0302 	orr.w	r3, r3, #2
 800a8f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	697a      	ldr	r2, [r7, #20]
 800a8fa:	b2d2      	uxtb	r2, r2
 800a8fc:	4611      	mov	r1, r2
 800a8fe:	4618      	mov	r0, r3
 800a900:	f003 f911 	bl	800db26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	015a      	lsls	r2, r3, #5
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	4413      	add	r3, r2
 800a90c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a910:	461a      	mov	r2, r3
 800a912:	2340      	movs	r3, #64	; 0x40
 800a914:	6093      	str	r3, [r2, #8]
}
 800a916:	e2ad      	b.n	800ae74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	015a      	lsls	r2, r3, #5
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	4413      	add	r3, r2
 800a920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	f003 0308 	and.w	r3, r3, #8
 800a92a:	2b08      	cmp	r3, #8
 800a92c:	d12a      	bne.n	800a984 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	015a      	lsls	r2, r3, #5
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	4413      	add	r3, r2
 800a936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a93a:	461a      	mov	r2, r3
 800a93c:	2308      	movs	r3, #8
 800a93e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	015a      	lsls	r2, r3, #5
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	4413      	add	r3, r2
 800a948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	697a      	ldr	r2, [r7, #20]
 800a950:	0151      	lsls	r1, r2, #5
 800a952:	69ba      	ldr	r2, [r7, #24]
 800a954:	440a      	add	r2, r1
 800a956:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a95a:	f043 0302 	orr.w	r3, r3, #2
 800a95e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	697a      	ldr	r2, [r7, #20]
 800a966:	b2d2      	uxtb	r2, r2
 800a968:	4611      	mov	r1, r2
 800a96a:	4618      	mov	r0, r3
 800a96c:	f003 f8db 	bl	800db26 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	212c      	movs	r1, #44	; 0x2c
 800a976:	fb01 f303 	mul.w	r3, r1, r3
 800a97a:	4413      	add	r3, r2
 800a97c:	3361      	adds	r3, #97	; 0x61
 800a97e:	2205      	movs	r2, #5
 800a980:	701a      	strb	r2, [r3, #0]
}
 800a982:	e277      	b.n	800ae74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	015a      	lsls	r2, r3, #5
 800a988:	69bb      	ldr	r3, [r7, #24]
 800a98a:	4413      	add	r3, r2
 800a98c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	f003 0310 	and.w	r3, r3, #16
 800a996:	2b10      	cmp	r3, #16
 800a998:	d150      	bne.n	800aa3c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	212c      	movs	r1, #44	; 0x2c
 800a9a0:	fb01 f303 	mul.w	r3, r1, r3
 800a9a4:	4413      	add	r3, r2
 800a9a6:	335c      	adds	r3, #92	; 0x5c
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	212c      	movs	r1, #44	; 0x2c
 800a9b2:	fb01 f303 	mul.w	r3, r1, r3
 800a9b6:	4413      	add	r3, r2
 800a9b8:	3361      	adds	r3, #97	; 0x61
 800a9ba:	2203      	movs	r2, #3
 800a9bc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	212c      	movs	r1, #44	; 0x2c
 800a9c4:	fb01 f303 	mul.w	r3, r1, r3
 800a9c8:	4413      	add	r3, r2
 800a9ca:	333d      	adds	r3, #61	; 0x3d
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d112      	bne.n	800a9f8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	212c      	movs	r1, #44	; 0x2c
 800a9d8:	fb01 f303 	mul.w	r3, r1, r3
 800a9dc:	4413      	add	r3, r2
 800a9de:	333c      	adds	r3, #60	; 0x3c
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d108      	bne.n	800a9f8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	212c      	movs	r1, #44	; 0x2c
 800a9ec:	fb01 f303 	mul.w	r3, r1, r3
 800a9f0:	4413      	add	r3, r2
 800a9f2:	333d      	adds	r3, #61	; 0x3d
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	015a      	lsls	r2, r3, #5
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	4413      	add	r3, r2
 800aa00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	697a      	ldr	r2, [r7, #20]
 800aa08:	0151      	lsls	r1, r2, #5
 800aa0a:	69ba      	ldr	r2, [r7, #24]
 800aa0c:	440a      	add	r2, r1
 800aa0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa12:	f043 0302 	orr.w	r3, r3, #2
 800aa16:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	697a      	ldr	r2, [r7, #20]
 800aa1e:	b2d2      	uxtb	r2, r2
 800aa20:	4611      	mov	r1, r2
 800aa22:	4618      	mov	r0, r3
 800aa24:	f003 f87f 	bl	800db26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	015a      	lsls	r2, r3, #5
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	4413      	add	r3, r2
 800aa30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa34:	461a      	mov	r2, r3
 800aa36:	2310      	movs	r3, #16
 800aa38:	6093      	str	r3, [r2, #8]
}
 800aa3a:	e21b      	b.n	800ae74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	015a      	lsls	r2, r3, #5
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	4413      	add	r3, r2
 800aa44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa4e:	2b80      	cmp	r3, #128	; 0x80
 800aa50:	d174      	bne.n	800ab3c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	691b      	ldr	r3, [r3, #16]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d121      	bne.n	800aa9e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	212c      	movs	r1, #44	; 0x2c
 800aa60:	fb01 f303 	mul.w	r3, r1, r3
 800aa64:	4413      	add	r3, r2
 800aa66:	3361      	adds	r3, #97	; 0x61
 800aa68:	2206      	movs	r2, #6
 800aa6a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	015a      	lsls	r2, r3, #5
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	697a      	ldr	r2, [r7, #20]
 800aa7c:	0151      	lsls	r1, r2, #5
 800aa7e:	69ba      	ldr	r2, [r7, #24]
 800aa80:	440a      	add	r2, r1
 800aa82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa86:	f043 0302 	orr.w	r3, r3, #2
 800aa8a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	697a      	ldr	r2, [r7, #20]
 800aa92:	b2d2      	uxtb	r2, r2
 800aa94:	4611      	mov	r1, r2
 800aa96:	4618      	mov	r0, r3
 800aa98:	f003 f845 	bl	800db26 <USB_HC_Halt>
 800aa9c:	e044      	b.n	800ab28 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	212c      	movs	r1, #44	; 0x2c
 800aaa4:	fb01 f303 	mul.w	r3, r1, r3
 800aaa8:	4413      	add	r3, r2
 800aaaa:	335c      	adds	r3, #92	; 0x5c
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	1c5a      	adds	r2, r3, #1
 800aab0:	6879      	ldr	r1, [r7, #4]
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	202c      	movs	r0, #44	; 0x2c
 800aab6:	fb00 f303 	mul.w	r3, r0, r3
 800aaba:	440b      	add	r3, r1
 800aabc:	335c      	adds	r3, #92	; 0x5c
 800aabe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	212c      	movs	r1, #44	; 0x2c
 800aac6:	fb01 f303 	mul.w	r3, r1, r3
 800aaca:	4413      	add	r3, r2
 800aacc:	335c      	adds	r3, #92	; 0x5c
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b02      	cmp	r3, #2
 800aad2:	d920      	bls.n	800ab16 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	212c      	movs	r1, #44	; 0x2c
 800aada:	fb01 f303 	mul.w	r3, r1, r3
 800aade:	4413      	add	r3, r2
 800aae0:	335c      	adds	r3, #92	; 0x5c
 800aae2:	2200      	movs	r2, #0
 800aae4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	212c      	movs	r1, #44	; 0x2c
 800aaec:	fb01 f303 	mul.w	r3, r1, r3
 800aaf0:	4413      	add	r3, r2
 800aaf2:	3360      	adds	r3, #96	; 0x60
 800aaf4:	2204      	movs	r2, #4
 800aaf6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	b2d9      	uxtb	r1, r3
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	202c      	movs	r0, #44	; 0x2c
 800ab02:	fb00 f303 	mul.w	r3, r0, r3
 800ab06:	4413      	add	r3, r2
 800ab08:	3360      	adds	r3, #96	; 0x60
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f005 f9c6 	bl	800fea0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800ab14:	e008      	b.n	800ab28 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	212c      	movs	r1, #44	; 0x2c
 800ab1c:	fb01 f303 	mul.w	r3, r1, r3
 800ab20:	4413      	add	r3, r2
 800ab22:	3360      	adds	r3, #96	; 0x60
 800ab24:	2202      	movs	r2, #2
 800ab26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	015a      	lsls	r2, r3, #5
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	4413      	add	r3, r2
 800ab30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab34:	461a      	mov	r2, r3
 800ab36:	2380      	movs	r3, #128	; 0x80
 800ab38:	6093      	str	r3, [r2, #8]
}
 800ab3a:	e19b      	b.n	800ae74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	015a      	lsls	r2, r3, #5
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	4413      	add	r3, r2
 800ab44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab52:	d134      	bne.n	800abbe <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	015a      	lsls	r2, r3, #5
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	0151      	lsls	r1, r2, #5
 800ab66:	69ba      	ldr	r2, [r7, #24]
 800ab68:	440a      	add	r2, r1
 800ab6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab6e:	f043 0302 	orr.w	r3, r3, #2
 800ab72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	697a      	ldr	r2, [r7, #20]
 800ab7a:	b2d2      	uxtb	r2, r2
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f002 ffd1 	bl	800db26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	015a      	lsls	r2, r3, #5
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab90:	461a      	mov	r2, r3
 800ab92:	2310      	movs	r3, #16
 800ab94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	015a      	lsls	r2, r3, #5
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aba2:	461a      	mov	r2, r3
 800aba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aba8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	212c      	movs	r1, #44	; 0x2c
 800abb0:	fb01 f303 	mul.w	r3, r1, r3
 800abb4:	4413      	add	r3, r2
 800abb6:	3361      	adds	r3, #97	; 0x61
 800abb8:	2208      	movs	r2, #8
 800abba:	701a      	strb	r2, [r3, #0]
}
 800abbc:	e15a      	b.n	800ae74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	015a      	lsls	r2, r3, #5
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	4413      	add	r3, r2
 800abc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	f003 0302 	and.w	r3, r3, #2
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	f040 814f 	bne.w	800ae74 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	015a      	lsls	r2, r3, #5
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	4413      	add	r3, r2
 800abde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	0151      	lsls	r1, r2, #5
 800abe8:	69ba      	ldr	r2, [r7, #24]
 800abea:	440a      	add	r2, r1
 800abec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abf0:	f023 0302 	bic.w	r3, r3, #2
 800abf4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	212c      	movs	r1, #44	; 0x2c
 800abfc:	fb01 f303 	mul.w	r3, r1, r3
 800ac00:	4413      	add	r3, r2
 800ac02:	3361      	adds	r3, #97	; 0x61
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d17d      	bne.n	800ad06 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	212c      	movs	r1, #44	; 0x2c
 800ac10:	fb01 f303 	mul.w	r3, r1, r3
 800ac14:	4413      	add	r3, r2
 800ac16:	3360      	adds	r3, #96	; 0x60
 800ac18:	2201      	movs	r2, #1
 800ac1a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	212c      	movs	r1, #44	; 0x2c
 800ac22:	fb01 f303 	mul.w	r3, r1, r3
 800ac26:	4413      	add	r3, r2
 800ac28:	333f      	adds	r3, #63	; 0x3f
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d00a      	beq.n	800ac46 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	212c      	movs	r1, #44	; 0x2c
 800ac36:	fb01 f303 	mul.w	r3, r1, r3
 800ac3a:	4413      	add	r3, r2
 800ac3c:	333f      	adds	r3, #63	; 0x3f
 800ac3e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800ac40:	2b03      	cmp	r3, #3
 800ac42:	f040 8100 	bne.w	800ae46 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d113      	bne.n	800ac76 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	212c      	movs	r1, #44	; 0x2c
 800ac54:	fb01 f303 	mul.w	r3, r1, r3
 800ac58:	4413      	add	r3, r2
 800ac5a:	3355      	adds	r3, #85	; 0x55
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	f083 0301 	eor.w	r3, r3, #1
 800ac62:	b2d8      	uxtb	r0, r3
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	212c      	movs	r1, #44	; 0x2c
 800ac6a:	fb01 f303 	mul.w	r3, r1, r3
 800ac6e:	4413      	add	r3, r2
 800ac70:	3355      	adds	r3, #85	; 0x55
 800ac72:	4602      	mov	r2, r0
 800ac74:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	f040 80e3 	bne.w	800ae46 <HCD_HC_OUT_IRQHandler+0x7cc>
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	212c      	movs	r1, #44	; 0x2c
 800ac86:	fb01 f303 	mul.w	r3, r1, r3
 800ac8a:	4413      	add	r3, r2
 800ac8c:	334c      	adds	r3, #76	; 0x4c
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f000 80d8 	beq.w	800ae46 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	212c      	movs	r1, #44	; 0x2c
 800ac9c:	fb01 f303 	mul.w	r3, r1, r3
 800aca0:	4413      	add	r3, r2
 800aca2:	334c      	adds	r3, #76	; 0x4c
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6879      	ldr	r1, [r7, #4]
 800aca8:	697a      	ldr	r2, [r7, #20]
 800acaa:	202c      	movs	r0, #44	; 0x2c
 800acac:	fb00 f202 	mul.w	r2, r0, r2
 800acb0:	440a      	add	r2, r1
 800acb2:	3240      	adds	r2, #64	; 0x40
 800acb4:	8812      	ldrh	r2, [r2, #0]
 800acb6:	4413      	add	r3, r2
 800acb8:	3b01      	subs	r3, #1
 800acba:	6879      	ldr	r1, [r7, #4]
 800acbc:	697a      	ldr	r2, [r7, #20]
 800acbe:	202c      	movs	r0, #44	; 0x2c
 800acc0:	fb00 f202 	mul.w	r2, r0, r2
 800acc4:	440a      	add	r2, r1
 800acc6:	3240      	adds	r2, #64	; 0x40
 800acc8:	8812      	ldrh	r2, [r2, #0]
 800acca:	fbb3 f3f2 	udiv	r3, r3, r2
 800acce:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f003 0301 	and.w	r3, r3, #1
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 80b5 	beq.w	800ae46 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	212c      	movs	r1, #44	; 0x2c
 800ace2:	fb01 f303 	mul.w	r3, r1, r3
 800ace6:	4413      	add	r3, r2
 800ace8:	3355      	adds	r3, #85	; 0x55
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	f083 0301 	eor.w	r3, r3, #1
 800acf0:	b2d8      	uxtb	r0, r3
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	212c      	movs	r1, #44	; 0x2c
 800acf8:	fb01 f303 	mul.w	r3, r1, r3
 800acfc:	4413      	add	r3, r2
 800acfe:	3355      	adds	r3, #85	; 0x55
 800ad00:	4602      	mov	r2, r0
 800ad02:	701a      	strb	r2, [r3, #0]
 800ad04:	e09f      	b.n	800ae46 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	212c      	movs	r1, #44	; 0x2c
 800ad0c:	fb01 f303 	mul.w	r3, r1, r3
 800ad10:	4413      	add	r3, r2
 800ad12:	3361      	adds	r3, #97	; 0x61
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	2b03      	cmp	r3, #3
 800ad18:	d109      	bne.n	800ad2e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	212c      	movs	r1, #44	; 0x2c
 800ad20:	fb01 f303 	mul.w	r3, r1, r3
 800ad24:	4413      	add	r3, r2
 800ad26:	3360      	adds	r3, #96	; 0x60
 800ad28:	2202      	movs	r2, #2
 800ad2a:	701a      	strb	r2, [r3, #0]
 800ad2c:	e08b      	b.n	800ae46 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	212c      	movs	r1, #44	; 0x2c
 800ad34:	fb01 f303 	mul.w	r3, r1, r3
 800ad38:	4413      	add	r3, r2
 800ad3a:	3361      	adds	r3, #97	; 0x61
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	2b04      	cmp	r3, #4
 800ad40:	d109      	bne.n	800ad56 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	212c      	movs	r1, #44	; 0x2c
 800ad48:	fb01 f303 	mul.w	r3, r1, r3
 800ad4c:	4413      	add	r3, r2
 800ad4e:	3360      	adds	r3, #96	; 0x60
 800ad50:	2202      	movs	r2, #2
 800ad52:	701a      	strb	r2, [r3, #0]
 800ad54:	e077      	b.n	800ae46 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	212c      	movs	r1, #44	; 0x2c
 800ad5c:	fb01 f303 	mul.w	r3, r1, r3
 800ad60:	4413      	add	r3, r2
 800ad62:	3361      	adds	r3, #97	; 0x61
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	2b05      	cmp	r3, #5
 800ad68:	d109      	bne.n	800ad7e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	212c      	movs	r1, #44	; 0x2c
 800ad70:	fb01 f303 	mul.w	r3, r1, r3
 800ad74:	4413      	add	r3, r2
 800ad76:	3360      	adds	r3, #96	; 0x60
 800ad78:	2205      	movs	r2, #5
 800ad7a:	701a      	strb	r2, [r3, #0]
 800ad7c:	e063      	b.n	800ae46 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	212c      	movs	r1, #44	; 0x2c
 800ad84:	fb01 f303 	mul.w	r3, r1, r3
 800ad88:	4413      	add	r3, r2
 800ad8a:	3361      	adds	r3, #97	; 0x61
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	2b06      	cmp	r3, #6
 800ad90:	d009      	beq.n	800ada6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	212c      	movs	r1, #44	; 0x2c
 800ad98:	fb01 f303 	mul.w	r3, r1, r3
 800ad9c:	4413      	add	r3, r2
 800ad9e:	3361      	adds	r3, #97	; 0x61
 800ada0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800ada2:	2b08      	cmp	r3, #8
 800ada4:	d14f      	bne.n	800ae46 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	212c      	movs	r1, #44	; 0x2c
 800adac:	fb01 f303 	mul.w	r3, r1, r3
 800adb0:	4413      	add	r3, r2
 800adb2:	335c      	adds	r3, #92	; 0x5c
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	1c5a      	adds	r2, r3, #1
 800adb8:	6879      	ldr	r1, [r7, #4]
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	202c      	movs	r0, #44	; 0x2c
 800adbe:	fb00 f303 	mul.w	r3, r0, r3
 800adc2:	440b      	add	r3, r1
 800adc4:	335c      	adds	r3, #92	; 0x5c
 800adc6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	212c      	movs	r1, #44	; 0x2c
 800adce:	fb01 f303 	mul.w	r3, r1, r3
 800add2:	4413      	add	r3, r2
 800add4:	335c      	adds	r3, #92	; 0x5c
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b02      	cmp	r3, #2
 800adda:	d912      	bls.n	800ae02 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	212c      	movs	r1, #44	; 0x2c
 800ade2:	fb01 f303 	mul.w	r3, r1, r3
 800ade6:	4413      	add	r3, r2
 800ade8:	335c      	adds	r3, #92	; 0x5c
 800adea:	2200      	movs	r2, #0
 800adec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	212c      	movs	r1, #44	; 0x2c
 800adf4:	fb01 f303 	mul.w	r3, r1, r3
 800adf8:	4413      	add	r3, r2
 800adfa:	3360      	adds	r3, #96	; 0x60
 800adfc:	2204      	movs	r2, #4
 800adfe:	701a      	strb	r2, [r3, #0]
 800ae00:	e021      	b.n	800ae46 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	212c      	movs	r1, #44	; 0x2c
 800ae08:	fb01 f303 	mul.w	r3, r1, r3
 800ae0c:	4413      	add	r3, r2
 800ae0e:	3360      	adds	r3, #96	; 0x60
 800ae10:	2202      	movs	r2, #2
 800ae12:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	015a      	lsls	r2, r3, #5
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ae2a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae32:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	015a      	lsls	r2, r3, #5
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae40:	461a      	mov	r2, r3
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	015a      	lsls	r2, r3, #5
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae52:	461a      	mov	r2, r3
 800ae54:	2302      	movs	r3, #2
 800ae56:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	b2d9      	uxtb	r1, r3
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	202c      	movs	r0, #44	; 0x2c
 800ae62:	fb00 f303 	mul.w	r3, r0, r3
 800ae66:	4413      	add	r3, r2
 800ae68:	3360      	adds	r3, #96	; 0x60
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f005 f816 	bl	800fea0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800ae74:	bf00      	nop
 800ae76:	3720      	adds	r7, #32
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b08a      	sub	sp, #40	; 0x28
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	6a1b      	ldr	r3, [r3, #32]
 800ae94:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	f003 030f 	and.w	r3, r3, #15
 800ae9c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	0c5b      	lsrs	r3, r3, #17
 800aea2:	f003 030f 	and.w	r3, r3, #15
 800aea6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	091b      	lsrs	r3, r3, #4
 800aeac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aeb0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d004      	beq.n	800aec2 <HCD_RXQLVL_IRQHandler+0x46>
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	2b05      	cmp	r3, #5
 800aebc:	f000 80a9 	beq.w	800b012 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800aec0:	e0aa      	b.n	800b018 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f000 80a6 	beq.w	800b016 <HCD_RXQLVL_IRQHandler+0x19a>
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	212c      	movs	r1, #44	; 0x2c
 800aed0:	fb01 f303 	mul.w	r3, r1, r3
 800aed4:	4413      	add	r3, r2
 800aed6:	3344      	adds	r3, #68	; 0x44
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f000 809b 	beq.w	800b016 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	69bb      	ldr	r3, [r7, #24]
 800aee4:	212c      	movs	r1, #44	; 0x2c
 800aee6:	fb01 f303 	mul.w	r3, r1, r3
 800aeea:	4413      	add	r3, r2
 800aeec:	3350      	adds	r3, #80	; 0x50
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	441a      	add	r2, r3
 800aef4:	6879      	ldr	r1, [r7, #4]
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	202c      	movs	r0, #44	; 0x2c
 800aefa:	fb00 f303 	mul.w	r3, r0, r3
 800aefe:	440b      	add	r3, r1
 800af00:	334c      	adds	r3, #76	; 0x4c
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	429a      	cmp	r2, r3
 800af06:	d87a      	bhi.n	800affe <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6818      	ldr	r0, [r3, #0]
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	212c      	movs	r1, #44	; 0x2c
 800af12:	fb01 f303 	mul.w	r3, r1, r3
 800af16:	4413      	add	r3, r2
 800af18:	3344      	adds	r3, #68	; 0x44
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	693a      	ldr	r2, [r7, #16]
 800af1e:	b292      	uxth	r2, r2
 800af20:	4619      	mov	r1, r3
 800af22:	f002 f979 	bl	800d218 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	212c      	movs	r1, #44	; 0x2c
 800af2c:	fb01 f303 	mul.w	r3, r1, r3
 800af30:	4413      	add	r3, r2
 800af32:	3344      	adds	r3, #68	; 0x44
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	441a      	add	r2, r3
 800af3a:	6879      	ldr	r1, [r7, #4]
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	202c      	movs	r0, #44	; 0x2c
 800af40:	fb00 f303 	mul.w	r3, r0, r3
 800af44:	440b      	add	r3, r1
 800af46:	3344      	adds	r3, #68	; 0x44
 800af48:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	69bb      	ldr	r3, [r7, #24]
 800af4e:	212c      	movs	r1, #44	; 0x2c
 800af50:	fb01 f303 	mul.w	r3, r1, r3
 800af54:	4413      	add	r3, r2
 800af56:	3350      	adds	r3, #80	; 0x50
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	441a      	add	r2, r3
 800af5e:	6879      	ldr	r1, [r7, #4]
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	202c      	movs	r0, #44	; 0x2c
 800af64:	fb00 f303 	mul.w	r3, r0, r3
 800af68:	440b      	add	r3, r1
 800af6a:	3350      	adds	r3, #80	; 0x50
 800af6c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	015a      	lsls	r2, r3, #5
 800af72:	6a3b      	ldr	r3, [r7, #32]
 800af74:	4413      	add	r3, r2
 800af76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	0cdb      	lsrs	r3, r3, #19
 800af7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af82:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	212c      	movs	r1, #44	; 0x2c
 800af8a:	fb01 f303 	mul.w	r3, r1, r3
 800af8e:	4413      	add	r3, r2
 800af90:	3340      	adds	r3, #64	; 0x40
 800af92:	881b      	ldrh	r3, [r3, #0]
 800af94:	461a      	mov	r2, r3
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	4293      	cmp	r3, r2
 800af9a:	d13c      	bne.n	800b016 <HCD_RXQLVL_IRQHandler+0x19a>
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d039      	beq.n	800b016 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	015a      	lsls	r2, r3, #5
 800afa6:	6a3b      	ldr	r3, [r7, #32]
 800afa8:	4413      	add	r3, r2
 800afaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800afb8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800afc0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	015a      	lsls	r2, r3, #5
 800afc6:	6a3b      	ldr	r3, [r7, #32]
 800afc8:	4413      	add	r3, r2
 800afca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afce:	461a      	mov	r2, r3
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	212c      	movs	r1, #44	; 0x2c
 800afda:	fb01 f303 	mul.w	r3, r1, r3
 800afde:	4413      	add	r3, r2
 800afe0:	3354      	adds	r3, #84	; 0x54
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	f083 0301 	eor.w	r3, r3, #1
 800afe8:	b2d8      	uxtb	r0, r3
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	212c      	movs	r1, #44	; 0x2c
 800aff0:	fb01 f303 	mul.w	r3, r1, r3
 800aff4:	4413      	add	r3, r2
 800aff6:	3354      	adds	r3, #84	; 0x54
 800aff8:	4602      	mov	r2, r0
 800affa:	701a      	strb	r2, [r3, #0]
      break;
 800affc:	e00b      	b.n	800b016 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	212c      	movs	r1, #44	; 0x2c
 800b004:	fb01 f303 	mul.w	r3, r1, r3
 800b008:	4413      	add	r3, r2
 800b00a:	3360      	adds	r3, #96	; 0x60
 800b00c:	2204      	movs	r2, #4
 800b00e:	701a      	strb	r2, [r3, #0]
      break;
 800b010:	e001      	b.n	800b016 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800b012:	bf00      	nop
 800b014:	e000      	b.n	800b018 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800b016:	bf00      	nop
  }
}
 800b018:	bf00      	nop
 800b01a:	3728      	adds	r7, #40	; 0x28
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b04c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f003 0302 	and.w	r3, r3, #2
 800b054:	2b02      	cmp	r3, #2
 800b056:	d10b      	bne.n	800b070 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f003 0301 	and.w	r3, r3, #1
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d102      	bne.n	800b068 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f004 ff00 	bl	800fe68 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	f043 0302 	orr.w	r3, r3, #2
 800b06e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f003 0308 	and.w	r3, r3, #8
 800b076:	2b08      	cmp	r3, #8
 800b078:	d132      	bne.n	800b0e0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	f043 0308 	orr.w	r3, r3, #8
 800b080:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f003 0304 	and.w	r3, r3, #4
 800b088:	2b04      	cmp	r3, #4
 800b08a:	d126      	bne.n	800b0da <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	2b02      	cmp	r3, #2
 800b092:	d113      	bne.n	800b0bc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800b09a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b09e:	d106      	bne.n	800b0ae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2102      	movs	r1, #2
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f002 fa16 	bl	800d4d8 <USB_InitFSLSPClkSel>
 800b0ac:	e011      	b.n	800b0d2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2101      	movs	r1, #1
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f002 fa0f 	bl	800d4d8 <USB_InitFSLSPClkSel>
 800b0ba:	e00a      	b.n	800b0d2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d106      	bne.n	800b0d2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b0d0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f004 fef2 	bl	800febc <HAL_HCD_PortEnabled_Callback>
 800b0d8:	e002      	b.n	800b0e0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f004 fefc 	bl	800fed8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f003 0320 	and.w	r3, r3, #32
 800b0e6:	2b20      	cmp	r3, #32
 800b0e8:	d103      	bne.n	800b0f2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	f043 0320 	orr.w	r3, r3, #32
 800b0f0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	6013      	str	r3, [r2, #0]
}
 800b0fe:	bf00      	nop
 800b100:	3718      	adds	r7, #24
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
	...

0800b108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d101      	bne.n	800b11a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	e12b      	b.n	800b372 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b120:	b2db      	uxtb	r3, r3
 800b122:	2b00      	cmp	r3, #0
 800b124:	d106      	bne.n	800b134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f7fd fc7c 	bl	8008a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2224      	movs	r2, #36	; 0x24
 800b138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f022 0201 	bic.w	r2, r2, #1
 800b14a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b15a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b16a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b16c:	f001 f9fc 	bl	800c568 <HAL_RCC_GetPCLK1Freq>
 800b170:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	4a81      	ldr	r2, [pc, #516]	; (800b37c <HAL_I2C_Init+0x274>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d807      	bhi.n	800b18c <HAL_I2C_Init+0x84>
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	4a80      	ldr	r2, [pc, #512]	; (800b380 <HAL_I2C_Init+0x278>)
 800b180:	4293      	cmp	r3, r2
 800b182:	bf94      	ite	ls
 800b184:	2301      	movls	r3, #1
 800b186:	2300      	movhi	r3, #0
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	e006      	b.n	800b19a <HAL_I2C_Init+0x92>
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	4a7d      	ldr	r2, [pc, #500]	; (800b384 <HAL_I2C_Init+0x27c>)
 800b190:	4293      	cmp	r3, r2
 800b192:	bf94      	ite	ls
 800b194:	2301      	movls	r3, #1
 800b196:	2300      	movhi	r3, #0
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d001      	beq.n	800b1a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e0e7      	b.n	800b372 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	4a78      	ldr	r2, [pc, #480]	; (800b388 <HAL_I2C_Init+0x280>)
 800b1a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1aa:	0c9b      	lsrs	r3, r3, #18
 800b1ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	430a      	orrs	r2, r1
 800b1c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	6a1b      	ldr	r3, [r3, #32]
 800b1c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	4a6a      	ldr	r2, [pc, #424]	; (800b37c <HAL_I2C_Init+0x274>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d802      	bhi.n	800b1dc <HAL_I2C_Init+0xd4>
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	e009      	b.n	800b1f0 <HAL_I2C_Init+0xe8>
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b1e2:	fb02 f303 	mul.w	r3, r2, r3
 800b1e6:	4a69      	ldr	r2, [pc, #420]	; (800b38c <HAL_I2C_Init+0x284>)
 800b1e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ec:	099b      	lsrs	r3, r3, #6
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	6812      	ldr	r2, [r2, #0]
 800b1f4:	430b      	orrs	r3, r1
 800b1f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	69db      	ldr	r3, [r3, #28]
 800b1fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b202:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	495c      	ldr	r1, [pc, #368]	; (800b37c <HAL_I2C_Init+0x274>)
 800b20c:	428b      	cmp	r3, r1
 800b20e:	d819      	bhi.n	800b244 <HAL_I2C_Init+0x13c>
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	1e59      	subs	r1, r3, #1
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	005b      	lsls	r3, r3, #1
 800b21a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b21e:	1c59      	adds	r1, r3, #1
 800b220:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b224:	400b      	ands	r3, r1
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00a      	beq.n	800b240 <HAL_I2C_Init+0x138>
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	1e59      	subs	r1, r3, #1
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	005b      	lsls	r3, r3, #1
 800b234:	fbb1 f3f3 	udiv	r3, r1, r3
 800b238:	3301      	adds	r3, #1
 800b23a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b23e:	e051      	b.n	800b2e4 <HAL_I2C_Init+0x1dc>
 800b240:	2304      	movs	r3, #4
 800b242:	e04f      	b.n	800b2e4 <HAL_I2C_Init+0x1dc>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d111      	bne.n	800b270 <HAL_I2C_Init+0x168>
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	1e58      	subs	r0, r3, #1
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6859      	ldr	r1, [r3, #4]
 800b254:	460b      	mov	r3, r1
 800b256:	005b      	lsls	r3, r3, #1
 800b258:	440b      	add	r3, r1
 800b25a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b25e:	3301      	adds	r3, #1
 800b260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b264:	2b00      	cmp	r3, #0
 800b266:	bf0c      	ite	eq
 800b268:	2301      	moveq	r3, #1
 800b26a:	2300      	movne	r3, #0
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	e012      	b.n	800b296 <HAL_I2C_Init+0x18e>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	1e58      	subs	r0, r3, #1
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6859      	ldr	r1, [r3, #4]
 800b278:	460b      	mov	r3, r1
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	440b      	add	r3, r1
 800b27e:	0099      	lsls	r1, r3, #2
 800b280:	440b      	add	r3, r1
 800b282:	fbb0 f3f3 	udiv	r3, r0, r3
 800b286:	3301      	adds	r3, #1
 800b288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	bf0c      	ite	eq
 800b290:	2301      	moveq	r3, #1
 800b292:	2300      	movne	r3, #0
 800b294:	b2db      	uxtb	r3, r3
 800b296:	2b00      	cmp	r3, #0
 800b298:	d001      	beq.n	800b29e <HAL_I2C_Init+0x196>
 800b29a:	2301      	movs	r3, #1
 800b29c:	e022      	b.n	800b2e4 <HAL_I2C_Init+0x1dc>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d10e      	bne.n	800b2c4 <HAL_I2C_Init+0x1bc>
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	1e58      	subs	r0, r3, #1
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6859      	ldr	r1, [r3, #4]
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	005b      	lsls	r3, r3, #1
 800b2b2:	440b      	add	r3, r1
 800b2b4:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2c2:	e00f      	b.n	800b2e4 <HAL_I2C_Init+0x1dc>
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	1e58      	subs	r0, r3, #1
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6859      	ldr	r1, [r3, #4]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	440b      	add	r3, r1
 800b2d2:	0099      	lsls	r1, r3, #2
 800b2d4:	440b      	add	r3, r1
 800b2d6:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2da:	3301      	adds	r3, #1
 800b2dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b2e4:	6879      	ldr	r1, [r7, #4]
 800b2e6:	6809      	ldr	r1, [r1, #0]
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	69da      	ldr	r2, [r3, #28]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	431a      	orrs	r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	430a      	orrs	r2, r1
 800b306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b312:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	6911      	ldr	r1, [r2, #16]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	68d2      	ldr	r2, [r2, #12]
 800b31e:	4311      	orrs	r1, r2
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	6812      	ldr	r2, [r2, #0]
 800b324:	430b      	orrs	r3, r1
 800b326:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	695a      	ldr	r2, [r3, #20]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	699b      	ldr	r3, [r3, #24]
 800b33a:	431a      	orrs	r2, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	430a      	orrs	r2, r1
 800b342:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f042 0201 	orr.w	r2, r2, #1
 800b352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2220      	movs	r2, #32
 800b35e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	000186a0 	.word	0x000186a0
 800b380:	001e847f 	.word	0x001e847f
 800b384:	003d08ff 	.word	0x003d08ff
 800b388:	431bde83 	.word	0x431bde83
 800b38c:	10624dd3 	.word	0x10624dd3

0800b390 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b088      	sub	sp, #32
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d101      	bne.n	800b3a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e128      	b.n	800b5f4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d109      	bne.n	800b3c2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4a90      	ldr	r2, [pc, #576]	; (800b5fc <HAL_I2S_Init+0x26c>)
 800b3ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7fd fb7d 	bl	8008abc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2202      	movs	r2, #2
 800b3c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	69db      	ldr	r3, [r3, #28]
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	6812      	ldr	r2, [r2, #0]
 800b3d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b3d8:	f023 030f 	bic.w	r3, r3, #15
 800b3dc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2202      	movs	r2, #2
 800b3e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	695b      	ldr	r3, [r3, #20]
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	d060      	beq.n	800b4b0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d102      	bne.n	800b3fc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800b3f6:	2310      	movs	r3, #16
 800b3f8:	617b      	str	r3, [r7, #20]
 800b3fa:	e001      	b.n	800b400 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800b3fc:	2320      	movs	r3, #32
 800b3fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	2b20      	cmp	r3, #32
 800b406:	d802      	bhi.n	800b40e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	005b      	lsls	r3, r3, #1
 800b40c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800b40e:	2001      	movs	r0, #1
 800b410:	f001 f9b4 	bl	800c77c <HAL_RCCEx_GetPeriphCLKFreq>
 800b414:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	691b      	ldr	r3, [r3, #16]
 800b41a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b41e:	d125      	bne.n	800b46c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d010      	beq.n	800b44a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b432:	4613      	mov	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	4413      	add	r3, r2
 800b438:	005b      	lsls	r3, r3, #1
 800b43a:	461a      	mov	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	695b      	ldr	r3, [r3, #20]
 800b440:	fbb2 f3f3 	udiv	r3, r2, r3
 800b444:	3305      	adds	r3, #5
 800b446:	613b      	str	r3, [r7, #16]
 800b448:	e01f      	b.n	800b48a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	00db      	lsls	r3, r3, #3
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	fbb2 f2f3 	udiv	r2, r2, r3
 800b454:	4613      	mov	r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	4413      	add	r3, r2
 800b45a:	005b      	lsls	r3, r3, #1
 800b45c:	461a      	mov	r2, r3
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	695b      	ldr	r3, [r3, #20]
 800b462:	fbb2 f3f3 	udiv	r3, r2, r3
 800b466:	3305      	adds	r3, #5
 800b468:	613b      	str	r3, [r7, #16]
 800b46a:	e00e      	b.n	800b48a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	fbb2 f2f3 	udiv	r2, r2, r3
 800b474:	4613      	mov	r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4413      	add	r3, r2
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	461a      	mov	r2, r3
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	695b      	ldr	r3, [r3, #20]
 800b482:	fbb2 f3f3 	udiv	r3, r2, r3
 800b486:	3305      	adds	r3, #5
 800b488:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	4a5c      	ldr	r2, [pc, #368]	; (800b600 <HAL_I2S_Init+0x270>)
 800b48e:	fba2 2303 	umull	r2, r3, r2, r3
 800b492:	08db      	lsrs	r3, r3, #3
 800b494:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	f003 0301 	and.w	r3, r3, #1
 800b49c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	1ad3      	subs	r3, r2, r3
 800b4a4:	085b      	lsrs	r3, r3, #1
 800b4a6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	021b      	lsls	r3, r3, #8
 800b4ac:	61bb      	str	r3, [r7, #24]
 800b4ae:	e003      	b.n	800b4b8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d902      	bls.n	800b4c4 <HAL_I2S_Init+0x134>
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	2bff      	cmp	r3, #255	; 0xff
 800b4c2:	d907      	bls.n	800b4d4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4c8:	f043 0210 	orr.w	r2, r3, #16
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e08f      	b.n	800b5f4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	691a      	ldr	r2, [r3, #16]
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	ea42 0103 	orr.w	r1, r2, r3
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	69fa      	ldr	r2, [r7, #28]
 800b4e4:	430a      	orrs	r2, r1
 800b4e6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	69db      	ldr	r3, [r3, #28]
 800b4ee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b4f2:	f023 030f 	bic.w	r3, r3, #15
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	6851      	ldr	r1, [r2, #4]
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	6892      	ldr	r2, [r2, #8]
 800b4fe:	4311      	orrs	r1, r2
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	68d2      	ldr	r2, [r2, #12]
 800b504:	4311      	orrs	r1, r2
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	6992      	ldr	r2, [r2, #24]
 800b50a:	430a      	orrs	r2, r1
 800b50c:	431a      	orrs	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b516:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a1b      	ldr	r3, [r3, #32]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d161      	bne.n	800b5e4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4a38      	ldr	r2, [pc, #224]	; (800b604 <HAL_I2S_Init+0x274>)
 800b524:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a37      	ldr	r2, [pc, #220]	; (800b608 <HAL_I2S_Init+0x278>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d101      	bne.n	800b534 <HAL_I2S_Init+0x1a4>
 800b530:	4b36      	ldr	r3, [pc, #216]	; (800b60c <HAL_I2S_Init+0x27c>)
 800b532:	e001      	b.n	800b538 <HAL_I2S_Init+0x1a8>
 800b534:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b538:	69db      	ldr	r3, [r3, #28]
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	6812      	ldr	r2, [r2, #0]
 800b53e:	4932      	ldr	r1, [pc, #200]	; (800b608 <HAL_I2S_Init+0x278>)
 800b540:	428a      	cmp	r2, r1
 800b542:	d101      	bne.n	800b548 <HAL_I2S_Init+0x1b8>
 800b544:	4a31      	ldr	r2, [pc, #196]	; (800b60c <HAL_I2S_Init+0x27c>)
 800b546:	e001      	b.n	800b54c <HAL_I2S_Init+0x1bc>
 800b548:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800b54c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b550:	f023 030f 	bic.w	r3, r3, #15
 800b554:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a2b      	ldr	r2, [pc, #172]	; (800b608 <HAL_I2S_Init+0x278>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d101      	bne.n	800b564 <HAL_I2S_Init+0x1d4>
 800b560:	4b2a      	ldr	r3, [pc, #168]	; (800b60c <HAL_I2S_Init+0x27c>)
 800b562:	e001      	b.n	800b568 <HAL_I2S_Init+0x1d8>
 800b564:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b568:	2202      	movs	r2, #2
 800b56a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a25      	ldr	r2, [pc, #148]	; (800b608 <HAL_I2S_Init+0x278>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d101      	bne.n	800b57a <HAL_I2S_Init+0x1ea>
 800b576:	4b25      	ldr	r3, [pc, #148]	; (800b60c <HAL_I2S_Init+0x27c>)
 800b578:	e001      	b.n	800b57e <HAL_I2S_Init+0x1ee>
 800b57a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b57e:	69db      	ldr	r3, [r3, #28]
 800b580:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b58a:	d003      	beq.n	800b594 <HAL_I2S_Init+0x204>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d103      	bne.n	800b59c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800b594:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b598:	613b      	str	r3, [r7, #16]
 800b59a:	e001      	b.n	800b5a0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800b59c:	2300      	movs	r3, #0
 800b59e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	699b      	ldr	r3, [r3, #24]
 800b5bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	897b      	ldrh	r3, [r7, #10]
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b5cc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a0d      	ldr	r2, [pc, #52]	; (800b608 <HAL_I2S_Init+0x278>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d101      	bne.n	800b5dc <HAL_I2S_Init+0x24c>
 800b5d8:	4b0c      	ldr	r3, [pc, #48]	; (800b60c <HAL_I2S_Init+0x27c>)
 800b5da:	e001      	b.n	800b5e0 <HAL_I2S_Init+0x250>
 800b5dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b5e0:	897a      	ldrh	r2, [r7, #10]
 800b5e2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3720      	adds	r7, #32
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	0800b707 	.word	0x0800b707
 800b600:	cccccccd 	.word	0xcccccccd
 800b604:	0800b81d 	.word	0x0800b81d
 800b608:	40003800 	.word	0x40003800
 800b60c:	40003400 	.word	0x40003400

0800b610 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800b618:	bf00      	nop
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800b62c:	bf00      	nop
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800b640:	bf00      	nop
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b658:	881a      	ldrh	r2, [r3, #0]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b664:	1c9a      	adds	r2, r3, #2
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b66e:	b29b      	uxth	r3, r3
 800b670:	3b01      	subs	r3, #1
 800b672:	b29a      	uxth	r2, r3
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d10e      	bne.n	800b6a0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	685a      	ldr	r2, [r3, #4]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b690:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f7ff ffb8 	bl	800b610 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800b6a0:	bf00      	nop
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	68da      	ldr	r2, [r3, #12]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ba:	b292      	uxth	r2, r2
 800b6bc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c2:	1c9a      	adds	r2, r3, #2
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6cc:	b29b      	uxth	r3, r3
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	b29a      	uxth	r2, r3
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d10e      	bne.n	800b6fe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	685a      	ldr	r2, [r3, #4]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b6ee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f7ff ff93 	bl	800b624 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800b6fe:	bf00      	nop
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800b706:	b580      	push	{r7, lr}
 800b708:	b086      	sub	sp, #24
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	2b04      	cmp	r3, #4
 800b720:	d13a      	bne.n	800b798 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	f003 0301 	and.w	r3, r3, #1
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d109      	bne.n	800b740 <I2S_IRQHandler+0x3a>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b736:	2b40      	cmp	r3, #64	; 0x40
 800b738:	d102      	bne.n	800b740 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f7ff ffb4 	bl	800b6a8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b746:	2b40      	cmp	r3, #64	; 0x40
 800b748:	d126      	bne.n	800b798 <I2S_IRQHandler+0x92>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	f003 0320 	and.w	r3, r3, #32
 800b754:	2b20      	cmp	r3, #32
 800b756:	d11f      	bne.n	800b798 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	685a      	ldr	r2, [r3, #4]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b766:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800b768:	2300      	movs	r3, #0
 800b76a:	613b      	str	r3, [r7, #16]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	613b      	str	r3, [r7, #16]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	613b      	str	r3, [r7, #16]
 800b77c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b78a:	f043 0202 	orr.w	r2, r3, #2
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7ff ff50 	bl	800b638 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	2b03      	cmp	r3, #3
 800b7a2:	d136      	bne.n	800b812 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	f003 0302 	and.w	r3, r3, #2
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	d109      	bne.n	800b7c2 <I2S_IRQHandler+0xbc>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7b8:	2b80      	cmp	r3, #128	; 0x80
 800b7ba:	d102      	bne.n	800b7c2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f7ff ff45 	bl	800b64c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f003 0308 	and.w	r3, r3, #8
 800b7c8:	2b08      	cmp	r3, #8
 800b7ca:	d122      	bne.n	800b812 <I2S_IRQHandler+0x10c>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	f003 0320 	and.w	r3, r3, #32
 800b7d6:	2b20      	cmp	r3, #32
 800b7d8:	d11b      	bne.n	800b812 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	685a      	ldr	r2, [r3, #4]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b7e8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	60fb      	str	r3, [r7, #12]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	60fb      	str	r3, [r7, #12]
 800b7f6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b804:	f043 0204 	orr.w	r2, r3, #4
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f7ff ff13 	bl	800b638 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b812:	bf00      	nop
 800b814:	3718      	adds	r7, #24
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
	...

0800b81c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b088      	sub	sp, #32
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4aa2      	ldr	r2, [pc, #648]	; (800babc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d101      	bne.n	800b83a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800b836:	4ba2      	ldr	r3, [pc, #648]	; (800bac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b838:	e001      	b.n	800b83e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800b83a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a9b      	ldr	r2, [pc, #620]	; (800babc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d101      	bne.n	800b858 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800b854:	4b9a      	ldr	r3, [pc, #616]	; (800bac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b856:	e001      	b.n	800b85c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800b858:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b868:	d004      	beq.n	800b874 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	f040 8099 	bne.w	800b9a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	f003 0302 	and.w	r3, r3, #2
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d107      	bne.n	800b88e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b884:	2b00      	cmp	r3, #0
 800b886:	d002      	beq.n	800b88e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 f925 	bl	800bad8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	f003 0301 	and.w	r3, r3, #1
 800b894:	2b01      	cmp	r3, #1
 800b896:	d107      	bne.n	800b8a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d002      	beq.n	800b8a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f9c8 	bl	800bc38 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ae:	2b40      	cmp	r3, #64	; 0x40
 800b8b0:	d13a      	bne.n	800b928 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	f003 0320 	and.w	r3, r3, #32
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d035      	beq.n	800b928 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a7e      	ldr	r2, [pc, #504]	; (800babc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d101      	bne.n	800b8ca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800b8c6:	4b7e      	ldr	r3, [pc, #504]	; (800bac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b8c8:	e001      	b.n	800b8ce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800b8ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b8ce:	685a      	ldr	r2, [r3, #4]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4979      	ldr	r1, [pc, #484]	; (800babc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b8d6:	428b      	cmp	r3, r1
 800b8d8:	d101      	bne.n	800b8de <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800b8da:	4b79      	ldr	r3, [pc, #484]	; (800bac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b8dc:	e001      	b.n	800b8e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800b8de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b8e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b8e6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	685a      	ldr	r2, [r3, #4]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b8f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	60fb      	str	r3, [r7, #12]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	60fb      	str	r3, [r7, #12]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	60fb      	str	r3, [r7, #12]
 800b90c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2201      	movs	r2, #1
 800b912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b91a:	f043 0202 	orr.w	r2, r3, #2
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f7ff fe88 	bl	800b638 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	f003 0308 	and.w	r3, r3, #8
 800b92e:	2b08      	cmp	r3, #8
 800b930:	f040 80be 	bne.w	800bab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	f003 0320 	and.w	r3, r3, #32
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	f000 80b8 	beq.w	800bab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	685a      	ldr	r2, [r3, #4]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b94e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a59      	ldr	r2, [pc, #356]	; (800babc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d101      	bne.n	800b95e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800b95a:	4b59      	ldr	r3, [pc, #356]	; (800bac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b95c:	e001      	b.n	800b962 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800b95e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b962:	685a      	ldr	r2, [r3, #4]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4954      	ldr	r1, [pc, #336]	; (800babc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b96a:	428b      	cmp	r3, r1
 800b96c:	d101      	bne.n	800b972 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800b96e:	4b54      	ldr	r3, [pc, #336]	; (800bac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b970:	e001      	b.n	800b976 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800b972:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b976:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b97a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800b97c:	2300      	movs	r3, #0
 800b97e:	60bb      	str	r3, [r7, #8]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	60bb      	str	r3, [r7, #8]
 800b988:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2201      	movs	r2, #1
 800b98e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b996:	f043 0204 	orr.w	r2, r3, #4
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f7ff fe4a 	bl	800b638 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b9a4:	e084      	b.n	800bab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	f003 0302 	and.w	r3, r3, #2
 800b9ac:	2b02      	cmp	r3, #2
 800b9ae:	d107      	bne.n	800b9c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d002      	beq.n	800b9c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 f8be 	bl	800bb3c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	f003 0301 	and.w	r3, r3, #1
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d107      	bne.n	800b9da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 f8fd 	bl	800bbd4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b9da:	69fb      	ldr	r3, [r7, #28]
 800b9dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9e0:	2b40      	cmp	r3, #64	; 0x40
 800b9e2:	d12f      	bne.n	800ba44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	f003 0320 	and.w	r3, r3, #32
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d02a      	beq.n	800ba44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	685a      	ldr	r2, [r3, #4]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b9fc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a2e      	ldr	r2, [pc, #184]	; (800babc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d101      	bne.n	800ba0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800ba08:	4b2d      	ldr	r3, [pc, #180]	; (800bac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800ba0a:	e001      	b.n	800ba10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800ba0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ba10:	685a      	ldr	r2, [r3, #4]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4929      	ldr	r1, [pc, #164]	; (800babc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800ba18:	428b      	cmp	r3, r1
 800ba1a:	d101      	bne.n	800ba20 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800ba1c:	4b28      	ldr	r3, [pc, #160]	; (800bac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800ba1e:	e001      	b.n	800ba24 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800ba20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ba24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ba28:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba36:	f043 0202 	orr.w	r2, r3, #2
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f7ff fdfa 	bl	800b638 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	f003 0308 	and.w	r3, r3, #8
 800ba4a:	2b08      	cmp	r3, #8
 800ba4c:	d131      	bne.n	800bab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	f003 0320 	and.w	r3, r3, #32
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d02c      	beq.n	800bab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a17      	ldr	r2, [pc, #92]	; (800babc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d101      	bne.n	800ba66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800ba62:	4b17      	ldr	r3, [pc, #92]	; (800bac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800ba64:	e001      	b.n	800ba6a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800ba66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4912      	ldr	r1, [pc, #72]	; (800babc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800ba72:	428b      	cmp	r3, r1
 800ba74:	d101      	bne.n	800ba7a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800ba76:	4b12      	ldr	r3, [pc, #72]	; (800bac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800ba78:	e001      	b.n	800ba7e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800ba7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ba7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ba82:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	685a      	ldr	r2, [r3, #4]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ba92:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baa0:	f043 0204 	orr.w	r2, r3, #4
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f7ff fdc5 	bl	800b638 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800baae:	e000      	b.n	800bab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800bab0:	bf00      	nop
}
 800bab2:	bf00      	nop
 800bab4:	3720      	adds	r7, #32
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	40003800 	.word	0x40003800
 800bac0:	40003400 	.word	0x40003400

0800bac4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800bacc:	bf00      	nop
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae4:	1c99      	adds	r1, r3, #2
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	6251      	str	r1, [r2, #36]	; 0x24
 800baea:	881a      	ldrh	r2, [r3, #0]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	3b01      	subs	r3, #1
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d113      	bne.n	800bb32 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	685a      	ldr	r2, [r3, #4]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bb18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d106      	bne.n	800bb32 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2201      	movs	r2, #1
 800bb28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f7ff ffc9 	bl	800bac4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800bb32:	bf00      	nop
 800bb34:	3708      	adds	r7, #8
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
	...

0800bb3c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb48:	1c99      	adds	r1, r3, #2
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	6251      	str	r1, [r2, #36]	; 0x24
 800bb4e:	8819      	ldrh	r1, [r3, #0]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a1d      	ldr	r2, [pc, #116]	; (800bbcc <I2SEx_TxISR_I2SExt+0x90>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d101      	bne.n	800bb5e <I2SEx_TxISR_I2SExt+0x22>
 800bb5a:	4b1d      	ldr	r3, [pc, #116]	; (800bbd0 <I2SEx_TxISR_I2SExt+0x94>)
 800bb5c:	e001      	b.n	800bb62 <I2SEx_TxISR_I2SExt+0x26>
 800bb5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800bb62:	460a      	mov	r2, r1
 800bb64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	3b01      	subs	r3, #1
 800bb6e:	b29a      	uxth	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d121      	bne.n	800bbc2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a12      	ldr	r2, [pc, #72]	; (800bbcc <I2SEx_TxISR_I2SExt+0x90>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d101      	bne.n	800bb8c <I2SEx_TxISR_I2SExt+0x50>
 800bb88:	4b11      	ldr	r3, [pc, #68]	; (800bbd0 <I2SEx_TxISR_I2SExt+0x94>)
 800bb8a:	e001      	b.n	800bb90 <I2SEx_TxISR_I2SExt+0x54>
 800bb8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800bb90:	685a      	ldr	r2, [r3, #4]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	490d      	ldr	r1, [pc, #52]	; (800bbcc <I2SEx_TxISR_I2SExt+0x90>)
 800bb98:	428b      	cmp	r3, r1
 800bb9a:	d101      	bne.n	800bba0 <I2SEx_TxISR_I2SExt+0x64>
 800bb9c:	4b0c      	ldr	r3, [pc, #48]	; (800bbd0 <I2SEx_TxISR_I2SExt+0x94>)
 800bb9e:	e001      	b.n	800bba4 <I2SEx_TxISR_I2SExt+0x68>
 800bba0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800bba4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bba8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d106      	bne.n	800bbc2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f7ff ff81 	bl	800bac4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800bbc2:	bf00      	nop
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	40003800 	.word	0x40003800
 800bbd0:	40003400 	.word	0x40003400

0800bbd4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	68d8      	ldr	r0, [r3, #12]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe6:	1c99      	adds	r1, r3, #2
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	62d1      	str	r1, [r2, #44]	; 0x2c
 800bbec:	b282      	uxth	r2, r0
 800bbee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	b29a      	uxth	r2, r3
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d113      	bne.n	800bc30 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	685a      	ldr	r2, [r3, #4]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800bc16:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d106      	bne.n	800bc30 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2201      	movs	r2, #1
 800bc26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f7ff ff4a 	bl	800bac4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800bc30:	bf00      	nop
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a20      	ldr	r2, [pc, #128]	; (800bcc8 <I2SEx_RxISR_I2SExt+0x90>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d101      	bne.n	800bc4e <I2SEx_RxISR_I2SExt+0x16>
 800bc4a:	4b20      	ldr	r3, [pc, #128]	; (800bccc <I2SEx_RxISR_I2SExt+0x94>)
 800bc4c:	e001      	b.n	800bc52 <I2SEx_RxISR_I2SExt+0x1a>
 800bc4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800bc52:	68d8      	ldr	r0, [r3, #12]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc58:	1c99      	adds	r1, r3, #2
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800bc5e:	b282      	uxth	r2, r0
 800bc60:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	b29a      	uxth	r2, r3
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d121      	bne.n	800bcbe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a12      	ldr	r2, [pc, #72]	; (800bcc8 <I2SEx_RxISR_I2SExt+0x90>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d101      	bne.n	800bc88 <I2SEx_RxISR_I2SExt+0x50>
 800bc84:	4b11      	ldr	r3, [pc, #68]	; (800bccc <I2SEx_RxISR_I2SExt+0x94>)
 800bc86:	e001      	b.n	800bc8c <I2SEx_RxISR_I2SExt+0x54>
 800bc88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800bc8c:	685a      	ldr	r2, [r3, #4]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	490d      	ldr	r1, [pc, #52]	; (800bcc8 <I2SEx_RxISR_I2SExt+0x90>)
 800bc94:	428b      	cmp	r3, r1
 800bc96:	d101      	bne.n	800bc9c <I2SEx_RxISR_I2SExt+0x64>
 800bc98:	4b0c      	ldr	r3, [pc, #48]	; (800bccc <I2SEx_RxISR_I2SExt+0x94>)
 800bc9a:	e001      	b.n	800bca0 <I2SEx_RxISR_I2SExt+0x68>
 800bc9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800bca0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800bca4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d106      	bne.n	800bcbe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f7ff ff03 	bl	800bac4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800bcbe:	bf00      	nop
 800bcc0:	3708      	adds	r7, #8
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	40003800 	.word	0x40003800
 800bccc:	40003400 	.word	0x40003400

0800bcd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d101      	bne.n	800bce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bcde:	2301      	movs	r3, #1
 800bce0:	e264      	b.n	800c1ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f003 0301 	and.w	r3, r3, #1
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d075      	beq.n	800bdda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bcee:	4ba3      	ldr	r3, [pc, #652]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bcf0:	689b      	ldr	r3, [r3, #8]
 800bcf2:	f003 030c 	and.w	r3, r3, #12
 800bcf6:	2b04      	cmp	r3, #4
 800bcf8:	d00c      	beq.n	800bd14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bcfa:	4ba0      	ldr	r3, [pc, #640]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bd02:	2b08      	cmp	r3, #8
 800bd04:	d112      	bne.n	800bd2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bd06:	4b9d      	ldr	r3, [pc, #628]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd12:	d10b      	bne.n	800bd2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd14:	4b99      	ldr	r3, [pc, #612]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d05b      	beq.n	800bdd8 <HAL_RCC_OscConfig+0x108>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d157      	bne.n	800bdd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e23f      	b.n	800c1ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd34:	d106      	bne.n	800bd44 <HAL_RCC_OscConfig+0x74>
 800bd36:	4b91      	ldr	r3, [pc, #580]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4a90      	ldr	r2, [pc, #576]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bd3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd40:	6013      	str	r3, [r2, #0]
 800bd42:	e01d      	b.n	800bd80 <HAL_RCC_OscConfig+0xb0>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd4c:	d10c      	bne.n	800bd68 <HAL_RCC_OscConfig+0x98>
 800bd4e:	4b8b      	ldr	r3, [pc, #556]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4a8a      	ldr	r2, [pc, #552]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bd54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bd58:	6013      	str	r3, [r2, #0]
 800bd5a:	4b88      	ldr	r3, [pc, #544]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a87      	ldr	r2, [pc, #540]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bd60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd64:	6013      	str	r3, [r2, #0]
 800bd66:	e00b      	b.n	800bd80 <HAL_RCC_OscConfig+0xb0>
 800bd68:	4b84      	ldr	r3, [pc, #528]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a83      	ldr	r2, [pc, #524]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bd6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd72:	6013      	str	r3, [r2, #0]
 800bd74:	4b81      	ldr	r3, [pc, #516]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a80      	ldr	r2, [pc, #512]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bd7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bd7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d013      	beq.n	800bdb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bd88:	f7fd f932 	bl	8008ff0 <HAL_GetTick>
 800bd8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd8e:	e008      	b.n	800bda2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bd90:	f7fd f92e 	bl	8008ff0 <HAL_GetTick>
 800bd94:	4602      	mov	r2, r0
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	1ad3      	subs	r3, r2, r3
 800bd9a:	2b64      	cmp	r3, #100	; 0x64
 800bd9c:	d901      	bls.n	800bda2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bd9e:	2303      	movs	r3, #3
 800bda0:	e204      	b.n	800c1ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bda2:	4b76      	ldr	r3, [pc, #472]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d0f0      	beq.n	800bd90 <HAL_RCC_OscConfig+0xc0>
 800bdae:	e014      	b.n	800bdda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bdb0:	f7fd f91e 	bl	8008ff0 <HAL_GetTick>
 800bdb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bdb6:	e008      	b.n	800bdca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bdb8:	f7fd f91a 	bl	8008ff0 <HAL_GetTick>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	1ad3      	subs	r3, r2, r3
 800bdc2:	2b64      	cmp	r3, #100	; 0x64
 800bdc4:	d901      	bls.n	800bdca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	e1f0      	b.n	800c1ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bdca:	4b6c      	ldr	r3, [pc, #432]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1f0      	bne.n	800bdb8 <HAL_RCC_OscConfig+0xe8>
 800bdd6:	e000      	b.n	800bdda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bdd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f003 0302 	and.w	r3, r3, #2
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d063      	beq.n	800beae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bde6:	4b65      	ldr	r3, [pc, #404]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	f003 030c 	and.w	r3, r3, #12
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00b      	beq.n	800be0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bdf2:	4b62      	ldr	r3, [pc, #392]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bdfa:	2b08      	cmp	r3, #8
 800bdfc:	d11c      	bne.n	800be38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bdfe:	4b5f      	ldr	r3, [pc, #380]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be06:	2b00      	cmp	r3, #0
 800be08:	d116      	bne.n	800be38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800be0a:	4b5c      	ldr	r3, [pc, #368]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f003 0302 	and.w	r3, r3, #2
 800be12:	2b00      	cmp	r3, #0
 800be14:	d005      	beq.n	800be22 <HAL_RCC_OscConfig+0x152>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d001      	beq.n	800be22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	e1c4      	b.n	800c1ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be22:	4b56      	ldr	r3, [pc, #344]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	00db      	lsls	r3, r3, #3
 800be30:	4952      	ldr	r1, [pc, #328]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800be32:	4313      	orrs	r3, r2
 800be34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800be36:	e03a      	b.n	800beae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d020      	beq.n	800be82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800be40:	4b4f      	ldr	r3, [pc, #316]	; (800bf80 <HAL_RCC_OscConfig+0x2b0>)
 800be42:	2201      	movs	r2, #1
 800be44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be46:	f7fd f8d3 	bl	8008ff0 <HAL_GetTick>
 800be4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be4c:	e008      	b.n	800be60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800be4e:	f7fd f8cf 	bl	8008ff0 <HAL_GetTick>
 800be52:	4602      	mov	r2, r0
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	1ad3      	subs	r3, r2, r3
 800be58:	2b02      	cmp	r3, #2
 800be5a:	d901      	bls.n	800be60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800be5c:	2303      	movs	r3, #3
 800be5e:	e1a5      	b.n	800c1ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be60:	4b46      	ldr	r3, [pc, #280]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f003 0302 	and.w	r3, r3, #2
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d0f0      	beq.n	800be4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be6c:	4b43      	ldr	r3, [pc, #268]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	691b      	ldr	r3, [r3, #16]
 800be78:	00db      	lsls	r3, r3, #3
 800be7a:	4940      	ldr	r1, [pc, #256]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800be7c:	4313      	orrs	r3, r2
 800be7e:	600b      	str	r3, [r1, #0]
 800be80:	e015      	b.n	800beae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800be82:	4b3f      	ldr	r3, [pc, #252]	; (800bf80 <HAL_RCC_OscConfig+0x2b0>)
 800be84:	2200      	movs	r2, #0
 800be86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be88:	f7fd f8b2 	bl	8008ff0 <HAL_GetTick>
 800be8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800be8e:	e008      	b.n	800bea2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800be90:	f7fd f8ae 	bl	8008ff0 <HAL_GetTick>
 800be94:	4602      	mov	r2, r0
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	2b02      	cmp	r3, #2
 800be9c:	d901      	bls.n	800bea2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800be9e:	2303      	movs	r3, #3
 800bea0:	e184      	b.n	800c1ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bea2:	4b36      	ldr	r3, [pc, #216]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f003 0302 	and.w	r3, r3, #2
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d1f0      	bne.n	800be90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f003 0308 	and.w	r3, r3, #8
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d030      	beq.n	800bf1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	695b      	ldr	r3, [r3, #20]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d016      	beq.n	800bef0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bec2:	4b30      	ldr	r3, [pc, #192]	; (800bf84 <HAL_RCC_OscConfig+0x2b4>)
 800bec4:	2201      	movs	r2, #1
 800bec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bec8:	f7fd f892 	bl	8008ff0 <HAL_GetTick>
 800becc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bece:	e008      	b.n	800bee2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bed0:	f7fd f88e 	bl	8008ff0 <HAL_GetTick>
 800bed4:	4602      	mov	r2, r0
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	1ad3      	subs	r3, r2, r3
 800beda:	2b02      	cmp	r3, #2
 800bedc:	d901      	bls.n	800bee2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800bede:	2303      	movs	r3, #3
 800bee0:	e164      	b.n	800c1ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bee2:	4b26      	ldr	r3, [pc, #152]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bee6:	f003 0302 	and.w	r3, r3, #2
 800beea:	2b00      	cmp	r3, #0
 800beec:	d0f0      	beq.n	800bed0 <HAL_RCC_OscConfig+0x200>
 800beee:	e015      	b.n	800bf1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bef0:	4b24      	ldr	r3, [pc, #144]	; (800bf84 <HAL_RCC_OscConfig+0x2b4>)
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bef6:	f7fd f87b 	bl	8008ff0 <HAL_GetTick>
 800befa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800befc:	e008      	b.n	800bf10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800befe:	f7fd f877 	bl	8008ff0 <HAL_GetTick>
 800bf02:	4602      	mov	r2, r0
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	d901      	bls.n	800bf10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bf0c:	2303      	movs	r3, #3
 800bf0e:	e14d      	b.n	800c1ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bf10:	4b1a      	ldr	r3, [pc, #104]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bf12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf14:	f003 0302 	and.w	r3, r3, #2
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d1f0      	bne.n	800befe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f003 0304 	and.w	r3, r3, #4
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f000 80a0 	beq.w	800c06a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bf2e:	4b13      	ldr	r3, [pc, #76]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bf30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d10f      	bne.n	800bf5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	60bb      	str	r3, [r7, #8]
 800bf3e:	4b0f      	ldr	r3, [pc, #60]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bf40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf42:	4a0e      	ldr	r2, [pc, #56]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bf44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf48:	6413      	str	r3, [r2, #64]	; 0x40
 800bf4a:	4b0c      	ldr	r3, [pc, #48]	; (800bf7c <HAL_RCC_OscConfig+0x2ac>)
 800bf4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf52:	60bb      	str	r3, [r7, #8]
 800bf54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bf56:	2301      	movs	r3, #1
 800bf58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bf5a:	4b0b      	ldr	r3, [pc, #44]	; (800bf88 <HAL_RCC_OscConfig+0x2b8>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d121      	bne.n	800bfaa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bf66:	4b08      	ldr	r3, [pc, #32]	; (800bf88 <HAL_RCC_OscConfig+0x2b8>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a07      	ldr	r2, [pc, #28]	; (800bf88 <HAL_RCC_OscConfig+0x2b8>)
 800bf6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bf72:	f7fd f83d 	bl	8008ff0 <HAL_GetTick>
 800bf76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bf78:	e011      	b.n	800bf9e <HAL_RCC_OscConfig+0x2ce>
 800bf7a:	bf00      	nop
 800bf7c:	40023800 	.word	0x40023800
 800bf80:	42470000 	.word	0x42470000
 800bf84:	42470e80 	.word	0x42470e80
 800bf88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf8c:	f7fd f830 	bl	8008ff0 <HAL_GetTick>
 800bf90:	4602      	mov	r2, r0
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	1ad3      	subs	r3, r2, r3
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d901      	bls.n	800bf9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800bf9a:	2303      	movs	r3, #3
 800bf9c:	e106      	b.n	800c1ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bf9e:	4b85      	ldr	r3, [pc, #532]	; (800c1b4 <HAL_RCC_OscConfig+0x4e4>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d0f0      	beq.n	800bf8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d106      	bne.n	800bfc0 <HAL_RCC_OscConfig+0x2f0>
 800bfb2:	4b81      	ldr	r3, [pc, #516]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800bfb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfb6:	4a80      	ldr	r2, [pc, #512]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800bfb8:	f043 0301 	orr.w	r3, r3, #1
 800bfbc:	6713      	str	r3, [r2, #112]	; 0x70
 800bfbe:	e01c      	b.n	800bffa <HAL_RCC_OscConfig+0x32a>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	2b05      	cmp	r3, #5
 800bfc6:	d10c      	bne.n	800bfe2 <HAL_RCC_OscConfig+0x312>
 800bfc8:	4b7b      	ldr	r3, [pc, #492]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800bfca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfcc:	4a7a      	ldr	r2, [pc, #488]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800bfce:	f043 0304 	orr.w	r3, r3, #4
 800bfd2:	6713      	str	r3, [r2, #112]	; 0x70
 800bfd4:	4b78      	ldr	r3, [pc, #480]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800bfd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfd8:	4a77      	ldr	r2, [pc, #476]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800bfda:	f043 0301 	orr.w	r3, r3, #1
 800bfde:	6713      	str	r3, [r2, #112]	; 0x70
 800bfe0:	e00b      	b.n	800bffa <HAL_RCC_OscConfig+0x32a>
 800bfe2:	4b75      	ldr	r3, [pc, #468]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800bfe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfe6:	4a74      	ldr	r2, [pc, #464]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800bfe8:	f023 0301 	bic.w	r3, r3, #1
 800bfec:	6713      	str	r3, [r2, #112]	; 0x70
 800bfee:	4b72      	ldr	r3, [pc, #456]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800bff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bff2:	4a71      	ldr	r2, [pc, #452]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800bff4:	f023 0304 	bic.w	r3, r3, #4
 800bff8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d015      	beq.n	800c02e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c002:	f7fc fff5 	bl	8008ff0 <HAL_GetTick>
 800c006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c008:	e00a      	b.n	800c020 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c00a:	f7fc fff1 	bl	8008ff0 <HAL_GetTick>
 800c00e:	4602      	mov	r2, r0
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	1ad3      	subs	r3, r2, r3
 800c014:	f241 3288 	movw	r2, #5000	; 0x1388
 800c018:	4293      	cmp	r3, r2
 800c01a:	d901      	bls.n	800c020 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800c01c:	2303      	movs	r3, #3
 800c01e:	e0c5      	b.n	800c1ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c020:	4b65      	ldr	r3, [pc, #404]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800c022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c024:	f003 0302 	and.w	r3, r3, #2
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d0ee      	beq.n	800c00a <HAL_RCC_OscConfig+0x33a>
 800c02c:	e014      	b.n	800c058 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c02e:	f7fc ffdf 	bl	8008ff0 <HAL_GetTick>
 800c032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c034:	e00a      	b.n	800c04c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c036:	f7fc ffdb 	bl	8008ff0 <HAL_GetTick>
 800c03a:	4602      	mov	r2, r0
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	f241 3288 	movw	r2, #5000	; 0x1388
 800c044:	4293      	cmp	r3, r2
 800c046:	d901      	bls.n	800c04c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800c048:	2303      	movs	r3, #3
 800c04a:	e0af      	b.n	800c1ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c04c:	4b5a      	ldr	r3, [pc, #360]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800c04e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c050:	f003 0302 	and.w	r3, r3, #2
 800c054:	2b00      	cmp	r3, #0
 800c056:	d1ee      	bne.n	800c036 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c058:	7dfb      	ldrb	r3, [r7, #23]
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d105      	bne.n	800c06a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c05e:	4b56      	ldr	r3, [pc, #344]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800c060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c062:	4a55      	ldr	r2, [pc, #340]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800c064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c068:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	699b      	ldr	r3, [r3, #24]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f000 809b 	beq.w	800c1aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c074:	4b50      	ldr	r3, [pc, #320]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	f003 030c 	and.w	r3, r3, #12
 800c07c:	2b08      	cmp	r3, #8
 800c07e:	d05c      	beq.n	800c13a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	699b      	ldr	r3, [r3, #24]
 800c084:	2b02      	cmp	r3, #2
 800c086:	d141      	bne.n	800c10c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c088:	4b4c      	ldr	r3, [pc, #304]	; (800c1bc <HAL_RCC_OscConfig+0x4ec>)
 800c08a:	2200      	movs	r2, #0
 800c08c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c08e:	f7fc ffaf 	bl	8008ff0 <HAL_GetTick>
 800c092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c094:	e008      	b.n	800c0a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c096:	f7fc ffab 	bl	8008ff0 <HAL_GetTick>
 800c09a:	4602      	mov	r2, r0
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	1ad3      	subs	r3, r2, r3
 800c0a0:	2b02      	cmp	r3, #2
 800c0a2:	d901      	bls.n	800c0a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800c0a4:	2303      	movs	r3, #3
 800c0a6:	e081      	b.n	800c1ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c0a8:	4b43      	ldr	r3, [pc, #268]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1f0      	bne.n	800c096 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	69da      	ldr	r2, [r3, #28]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6a1b      	ldr	r3, [r3, #32]
 800c0bc:	431a      	orrs	r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c2:	019b      	lsls	r3, r3, #6
 800c0c4:	431a      	orrs	r2, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ca:	085b      	lsrs	r3, r3, #1
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	041b      	lsls	r3, r3, #16
 800c0d0:	431a      	orrs	r2, r3
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d6:	061b      	lsls	r3, r3, #24
 800c0d8:	4937      	ldr	r1, [pc, #220]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c0de:	4b37      	ldr	r3, [pc, #220]	; (800c1bc <HAL_RCC_OscConfig+0x4ec>)
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c0e4:	f7fc ff84 	bl	8008ff0 <HAL_GetTick>
 800c0e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c0ea:	e008      	b.n	800c0fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c0ec:	f7fc ff80 	bl	8008ff0 <HAL_GetTick>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	1ad3      	subs	r3, r2, r3
 800c0f6:	2b02      	cmp	r3, #2
 800c0f8:	d901      	bls.n	800c0fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800c0fa:	2303      	movs	r3, #3
 800c0fc:	e056      	b.n	800c1ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c0fe:	4b2e      	ldr	r3, [pc, #184]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c106:	2b00      	cmp	r3, #0
 800c108:	d0f0      	beq.n	800c0ec <HAL_RCC_OscConfig+0x41c>
 800c10a:	e04e      	b.n	800c1aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c10c:	4b2b      	ldr	r3, [pc, #172]	; (800c1bc <HAL_RCC_OscConfig+0x4ec>)
 800c10e:	2200      	movs	r2, #0
 800c110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c112:	f7fc ff6d 	bl	8008ff0 <HAL_GetTick>
 800c116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c118:	e008      	b.n	800c12c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c11a:	f7fc ff69 	bl	8008ff0 <HAL_GetTick>
 800c11e:	4602      	mov	r2, r0
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	1ad3      	subs	r3, r2, r3
 800c124:	2b02      	cmp	r3, #2
 800c126:	d901      	bls.n	800c12c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800c128:	2303      	movs	r3, #3
 800c12a:	e03f      	b.n	800c1ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c12c:	4b22      	ldr	r3, [pc, #136]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1f0      	bne.n	800c11a <HAL_RCC_OscConfig+0x44a>
 800c138:	e037      	b.n	800c1aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	699b      	ldr	r3, [r3, #24]
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d101      	bne.n	800c146 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	e032      	b.n	800c1ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c146:	4b1c      	ldr	r3, [pc, #112]	; (800c1b8 <HAL_RCC_OscConfig+0x4e8>)
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	699b      	ldr	r3, [r3, #24]
 800c150:	2b01      	cmp	r3, #1
 800c152:	d028      	beq.n	800c1a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c15e:	429a      	cmp	r2, r3
 800c160:	d121      	bne.n	800c1a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d11a      	bne.n	800c1a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c170:	68fa      	ldr	r2, [r7, #12]
 800c172:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c176:	4013      	ands	r3, r2
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c17c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c17e:	4293      	cmp	r3, r2
 800c180:	d111      	bne.n	800c1a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c18c:	085b      	lsrs	r3, r3, #1
 800c18e:	3b01      	subs	r3, #1
 800c190:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c192:	429a      	cmp	r2, r3
 800c194:	d107      	bne.n	800c1a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d001      	beq.n	800c1aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e000      	b.n	800c1ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800c1aa:	2300      	movs	r3, #0
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3718      	adds	r7, #24
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	40007000 	.word	0x40007000
 800c1b8:	40023800 	.word	0x40023800
 800c1bc:	42470060 	.word	0x42470060

0800c1c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d101      	bne.n	800c1d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	e0cc      	b.n	800c36e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c1d4:	4b68      	ldr	r3, [pc, #416]	; (800c378 <HAL_RCC_ClockConfig+0x1b8>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f003 0307 	and.w	r3, r3, #7
 800c1dc:	683a      	ldr	r2, [r7, #0]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d90c      	bls.n	800c1fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c1e2:	4b65      	ldr	r3, [pc, #404]	; (800c378 <HAL_RCC_ClockConfig+0x1b8>)
 800c1e4:	683a      	ldr	r2, [r7, #0]
 800c1e6:	b2d2      	uxtb	r2, r2
 800c1e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c1ea:	4b63      	ldr	r3, [pc, #396]	; (800c378 <HAL_RCC_ClockConfig+0x1b8>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f003 0307 	and.w	r3, r3, #7
 800c1f2:	683a      	ldr	r2, [r7, #0]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d001      	beq.n	800c1fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	e0b8      	b.n	800c36e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f003 0302 	and.w	r3, r3, #2
 800c204:	2b00      	cmp	r3, #0
 800c206:	d020      	beq.n	800c24a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f003 0304 	and.w	r3, r3, #4
 800c210:	2b00      	cmp	r3, #0
 800c212:	d005      	beq.n	800c220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c214:	4b59      	ldr	r3, [pc, #356]	; (800c37c <HAL_RCC_ClockConfig+0x1bc>)
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	4a58      	ldr	r2, [pc, #352]	; (800c37c <HAL_RCC_ClockConfig+0x1bc>)
 800c21a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c21e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f003 0308 	and.w	r3, r3, #8
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d005      	beq.n	800c238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c22c:	4b53      	ldr	r3, [pc, #332]	; (800c37c <HAL_RCC_ClockConfig+0x1bc>)
 800c22e:	689b      	ldr	r3, [r3, #8]
 800c230:	4a52      	ldr	r2, [pc, #328]	; (800c37c <HAL_RCC_ClockConfig+0x1bc>)
 800c232:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c238:	4b50      	ldr	r3, [pc, #320]	; (800c37c <HAL_RCC_ClockConfig+0x1bc>)
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	494d      	ldr	r1, [pc, #308]	; (800c37c <HAL_RCC_ClockConfig+0x1bc>)
 800c246:	4313      	orrs	r3, r2
 800c248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f003 0301 	and.w	r3, r3, #1
 800c252:	2b00      	cmp	r3, #0
 800c254:	d044      	beq.n	800c2e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d107      	bne.n	800c26e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c25e:	4b47      	ldr	r3, [pc, #284]	; (800c37c <HAL_RCC_ClockConfig+0x1bc>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c266:	2b00      	cmp	r3, #0
 800c268:	d119      	bne.n	800c29e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c26a:	2301      	movs	r3, #1
 800c26c:	e07f      	b.n	800c36e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	2b02      	cmp	r3, #2
 800c274:	d003      	beq.n	800c27e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c27a:	2b03      	cmp	r3, #3
 800c27c:	d107      	bne.n	800c28e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c27e:	4b3f      	ldr	r3, [pc, #252]	; (800c37c <HAL_RCC_ClockConfig+0x1bc>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c286:	2b00      	cmp	r3, #0
 800c288:	d109      	bne.n	800c29e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c28a:	2301      	movs	r3, #1
 800c28c:	e06f      	b.n	800c36e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c28e:	4b3b      	ldr	r3, [pc, #236]	; (800c37c <HAL_RCC_ClockConfig+0x1bc>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f003 0302 	and.w	r3, r3, #2
 800c296:	2b00      	cmp	r3, #0
 800c298:	d101      	bne.n	800c29e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	e067      	b.n	800c36e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c29e:	4b37      	ldr	r3, [pc, #220]	; (800c37c <HAL_RCC_ClockConfig+0x1bc>)
 800c2a0:	689b      	ldr	r3, [r3, #8]
 800c2a2:	f023 0203 	bic.w	r2, r3, #3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	4934      	ldr	r1, [pc, #208]	; (800c37c <HAL_RCC_ClockConfig+0x1bc>)
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c2b0:	f7fc fe9e 	bl	8008ff0 <HAL_GetTick>
 800c2b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c2b6:	e00a      	b.n	800c2ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c2b8:	f7fc fe9a 	bl	8008ff0 <HAL_GetTick>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	1ad3      	subs	r3, r2, r3
 800c2c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d901      	bls.n	800c2ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	e04f      	b.n	800c36e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c2ce:	4b2b      	ldr	r3, [pc, #172]	; (800c37c <HAL_RCC_ClockConfig+0x1bc>)
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	f003 020c 	and.w	r2, r3, #12
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d1eb      	bne.n	800c2b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c2e0:	4b25      	ldr	r3, [pc, #148]	; (800c378 <HAL_RCC_ClockConfig+0x1b8>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f003 0307 	and.w	r3, r3, #7
 800c2e8:	683a      	ldr	r2, [r7, #0]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d20c      	bcs.n	800c308 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c2ee:	4b22      	ldr	r3, [pc, #136]	; (800c378 <HAL_RCC_ClockConfig+0x1b8>)
 800c2f0:	683a      	ldr	r2, [r7, #0]
 800c2f2:	b2d2      	uxtb	r2, r2
 800c2f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c2f6:	4b20      	ldr	r3, [pc, #128]	; (800c378 <HAL_RCC_ClockConfig+0x1b8>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f003 0307 	and.w	r3, r3, #7
 800c2fe:	683a      	ldr	r2, [r7, #0]
 800c300:	429a      	cmp	r2, r3
 800c302:	d001      	beq.n	800c308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c304:	2301      	movs	r3, #1
 800c306:	e032      	b.n	800c36e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f003 0304 	and.w	r3, r3, #4
 800c310:	2b00      	cmp	r3, #0
 800c312:	d008      	beq.n	800c326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c314:	4b19      	ldr	r3, [pc, #100]	; (800c37c <HAL_RCC_ClockConfig+0x1bc>)
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	4916      	ldr	r1, [pc, #88]	; (800c37c <HAL_RCC_ClockConfig+0x1bc>)
 800c322:	4313      	orrs	r3, r2
 800c324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f003 0308 	and.w	r3, r3, #8
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d009      	beq.n	800c346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c332:	4b12      	ldr	r3, [pc, #72]	; (800c37c <HAL_RCC_ClockConfig+0x1bc>)
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	691b      	ldr	r3, [r3, #16]
 800c33e:	00db      	lsls	r3, r3, #3
 800c340:	490e      	ldr	r1, [pc, #56]	; (800c37c <HAL_RCC_ClockConfig+0x1bc>)
 800c342:	4313      	orrs	r3, r2
 800c344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c346:	f000 f821 	bl	800c38c <HAL_RCC_GetSysClockFreq>
 800c34a:	4602      	mov	r2, r0
 800c34c:	4b0b      	ldr	r3, [pc, #44]	; (800c37c <HAL_RCC_ClockConfig+0x1bc>)
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	091b      	lsrs	r3, r3, #4
 800c352:	f003 030f 	and.w	r3, r3, #15
 800c356:	490a      	ldr	r1, [pc, #40]	; (800c380 <HAL_RCC_ClockConfig+0x1c0>)
 800c358:	5ccb      	ldrb	r3, [r1, r3]
 800c35a:	fa22 f303 	lsr.w	r3, r2, r3
 800c35e:	4a09      	ldr	r2, [pc, #36]	; (800c384 <HAL_RCC_ClockConfig+0x1c4>)
 800c360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c362:	4b09      	ldr	r3, [pc, #36]	; (800c388 <HAL_RCC_ClockConfig+0x1c8>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4618      	mov	r0, r3
 800c368:	f7fc fdfe 	bl	8008f68 <HAL_InitTick>

  return HAL_OK;
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	40023c00 	.word	0x40023c00
 800c37c:	40023800 	.word	0x40023800
 800c380:	0801050c 	.word	0x0801050c
 800c384:	2000001c 	.word	0x2000001c
 800c388:	20000020 	.word	0x20000020

0800c38c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c38c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c390:	b084      	sub	sp, #16
 800c392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c394:	2300      	movs	r3, #0
 800c396:	607b      	str	r3, [r7, #4]
 800c398:	2300      	movs	r3, #0
 800c39a:	60fb      	str	r3, [r7, #12]
 800c39c:	2300      	movs	r3, #0
 800c39e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c3a4:	4b67      	ldr	r3, [pc, #412]	; (800c544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	f003 030c 	and.w	r3, r3, #12
 800c3ac:	2b08      	cmp	r3, #8
 800c3ae:	d00d      	beq.n	800c3cc <HAL_RCC_GetSysClockFreq+0x40>
 800c3b0:	2b08      	cmp	r3, #8
 800c3b2:	f200 80bd 	bhi.w	800c530 <HAL_RCC_GetSysClockFreq+0x1a4>
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d002      	beq.n	800c3c0 <HAL_RCC_GetSysClockFreq+0x34>
 800c3ba:	2b04      	cmp	r3, #4
 800c3bc:	d003      	beq.n	800c3c6 <HAL_RCC_GetSysClockFreq+0x3a>
 800c3be:	e0b7      	b.n	800c530 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c3c0:	4b61      	ldr	r3, [pc, #388]	; (800c548 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c3c2:	60bb      	str	r3, [r7, #8]
       break;
 800c3c4:	e0b7      	b.n	800c536 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c3c6:	4b61      	ldr	r3, [pc, #388]	; (800c54c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800c3c8:	60bb      	str	r3, [r7, #8]
      break;
 800c3ca:	e0b4      	b.n	800c536 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c3cc:	4b5d      	ldr	r3, [pc, #372]	; (800c544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c3d6:	4b5b      	ldr	r3, [pc, #364]	; (800c544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d04d      	beq.n	800c47e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c3e2:	4b58      	ldr	r3, [pc, #352]	; (800c544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	099b      	lsrs	r3, r3, #6
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	f04f 0300 	mov.w	r3, #0
 800c3ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c3f2:	f04f 0100 	mov.w	r1, #0
 800c3f6:	ea02 0800 	and.w	r8, r2, r0
 800c3fa:	ea03 0901 	and.w	r9, r3, r1
 800c3fe:	4640      	mov	r0, r8
 800c400:	4649      	mov	r1, r9
 800c402:	f04f 0200 	mov.w	r2, #0
 800c406:	f04f 0300 	mov.w	r3, #0
 800c40a:	014b      	lsls	r3, r1, #5
 800c40c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c410:	0142      	lsls	r2, r0, #5
 800c412:	4610      	mov	r0, r2
 800c414:	4619      	mov	r1, r3
 800c416:	ebb0 0008 	subs.w	r0, r0, r8
 800c41a:	eb61 0109 	sbc.w	r1, r1, r9
 800c41e:	f04f 0200 	mov.w	r2, #0
 800c422:	f04f 0300 	mov.w	r3, #0
 800c426:	018b      	lsls	r3, r1, #6
 800c428:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c42c:	0182      	lsls	r2, r0, #6
 800c42e:	1a12      	subs	r2, r2, r0
 800c430:	eb63 0301 	sbc.w	r3, r3, r1
 800c434:	f04f 0000 	mov.w	r0, #0
 800c438:	f04f 0100 	mov.w	r1, #0
 800c43c:	00d9      	lsls	r1, r3, #3
 800c43e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c442:	00d0      	lsls	r0, r2, #3
 800c444:	4602      	mov	r2, r0
 800c446:	460b      	mov	r3, r1
 800c448:	eb12 0208 	adds.w	r2, r2, r8
 800c44c:	eb43 0309 	adc.w	r3, r3, r9
 800c450:	f04f 0000 	mov.w	r0, #0
 800c454:	f04f 0100 	mov.w	r1, #0
 800c458:	0259      	lsls	r1, r3, #9
 800c45a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800c45e:	0250      	lsls	r0, r2, #9
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	4610      	mov	r0, r2
 800c466:	4619      	mov	r1, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	461a      	mov	r2, r3
 800c46c:	f04f 0300 	mov.w	r3, #0
 800c470:	f7fb feaa 	bl	80081c8 <__aeabi_uldivmod>
 800c474:	4602      	mov	r2, r0
 800c476:	460b      	mov	r3, r1
 800c478:	4613      	mov	r3, r2
 800c47a:	60fb      	str	r3, [r7, #12]
 800c47c:	e04a      	b.n	800c514 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c47e:	4b31      	ldr	r3, [pc, #196]	; (800c544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	099b      	lsrs	r3, r3, #6
 800c484:	461a      	mov	r2, r3
 800c486:	f04f 0300 	mov.w	r3, #0
 800c48a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c48e:	f04f 0100 	mov.w	r1, #0
 800c492:	ea02 0400 	and.w	r4, r2, r0
 800c496:	ea03 0501 	and.w	r5, r3, r1
 800c49a:	4620      	mov	r0, r4
 800c49c:	4629      	mov	r1, r5
 800c49e:	f04f 0200 	mov.w	r2, #0
 800c4a2:	f04f 0300 	mov.w	r3, #0
 800c4a6:	014b      	lsls	r3, r1, #5
 800c4a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c4ac:	0142      	lsls	r2, r0, #5
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	1b00      	subs	r0, r0, r4
 800c4b4:	eb61 0105 	sbc.w	r1, r1, r5
 800c4b8:	f04f 0200 	mov.w	r2, #0
 800c4bc:	f04f 0300 	mov.w	r3, #0
 800c4c0:	018b      	lsls	r3, r1, #6
 800c4c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c4c6:	0182      	lsls	r2, r0, #6
 800c4c8:	1a12      	subs	r2, r2, r0
 800c4ca:	eb63 0301 	sbc.w	r3, r3, r1
 800c4ce:	f04f 0000 	mov.w	r0, #0
 800c4d2:	f04f 0100 	mov.w	r1, #0
 800c4d6:	00d9      	lsls	r1, r3, #3
 800c4d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c4dc:	00d0      	lsls	r0, r2, #3
 800c4de:	4602      	mov	r2, r0
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	1912      	adds	r2, r2, r4
 800c4e4:	eb45 0303 	adc.w	r3, r5, r3
 800c4e8:	f04f 0000 	mov.w	r0, #0
 800c4ec:	f04f 0100 	mov.w	r1, #0
 800c4f0:	0299      	lsls	r1, r3, #10
 800c4f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c4f6:	0290      	lsls	r0, r2, #10
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	4610      	mov	r0, r2
 800c4fe:	4619      	mov	r1, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	461a      	mov	r2, r3
 800c504:	f04f 0300 	mov.w	r3, #0
 800c508:	f7fb fe5e 	bl	80081c8 <__aeabi_uldivmod>
 800c50c:	4602      	mov	r2, r0
 800c50e:	460b      	mov	r3, r1
 800c510:	4613      	mov	r3, r2
 800c512:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c514:	4b0b      	ldr	r3, [pc, #44]	; (800c544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	0c1b      	lsrs	r3, r3, #16
 800c51a:	f003 0303 	and.w	r3, r3, #3
 800c51e:	3301      	adds	r3, #1
 800c520:	005b      	lsls	r3, r3, #1
 800c522:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	fbb2 f3f3 	udiv	r3, r2, r3
 800c52c:	60bb      	str	r3, [r7, #8]
      break;
 800c52e:	e002      	b.n	800c536 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c530:	4b05      	ldr	r3, [pc, #20]	; (800c548 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c532:	60bb      	str	r3, [r7, #8]
      break;
 800c534:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c536:	68bb      	ldr	r3, [r7, #8]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3710      	adds	r7, #16
 800c53c:	46bd      	mov	sp, r7
 800c53e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c542:	bf00      	nop
 800c544:	40023800 	.word	0x40023800
 800c548:	00f42400 	.word	0x00f42400
 800c54c:	007a1200 	.word	0x007a1200

0800c550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c550:	b480      	push	{r7}
 800c552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c554:	4b03      	ldr	r3, [pc, #12]	; (800c564 <HAL_RCC_GetHCLKFreq+0x14>)
 800c556:	681b      	ldr	r3, [r3, #0]
}
 800c558:	4618      	mov	r0, r3
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	2000001c 	.word	0x2000001c

0800c568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c56c:	f7ff fff0 	bl	800c550 <HAL_RCC_GetHCLKFreq>
 800c570:	4602      	mov	r2, r0
 800c572:	4b05      	ldr	r3, [pc, #20]	; (800c588 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c574:	689b      	ldr	r3, [r3, #8]
 800c576:	0a9b      	lsrs	r3, r3, #10
 800c578:	f003 0307 	and.w	r3, r3, #7
 800c57c:	4903      	ldr	r1, [pc, #12]	; (800c58c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c57e:	5ccb      	ldrb	r3, [r1, r3]
 800c580:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c584:	4618      	mov	r0, r3
 800c586:	bd80      	pop	{r7, pc}
 800c588:	40023800 	.word	0x40023800
 800c58c:	0801051c 	.word	0x0801051c

0800c590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c594:	f7ff ffdc 	bl	800c550 <HAL_RCC_GetHCLKFreq>
 800c598:	4602      	mov	r2, r0
 800c59a:	4b05      	ldr	r3, [pc, #20]	; (800c5b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c59c:	689b      	ldr	r3, [r3, #8]
 800c59e:	0b5b      	lsrs	r3, r3, #13
 800c5a0:	f003 0307 	and.w	r3, r3, #7
 800c5a4:	4903      	ldr	r1, [pc, #12]	; (800c5b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c5a6:	5ccb      	ldrb	r3, [r1, r3]
 800c5a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	40023800 	.word	0x40023800
 800c5b4:	0801051c 	.word	0x0801051c

0800c5b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b086      	sub	sp, #24
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f003 0301 	and.w	r3, r3, #1
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d105      	bne.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d035      	beq.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c5e0:	4b62      	ldr	r3, [pc, #392]	; (800c76c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c5e6:	f7fc fd03 	bl	8008ff0 <HAL_GetTick>
 800c5ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c5ec:	e008      	b.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c5ee:	f7fc fcff 	bl	8008ff0 <HAL_GetTick>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	1ad3      	subs	r3, r2, r3
 800c5f8:	2b02      	cmp	r3, #2
 800c5fa:	d901      	bls.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c5fc:	2303      	movs	r3, #3
 800c5fe:	e0b0      	b.n	800c762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c600:	4b5b      	ldr	r3, [pc, #364]	; (800c770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d1f0      	bne.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	019a      	lsls	r2, r3, #6
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	071b      	lsls	r3, r3, #28
 800c618:	4955      	ldr	r1, [pc, #340]	; (800c770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c61a:	4313      	orrs	r3, r2
 800c61c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c620:	4b52      	ldr	r3, [pc, #328]	; (800c76c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c622:	2201      	movs	r2, #1
 800c624:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c626:	f7fc fce3 	bl	8008ff0 <HAL_GetTick>
 800c62a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c62c:	e008      	b.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c62e:	f7fc fcdf 	bl	8008ff0 <HAL_GetTick>
 800c632:	4602      	mov	r2, r0
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	1ad3      	subs	r3, r2, r3
 800c638:	2b02      	cmp	r3, #2
 800c63a:	d901      	bls.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c63c:	2303      	movs	r3, #3
 800c63e:	e090      	b.n	800c762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c640:	4b4b      	ldr	r3, [pc, #300]	; (800c770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d0f0      	beq.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f003 0302 	and.w	r3, r3, #2
 800c654:	2b00      	cmp	r3, #0
 800c656:	f000 8083 	beq.w	800c760 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c65a:	2300      	movs	r3, #0
 800c65c:	60fb      	str	r3, [r7, #12]
 800c65e:	4b44      	ldr	r3, [pc, #272]	; (800c770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c662:	4a43      	ldr	r2, [pc, #268]	; (800c770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c668:	6413      	str	r3, [r2, #64]	; 0x40
 800c66a:	4b41      	ldr	r3, [pc, #260]	; (800c770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c66e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c672:	60fb      	str	r3, [r7, #12]
 800c674:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c676:	4b3f      	ldr	r3, [pc, #252]	; (800c774 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a3e      	ldr	r2, [pc, #248]	; (800c774 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c67c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c680:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c682:	f7fc fcb5 	bl	8008ff0 <HAL_GetTick>
 800c686:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c688:	e008      	b.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c68a:	f7fc fcb1 	bl	8008ff0 <HAL_GetTick>
 800c68e:	4602      	mov	r2, r0
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	1ad3      	subs	r3, r2, r3
 800c694:	2b02      	cmp	r3, #2
 800c696:	d901      	bls.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800c698:	2303      	movs	r3, #3
 800c69a:	e062      	b.n	800c762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c69c:	4b35      	ldr	r3, [pc, #212]	; (800c774 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d0f0      	beq.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c6a8:	4b31      	ldr	r3, [pc, #196]	; (800c770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d02f      	beq.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6c0:	693a      	ldr	r2, [r7, #16]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d028      	beq.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c6c6:	4b2a      	ldr	r3, [pc, #168]	; (800c770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c6c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c6d0:	4b29      	ldr	r3, [pc, #164]	; (800c778 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c6d6:	4b28      	ldr	r3, [pc, #160]	; (800c778 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c6dc:	4a24      	ldr	r2, [pc, #144]	; (800c770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c6e2:	4b23      	ldr	r3, [pc, #140]	; (800c770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c6e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6e6:	f003 0301 	and.w	r3, r3, #1
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d114      	bne.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c6ee:	f7fc fc7f 	bl	8008ff0 <HAL_GetTick>
 800c6f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c6f4:	e00a      	b.n	800c70c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c6f6:	f7fc fc7b 	bl	8008ff0 <HAL_GetTick>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	f241 3288 	movw	r2, #5000	; 0x1388
 800c704:	4293      	cmp	r3, r2
 800c706:	d901      	bls.n	800c70c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800c708:	2303      	movs	r3, #3
 800c70a:	e02a      	b.n	800c762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c70c:	4b18      	ldr	r3, [pc, #96]	; (800c770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c70e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c710:	f003 0302 	and.w	r3, r3, #2
 800c714:	2b00      	cmp	r3, #0
 800c716:	d0ee      	beq.n	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c720:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c724:	d10d      	bne.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800c726:	4b12      	ldr	r3, [pc, #72]	; (800c770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c728:	689b      	ldr	r3, [r3, #8]
 800c72a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	68db      	ldr	r3, [r3, #12]
 800c732:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c73a:	490d      	ldr	r1, [pc, #52]	; (800c770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c73c:	4313      	orrs	r3, r2
 800c73e:	608b      	str	r3, [r1, #8]
 800c740:	e005      	b.n	800c74e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c742:	4b0b      	ldr	r3, [pc, #44]	; (800c770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	4a0a      	ldr	r2, [pc, #40]	; (800c770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c748:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c74c:	6093      	str	r3, [r2, #8]
 800c74e:	4b08      	ldr	r3, [pc, #32]	; (800c770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c75a:	4905      	ldr	r1, [pc, #20]	; (800c770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c75c:	4313      	orrs	r3, r2
 800c75e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	3718      	adds	r7, #24
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	42470068 	.word	0x42470068
 800c770:	40023800 	.word	0x40023800
 800c774:	40007000 	.word	0x40007000
 800c778:	42470e40 	.word	0x42470e40

0800c77c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b087      	sub	sp, #28
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800c784:	2300      	movs	r3, #0
 800c786:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800c788:	2300      	movs	r3, #0
 800c78a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800c78c:	2300      	movs	r3, #0
 800c78e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800c790:	2300      	movs	r3, #0
 800c792:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2b01      	cmp	r3, #1
 800c798:	d13e      	bne.n	800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800c79a:	4b23      	ldr	r3, [pc, #140]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7a2:	60fb      	str	r3, [r7, #12]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d005      	beq.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d12f      	bne.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800c7b0:	4b1e      	ldr	r3, [pc, #120]	; (800c82c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c7b2:	617b      	str	r3, [r7, #20]
          break;
 800c7b4:	e02f      	b.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800c7b6:	4b1c      	ldr	r3, [pc, #112]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7c2:	d108      	bne.n	800c7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c7c4:	4b18      	ldr	r3, [pc, #96]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7cc:	4a18      	ldr	r2, [pc, #96]	; (800c830 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800c7ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7d2:	613b      	str	r3, [r7, #16]
 800c7d4:	e007      	b.n	800c7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c7d6:	4b14      	ldr	r3, [pc, #80]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7de:	4a15      	ldr	r2, [pc, #84]	; (800c834 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800c7e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7e4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800c7e6:	4b10      	ldr	r3, [pc, #64]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c7e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7ec:	099b      	lsrs	r3, r3, #6
 800c7ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	fb02 f303 	mul.w	r3, r2, r3
 800c7f8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800c7fa:	4b0b      	ldr	r3, [pc, #44]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c7fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c800:	0f1b      	lsrs	r3, r3, #28
 800c802:	f003 0307 	and.w	r3, r3, #7
 800c806:	68ba      	ldr	r2, [r7, #8]
 800c808:	fbb2 f3f3 	udiv	r3, r2, r3
 800c80c:	617b      	str	r3, [r7, #20]
          break;
 800c80e:	e002      	b.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800c810:	2300      	movs	r3, #0
 800c812:	617b      	str	r3, [r7, #20]
          break;
 800c814:	bf00      	nop
        }
      }
      break;
 800c816:	bf00      	nop
    }
  }
  return frequency;
 800c818:	697b      	ldr	r3, [r7, #20]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	371c      	adds	r7, #28
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop
 800c828:	40023800 	.word	0x40023800
 800c82c:	00bb8000 	.word	0x00bb8000
 800c830:	007a1200 	.word	0x007a1200
 800c834:	00f42400 	.word	0x00f42400

0800c838 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d101      	bne.n	800c84a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c846:	2301      	movs	r3, #1
 800c848:	e07b      	b.n	800c942 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d108      	bne.n	800c864 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c85a:	d009      	beq.n	800c870 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	61da      	str	r2, [r3, #28]
 800c862:	e005      	b.n	800c870 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2200      	movs	r2, #0
 800c86e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d106      	bne.n	800c890 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f7fc f996 	bl	8008bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2202      	movs	r2, #2
 800c894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	689b      	ldr	r3, [r3, #8]
 800c8b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c8b8:	431a      	orrs	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c8c2:	431a      	orrs	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	691b      	ldr	r3, [r3, #16]
 800c8c8:	f003 0302 	and.w	r3, r3, #2
 800c8cc:	431a      	orrs	r2, r3
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	695b      	ldr	r3, [r3, #20]
 800c8d2:	f003 0301 	and.w	r3, r3, #1
 800c8d6:	431a      	orrs	r2, r3
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	699b      	ldr	r3, [r3, #24]
 800c8dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c8e0:	431a      	orrs	r2, r3
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	69db      	ldr	r3, [r3, #28]
 800c8e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8ea:	431a      	orrs	r2, r3
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6a1b      	ldr	r3, [r3, #32]
 800c8f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8f4:	ea42 0103 	orr.w	r1, r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	430a      	orrs	r2, r1
 800c906:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	699b      	ldr	r3, [r3, #24]
 800c90c:	0c1b      	lsrs	r3, r3, #16
 800c90e:	f003 0104 	and.w	r1, r3, #4
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c916:	f003 0210 	and.w	r2, r3, #16
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	430a      	orrs	r2, r1
 800c920:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	69da      	ldr	r2, [r3, #28]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c930:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2200      	movs	r2, #0
 800c936:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2201      	movs	r2, #1
 800c93c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c940:	2300      	movs	r3, #0
}
 800c942:	4618      	mov	r0, r3
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b082      	sub	sp, #8
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d101      	bne.n	800c95c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c958:	2301      	movs	r3, #1
 800c95a:	e03f      	b.n	800c9dc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c962:	b2db      	uxtb	r3, r3
 800c964:	2b00      	cmp	r3, #0
 800c966:	d106      	bne.n	800c976 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7fc f96b 	bl	8008c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2224      	movs	r2, #36	; 0x24
 800c97a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	68da      	ldr	r2, [r3, #12]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c98c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 f928 	bl	800cbe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	691a      	ldr	r2, [r3, #16]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c9a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	695a      	ldr	r2, [r3, #20]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c9b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	68da      	ldr	r2, [r3, #12]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c9c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2220      	movs	r2, #32
 800c9ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2220      	movs	r2, #32
 800c9d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b08a      	sub	sp, #40	; 0x28
 800c9e8:	af02      	add	r7, sp, #8
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	603b      	str	r3, [r7, #0]
 800c9f0:	4613      	mov	r3, r2
 800c9f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	2b20      	cmp	r3, #32
 800ca02:	d17c      	bne.n	800cafe <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d002      	beq.n	800ca10 <HAL_UART_Transmit+0x2c>
 800ca0a:	88fb      	ldrh	r3, [r7, #6]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d101      	bne.n	800ca14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ca10:	2301      	movs	r3, #1
 800ca12:	e075      	b.n	800cb00 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d101      	bne.n	800ca22 <HAL_UART_Transmit+0x3e>
 800ca1e:	2302      	movs	r3, #2
 800ca20:	e06e      	b.n	800cb00 <HAL_UART_Transmit+0x11c>
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2201      	movs	r2, #1
 800ca26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2221      	movs	r2, #33	; 0x21
 800ca34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ca38:	f7fc fada 	bl	8008ff0 <HAL_GetTick>
 800ca3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	88fa      	ldrh	r2, [r7, #6]
 800ca42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	88fa      	ldrh	r2, [r7, #6]
 800ca48:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	689b      	ldr	r3, [r3, #8]
 800ca4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca52:	d108      	bne.n	800ca66 <HAL_UART_Transmit+0x82>
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	691b      	ldr	r3, [r3, #16]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d104      	bne.n	800ca66 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	61bb      	str	r3, [r7, #24]
 800ca64:	e003      	b.n	800ca6e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2200      	movs	r2, #0
 800ca72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ca76:	e02a      	b.n	800cace <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	9300      	str	r3, [sp, #0]
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	2180      	movs	r1, #128	; 0x80
 800ca82:	68f8      	ldr	r0, [r7, #12]
 800ca84:	f000 f840 	bl	800cb08 <UART_WaitOnFlagUntilTimeout>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d001      	beq.n	800ca92 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ca8e:	2303      	movs	r3, #3
 800ca90:	e036      	b.n	800cb00 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10b      	bne.n	800cab0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	881b      	ldrh	r3, [r3, #0]
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800caa6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800caa8:	69bb      	ldr	r3, [r7, #24]
 800caaa:	3302      	adds	r3, #2
 800caac:	61bb      	str	r3, [r7, #24]
 800caae:	e007      	b.n	800cac0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cab0:	69fb      	ldr	r3, [r7, #28]
 800cab2:	781a      	ldrb	r2, [r3, #0]
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	3301      	adds	r3, #1
 800cabe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	3b01      	subs	r3, #1
 800cac8:	b29a      	uxth	r2, r3
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d1cf      	bne.n	800ca78 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	9300      	str	r3, [sp, #0]
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	2200      	movs	r2, #0
 800cae0:	2140      	movs	r1, #64	; 0x40
 800cae2:	68f8      	ldr	r0, [r7, #12]
 800cae4:	f000 f810 	bl	800cb08 <UART_WaitOnFlagUntilTimeout>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b00      	cmp	r3, #0
 800caec:	d001      	beq.n	800caf2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800caee:	2303      	movs	r3, #3
 800caf0:	e006      	b.n	800cb00 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2220      	movs	r2, #32
 800caf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cafa:	2300      	movs	r3, #0
 800cafc:	e000      	b.n	800cb00 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800cafe:	2302      	movs	r3, #2
  }
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3720      	adds	r7, #32
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b090      	sub	sp, #64	; 0x40
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	603b      	str	r3, [r7, #0]
 800cb14:	4613      	mov	r3, r2
 800cb16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb18:	e050      	b.n	800cbbc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb20:	d04c      	beq.n	800cbbc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cb22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d007      	beq.n	800cb38 <UART_WaitOnFlagUntilTimeout+0x30>
 800cb28:	f7fc fa62 	bl	8008ff0 <HAL_GetTick>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	1ad3      	subs	r3, r2, r3
 800cb32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d241      	bcs.n	800cbbc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	330c      	adds	r3, #12
 800cb3e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb42:	e853 3f00 	ldrex	r3, [r3]
 800cb46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	330c      	adds	r3, #12
 800cb56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cb58:	637a      	str	r2, [r7, #52]	; 0x34
 800cb5a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb60:	e841 2300 	strex	r3, r2, [r1]
 800cb64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d1e5      	bne.n	800cb38 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	3314      	adds	r3, #20
 800cb72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	e853 3f00 	ldrex	r3, [r3]
 800cb7a:	613b      	str	r3, [r7, #16]
   return(result);
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	f023 0301 	bic.w	r3, r3, #1
 800cb82:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	3314      	adds	r3, #20
 800cb8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb8c:	623a      	str	r2, [r7, #32]
 800cb8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb90:	69f9      	ldr	r1, [r7, #28]
 800cb92:	6a3a      	ldr	r2, [r7, #32]
 800cb94:	e841 2300 	strex	r3, r2, [r1]
 800cb98:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1e5      	bne.n	800cb6c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2220      	movs	r2, #32
 800cba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2220      	movs	r2, #32
 800cbac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800cbb8:	2303      	movs	r3, #3
 800cbba:	e00f      	b.n	800cbdc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	4013      	ands	r3, r2
 800cbc6:	68ba      	ldr	r2, [r7, #8]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	bf0c      	ite	eq
 800cbcc:	2301      	moveq	r3, #1
 800cbce:	2300      	movne	r3, #0
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	79fb      	ldrb	r3, [r7, #7]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d09f      	beq.n	800cb1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cbda:	2300      	movs	r3, #0
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3740      	adds	r7, #64	; 0x40
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe8:	b09f      	sub	sp, #124	; 0x7c
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cbee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	691b      	ldr	r3, [r3, #16]
 800cbf4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cbf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbfa:	68d9      	ldr	r1, [r3, #12]
 800cbfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	ea40 0301 	orr.w	r3, r0, r1
 800cc04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cc06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc08:	689a      	ldr	r2, [r3, #8]
 800cc0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc0c:	691b      	ldr	r3, [r3, #16]
 800cc0e:	431a      	orrs	r2, r3
 800cc10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc12:	695b      	ldr	r3, [r3, #20]
 800cc14:	431a      	orrs	r2, r3
 800cc16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc18:	69db      	ldr	r3, [r3, #28]
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800cc1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cc28:	f021 010c 	bic.w	r1, r1, #12
 800cc2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc32:	430b      	orrs	r3, r1
 800cc34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cc36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	695b      	ldr	r3, [r3, #20]
 800cc3c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cc40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc42:	6999      	ldr	r1, [r3, #24]
 800cc44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	ea40 0301 	orr.w	r3, r0, r1
 800cc4c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cc4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	4bc5      	ldr	r3, [pc, #788]	; (800cf68 <UART_SetConfig+0x384>)
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d004      	beq.n	800cc62 <UART_SetConfig+0x7e>
 800cc58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	4bc3      	ldr	r3, [pc, #780]	; (800cf6c <UART_SetConfig+0x388>)
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d103      	bne.n	800cc6a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cc62:	f7ff fc95 	bl	800c590 <HAL_RCC_GetPCLK2Freq>
 800cc66:	6778      	str	r0, [r7, #116]	; 0x74
 800cc68:	e002      	b.n	800cc70 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cc6a:	f7ff fc7d 	bl	800c568 <HAL_RCC_GetPCLK1Freq>
 800cc6e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc72:	69db      	ldr	r3, [r3, #28]
 800cc74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc78:	f040 80b6 	bne.w	800cde8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cc7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc7e:	461c      	mov	r4, r3
 800cc80:	f04f 0500 	mov.w	r5, #0
 800cc84:	4622      	mov	r2, r4
 800cc86:	462b      	mov	r3, r5
 800cc88:	1891      	adds	r1, r2, r2
 800cc8a:	6439      	str	r1, [r7, #64]	; 0x40
 800cc8c:	415b      	adcs	r3, r3
 800cc8e:	647b      	str	r3, [r7, #68]	; 0x44
 800cc90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cc94:	1912      	adds	r2, r2, r4
 800cc96:	eb45 0303 	adc.w	r3, r5, r3
 800cc9a:	f04f 0000 	mov.w	r0, #0
 800cc9e:	f04f 0100 	mov.w	r1, #0
 800cca2:	00d9      	lsls	r1, r3, #3
 800cca4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cca8:	00d0      	lsls	r0, r2, #3
 800ccaa:	4602      	mov	r2, r0
 800ccac:	460b      	mov	r3, r1
 800ccae:	1911      	adds	r1, r2, r4
 800ccb0:	6639      	str	r1, [r7, #96]	; 0x60
 800ccb2:	416b      	adcs	r3, r5
 800ccb4:	667b      	str	r3, [r7, #100]	; 0x64
 800ccb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	461a      	mov	r2, r3
 800ccbc:	f04f 0300 	mov.w	r3, #0
 800ccc0:	1891      	adds	r1, r2, r2
 800ccc2:	63b9      	str	r1, [r7, #56]	; 0x38
 800ccc4:	415b      	adcs	r3, r3
 800ccc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cccc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ccd0:	f7fb fa7a 	bl	80081c8 <__aeabi_uldivmod>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	4ba5      	ldr	r3, [pc, #660]	; (800cf70 <UART_SetConfig+0x38c>)
 800ccda:	fba3 2302 	umull	r2, r3, r3, r2
 800ccde:	095b      	lsrs	r3, r3, #5
 800cce0:	011e      	lsls	r6, r3, #4
 800cce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cce4:	461c      	mov	r4, r3
 800cce6:	f04f 0500 	mov.w	r5, #0
 800ccea:	4622      	mov	r2, r4
 800ccec:	462b      	mov	r3, r5
 800ccee:	1891      	adds	r1, r2, r2
 800ccf0:	6339      	str	r1, [r7, #48]	; 0x30
 800ccf2:	415b      	adcs	r3, r3
 800ccf4:	637b      	str	r3, [r7, #52]	; 0x34
 800ccf6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ccfa:	1912      	adds	r2, r2, r4
 800ccfc:	eb45 0303 	adc.w	r3, r5, r3
 800cd00:	f04f 0000 	mov.w	r0, #0
 800cd04:	f04f 0100 	mov.w	r1, #0
 800cd08:	00d9      	lsls	r1, r3, #3
 800cd0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cd0e:	00d0      	lsls	r0, r2, #3
 800cd10:	4602      	mov	r2, r0
 800cd12:	460b      	mov	r3, r1
 800cd14:	1911      	adds	r1, r2, r4
 800cd16:	65b9      	str	r1, [r7, #88]	; 0x58
 800cd18:	416b      	adcs	r3, r5
 800cd1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	461a      	mov	r2, r3
 800cd22:	f04f 0300 	mov.w	r3, #0
 800cd26:	1891      	adds	r1, r2, r2
 800cd28:	62b9      	str	r1, [r7, #40]	; 0x28
 800cd2a:	415b      	adcs	r3, r3
 800cd2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cd32:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800cd36:	f7fb fa47 	bl	80081c8 <__aeabi_uldivmod>
 800cd3a:	4602      	mov	r2, r0
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	4b8c      	ldr	r3, [pc, #560]	; (800cf70 <UART_SetConfig+0x38c>)
 800cd40:	fba3 1302 	umull	r1, r3, r3, r2
 800cd44:	095b      	lsrs	r3, r3, #5
 800cd46:	2164      	movs	r1, #100	; 0x64
 800cd48:	fb01 f303 	mul.w	r3, r1, r3
 800cd4c:	1ad3      	subs	r3, r2, r3
 800cd4e:	00db      	lsls	r3, r3, #3
 800cd50:	3332      	adds	r3, #50	; 0x32
 800cd52:	4a87      	ldr	r2, [pc, #540]	; (800cf70 <UART_SetConfig+0x38c>)
 800cd54:	fba2 2303 	umull	r2, r3, r2, r3
 800cd58:	095b      	lsrs	r3, r3, #5
 800cd5a:	005b      	lsls	r3, r3, #1
 800cd5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cd60:	441e      	add	r6, r3
 800cd62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd64:	4618      	mov	r0, r3
 800cd66:	f04f 0100 	mov.w	r1, #0
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	1894      	adds	r4, r2, r2
 800cd70:	623c      	str	r4, [r7, #32]
 800cd72:	415b      	adcs	r3, r3
 800cd74:	627b      	str	r3, [r7, #36]	; 0x24
 800cd76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cd7a:	1812      	adds	r2, r2, r0
 800cd7c:	eb41 0303 	adc.w	r3, r1, r3
 800cd80:	f04f 0400 	mov.w	r4, #0
 800cd84:	f04f 0500 	mov.w	r5, #0
 800cd88:	00dd      	lsls	r5, r3, #3
 800cd8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cd8e:	00d4      	lsls	r4, r2, #3
 800cd90:	4622      	mov	r2, r4
 800cd92:	462b      	mov	r3, r5
 800cd94:	1814      	adds	r4, r2, r0
 800cd96:	653c      	str	r4, [r7, #80]	; 0x50
 800cd98:	414b      	adcs	r3, r1
 800cd9a:	657b      	str	r3, [r7, #84]	; 0x54
 800cd9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	461a      	mov	r2, r3
 800cda2:	f04f 0300 	mov.w	r3, #0
 800cda6:	1891      	adds	r1, r2, r2
 800cda8:	61b9      	str	r1, [r7, #24]
 800cdaa:	415b      	adcs	r3, r3
 800cdac:	61fb      	str	r3, [r7, #28]
 800cdae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cdb2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800cdb6:	f7fb fa07 	bl	80081c8 <__aeabi_uldivmod>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	460b      	mov	r3, r1
 800cdbe:	4b6c      	ldr	r3, [pc, #432]	; (800cf70 <UART_SetConfig+0x38c>)
 800cdc0:	fba3 1302 	umull	r1, r3, r3, r2
 800cdc4:	095b      	lsrs	r3, r3, #5
 800cdc6:	2164      	movs	r1, #100	; 0x64
 800cdc8:	fb01 f303 	mul.w	r3, r1, r3
 800cdcc:	1ad3      	subs	r3, r2, r3
 800cdce:	00db      	lsls	r3, r3, #3
 800cdd0:	3332      	adds	r3, #50	; 0x32
 800cdd2:	4a67      	ldr	r2, [pc, #412]	; (800cf70 <UART_SetConfig+0x38c>)
 800cdd4:	fba2 2303 	umull	r2, r3, r2, r3
 800cdd8:	095b      	lsrs	r3, r3, #5
 800cdda:	f003 0207 	and.w	r2, r3, #7
 800cdde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4432      	add	r2, r6
 800cde4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cde6:	e0b9      	b.n	800cf5c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cde8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cdea:	461c      	mov	r4, r3
 800cdec:	f04f 0500 	mov.w	r5, #0
 800cdf0:	4622      	mov	r2, r4
 800cdf2:	462b      	mov	r3, r5
 800cdf4:	1891      	adds	r1, r2, r2
 800cdf6:	6139      	str	r1, [r7, #16]
 800cdf8:	415b      	adcs	r3, r3
 800cdfa:	617b      	str	r3, [r7, #20]
 800cdfc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ce00:	1912      	adds	r2, r2, r4
 800ce02:	eb45 0303 	adc.w	r3, r5, r3
 800ce06:	f04f 0000 	mov.w	r0, #0
 800ce0a:	f04f 0100 	mov.w	r1, #0
 800ce0e:	00d9      	lsls	r1, r3, #3
 800ce10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ce14:	00d0      	lsls	r0, r2, #3
 800ce16:	4602      	mov	r2, r0
 800ce18:	460b      	mov	r3, r1
 800ce1a:	eb12 0804 	adds.w	r8, r2, r4
 800ce1e:	eb43 0905 	adc.w	r9, r3, r5
 800ce22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f04f 0100 	mov.w	r1, #0
 800ce2c:	f04f 0200 	mov.w	r2, #0
 800ce30:	f04f 0300 	mov.w	r3, #0
 800ce34:	008b      	lsls	r3, r1, #2
 800ce36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ce3a:	0082      	lsls	r2, r0, #2
 800ce3c:	4640      	mov	r0, r8
 800ce3e:	4649      	mov	r1, r9
 800ce40:	f7fb f9c2 	bl	80081c8 <__aeabi_uldivmod>
 800ce44:	4602      	mov	r2, r0
 800ce46:	460b      	mov	r3, r1
 800ce48:	4b49      	ldr	r3, [pc, #292]	; (800cf70 <UART_SetConfig+0x38c>)
 800ce4a:	fba3 2302 	umull	r2, r3, r3, r2
 800ce4e:	095b      	lsrs	r3, r3, #5
 800ce50:	011e      	lsls	r6, r3, #4
 800ce52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce54:	4618      	mov	r0, r3
 800ce56:	f04f 0100 	mov.w	r1, #0
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	1894      	adds	r4, r2, r2
 800ce60:	60bc      	str	r4, [r7, #8]
 800ce62:	415b      	adcs	r3, r3
 800ce64:	60fb      	str	r3, [r7, #12]
 800ce66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce6a:	1812      	adds	r2, r2, r0
 800ce6c:	eb41 0303 	adc.w	r3, r1, r3
 800ce70:	f04f 0400 	mov.w	r4, #0
 800ce74:	f04f 0500 	mov.w	r5, #0
 800ce78:	00dd      	lsls	r5, r3, #3
 800ce7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ce7e:	00d4      	lsls	r4, r2, #3
 800ce80:	4622      	mov	r2, r4
 800ce82:	462b      	mov	r3, r5
 800ce84:	1814      	adds	r4, r2, r0
 800ce86:	64bc      	str	r4, [r7, #72]	; 0x48
 800ce88:	414b      	adcs	r3, r1
 800ce8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	4618      	mov	r0, r3
 800ce92:	f04f 0100 	mov.w	r1, #0
 800ce96:	f04f 0200 	mov.w	r2, #0
 800ce9a:	f04f 0300 	mov.w	r3, #0
 800ce9e:	008b      	lsls	r3, r1, #2
 800cea0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cea4:	0082      	lsls	r2, r0, #2
 800cea6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ceaa:	f7fb f98d 	bl	80081c8 <__aeabi_uldivmod>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	4b2f      	ldr	r3, [pc, #188]	; (800cf70 <UART_SetConfig+0x38c>)
 800ceb4:	fba3 1302 	umull	r1, r3, r3, r2
 800ceb8:	095b      	lsrs	r3, r3, #5
 800ceba:	2164      	movs	r1, #100	; 0x64
 800cebc:	fb01 f303 	mul.w	r3, r1, r3
 800cec0:	1ad3      	subs	r3, r2, r3
 800cec2:	011b      	lsls	r3, r3, #4
 800cec4:	3332      	adds	r3, #50	; 0x32
 800cec6:	4a2a      	ldr	r2, [pc, #168]	; (800cf70 <UART_SetConfig+0x38c>)
 800cec8:	fba2 2303 	umull	r2, r3, r2, r3
 800cecc:	095b      	lsrs	r3, r3, #5
 800cece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ced2:	441e      	add	r6, r3
 800ced4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ced6:	4618      	mov	r0, r3
 800ced8:	f04f 0100 	mov.w	r1, #0
 800cedc:	4602      	mov	r2, r0
 800cede:	460b      	mov	r3, r1
 800cee0:	1894      	adds	r4, r2, r2
 800cee2:	603c      	str	r4, [r7, #0]
 800cee4:	415b      	adcs	r3, r3
 800cee6:	607b      	str	r3, [r7, #4]
 800cee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ceec:	1812      	adds	r2, r2, r0
 800ceee:	eb41 0303 	adc.w	r3, r1, r3
 800cef2:	f04f 0400 	mov.w	r4, #0
 800cef6:	f04f 0500 	mov.w	r5, #0
 800cefa:	00dd      	lsls	r5, r3, #3
 800cefc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cf00:	00d4      	lsls	r4, r2, #3
 800cf02:	4622      	mov	r2, r4
 800cf04:	462b      	mov	r3, r5
 800cf06:	eb12 0a00 	adds.w	sl, r2, r0
 800cf0a:	eb43 0b01 	adc.w	fp, r3, r1
 800cf0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	4618      	mov	r0, r3
 800cf14:	f04f 0100 	mov.w	r1, #0
 800cf18:	f04f 0200 	mov.w	r2, #0
 800cf1c:	f04f 0300 	mov.w	r3, #0
 800cf20:	008b      	lsls	r3, r1, #2
 800cf22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cf26:	0082      	lsls	r2, r0, #2
 800cf28:	4650      	mov	r0, sl
 800cf2a:	4659      	mov	r1, fp
 800cf2c:	f7fb f94c 	bl	80081c8 <__aeabi_uldivmod>
 800cf30:	4602      	mov	r2, r0
 800cf32:	460b      	mov	r3, r1
 800cf34:	4b0e      	ldr	r3, [pc, #56]	; (800cf70 <UART_SetConfig+0x38c>)
 800cf36:	fba3 1302 	umull	r1, r3, r3, r2
 800cf3a:	095b      	lsrs	r3, r3, #5
 800cf3c:	2164      	movs	r1, #100	; 0x64
 800cf3e:	fb01 f303 	mul.w	r3, r1, r3
 800cf42:	1ad3      	subs	r3, r2, r3
 800cf44:	011b      	lsls	r3, r3, #4
 800cf46:	3332      	adds	r3, #50	; 0x32
 800cf48:	4a09      	ldr	r2, [pc, #36]	; (800cf70 <UART_SetConfig+0x38c>)
 800cf4a:	fba2 2303 	umull	r2, r3, r2, r3
 800cf4e:	095b      	lsrs	r3, r3, #5
 800cf50:	f003 020f 	and.w	r2, r3, #15
 800cf54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4432      	add	r2, r6
 800cf5a:	609a      	str	r2, [r3, #8]
}
 800cf5c:	bf00      	nop
 800cf5e:	377c      	adds	r7, #124	; 0x7c
 800cf60:	46bd      	mov	sp, r7
 800cf62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf66:	bf00      	nop
 800cf68:	40011000 	.word	0x40011000
 800cf6c:	40011400 	.word	0x40011400
 800cf70:	51eb851f 	.word	0x51eb851f

0800cf74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cf74:	b084      	sub	sp, #16
 800cf76:	b580      	push	{r7, lr}
 800cf78:	b084      	sub	sp, #16
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
 800cf7e:	f107 001c 	add.w	r0, r7, #28
 800cf82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d122      	bne.n	800cfd2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800cfa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cfb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d105      	bne.n	800cfc6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 f9a0 	bl	800d30c <USB_CoreReset>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	73fb      	strb	r3, [r7, #15]
 800cfd0:	e01a      	b.n	800d008 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 f994 	bl	800d30c <USB_CoreReset>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cfe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d106      	bne.n	800cffc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cff2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	639a      	str	r2, [r3, #56]	; 0x38
 800cffa:	e005      	b.n	800d008 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d000:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d10b      	bne.n	800d026 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	f043 0206 	orr.w	r2, r3, #6
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	689b      	ldr	r3, [r3, #8]
 800d01e:	f043 0220 	orr.w	r2, r3, #32
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d026:	7bfb      	ldrb	r3, [r7, #15]
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3710      	adds	r7, #16
 800d02c:	46bd      	mov	sp, r7
 800d02e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d032:	b004      	add	sp, #16
 800d034:	4770      	bx	lr

0800d036 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d036:	b480      	push	{r7}
 800d038:	b083      	sub	sp, #12
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	f043 0201 	orr.w	r2, r3, #1
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d04a:	2300      	movs	r3, #0
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	370c      	adds	r7, #12
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	f023 0201 	bic.w	r2, r3, #1
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d06c:	2300      	movs	r3, #0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	370c      	adds	r7, #12
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr

0800d07a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b084      	sub	sp, #16
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
 800d082:	460b      	mov	r3, r1
 800d084:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d086:	2300      	movs	r3, #0
 800d088:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d096:	78fb      	ldrb	r3, [r7, #3]
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d115      	bne.n	800d0c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	68db      	ldr	r3, [r3, #12]
 800d0a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d0a8:	2001      	movs	r0, #1
 800d0aa:	f7fb ffad 	bl	8009008 <HAL_Delay>
      ms++;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 f91a 	bl	800d2ee <USB_GetMode>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d01e      	beq.n	800d0fe <USB_SetCurrentMode+0x84>
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2b31      	cmp	r3, #49	; 0x31
 800d0c4:	d9f0      	bls.n	800d0a8 <USB_SetCurrentMode+0x2e>
 800d0c6:	e01a      	b.n	800d0fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d0c8:	78fb      	ldrb	r3, [r7, #3]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d115      	bne.n	800d0fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d0da:	2001      	movs	r0, #1
 800d0dc:	f7fb ff94 	bl	8009008 <HAL_Delay>
      ms++;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 f901 	bl	800d2ee <USB_GetMode>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d005      	beq.n	800d0fe <USB_SetCurrentMode+0x84>
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2b31      	cmp	r3, #49	; 0x31
 800d0f6:	d9f0      	bls.n	800d0da <USB_SetCurrentMode+0x60>
 800d0f8:	e001      	b.n	800d0fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e005      	b.n	800d10a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2b32      	cmp	r3, #50	; 0x32
 800d102:	d101      	bne.n	800d108 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d104:	2301      	movs	r3, #1
 800d106:	e000      	b.n	800d10a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
	...

0800d114 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d114:	b480      	push	{r7}
 800d116:	b085      	sub	sp, #20
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d11e:	2300      	movs	r3, #0
 800d120:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	019b      	lsls	r3, r3, #6
 800d126:	f043 0220 	orr.w	r2, r3, #32
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	3301      	adds	r3, #1
 800d132:	60fb      	str	r3, [r7, #12]
 800d134:	4a08      	ldr	r2, [pc, #32]	; (800d158 <USB_FlushTxFifo+0x44>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d901      	bls.n	800d13e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800d13a:	2303      	movs	r3, #3
 800d13c:	e006      	b.n	800d14c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	691b      	ldr	r3, [r3, #16]
 800d142:	f003 0320 	and.w	r3, r3, #32
 800d146:	2b20      	cmp	r3, #32
 800d148:	d0f1      	beq.n	800d12e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3714      	adds	r7, #20
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr
 800d158:	00030d40 	.word	0x00030d40

0800d15c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b085      	sub	sp, #20
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d164:	2300      	movs	r3, #0
 800d166:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2210      	movs	r2, #16
 800d16c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	3301      	adds	r3, #1
 800d172:	60fb      	str	r3, [r7, #12]
 800d174:	4a08      	ldr	r2, [pc, #32]	; (800d198 <USB_FlushRxFifo+0x3c>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d901      	bls.n	800d17e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800d17a:	2303      	movs	r3, #3
 800d17c:	e006      	b.n	800d18c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	691b      	ldr	r3, [r3, #16]
 800d182:	f003 0310 	and.w	r3, r3, #16
 800d186:	2b10      	cmp	r3, #16
 800d188:	d0f1      	beq.n	800d16e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d18a:	2300      	movs	r3, #0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3714      	adds	r7, #20
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr
 800d198:	00030d40 	.word	0x00030d40

0800d19c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b089      	sub	sp, #36	; 0x24
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	60b9      	str	r1, [r7, #8]
 800d1a6:	4611      	mov	r1, r2
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	71fb      	strb	r3, [r7, #7]
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d1ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d123      	bne.n	800d20a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d1c2:	88bb      	ldrh	r3, [r7, #4]
 800d1c4:	3303      	adds	r3, #3
 800d1c6:	089b      	lsrs	r3, r3, #2
 800d1c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	61bb      	str	r3, [r7, #24]
 800d1ce:	e018      	b.n	800d202 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d1d0:	79fb      	ldrb	r3, [r7, #7]
 800d1d2:	031a      	lsls	r2, r3, #12
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	4413      	add	r3, r2
 800d1d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1dc:	461a      	mov	r2, r3
 800d1de:	69fb      	ldr	r3, [r7, #28]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d1ea:	69fb      	ldr	r3, [r7, #28]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	3301      	adds	r3, #1
 800d200:	61bb      	str	r3, [r7, #24]
 800d202:	69ba      	ldr	r2, [r7, #24]
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	429a      	cmp	r2, r3
 800d208:	d3e2      	bcc.n	800d1d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d20a:	2300      	movs	r3, #0
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3724      	adds	r7, #36	; 0x24
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr

0800d218 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d218:	b480      	push	{r7}
 800d21a:	b08b      	sub	sp, #44	; 0x2c
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	60f8      	str	r0, [r7, #12]
 800d220:	60b9      	str	r1, [r7, #8]
 800d222:	4613      	mov	r3, r2
 800d224:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d22e:	88fb      	ldrh	r3, [r7, #6]
 800d230:	089b      	lsrs	r3, r3, #2
 800d232:	b29b      	uxth	r3, r3
 800d234:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d236:	88fb      	ldrh	r3, [r7, #6]
 800d238:	f003 0303 	and.w	r3, r3, #3
 800d23c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d23e:	2300      	movs	r3, #0
 800d240:	623b      	str	r3, [r7, #32]
 800d242:	e014      	b.n	800d26e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d244:	69bb      	ldr	r3, [r7, #24]
 800d246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d24a:	681a      	ldr	r2, [r3, #0]
 800d24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24e:	601a      	str	r2, [r3, #0]
    pDest++;
 800d250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d252:	3301      	adds	r3, #1
 800d254:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d258:	3301      	adds	r3, #1
 800d25a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25e:	3301      	adds	r3, #1
 800d260:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d264:	3301      	adds	r3, #1
 800d266:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d268:	6a3b      	ldr	r3, [r7, #32]
 800d26a:	3301      	adds	r3, #1
 800d26c:	623b      	str	r3, [r7, #32]
 800d26e:	6a3a      	ldr	r2, [r7, #32]
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	429a      	cmp	r2, r3
 800d274:	d3e6      	bcc.n	800d244 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d276:	8bfb      	ldrh	r3, [r7, #30]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d01e      	beq.n	800d2ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d27c:	2300      	movs	r3, #0
 800d27e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d286:	461a      	mov	r2, r3
 800d288:	f107 0310 	add.w	r3, r7, #16
 800d28c:	6812      	ldr	r2, [r2, #0]
 800d28e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d290:	693a      	ldr	r2, [r7, #16]
 800d292:	6a3b      	ldr	r3, [r7, #32]
 800d294:	b2db      	uxtb	r3, r3
 800d296:	00db      	lsls	r3, r3, #3
 800d298:	fa22 f303 	lsr.w	r3, r2, r3
 800d29c:	b2da      	uxtb	r2, r3
 800d29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a0:	701a      	strb	r2, [r3, #0]
      i++;
 800d2a2:	6a3b      	ldr	r3, [r7, #32]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	623b      	str	r3, [r7, #32]
      pDest++;
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d2ae:	8bfb      	ldrh	r3, [r7, #30]
 800d2b0:	3b01      	subs	r3, #1
 800d2b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d2b4:	8bfb      	ldrh	r3, [r7, #30]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d1ea      	bne.n	800d290 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	372c      	adds	r7, #44	; 0x2c
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr

0800d2c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b085      	sub	sp, #20
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	695b      	ldr	r3, [r3, #20]
 800d2d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	699b      	ldr	r3, [r3, #24]
 800d2da:	68fa      	ldr	r2, [r7, #12]
 800d2dc:	4013      	ands	r3, r2
 800d2de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3714      	adds	r7, #20
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr

0800d2ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d2ee:	b480      	push	{r7}
 800d2f0:	b083      	sub	sp, #12
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	695b      	ldr	r3, [r3, #20]
 800d2fa:	f003 0301 	and.w	r3, r3, #1
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	370c      	adds	r7, #12
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr
	...

0800d30c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b085      	sub	sp, #20
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d314:	2300      	movs	r3, #0
 800d316:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	3301      	adds	r3, #1
 800d31c:	60fb      	str	r3, [r7, #12]
 800d31e:	4a13      	ldr	r2, [pc, #76]	; (800d36c <USB_CoreReset+0x60>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d901      	bls.n	800d328 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800d324:	2303      	movs	r3, #3
 800d326:	e01a      	b.n	800d35e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	691b      	ldr	r3, [r3, #16]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	daf3      	bge.n	800d318 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d330:	2300      	movs	r3, #0
 800d332:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	691b      	ldr	r3, [r3, #16]
 800d338:	f043 0201 	orr.w	r2, r3, #1
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	3301      	adds	r3, #1
 800d344:	60fb      	str	r3, [r7, #12]
 800d346:	4a09      	ldr	r2, [pc, #36]	; (800d36c <USB_CoreReset+0x60>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d901      	bls.n	800d350 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800d34c:	2303      	movs	r3, #3
 800d34e:	e006      	b.n	800d35e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	691b      	ldr	r3, [r3, #16]
 800d354:	f003 0301 	and.w	r3, r3, #1
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d0f1      	beq.n	800d340 <USB_CoreReset+0x34>

  return HAL_OK;
 800d35c:	2300      	movs	r3, #0
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3714      	adds	r7, #20
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop
 800d36c:	00030d40 	.word	0x00030d40

0800d370 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d370:	b084      	sub	sp, #16
 800d372:	b580      	push	{r7, lr}
 800d374:	b084      	sub	sp, #16
 800d376:	af00      	add	r7, sp, #0
 800d378:	6078      	str	r0, [r7, #4]
 800d37a:	f107 001c 	add.w	r0, r7, #28
 800d37e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d38c:	461a      	mov	r2, r3
 800d38e:	2300      	movs	r3, #0
 800d390:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d396:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ae:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d018      	beq.n	800d3f4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d10a      	bne.n	800d3de <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	68ba      	ldr	r2, [r7, #8]
 800d3d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d3d6:	f043 0304 	orr.w	r3, r3, #4
 800d3da:	6013      	str	r3, [r2, #0]
 800d3dc:	e014      	b.n	800d408 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	68ba      	ldr	r2, [r7, #8]
 800d3e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d3ec:	f023 0304 	bic.w	r3, r3, #4
 800d3f0:	6013      	str	r3, [r2, #0]
 800d3f2:	e009      	b.n	800d408 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	68ba      	ldr	r2, [r7, #8]
 800d3fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d402:	f023 0304 	bic.w	r3, r3, #4
 800d406:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800d408:	2110      	movs	r1, #16
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f7ff fe82 	bl	800d114 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f7ff fea3 	bl	800d15c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d416:	2300      	movs	r3, #0
 800d418:	60fb      	str	r3, [r7, #12]
 800d41a:	e015      	b.n	800d448 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	015a      	lsls	r2, r3, #5
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	4413      	add	r3, r2
 800d424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d428:	461a      	mov	r2, r3
 800d42a:	f04f 33ff 	mov.w	r3, #4294967295
 800d42e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	015a      	lsls	r2, r3, #5
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	4413      	add	r3, r2
 800d438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d43c:	461a      	mov	r2, r3
 800d43e:	2300      	movs	r3, #0
 800d440:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	3301      	adds	r3, #1
 800d446:	60fb      	str	r3, [r7, #12]
 800d448:	6a3b      	ldr	r3, [r7, #32]
 800d44a:	68fa      	ldr	r2, [r7, #12]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d3e5      	bcc.n	800d41c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2200      	movs	r2, #0
 800d454:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f04f 32ff 	mov.w	r2, #4294967295
 800d45c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d466:	2b00      	cmp	r3, #0
 800d468:	d00b      	beq.n	800d482 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d470:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4a13      	ldr	r2, [pc, #76]	; (800d4c4 <USB_HostInit+0x154>)
 800d476:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4a13      	ldr	r2, [pc, #76]	; (800d4c8 <USB_HostInit+0x158>)
 800d47c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d480:	e009      	b.n	800d496 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2280      	movs	r2, #128	; 0x80
 800d486:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	4a10      	ldr	r2, [pc, #64]	; (800d4cc <USB_HostInit+0x15c>)
 800d48c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	4a0f      	ldr	r2, [pc, #60]	; (800d4d0 <USB_HostInit+0x160>)
 800d492:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d105      	bne.n	800d4a8 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	699b      	ldr	r3, [r3, #24]
 800d4a0:	f043 0210 	orr.w	r2, r3, #16
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	699a      	ldr	r2, [r3, #24]
 800d4ac:	4b09      	ldr	r3, [pc, #36]	; (800d4d4 <USB_HostInit+0x164>)
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800d4b4:	2300      	movs	r3, #0
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3710      	adds	r7, #16
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d4c0:	b004      	add	sp, #16
 800d4c2:	4770      	bx	lr
 800d4c4:	01000200 	.word	0x01000200
 800d4c8:	00e00300 	.word	0x00e00300
 800d4cc:	00600080 	.word	0x00600080
 800d4d0:	004000e0 	.word	0x004000e0
 800d4d4:	a3200008 	.word	0xa3200008

0800d4d8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b085      	sub	sp, #20
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	460b      	mov	r3, r1
 800d4e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	68fa      	ldr	r2, [r7, #12]
 800d4f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d4f6:	f023 0303 	bic.w	r3, r3, #3
 800d4fa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	78fb      	ldrb	r3, [r7, #3]
 800d506:	f003 0303 	and.w	r3, r3, #3
 800d50a:	68f9      	ldr	r1, [r7, #12]
 800d50c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d510:	4313      	orrs	r3, r2
 800d512:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d514:	78fb      	ldrb	r3, [r7, #3]
 800d516:	2b01      	cmp	r3, #1
 800d518:	d107      	bne.n	800d52a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d520:	461a      	mov	r2, r3
 800d522:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d526:	6053      	str	r3, [r2, #4]
 800d528:	e009      	b.n	800d53e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d52a:	78fb      	ldrb	r3, [r7, #3]
 800d52c:	2b02      	cmp	r3, #2
 800d52e:	d106      	bne.n	800d53e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d536:	461a      	mov	r2, r3
 800d538:	f241 7370 	movw	r3, #6000	; 0x1770
 800d53c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d53e:	2300      	movs	r3, #0
}
 800d540:	4618      	mov	r0, r3
 800d542:	3714      	adds	r7, #20
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr

0800d54c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d558:	2300      	movs	r3, #0
 800d55a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d56c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	68fa      	ldr	r2, [r7, #12]
 800d572:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d57a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d57c:	2064      	movs	r0, #100	; 0x64
 800d57e:	f7fb fd43 	bl	8009008 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	68fa      	ldr	r2, [r7, #12]
 800d586:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d58a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d58e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d590:	200a      	movs	r0, #10
 800d592:	f7fb fd39 	bl	8009008 <HAL_Delay>

  return HAL_OK;
 800d596:	2300      	movs	r3, #0
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3710      	adds	r7, #16
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	460b      	mov	r3, r1
 800d5aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d5c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d109      	bne.n	800d5e4 <USB_DriveVbus+0x44>
 800d5d0:	78fb      	ldrb	r3, [r7, #3]
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d106      	bne.n	800d5e4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	68fa      	ldr	r2, [r7, #12]
 800d5da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d5de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d5e2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d5ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5ee:	d109      	bne.n	800d604 <USB_DriveVbus+0x64>
 800d5f0:	78fb      	ldrb	r3, [r7, #3]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d106      	bne.n	800d604 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d5fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d602:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d604:	2300      	movs	r3, #0
}
 800d606:	4618      	mov	r0, r3
 800d608:	3714      	adds	r7, #20
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr

0800d612 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d612:	b480      	push	{r7}
 800d614:	b085      	sub	sp, #20
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d61e:	2300      	movs	r3, #0
 800d620:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	0c5b      	lsrs	r3, r3, #17
 800d630:	f003 0303 	and.w	r3, r3, #3
}
 800d634:	4618      	mov	r0, r3
 800d636:	3714      	adds	r7, #20
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d640:	b480      	push	{r7}
 800d642:	b085      	sub	sp, #20
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	b29b      	uxth	r3, r3
}
 800d656:	4618      	mov	r0, r3
 800d658:	3714      	adds	r7, #20
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr
	...

0800d664 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b088      	sub	sp, #32
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	4608      	mov	r0, r1
 800d66e:	4611      	mov	r1, r2
 800d670:	461a      	mov	r2, r3
 800d672:	4603      	mov	r3, r0
 800d674:	70fb      	strb	r3, [r7, #3]
 800d676:	460b      	mov	r3, r1
 800d678:	70bb      	strb	r3, [r7, #2]
 800d67a:	4613      	mov	r3, r2
 800d67c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d67e:	2300      	movs	r3, #0
 800d680:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d686:	78fb      	ldrb	r3, [r7, #3]
 800d688:	015a      	lsls	r2, r3, #5
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	4413      	add	r3, r2
 800d68e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d692:	461a      	mov	r2, r3
 800d694:	f04f 33ff 	mov.w	r3, #4294967295
 800d698:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d69a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d69e:	2b03      	cmp	r3, #3
 800d6a0:	d87e      	bhi.n	800d7a0 <USB_HC_Init+0x13c>
 800d6a2:	a201      	add	r2, pc, #4	; (adr r2, 800d6a8 <USB_HC_Init+0x44>)
 800d6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a8:	0800d6b9 	.word	0x0800d6b9
 800d6ac:	0800d763 	.word	0x0800d763
 800d6b0:	0800d6b9 	.word	0x0800d6b9
 800d6b4:	0800d725 	.word	0x0800d725
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d6b8:	78fb      	ldrb	r3, [r7, #3]
 800d6ba:	015a      	lsls	r2, r3, #5
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	4413      	add	r3, r2
 800d6c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	f240 439d 	movw	r3, #1181	; 0x49d
 800d6ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d6cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	da10      	bge.n	800d6f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d6d4:	78fb      	ldrb	r3, [r7, #3]
 800d6d6:	015a      	lsls	r2, r3, #5
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	4413      	add	r3, r2
 800d6dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6e0:	68db      	ldr	r3, [r3, #12]
 800d6e2:	78fa      	ldrb	r2, [r7, #3]
 800d6e4:	0151      	lsls	r1, r2, #5
 800d6e6:	693a      	ldr	r2, [r7, #16]
 800d6e8:	440a      	add	r2, r1
 800d6ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d6ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6f2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800d6f4:	e057      	b.n	800d7a6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d051      	beq.n	800d7a6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d702:	78fb      	ldrb	r3, [r7, #3]
 800d704:	015a      	lsls	r2, r3, #5
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	4413      	add	r3, r2
 800d70a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	78fa      	ldrb	r2, [r7, #3]
 800d712:	0151      	lsls	r1, r2, #5
 800d714:	693a      	ldr	r2, [r7, #16]
 800d716:	440a      	add	r2, r1
 800d718:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d71c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d720:	60d3      	str	r3, [r2, #12]
      break;
 800d722:	e040      	b.n	800d7a6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d724:	78fb      	ldrb	r3, [r7, #3]
 800d726:	015a      	lsls	r2, r3, #5
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	4413      	add	r3, r2
 800d72c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d730:	461a      	mov	r2, r3
 800d732:	f240 639d 	movw	r3, #1693	; 0x69d
 800d736:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d738:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	da34      	bge.n	800d7aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d740:	78fb      	ldrb	r3, [r7, #3]
 800d742:	015a      	lsls	r2, r3, #5
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	4413      	add	r3, r2
 800d748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	78fa      	ldrb	r2, [r7, #3]
 800d750:	0151      	lsls	r1, r2, #5
 800d752:	693a      	ldr	r2, [r7, #16]
 800d754:	440a      	add	r2, r1
 800d756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d75a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d75e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d760:	e023      	b.n	800d7aa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d762:	78fb      	ldrb	r3, [r7, #3]
 800d764:	015a      	lsls	r2, r3, #5
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	4413      	add	r3, r2
 800d76a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d76e:	461a      	mov	r2, r3
 800d770:	f240 2325 	movw	r3, #549	; 0x225
 800d774:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d776:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	da17      	bge.n	800d7ae <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d77e:	78fb      	ldrb	r3, [r7, #3]
 800d780:	015a      	lsls	r2, r3, #5
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	4413      	add	r3, r2
 800d786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d78a:	68db      	ldr	r3, [r3, #12]
 800d78c:	78fa      	ldrb	r2, [r7, #3]
 800d78e:	0151      	lsls	r1, r2, #5
 800d790:	693a      	ldr	r2, [r7, #16]
 800d792:	440a      	add	r2, r1
 800d794:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d798:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d79c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d79e:	e006      	b.n	800d7ae <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	77fb      	strb	r3, [r7, #31]
      break;
 800d7a4:	e004      	b.n	800d7b0 <USB_HC_Init+0x14c>
      break;
 800d7a6:	bf00      	nop
 800d7a8:	e002      	b.n	800d7b0 <USB_HC_Init+0x14c>
      break;
 800d7aa:	bf00      	nop
 800d7ac:	e000      	b.n	800d7b0 <USB_HC_Init+0x14c>
      break;
 800d7ae:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7b6:	699a      	ldr	r2, [r3, #24]
 800d7b8:	78fb      	ldrb	r3, [r7, #3]
 800d7ba:	f003 030f 	and.w	r3, r3, #15
 800d7be:	2101      	movs	r1, #1
 800d7c0:	fa01 f303 	lsl.w	r3, r1, r3
 800d7c4:	6939      	ldr	r1, [r7, #16]
 800d7c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	699b      	ldr	r3, [r3, #24]
 800d7d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d7da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	da03      	bge.n	800d7ea <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d7e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d7e6:	61bb      	str	r3, [r7, #24]
 800d7e8:	e001      	b.n	800d7ee <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f7ff ff0f 	bl	800d612 <USB_GetHostSpeed>
 800d7f4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d7f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d106      	bne.n	800d80c <USB_HC_Init+0x1a8>
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2b02      	cmp	r3, #2
 800d802:	d003      	beq.n	800d80c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d804:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d808:	617b      	str	r3, [r7, #20]
 800d80a:	e001      	b.n	800d810 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d80c:	2300      	movs	r3, #0
 800d80e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d810:	787b      	ldrb	r3, [r7, #1]
 800d812:	059b      	lsls	r3, r3, #22
 800d814:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d818:	78bb      	ldrb	r3, [r7, #2]
 800d81a:	02db      	lsls	r3, r3, #11
 800d81c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d820:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d822:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d826:	049b      	lsls	r3, r3, #18
 800d828:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d82c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d82e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d830:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d834:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d83a:	78fb      	ldrb	r3, [r7, #3]
 800d83c:	0159      	lsls	r1, r3, #5
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	440b      	add	r3, r1
 800d842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d846:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d84c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800d84e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d852:	2b03      	cmp	r3, #3
 800d854:	d10f      	bne.n	800d876 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d856:	78fb      	ldrb	r3, [r7, #3]
 800d858:	015a      	lsls	r2, r3, #5
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	4413      	add	r3, r2
 800d85e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	78fa      	ldrb	r2, [r7, #3]
 800d866:	0151      	lsls	r1, r2, #5
 800d868:	693a      	ldr	r2, [r7, #16]
 800d86a:	440a      	add	r2, r1
 800d86c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d870:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d874:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d876:	7ffb      	ldrb	r3, [r7, #31]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3720      	adds	r7, #32
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b08c      	sub	sp, #48	; 0x30
 800d884:	af02      	add	r7, sp, #8
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	4613      	mov	r3, r2
 800d88c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	785b      	ldrb	r3, [r3, #1]
 800d896:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d89c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d02d      	beq.n	800d906 <USB_HC_StartXfer+0x86>
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	791b      	ldrb	r3, [r3, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d129      	bne.n	800d906 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800d8b2:	79fb      	ldrb	r3, [r7, #7]
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	d117      	bne.n	800d8e8 <USB_HC_StartXfer+0x68>
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	79db      	ldrb	r3, [r3, #7]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d003      	beq.n	800d8c8 <USB_HC_StartXfer+0x48>
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	79db      	ldrb	r3, [r3, #7]
 800d8c4:	2b02      	cmp	r3, #2
 800d8c6:	d10f      	bne.n	800d8e8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	015a      	lsls	r2, r3, #5
 800d8cc:	6a3b      	ldr	r3, [r7, #32]
 800d8ce:	4413      	add	r3, r2
 800d8d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8d4:	68db      	ldr	r3, [r3, #12]
 800d8d6:	69fa      	ldr	r2, [r7, #28]
 800d8d8:	0151      	lsls	r1, r2, #5
 800d8da:	6a3a      	ldr	r2, [r7, #32]
 800d8dc:	440a      	add	r2, r1
 800d8de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d8e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8e6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800d8e8:	79fb      	ldrb	r3, [r7, #7]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d10b      	bne.n	800d906 <USB_HC_StartXfer+0x86>
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	795b      	ldrb	r3, [r3, #5]
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d107      	bne.n	800d906 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	785b      	ldrb	r3, [r3, #1]
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f000 fa2f 	bl	800dd60 <USB_DoPing>
      return HAL_OK;
 800d902:	2300      	movs	r3, #0
 800d904:	e0f8      	b.n	800daf8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	695b      	ldr	r3, [r3, #20]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d018      	beq.n	800d940 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	695b      	ldr	r3, [r3, #20]
 800d912:	68ba      	ldr	r2, [r7, #8]
 800d914:	8912      	ldrh	r2, [r2, #8]
 800d916:	4413      	add	r3, r2
 800d918:	3b01      	subs	r3, #1
 800d91a:	68ba      	ldr	r2, [r7, #8]
 800d91c:	8912      	ldrh	r2, [r2, #8]
 800d91e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d922:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d924:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d926:	8b7b      	ldrh	r3, [r7, #26]
 800d928:	429a      	cmp	r2, r3
 800d92a:	d90b      	bls.n	800d944 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d92c:	8b7b      	ldrh	r3, [r7, #26]
 800d92e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d930:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d932:	68ba      	ldr	r2, [r7, #8]
 800d934:	8912      	ldrh	r2, [r2, #8]
 800d936:	fb02 f203 	mul.w	r2, r2, r3
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	611a      	str	r2, [r3, #16]
 800d93e:	e001      	b.n	800d944 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d940:	2301      	movs	r3, #1
 800d942:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	78db      	ldrb	r3, [r3, #3]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d007      	beq.n	800d95c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d94c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d94e:	68ba      	ldr	r2, [r7, #8]
 800d950:	8912      	ldrh	r2, [r2, #8]
 800d952:	fb02 f203 	mul.w	r2, r2, r3
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	611a      	str	r2, [r3, #16]
 800d95a:	e003      	b.n	800d964 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	695a      	ldr	r2, [r3, #20]
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	691b      	ldr	r3, [r3, #16]
 800d968:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d96c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d96e:	04d9      	lsls	r1, r3, #19
 800d970:	4b63      	ldr	r3, [pc, #396]	; (800db00 <USB_HC_StartXfer+0x280>)
 800d972:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d974:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	7a9b      	ldrb	r3, [r3, #10]
 800d97a:	075b      	lsls	r3, r3, #29
 800d97c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d980:	69f9      	ldr	r1, [r7, #28]
 800d982:	0148      	lsls	r0, r1, #5
 800d984:	6a39      	ldr	r1, [r7, #32]
 800d986:	4401      	add	r1, r0
 800d988:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d98c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d98e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d990:	79fb      	ldrb	r3, [r7, #7]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d009      	beq.n	800d9aa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	68d9      	ldr	r1, [r3, #12]
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	015a      	lsls	r2, r3, #5
 800d99e:	6a3b      	ldr	r3, [r7, #32]
 800d9a0:	4413      	add	r3, r2
 800d9a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9a6:	460a      	mov	r2, r1
 800d9a8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d9aa:	6a3b      	ldr	r3, [r7, #32]
 800d9ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d9b0:	689b      	ldr	r3, [r3, #8]
 800d9b2:	f003 0301 	and.w	r3, r3, #1
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	bf0c      	ite	eq
 800d9ba:	2301      	moveq	r3, #1
 800d9bc:	2300      	movne	r3, #0
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d9c2:	69fb      	ldr	r3, [r7, #28]
 800d9c4:	015a      	lsls	r2, r3, #5
 800d9c6:	6a3b      	ldr	r3, [r7, #32]
 800d9c8:	4413      	add	r3, r2
 800d9ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	69fa      	ldr	r2, [r7, #28]
 800d9d2:	0151      	lsls	r1, r2, #5
 800d9d4:	6a3a      	ldr	r2, [r7, #32]
 800d9d6:	440a      	add	r2, r1
 800d9d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d9dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d9e0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d9e2:	69fb      	ldr	r3, [r7, #28]
 800d9e4:	015a      	lsls	r2, r3, #5
 800d9e6:	6a3b      	ldr	r3, [r7, #32]
 800d9e8:	4413      	add	r3, r2
 800d9ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	7e7b      	ldrb	r3, [r7, #25]
 800d9f2:	075b      	lsls	r3, r3, #29
 800d9f4:	69f9      	ldr	r1, [r7, #28]
 800d9f6:	0148      	lsls	r0, r1, #5
 800d9f8:	6a39      	ldr	r1, [r7, #32]
 800d9fa:	4401      	add	r1, r0
 800d9fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800da00:	4313      	orrs	r3, r2
 800da02:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	015a      	lsls	r2, r3, #5
 800da08:	6a3b      	ldr	r3, [r7, #32]
 800da0a:	4413      	add	r3, r2
 800da0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800da1a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	78db      	ldrb	r3, [r3, #3]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d004      	beq.n	800da2e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da2a:	613b      	str	r3, [r7, #16]
 800da2c:	e003      	b.n	800da36 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800da34:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800da3c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800da3e:	69fb      	ldr	r3, [r7, #28]
 800da40:	015a      	lsls	r2, r3, #5
 800da42:	6a3b      	ldr	r3, [r7, #32]
 800da44:	4413      	add	r3, r2
 800da46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da4a:	461a      	mov	r2, r3
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800da50:	79fb      	ldrb	r3, [r7, #7]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d001      	beq.n	800da5a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800da56:	2300      	movs	r3, #0
 800da58:	e04e      	b.n	800daf8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	78db      	ldrb	r3, [r3, #3]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d149      	bne.n	800daf6 <USB_HC_StartXfer+0x276>
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	695b      	ldr	r3, [r3, #20]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d045      	beq.n	800daf6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	79db      	ldrb	r3, [r3, #7]
 800da6e:	2b03      	cmp	r3, #3
 800da70:	d830      	bhi.n	800dad4 <USB_HC_StartXfer+0x254>
 800da72:	a201      	add	r2, pc, #4	; (adr r2, 800da78 <USB_HC_StartXfer+0x1f8>)
 800da74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da78:	0800da89 	.word	0x0800da89
 800da7c:	0800daad 	.word	0x0800daad
 800da80:	0800da89 	.word	0x0800da89
 800da84:	0800daad 	.word	0x0800daad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	695b      	ldr	r3, [r3, #20]
 800da8c:	3303      	adds	r3, #3
 800da8e:	089b      	lsrs	r3, r3, #2
 800da90:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800da92:	8afa      	ldrh	r2, [r7, #22]
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da98:	b29b      	uxth	r3, r3
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d91c      	bls.n	800dad8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	699b      	ldr	r3, [r3, #24]
 800daa2:	f043 0220 	orr.w	r2, r3, #32
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	619a      	str	r2, [r3, #24]
        }
        break;
 800daaa:	e015      	b.n	800dad8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	695b      	ldr	r3, [r3, #20]
 800dab0:	3303      	adds	r3, #3
 800dab2:	089b      	lsrs	r3, r3, #2
 800dab4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800dab6:	8afa      	ldrh	r2, [r7, #22]
 800dab8:	6a3b      	ldr	r3, [r7, #32]
 800daba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dabe:	691b      	ldr	r3, [r3, #16]
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d90a      	bls.n	800dadc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	699b      	ldr	r3, [r3, #24]
 800daca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	619a      	str	r2, [r3, #24]
        }
        break;
 800dad2:	e003      	b.n	800dadc <USB_HC_StartXfer+0x25c>

      default:
        break;
 800dad4:	bf00      	nop
 800dad6:	e002      	b.n	800dade <USB_HC_StartXfer+0x25e>
        break;
 800dad8:	bf00      	nop
 800dada:	e000      	b.n	800dade <USB_HC_StartXfer+0x25e>
        break;
 800dadc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	68d9      	ldr	r1, [r3, #12]
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	785a      	ldrb	r2, [r3, #1]
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	695b      	ldr	r3, [r3, #20]
 800daea:	b29b      	uxth	r3, r3
 800daec:	2000      	movs	r0, #0
 800daee:	9000      	str	r0, [sp, #0]
 800daf0:	68f8      	ldr	r0, [r7, #12]
 800daf2:	f7ff fb53 	bl	800d19c <USB_WritePacket>
  }

  return HAL_OK;
 800daf6:	2300      	movs	r3, #0
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3728      	adds	r7, #40	; 0x28
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	1ff80000 	.word	0x1ff80000

0800db04 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800db04:	b480      	push	{r7}
 800db06:	b085      	sub	sp, #20
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db16:	695b      	ldr	r3, [r3, #20]
 800db18:	b29b      	uxth	r3, r3
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3714      	adds	r7, #20
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr

0800db26 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800db26:	b480      	push	{r7}
 800db28:	b089      	sub	sp, #36	; 0x24
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]
 800db2e:	460b      	mov	r3, r1
 800db30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800db36:	78fb      	ldrb	r3, [r7, #3]
 800db38:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800db3a:	2300      	movs	r3, #0
 800db3c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	015a      	lsls	r2, r3, #5
 800db42:	69bb      	ldr	r3, [r7, #24]
 800db44:	4413      	add	r3, r2
 800db46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	0c9b      	lsrs	r3, r3, #18
 800db4e:	f003 0303 	and.w	r3, r3, #3
 800db52:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	015a      	lsls	r2, r3, #5
 800db58:	69bb      	ldr	r3, [r7, #24]
 800db5a:	4413      	add	r3, r2
 800db5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	0fdb      	lsrs	r3, r3, #31
 800db64:	f003 0301 	and.w	r3, r3, #1
 800db68:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	f003 0320 	and.w	r3, r3, #32
 800db72:	2b20      	cmp	r3, #32
 800db74:	d104      	bne.n	800db80 <USB_HC_Halt+0x5a>
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d101      	bne.n	800db80 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800db7c:	2300      	movs	r3, #0
 800db7e:	e0e8      	b.n	800dd52 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d002      	beq.n	800db8c <USB_HC_Halt+0x66>
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	2b02      	cmp	r3, #2
 800db8a:	d173      	bne.n	800dc74 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	015a      	lsls	r2, r3, #5
 800db90:	69bb      	ldr	r3, [r7, #24]
 800db92:	4413      	add	r3, r2
 800db94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	697a      	ldr	r2, [r7, #20]
 800db9c:	0151      	lsls	r1, r2, #5
 800db9e:	69ba      	ldr	r2, [r7, #24]
 800dba0:	440a      	add	r2, r1
 800dba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dba6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dbaa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	689b      	ldr	r3, [r3, #8]
 800dbb0:	f003 0320 	and.w	r3, r3, #32
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f040 80cb 	bne.w	800dd50 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbbe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d143      	bne.n	800dc4e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	015a      	lsls	r2, r3, #5
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	4413      	add	r3, r2
 800dbce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	697a      	ldr	r2, [r7, #20]
 800dbd6:	0151      	lsls	r1, r2, #5
 800dbd8:	69ba      	ldr	r2, [r7, #24]
 800dbda:	440a      	add	r2, r1
 800dbdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dbe0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dbe4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	015a      	lsls	r2, r3, #5
 800dbea:	69bb      	ldr	r3, [r7, #24]
 800dbec:	4413      	add	r3, r2
 800dbee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	697a      	ldr	r2, [r7, #20]
 800dbf6:	0151      	lsls	r1, r2, #5
 800dbf8:	69ba      	ldr	r2, [r7, #24]
 800dbfa:	440a      	add	r2, r1
 800dbfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dc04:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	015a      	lsls	r2, r3, #5
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	4413      	add	r3, r2
 800dc0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	697a      	ldr	r2, [r7, #20]
 800dc16:	0151      	lsls	r1, r2, #5
 800dc18:	69ba      	ldr	r2, [r7, #24]
 800dc1a:	440a      	add	r2, r1
 800dc1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dc24:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800dc26:	69fb      	ldr	r3, [r7, #28]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	61fb      	str	r3, [r7, #28]
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc32:	d81d      	bhi.n	800dc70 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	015a      	lsls	r2, r3, #5
 800dc38:	69bb      	ldr	r3, [r7, #24]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc4a:	d0ec      	beq.n	800dc26 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800dc4c:	e080      	b.n	800dd50 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	015a      	lsls	r2, r3, #5
 800dc52:	69bb      	ldr	r3, [r7, #24]
 800dc54:	4413      	add	r3, r2
 800dc56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	697a      	ldr	r2, [r7, #20]
 800dc5e:	0151      	lsls	r1, r2, #5
 800dc60:	69ba      	ldr	r2, [r7, #24]
 800dc62:	440a      	add	r2, r1
 800dc64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dc6c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800dc6e:	e06f      	b.n	800dd50 <USB_HC_Halt+0x22a>
            break;
 800dc70:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800dc72:	e06d      	b.n	800dd50 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	015a      	lsls	r2, r3, #5
 800dc78:	69bb      	ldr	r3, [r7, #24]
 800dc7a:	4413      	add	r3, r2
 800dc7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	697a      	ldr	r2, [r7, #20]
 800dc84:	0151      	lsls	r1, r2, #5
 800dc86:	69ba      	ldr	r2, [r7, #24]
 800dc88:	440a      	add	r2, r1
 800dc8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dc92:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc9a:	691b      	ldr	r3, [r3, #16]
 800dc9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d143      	bne.n	800dd2c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	015a      	lsls	r2, r3, #5
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	4413      	add	r3, r2
 800dcac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	697a      	ldr	r2, [r7, #20]
 800dcb4:	0151      	lsls	r1, r2, #5
 800dcb6:	69ba      	ldr	r2, [r7, #24]
 800dcb8:	440a      	add	r2, r1
 800dcba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dcbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dcc2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	015a      	lsls	r2, r3, #5
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	4413      	add	r3, r2
 800dccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	697a      	ldr	r2, [r7, #20]
 800dcd4:	0151      	lsls	r1, r2, #5
 800dcd6:	69ba      	ldr	r2, [r7, #24]
 800dcd8:	440a      	add	r2, r1
 800dcda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dcde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dce2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	015a      	lsls	r2, r3, #5
 800dce8:	69bb      	ldr	r3, [r7, #24]
 800dcea:	4413      	add	r3, r2
 800dcec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	697a      	ldr	r2, [r7, #20]
 800dcf4:	0151      	lsls	r1, r2, #5
 800dcf6:	69ba      	ldr	r2, [r7, #24]
 800dcf8:	440a      	add	r2, r1
 800dcfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dcfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dd02:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	3301      	adds	r3, #1
 800dd08:	61fb      	str	r3, [r7, #28]
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd10:	d81d      	bhi.n	800dd4e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	015a      	lsls	r2, r3, #5
 800dd16:	69bb      	ldr	r3, [r7, #24]
 800dd18:	4413      	add	r3, r2
 800dd1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd28:	d0ec      	beq.n	800dd04 <USB_HC_Halt+0x1de>
 800dd2a:	e011      	b.n	800dd50 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	015a      	lsls	r2, r3, #5
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	4413      	add	r3, r2
 800dd34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	697a      	ldr	r2, [r7, #20]
 800dd3c:	0151      	lsls	r1, r2, #5
 800dd3e:	69ba      	ldr	r2, [r7, #24]
 800dd40:	440a      	add	r2, r1
 800dd42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dd4a:	6013      	str	r3, [r2, #0]
 800dd4c:	e000      	b.n	800dd50 <USB_HC_Halt+0x22a>
          break;
 800dd4e:	bf00      	nop
    }
  }

  return HAL_OK;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3724      	adds	r7, #36	; 0x24
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr
	...

0800dd60 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b087      	sub	sp, #28
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	460b      	mov	r3, r1
 800dd6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800dd70:	78fb      	ldrb	r3, [r7, #3]
 800dd72:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800dd74:	2301      	movs	r3, #1
 800dd76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	04da      	lsls	r2, r3, #19
 800dd7c:	4b15      	ldr	r3, [pc, #84]	; (800ddd4 <USB_DoPing+0x74>)
 800dd7e:	4013      	ands	r3, r2
 800dd80:	693a      	ldr	r2, [r7, #16]
 800dd82:	0151      	lsls	r1, r2, #5
 800dd84:	697a      	ldr	r2, [r7, #20]
 800dd86:	440a      	add	r2, r1
 800dd88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dd90:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	015a      	lsls	r2, r3, #5
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	4413      	add	r3, r2
 800dd9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dda8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ddb0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	015a      	lsls	r2, r3, #5
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	4413      	add	r3, r2
 800ddba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ddc4:	2300      	movs	r3, #0
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	371c      	adds	r7, #28
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr
 800ddd2:	bf00      	nop
 800ddd4:	1ff80000 	.word	0x1ff80000

0800ddd8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b086      	sub	sp, #24
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800dde4:	2300      	movs	r3, #0
 800dde6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f7ff f935 	bl	800d058 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800ddee:	2110      	movs	r1, #16
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f7ff f98f 	bl	800d114 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f7ff f9b0 	bl	800d15c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	613b      	str	r3, [r7, #16]
 800de00:	e01f      	b.n	800de42 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	015a      	lsls	r2, r3, #5
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	4413      	add	r3, r2
 800de0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de18:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de20:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800de28:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	015a      	lsls	r2, r3, #5
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	4413      	add	r3, r2
 800de32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de36:	461a      	mov	r2, r3
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	3301      	adds	r3, #1
 800de40:	613b      	str	r3, [r7, #16]
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	2b0f      	cmp	r3, #15
 800de46:	d9dc      	bls.n	800de02 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800de48:	2300      	movs	r3, #0
 800de4a:	613b      	str	r3, [r7, #16]
 800de4c:	e034      	b.n	800deb8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	015a      	lsls	r2, r3, #5
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	4413      	add	r3, r2
 800de56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de64:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de6c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800de74:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	015a      	lsls	r2, r3, #5
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	4413      	add	r3, r2
 800de7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de82:	461a      	mov	r2, r3
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	3301      	adds	r3, #1
 800de8c:	617b      	str	r3, [r7, #20]
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de94:	d80c      	bhi.n	800deb0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	015a      	lsls	r2, r3, #5
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	4413      	add	r3, r2
 800de9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800deac:	d0ec      	beq.n	800de88 <USB_StopHost+0xb0>
 800deae:	e000      	b.n	800deb2 <USB_StopHost+0xda>
        break;
 800deb0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	3301      	adds	r3, #1
 800deb6:	613b      	str	r3, [r7, #16]
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	2b0f      	cmp	r3, #15
 800debc:	d9c7      	bls.n	800de4e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dec4:	461a      	mov	r2, r3
 800dec6:	f04f 33ff 	mov.w	r3, #4294967295
 800deca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f04f 32ff 	mov.w	r2, #4294967295
 800ded2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f7ff f8ae 	bl	800d036 <USB_EnableGlobalInt>

  return HAL_OK;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3718      	adds	r7, #24
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800dee4:	b590      	push	{r4, r7, lr}
 800dee6:	b089      	sub	sp, #36	; 0x24
 800dee8:	af04      	add	r7, sp, #16
 800deea:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800deec:	2301      	movs	r3, #1
 800deee:	2202      	movs	r2, #2
 800def0:	2102      	movs	r1, #2
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 fc66 	bl	800e7c4 <USBH_FindInterface>
 800def8:	4603      	mov	r3, r0
 800defa:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800defc:	7bfb      	ldrb	r3, [r7, #15]
 800defe:	2bff      	cmp	r3, #255	; 0xff
 800df00:	d002      	beq.n	800df08 <USBH_CDC_InterfaceInit+0x24>
 800df02:	7bfb      	ldrb	r3, [r7, #15]
 800df04:	2b01      	cmp	r3, #1
 800df06:	d901      	bls.n	800df0c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800df08:	2302      	movs	r3, #2
 800df0a:	e13d      	b.n	800e188 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800df0c:	7bfb      	ldrb	r3, [r7, #15]
 800df0e:	4619      	mov	r1, r3
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f000 fc3b 	bl	800e78c <USBH_SelectInterface>
 800df16:	4603      	mov	r3, r0
 800df18:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800df1a:	7bbb      	ldrb	r3, [r7, #14]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d001      	beq.n	800df24 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800df20:	2302      	movs	r3, #2
 800df22:	e131      	b.n	800e188 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800df2a:	2050      	movs	r0, #80	; 0x50
 800df2c:	f002 fa00 	bl	8010330 <malloc>
 800df30:	4603      	mov	r3, r0
 800df32:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df3a:	69db      	ldr	r3, [r3, #28]
 800df3c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d101      	bne.n	800df48 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800df44:	2302      	movs	r3, #2
 800df46:	e11f      	b.n	800e188 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800df48:	2250      	movs	r2, #80	; 0x50
 800df4a:	2100      	movs	r1, #0
 800df4c:	68b8      	ldr	r0, [r7, #8]
 800df4e:	f002 f9ff 	bl	8010350 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800df52:	7bfb      	ldrb	r3, [r7, #15]
 800df54:	687a      	ldr	r2, [r7, #4]
 800df56:	211a      	movs	r1, #26
 800df58:	fb01 f303 	mul.w	r3, r1, r3
 800df5c:	4413      	add	r3, r2
 800df5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	b25b      	sxtb	r3, r3
 800df66:	2b00      	cmp	r3, #0
 800df68:	da15      	bge.n	800df96 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800df6a:	7bfb      	ldrb	r3, [r7, #15]
 800df6c:	687a      	ldr	r2, [r7, #4]
 800df6e:	211a      	movs	r1, #26
 800df70:	fb01 f303 	mul.w	r3, r1, r3
 800df74:	4413      	add	r3, r2
 800df76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800df7a:	781a      	ldrb	r2, [r3, #0]
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800df80:	7bfb      	ldrb	r3, [r7, #15]
 800df82:	687a      	ldr	r2, [r7, #4]
 800df84:	211a      	movs	r1, #26
 800df86:	fb01 f303 	mul.w	r3, r1, r3
 800df8a:	4413      	add	r3, r2
 800df8c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800df90:	881a      	ldrh	r2, [r3, #0]
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	785b      	ldrb	r3, [r3, #1]
 800df9a:	4619      	mov	r1, r3
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f001 fe32 	bl	800fc06 <USBH_AllocPipe>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	7819      	ldrb	r1, [r3, #0]
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	7858      	ldrb	r0, [r3, #1]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dfbe:	68ba      	ldr	r2, [r7, #8]
 800dfc0:	8952      	ldrh	r2, [r2, #10]
 800dfc2:	9202      	str	r2, [sp, #8]
 800dfc4:	2203      	movs	r2, #3
 800dfc6:	9201      	str	r2, [sp, #4]
 800dfc8:	9300      	str	r3, [sp, #0]
 800dfca:	4623      	mov	r3, r4
 800dfcc:	4602      	mov	r2, r0
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f001 fdea 	bl	800fba8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	4619      	mov	r1, r3
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f002 f8f9 	bl	80101d4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	210a      	movs	r1, #10
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 fbeb 	bl	800e7c4 <USBH_FindInterface>
 800dfee:	4603      	mov	r3, r0
 800dff0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800dff2:	7bfb      	ldrb	r3, [r7, #15]
 800dff4:	2bff      	cmp	r3, #255	; 0xff
 800dff6:	d002      	beq.n	800dffe <USBH_CDC_InterfaceInit+0x11a>
 800dff8:	7bfb      	ldrb	r3, [r7, #15]
 800dffa:	2b01      	cmp	r3, #1
 800dffc:	d901      	bls.n	800e002 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800dffe:	2302      	movs	r3, #2
 800e000:	e0c2      	b.n	800e188 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e002:	7bfb      	ldrb	r3, [r7, #15]
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	211a      	movs	r1, #26
 800e008:	fb01 f303 	mul.w	r3, r1, r3
 800e00c:	4413      	add	r3, r2
 800e00e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	b25b      	sxtb	r3, r3
 800e016:	2b00      	cmp	r3, #0
 800e018:	da16      	bge.n	800e048 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e01a:	7bfb      	ldrb	r3, [r7, #15]
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	211a      	movs	r1, #26
 800e020:	fb01 f303 	mul.w	r3, r1, r3
 800e024:	4413      	add	r3, r2
 800e026:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e02a:	781a      	ldrb	r2, [r3, #0]
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e030:	7bfb      	ldrb	r3, [r7, #15]
 800e032:	687a      	ldr	r2, [r7, #4]
 800e034:	211a      	movs	r1, #26
 800e036:	fb01 f303 	mul.w	r3, r1, r3
 800e03a:	4413      	add	r3, r2
 800e03c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e040:	881a      	ldrh	r2, [r3, #0]
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	835a      	strh	r2, [r3, #26]
 800e046:	e015      	b.n	800e074 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e048:	7bfb      	ldrb	r3, [r7, #15]
 800e04a:	687a      	ldr	r2, [r7, #4]
 800e04c:	211a      	movs	r1, #26
 800e04e:	fb01 f303 	mul.w	r3, r1, r3
 800e052:	4413      	add	r3, r2
 800e054:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e058:	781a      	ldrb	r2, [r3, #0]
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e05e:	7bfb      	ldrb	r3, [r7, #15]
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	211a      	movs	r1, #26
 800e064:	fb01 f303 	mul.w	r3, r1, r3
 800e068:	4413      	add	r3, r2
 800e06a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e06e:	881a      	ldrh	r2, [r3, #0]
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e074:	7bfb      	ldrb	r3, [r7, #15]
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	211a      	movs	r1, #26
 800e07a:	fb01 f303 	mul.w	r3, r1, r3
 800e07e:	4413      	add	r3, r2
 800e080:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	b25b      	sxtb	r3, r3
 800e088:	2b00      	cmp	r3, #0
 800e08a:	da16      	bge.n	800e0ba <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e08c:	7bfb      	ldrb	r3, [r7, #15]
 800e08e:	687a      	ldr	r2, [r7, #4]
 800e090:	211a      	movs	r1, #26
 800e092:	fb01 f303 	mul.w	r3, r1, r3
 800e096:	4413      	add	r3, r2
 800e098:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e09c:	781a      	ldrb	r2, [r3, #0]
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e0a2:	7bfb      	ldrb	r3, [r7, #15]
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	211a      	movs	r1, #26
 800e0a8:	fb01 f303 	mul.w	r3, r1, r3
 800e0ac:	4413      	add	r3, r2
 800e0ae:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e0b2:	881a      	ldrh	r2, [r3, #0]
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	835a      	strh	r2, [r3, #26]
 800e0b8:	e015      	b.n	800e0e6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e0ba:	7bfb      	ldrb	r3, [r7, #15]
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	211a      	movs	r1, #26
 800e0c0:	fb01 f303 	mul.w	r3, r1, r3
 800e0c4:	4413      	add	r3, r2
 800e0c6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e0ca:	781a      	ldrb	r2, [r3, #0]
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e0d0:	7bfb      	ldrb	r3, [r7, #15]
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	211a      	movs	r1, #26
 800e0d6:	fb01 f303 	mul.w	r3, r1, r3
 800e0da:	4413      	add	r3, r2
 800e0dc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e0e0:	881a      	ldrh	r2, [r3, #0]
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	7b9b      	ldrb	r3, [r3, #14]
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f001 fd8a 	bl	800fc06 <USBH_AllocPipe>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	7bdb      	ldrb	r3, [r3, #15]
 800e0fe:	4619      	mov	r1, r3
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f001 fd80 	bl	800fc06 <USBH_AllocPipe>
 800e106:	4603      	mov	r3, r0
 800e108:	461a      	mov	r2, r3
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	7b59      	ldrb	r1, [r3, #13]
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	7b98      	ldrb	r0, [r3, #14]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e122:	68ba      	ldr	r2, [r7, #8]
 800e124:	8b12      	ldrh	r2, [r2, #24]
 800e126:	9202      	str	r2, [sp, #8]
 800e128:	2202      	movs	r2, #2
 800e12a:	9201      	str	r2, [sp, #4]
 800e12c:	9300      	str	r3, [sp, #0]
 800e12e:	4623      	mov	r3, r4
 800e130:	4602      	mov	r2, r0
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f001 fd38 	bl	800fba8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	7b19      	ldrb	r1, [r3, #12]
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	7bd8      	ldrb	r0, [r3, #15]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e14c:	68ba      	ldr	r2, [r7, #8]
 800e14e:	8b52      	ldrh	r2, [r2, #26]
 800e150:	9202      	str	r2, [sp, #8]
 800e152:	2202      	movs	r2, #2
 800e154:	9201      	str	r2, [sp, #4]
 800e156:	9300      	str	r3, [sp, #0]
 800e158:	4623      	mov	r3, r4
 800e15a:	4602      	mov	r2, r0
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f001 fd23 	bl	800fba8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	2200      	movs	r2, #0
 800e166:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	7b5b      	ldrb	r3, [r3, #13]
 800e16e:	2200      	movs	r2, #0
 800e170:	4619      	mov	r1, r3
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f002 f82e 	bl	80101d4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	7b1b      	ldrb	r3, [r3, #12]
 800e17c:	2200      	movs	r2, #0
 800e17e:	4619      	mov	r1, r3
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f002 f827 	bl	80101d4 <USBH_LL_SetToggle>

  return USBH_OK;
 800e186:	2300      	movs	r3, #0
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3714      	adds	r7, #20
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd90      	pop	{r4, r7, pc}

0800e190 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e19e:	69db      	ldr	r3, [r3, #28]
 800e1a0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00e      	beq.n	800e1c8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f001 fd18 	bl	800fbe6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f001 fd43 	bl	800fc48 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	7b1b      	ldrb	r3, [r3, #12]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d00e      	beq.n	800e1ee <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	7b1b      	ldrb	r3, [r3, #12]
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f001 fd05 	bl	800fbe6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	7b1b      	ldrb	r3, [r3, #12]
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f001 fd30 	bl	800fc48 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	7b5b      	ldrb	r3, [r3, #13]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d00e      	beq.n	800e214 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	7b5b      	ldrb	r3, [r3, #13]
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f001 fcf2 	bl	800fbe6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	7b5b      	ldrb	r3, [r3, #13]
 800e206:	4619      	mov	r1, r3
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f001 fd1d 	bl	800fc48 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	2200      	movs	r2, #0
 800e212:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e21a:	69db      	ldr	r3, [r3, #28]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d00b      	beq.n	800e238 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e226:	69db      	ldr	r3, [r3, #28]
 800e228:	4618      	mov	r0, r3
 800e22a:	f002 f889 	bl	8010340 <free>
    phost->pActiveClass->pData = 0U;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e234:	2200      	movs	r2, #0
 800e236:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e238:	2300      	movs	r3, #0
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3710      	adds	r7, #16
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}

0800e242 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e242:	b580      	push	{r7, lr}
 800e244:	b084      	sub	sp, #16
 800e246:	af00      	add	r7, sp, #0
 800e248:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e250:	69db      	ldr	r3, [r3, #28]
 800e252:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	3340      	adds	r3, #64	; 0x40
 800e258:	4619      	mov	r1, r3
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f000 f8b1 	bl	800e3c2 <GetLineCoding>
 800e260:	4603      	mov	r3, r0
 800e262:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e264:	7afb      	ldrb	r3, [r7, #11]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d105      	bne.n	800e276 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e270:	2102      	movs	r1, #2
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800e276:	7afb      	ldrb	r3, [r7, #11]
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3710      	adds	r7, #16
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e288:	2301      	movs	r3, #1
 800e28a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e28c:	2300      	movs	r3, #0
 800e28e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e296:	69db      	ldr	r3, [r3, #28]
 800e298:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e2a0:	2b04      	cmp	r3, #4
 800e2a2:	d877      	bhi.n	800e394 <USBH_CDC_Process+0x114>
 800e2a4:	a201      	add	r2, pc, #4	; (adr r2, 800e2ac <USBH_CDC_Process+0x2c>)
 800e2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2aa:	bf00      	nop
 800e2ac:	0800e2c1 	.word	0x0800e2c1
 800e2b0:	0800e2c7 	.word	0x0800e2c7
 800e2b4:	0800e2f7 	.word	0x0800e2f7
 800e2b8:	0800e36b 	.word	0x0800e36b
 800e2bc:	0800e379 	.word	0x0800e379
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	73fb      	strb	r3, [r7, #15]
      break;
 800e2c4:	e06d      	b.n	800e3a2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f000 f897 	bl	800e400 <SetLineCoding>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e2d6:	7bbb      	ldrb	r3, [r7, #14]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d104      	bne.n	800e2e6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	2202      	movs	r2, #2
 800e2e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e2e4:	e058      	b.n	800e398 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800e2e6:	7bbb      	ldrb	r3, [r7, #14]
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	d055      	beq.n	800e398 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	2204      	movs	r2, #4
 800e2f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e2f4:	e050      	b.n	800e398 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	3340      	adds	r3, #64	; 0x40
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f000 f860 	bl	800e3c2 <GetLineCoding>
 800e302:	4603      	mov	r3, r0
 800e304:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e306:	7bbb      	ldrb	r3, [r7, #14]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d126      	bne.n	800e35a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	2200      	movs	r2, #0
 800e310:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e31e:	791b      	ldrb	r3, [r3, #4]
 800e320:	429a      	cmp	r2, r3
 800e322:	d13b      	bne.n	800e39c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e32e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e330:	429a      	cmp	r2, r3
 800e332:	d133      	bne.n	800e39c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e33e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e340:	429a      	cmp	r2, r3
 800e342:	d12b      	bne.n	800e39c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e34c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e34e:	429a      	cmp	r2, r3
 800e350:	d124      	bne.n	800e39c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f000 f958 	bl	800e608 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e358:	e020      	b.n	800e39c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800e35a:	7bbb      	ldrb	r3, [r7, #14]
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d01d      	beq.n	800e39c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	2204      	movs	r2, #4
 800e364:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e368:	e018      	b.n	800e39c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 f867 	bl	800e43e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f000 f8da 	bl	800e52a <CDC_ProcessReception>
      break;
 800e376:	e014      	b.n	800e3a2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800e378:	2100      	movs	r1, #0
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 ffe3 	bl	800f346 <USBH_ClrFeature>
 800e380:	4603      	mov	r3, r0
 800e382:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e384:	7bbb      	ldrb	r3, [r7, #14]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d10a      	bne.n	800e3a0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	2200      	movs	r2, #0
 800e38e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800e392:	e005      	b.n	800e3a0 <USBH_CDC_Process+0x120>

    default:
      break;
 800e394:	bf00      	nop
 800e396:	e004      	b.n	800e3a2 <USBH_CDC_Process+0x122>
      break;
 800e398:	bf00      	nop
 800e39a:	e002      	b.n	800e3a2 <USBH_CDC_Process+0x122>
      break;
 800e39c:	bf00      	nop
 800e39e:	e000      	b.n	800e3a2 <USBH_CDC_Process+0x122>
      break;
 800e3a0:	bf00      	nop

  }

  return status;
 800e3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3710      	adds	r7, #16
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800e3b4:	2300      	movs	r3, #0
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	370c      	adds	r7, #12
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr

0800e3c2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e3c2:	b580      	push	{r7, lr}
 800e3c4:	b082      	sub	sp, #8
 800e3c6:	af00      	add	r7, sp, #0
 800e3c8:	6078      	str	r0, [r7, #4]
 800e3ca:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	22a1      	movs	r2, #161	; 0xa1
 800e3d0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2221      	movs	r2, #33	; 0x21
 800e3d6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2207      	movs	r2, #7
 800e3e8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	2207      	movs	r2, #7
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f001 f988 	bl	800f706 <USBH_CtlReq>
 800e3f6:	4603      	mov	r3, r0
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3708      	adds	r7, #8
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b082      	sub	sp, #8
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2221      	movs	r2, #33	; 0x21
 800e40e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2220      	movs	r2, #32
 800e414:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2200      	movs	r2, #0
 800e41a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2200      	movs	r2, #0
 800e420:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2207      	movs	r2, #7
 800e426:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	2207      	movs	r2, #7
 800e42c:	4619      	mov	r1, r3
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f001 f969 	bl	800f706 <USBH_CtlReq>
 800e434:	4603      	mov	r3, r0
}
 800e436:	4618      	mov	r0, r3
 800e438:	3708      	adds	r7, #8
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e43e:	b580      	push	{r7, lr}
 800e440:	b086      	sub	sp, #24
 800e442:	af02      	add	r7, sp, #8
 800e444:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e44c:	69db      	ldr	r3, [r3, #28]
 800e44e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e450:	2300      	movs	r3, #0
 800e452:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	d002      	beq.n	800e464 <CDC_ProcessTransmission+0x26>
 800e45e:	2b02      	cmp	r3, #2
 800e460:	d023      	beq.n	800e4aa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800e462:	e05e      	b.n	800e522 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e468:	68fa      	ldr	r2, [r7, #12]
 800e46a:	8b12      	ldrh	r2, [r2, #24]
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d90b      	bls.n	800e488 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	69d9      	ldr	r1, [r3, #28]
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	8b1a      	ldrh	r2, [r3, #24]
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	7b5b      	ldrb	r3, [r3, #13]
 800e47c:	2001      	movs	r0, #1
 800e47e:	9000      	str	r0, [sp, #0]
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f001 fb4e 	bl	800fb22 <USBH_BulkSendData>
 800e486:	e00b      	b.n	800e4a0 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800e490:	b29a      	uxth	r2, r3
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	7b5b      	ldrb	r3, [r3, #13]
 800e496:	2001      	movs	r0, #1
 800e498:	9000      	str	r0, [sp, #0]
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f001 fb41 	bl	800fb22 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	2202      	movs	r2, #2
 800e4a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e4a8:	e03b      	b.n	800e522 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	7b5b      	ldrb	r3, [r3, #13]
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f001 fe65 	bl	8010180 <USBH_LL_GetURBState>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e4ba:	7afb      	ldrb	r3, [r7, #11]
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d128      	bne.n	800e512 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4c4:	68fa      	ldr	r2, [r7, #12]
 800e4c6:	8b12      	ldrh	r2, [r2, #24]
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d90e      	bls.n	800e4ea <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d0:	68fa      	ldr	r2, [r7, #12]
 800e4d2:	8b12      	ldrh	r2, [r2, #24]
 800e4d4:	1a9a      	subs	r2, r3, r2
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	69db      	ldr	r3, [r3, #28]
 800e4de:	68fa      	ldr	r2, [r7, #12]
 800e4e0:	8b12      	ldrh	r2, [r2, #24]
 800e4e2:	441a      	add	r2, r3
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	61da      	str	r2, [r3, #28]
 800e4e8:	e002      	b.n	800e4f0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d004      	beq.n	800e502 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e500:	e00e      	b.n	800e520 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2200      	movs	r2, #0
 800e506:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f000 f868 	bl	800e5e0 <USBH_CDC_TransmitCallback>
      break;
 800e510:	e006      	b.n	800e520 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800e512:	7afb      	ldrb	r3, [r7, #11]
 800e514:	2b02      	cmp	r3, #2
 800e516:	d103      	bne.n	800e520 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2201      	movs	r2, #1
 800e51c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e520:	bf00      	nop
  }
}
 800e522:	bf00      	nop
 800e524:	3710      	adds	r7, #16
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}

0800e52a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e52a:	b580      	push	{r7, lr}
 800e52c:	b086      	sub	sp, #24
 800e52e:	af00      	add	r7, sp, #0
 800e530:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e538:	69db      	ldr	r3, [r3, #28]
 800e53a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e53c:	2300      	movs	r3, #0
 800e53e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e546:	2b03      	cmp	r3, #3
 800e548:	d002      	beq.n	800e550 <CDC_ProcessReception+0x26>
 800e54a:	2b04      	cmp	r3, #4
 800e54c:	d00e      	beq.n	800e56c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e54e:	e043      	b.n	800e5d8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	6a19      	ldr	r1, [r3, #32]
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	8b5a      	ldrh	r2, [r3, #26]
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	7b1b      	ldrb	r3, [r3, #12]
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f001 fb05 	bl	800fb6c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	2204      	movs	r2, #4
 800e566:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e56a:	e035      	b.n	800e5d8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	7b1b      	ldrb	r3, [r3, #12]
 800e570:	4619      	mov	r1, r3
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f001 fe04 	bl	8010180 <USBH_LL_GetURBState>
 800e578:	4603      	mov	r3, r0
 800e57a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e57c:	7cfb      	ldrb	r3, [r7, #19]
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d129      	bne.n	800e5d6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	7b1b      	ldrb	r3, [r3, #12]
 800e586:	4619      	mov	r1, r3
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f001 fd67 	bl	801005c <USBH_LL_GetLastXferSize>
 800e58e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e594:	68fa      	ldr	r2, [r7, #12]
 800e596:	429a      	cmp	r2, r3
 800e598:	d016      	beq.n	800e5c8 <CDC_ProcessReception+0x9e>
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	8b5b      	ldrh	r3, [r3, #26]
 800e59e:	461a      	mov	r2, r3
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d910      	bls.n	800e5c8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	1ad2      	subs	r2, r2, r3
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	6a1a      	ldr	r2, [r3, #32]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	441a      	add	r2, r3
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	2203      	movs	r2, #3
 800e5c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e5c6:	e006      	b.n	800e5d6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f000 f80f 	bl	800e5f4 <USBH_CDC_ReceiveCallback>
      break;
 800e5d6:	bf00      	nop
  }
}
 800e5d8:	bf00      	nop
 800e5da:	3718      	adds	r7, #24
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e5e0:	b480      	push	{r7}
 800e5e2:	b083      	sub	sp, #12
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e5e8:	bf00      	nop
 800e5ea:	370c      	adds	r7, #12
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr

0800e5f4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e5fc:	bf00      	nop
 800e5fe:	370c      	adds	r7, #12
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr

0800e608 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e608:	b480      	push	{r7}
 800e60a:	b083      	sub	sp, #12
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e610:	bf00      	nop
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr

0800e61c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b084      	sub	sp, #16
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	4613      	mov	r3, r2
 800e628:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d101      	bne.n	800e634 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e630:	2302      	movs	r3, #2
 800e632:	e029      	b.n	800e688 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	79fa      	ldrb	r2, [r7, #7]
 800e638:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2200      	movs	r2, #0
 800e640:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2200      	movs	r2, #0
 800e648:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e64c:	68f8      	ldr	r0, [r7, #12]
 800e64e:	f000 f81f 	bl	800e690 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2200      	movs	r2, #0
 800e656:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2200      	movs	r2, #0
 800e65e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2200      	movs	r2, #0
 800e666:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	2200      	movs	r2, #0
 800e66e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d003      	beq.n	800e680 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	68ba      	ldr	r2, [r7, #8]
 800e67c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e680:	68f8      	ldr	r0, [r7, #12]
 800e682:	f001 fc37 	bl	800fef4 <USBH_LL_Init>

  return USBH_OK;
 800e686:	2300      	movs	r3, #0
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3710      	adds	r7, #16
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e690:	b480      	push	{r7}
 800e692:	b085      	sub	sp, #20
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e698:	2300      	movs	r3, #0
 800e69a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e69c:	2300      	movs	r3, #0
 800e69e:	60fb      	str	r3, [r7, #12]
 800e6a0:	e009      	b.n	800e6b6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	33e0      	adds	r3, #224	; 0xe0
 800e6a8:	009b      	lsls	r3, r3, #2
 800e6aa:	4413      	add	r3, r2
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	60fb      	str	r3, [r7, #12]
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2b0e      	cmp	r3, #14
 800e6ba:	d9f2      	bls.n	800e6a2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e6bc:	2300      	movs	r3, #0
 800e6be:	60fb      	str	r3, [r7, #12]
 800e6c0:	e009      	b.n	800e6d6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e6c2:	687a      	ldr	r2, [r7, #4]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	4413      	add	r3, r2
 800e6c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	60fb      	str	r3, [r7, #12]
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6dc:	d3f1      	bcc.n	800e6c2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2240      	movs	r2, #64	; 0x40
 800e702:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2200      	movs	r2, #0
 800e708:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2200      	movs	r2, #0
 800e70e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2201      	movs	r2, #1
 800e716:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2200      	movs	r2, #0
 800e71e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2200      	movs	r2, #0
 800e726:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e72a:	2300      	movs	r3, #0
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3714      	adds	r7, #20
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e738:	b480      	push	{r7}
 800e73a:	b085      	sub	sp, #20
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e742:	2300      	movs	r3, #0
 800e744:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d016      	beq.n	800e77a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e752:	2b00      	cmp	r3, #0
 800e754:	d10e      	bne.n	800e774 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e75c:	1c59      	adds	r1, r3, #1
 800e75e:	687a      	ldr	r2, [r7, #4]
 800e760:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e764:	687a      	ldr	r2, [r7, #4]
 800e766:	33de      	adds	r3, #222	; 0xde
 800e768:	6839      	ldr	r1, [r7, #0]
 800e76a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e76e:	2300      	movs	r3, #0
 800e770:	73fb      	strb	r3, [r7, #15]
 800e772:	e004      	b.n	800e77e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e774:	2302      	movs	r3, #2
 800e776:	73fb      	strb	r3, [r7, #15]
 800e778:	e001      	b.n	800e77e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e77a:	2302      	movs	r3, #2
 800e77c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e77e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3714      	adds	r7, #20
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e78c:	b480      	push	{r7}
 800e78e:	b085      	sub	sp, #20
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	460b      	mov	r3, r1
 800e796:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e798:	2300      	movs	r3, #0
 800e79a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e7a2:	78fa      	ldrb	r2, [r7, #3]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d204      	bcs.n	800e7b2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	78fa      	ldrb	r2, [r7, #3]
 800e7ac:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e7b0:	e001      	b.n	800e7b6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e7b2:	2302      	movs	r3, #2
 800e7b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3714      	adds	r7, #20
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr

0800e7c4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b087      	sub	sp, #28
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	4608      	mov	r0, r1
 800e7ce:	4611      	mov	r1, r2
 800e7d0:	461a      	mov	r2, r3
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	70fb      	strb	r3, [r7, #3]
 800e7d6:	460b      	mov	r3, r1
 800e7d8:	70bb      	strb	r3, [r7, #2]
 800e7da:	4613      	mov	r3, r2
 800e7dc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e7ec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e7ee:	e025      	b.n	800e83c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e7f0:	7dfb      	ldrb	r3, [r7, #23]
 800e7f2:	221a      	movs	r2, #26
 800e7f4:	fb02 f303 	mul.w	r3, r2, r3
 800e7f8:	3308      	adds	r3, #8
 800e7fa:	68fa      	ldr	r2, [r7, #12]
 800e7fc:	4413      	add	r3, r2
 800e7fe:	3302      	adds	r3, #2
 800e800:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	795b      	ldrb	r3, [r3, #5]
 800e806:	78fa      	ldrb	r2, [r7, #3]
 800e808:	429a      	cmp	r2, r3
 800e80a:	d002      	beq.n	800e812 <USBH_FindInterface+0x4e>
 800e80c:	78fb      	ldrb	r3, [r7, #3]
 800e80e:	2bff      	cmp	r3, #255	; 0xff
 800e810:	d111      	bne.n	800e836 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e816:	78ba      	ldrb	r2, [r7, #2]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d002      	beq.n	800e822 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e81c:	78bb      	ldrb	r3, [r7, #2]
 800e81e:	2bff      	cmp	r3, #255	; 0xff
 800e820:	d109      	bne.n	800e836 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e826:	787a      	ldrb	r2, [r7, #1]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d002      	beq.n	800e832 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e82c:	787b      	ldrb	r3, [r7, #1]
 800e82e:	2bff      	cmp	r3, #255	; 0xff
 800e830:	d101      	bne.n	800e836 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e832:	7dfb      	ldrb	r3, [r7, #23]
 800e834:	e006      	b.n	800e844 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e836:	7dfb      	ldrb	r3, [r7, #23]
 800e838:	3301      	adds	r3, #1
 800e83a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e83c:	7dfb      	ldrb	r3, [r7, #23]
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d9d6      	bls.n	800e7f0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e842:	23ff      	movs	r3, #255	; 0xff
}
 800e844:	4618      	mov	r0, r3
 800e846:	371c      	adds	r7, #28
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr

0800e850 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f001 fb87 	bl	800ff6c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e85e:	2101      	movs	r1, #1
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f001 fca0 	bl	80101a6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e866:	2300      	movs	r3, #0
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3708      	adds	r7, #8
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b088      	sub	sp, #32
 800e874:	af04      	add	r7, sp, #16
 800e876:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e878:	2302      	movs	r3, #2
 800e87a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e87c:	2300      	movs	r3, #0
 800e87e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e886:	b2db      	uxtb	r3, r3
 800e888:	2b01      	cmp	r3, #1
 800e88a:	d102      	bne.n	800e892 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2203      	movs	r2, #3
 800e890:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	b2db      	uxtb	r3, r3
 800e898:	2b0b      	cmp	r3, #11
 800e89a:	f200 81b3 	bhi.w	800ec04 <USBH_Process+0x394>
 800e89e:	a201      	add	r2, pc, #4	; (adr r2, 800e8a4 <USBH_Process+0x34>)
 800e8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8a4:	0800e8d5 	.word	0x0800e8d5
 800e8a8:	0800e907 	.word	0x0800e907
 800e8ac:	0800e96f 	.word	0x0800e96f
 800e8b0:	0800eb9f 	.word	0x0800eb9f
 800e8b4:	0800ec05 	.word	0x0800ec05
 800e8b8:	0800ea13 	.word	0x0800ea13
 800e8bc:	0800eb45 	.word	0x0800eb45
 800e8c0:	0800ea49 	.word	0x0800ea49
 800e8c4:	0800ea69 	.word	0x0800ea69
 800e8c8:	0800ea89 	.word	0x0800ea89
 800e8cc:	0800eab7 	.word	0x0800eab7
 800e8d0:	0800eb87 	.word	0x0800eb87
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	f000 8193 	beq.w	800ec08 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e8e8:	20c8      	movs	r0, #200	; 0xc8
 800e8ea:	f001 fca3 	bl	8010234 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f001 fb99 	bl	8010026 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2200      	movs	r2, #0
 800e900:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e904:	e180      	b.n	800ec08 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	d107      	bne.n	800e920 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2200      	movs	r2, #0
 800e914:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2202      	movs	r2, #2
 800e91c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e91e:	e182      	b.n	800ec26 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e92a:	d914      	bls.n	800e956 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e932:	3301      	adds	r3, #1
 800e934:	b2da      	uxtb	r2, r3
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e942:	2b03      	cmp	r3, #3
 800e944:	d903      	bls.n	800e94e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	220d      	movs	r2, #13
 800e94a:	701a      	strb	r2, [r3, #0]
      break;
 800e94c:	e16b      	b.n	800ec26 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2200      	movs	r2, #0
 800e952:	701a      	strb	r2, [r3, #0]
      break;
 800e954:	e167      	b.n	800ec26 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e95c:	f103 020a 	add.w	r2, r3, #10
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e966:	200a      	movs	r0, #10
 800e968:	f001 fc64 	bl	8010234 <USBH_Delay>
      break;
 800e96c:	e15b      	b.n	800ec26 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e974:	2b00      	cmp	r3, #0
 800e976:	d005      	beq.n	800e984 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e97e:	2104      	movs	r1, #4
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e984:	2064      	movs	r0, #100	; 0x64
 800e986:	f001 fc55 	bl	8010234 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f001 fb24 	bl	800ffd8 <USBH_LL_GetSpeed>
 800e990:	4603      	mov	r3, r0
 800e992:	461a      	mov	r2, r3
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2205      	movs	r2, #5
 800e99e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e9a0:	2100      	movs	r1, #0
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f001 f92f 	bl	800fc06 <USBH_AllocPipe>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e9b0:	2180      	movs	r1, #128	; 0x80
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f001 f927 	bl	800fc06 <USBH_AllocPipe>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	7919      	ldrb	r1, [r3, #4]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e9d0:	687a      	ldr	r2, [r7, #4]
 800e9d2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e9d4:	b292      	uxth	r2, r2
 800e9d6:	9202      	str	r2, [sp, #8]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	9201      	str	r2, [sp, #4]
 800e9dc:	9300      	str	r3, [sp, #0]
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2280      	movs	r2, #128	; 0x80
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f001 f8e0 	bl	800fba8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	7959      	ldrb	r1, [r3, #5]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e9fc:	b292      	uxth	r2, r2
 800e9fe:	9202      	str	r2, [sp, #8]
 800ea00:	2200      	movs	r2, #0
 800ea02:	9201      	str	r2, [sp, #4]
 800ea04:	9300      	str	r3, [sp, #0]
 800ea06:	4603      	mov	r3, r0
 800ea08:	2200      	movs	r2, #0
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f001 f8cc 	bl	800fba8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ea10:	e109      	b.n	800ec26 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f000 f90c 	bl	800ec30 <USBH_HandleEnum>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ea1c:	7bbb      	ldrb	r3, [r7, #14]
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	f040 80f3 	bne.w	800ec0c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d103      	bne.n	800ea40 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2208      	movs	r2, #8
 800ea3c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ea3e:	e0e5      	b.n	800ec0c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2207      	movs	r2, #7
 800ea44:	701a      	strb	r2, [r3, #0]
      break;
 800ea46:	e0e1      	b.n	800ec0c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	f000 80de 	beq.w	800ec10 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ea5a:	2101      	movs	r1, #1
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2208      	movs	r2, #8
 800ea64:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ea66:	e0d3      	b.n	800ec10 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ea6e:	b29b      	uxth	r3, r3
 800ea70:	4619      	mov	r1, r3
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f000 fc20 	bl	800f2b8 <USBH_SetCfg>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	f040 80ca 	bne.w	800ec14 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2209      	movs	r2, #9
 800ea84:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ea86:	e0c5      	b.n	800ec14 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ea8e:	f003 0320 	and.w	r3, r3, #32
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d00b      	beq.n	800eaae <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ea96:	2101      	movs	r1, #1
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f000 fc30 	bl	800f2fe <USBH_SetFeature>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	f040 80b9 	bne.w	800ec18 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	220a      	movs	r2, #10
 800eaaa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800eaac:	e0b4      	b.n	800ec18 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	220a      	movs	r2, #10
 800eab2:	701a      	strb	r2, [r3, #0]
      break;
 800eab4:	e0b0      	b.n	800ec18 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	f000 80ad 	beq.w	800ec1c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2200      	movs	r2, #0
 800eac6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800eaca:	2300      	movs	r3, #0
 800eacc:	73fb      	strb	r3, [r7, #15]
 800eace:	e016      	b.n	800eafe <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ead0:	7bfa      	ldrb	r2, [r7, #15]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	32de      	adds	r2, #222	; 0xde
 800ead6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eada:	791a      	ldrb	r2, [r3, #4]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d108      	bne.n	800eaf8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800eae6:	7bfa      	ldrb	r2, [r7, #15]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	32de      	adds	r2, #222	; 0xde
 800eaec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800eaf6:	e005      	b.n	800eb04 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800eaf8:	7bfb      	ldrb	r3, [r7, #15]
 800eafa:	3301      	adds	r3, #1
 800eafc:	73fb      	strb	r3, [r7, #15]
 800eafe:	7bfb      	ldrb	r3, [r7, #15]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d0e5      	beq.n	800ead0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d016      	beq.n	800eb3c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eb14:	689b      	ldr	r3, [r3, #8]
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	4798      	blx	r3
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d109      	bne.n	800eb34 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2206      	movs	r2, #6
 800eb24:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eb2c:	2103      	movs	r1, #3
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800eb32:	e073      	b.n	800ec1c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	220d      	movs	r2, #13
 800eb38:	701a      	strb	r2, [r3, #0]
      break;
 800eb3a:	e06f      	b.n	800ec1c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	220d      	movs	r2, #13
 800eb40:	701a      	strb	r2, [r3, #0]
      break;
 800eb42:	e06b      	b.n	800ec1c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d017      	beq.n	800eb7e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eb54:	691b      	ldr	r3, [r3, #16]
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	4798      	blx	r3
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800eb5e:	7bbb      	ldrb	r3, [r7, #14]
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d103      	bne.n	800eb6e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	220b      	movs	r2, #11
 800eb6a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800eb6c:	e058      	b.n	800ec20 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800eb6e:	7bbb      	ldrb	r3, [r7, #14]
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	2b02      	cmp	r3, #2
 800eb74:	d154      	bne.n	800ec20 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	220d      	movs	r2, #13
 800eb7a:	701a      	strb	r2, [r3, #0]
      break;
 800eb7c:	e050      	b.n	800ec20 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	220d      	movs	r2, #13
 800eb82:	701a      	strb	r2, [r3, #0]
      break;
 800eb84:	e04c      	b.n	800ec20 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d049      	beq.n	800ec24 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eb96:	695b      	ldr	r3, [r3, #20]
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	4798      	blx	r3
      }
      break;
 800eb9c:	e042      	b.n	800ec24 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2200      	movs	r2, #0
 800eba2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f7ff fd72 	bl	800e690 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d009      	beq.n	800ebca <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ebbc:	68db      	ldr	r3, [r3, #12]
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d005      	beq.n	800ebe0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ebda:	2105      	movs	r1, #5
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ebe6:	b2db      	uxtb	r3, r3
 800ebe8:	2b01      	cmp	r3, #1
 800ebea:	d107      	bne.n	800ebfc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f7ff fe2b 	bl	800e850 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ebfa:	e014      	b.n	800ec26 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f001 f9b5 	bl	800ff6c <USBH_LL_Start>
      break;
 800ec02:	e010      	b.n	800ec26 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800ec04:	bf00      	nop
 800ec06:	e00e      	b.n	800ec26 <USBH_Process+0x3b6>
      break;
 800ec08:	bf00      	nop
 800ec0a:	e00c      	b.n	800ec26 <USBH_Process+0x3b6>
      break;
 800ec0c:	bf00      	nop
 800ec0e:	e00a      	b.n	800ec26 <USBH_Process+0x3b6>
    break;
 800ec10:	bf00      	nop
 800ec12:	e008      	b.n	800ec26 <USBH_Process+0x3b6>
      break;
 800ec14:	bf00      	nop
 800ec16:	e006      	b.n	800ec26 <USBH_Process+0x3b6>
      break;
 800ec18:	bf00      	nop
 800ec1a:	e004      	b.n	800ec26 <USBH_Process+0x3b6>
      break;
 800ec1c:	bf00      	nop
 800ec1e:	e002      	b.n	800ec26 <USBH_Process+0x3b6>
      break;
 800ec20:	bf00      	nop
 800ec22:	e000      	b.n	800ec26 <USBH_Process+0x3b6>
      break;
 800ec24:	bf00      	nop
  }
  return USBH_OK;
 800ec26:	2300      	movs	r3, #0
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3710      	adds	r7, #16
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b088      	sub	sp, #32
 800ec34:	af04      	add	r7, sp, #16
 800ec36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	785b      	ldrb	r3, [r3, #1]
 800ec44:	2b07      	cmp	r3, #7
 800ec46:	f200 81c1 	bhi.w	800efcc <USBH_HandleEnum+0x39c>
 800ec4a:	a201      	add	r2, pc, #4	; (adr r2, 800ec50 <USBH_HandleEnum+0x20>)
 800ec4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec50:	0800ec71 	.word	0x0800ec71
 800ec54:	0800ed2f 	.word	0x0800ed2f
 800ec58:	0800ed99 	.word	0x0800ed99
 800ec5c:	0800ee27 	.word	0x0800ee27
 800ec60:	0800ee91 	.word	0x0800ee91
 800ec64:	0800ef01 	.word	0x0800ef01
 800ec68:	0800ef47 	.word	0x0800ef47
 800ec6c:	0800ef8d 	.word	0x0800ef8d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ec70:	2108      	movs	r1, #8
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f000 fa50 	bl	800f118 <USBH_Get_DevDesc>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ec7c:	7bbb      	ldrb	r3, [r7, #14]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d130      	bne.n	800ece4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2201      	movs	r2, #1
 800ec90:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	7919      	ldrb	r1, [r3, #4]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800eca6:	b292      	uxth	r2, r2
 800eca8:	9202      	str	r2, [sp, #8]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	9201      	str	r2, [sp, #4]
 800ecae:	9300      	str	r3, [sp, #0]
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	2280      	movs	r2, #128	; 0x80
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f000 ff77 	bl	800fba8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	7959      	ldrb	r1, [r3, #5]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ecca:	687a      	ldr	r2, [r7, #4]
 800eccc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ecce:	b292      	uxth	r2, r2
 800ecd0:	9202      	str	r2, [sp, #8]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	9201      	str	r2, [sp, #4]
 800ecd6:	9300      	str	r3, [sp, #0]
 800ecd8:	4603      	mov	r3, r0
 800ecda:	2200      	movs	r2, #0
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f000 ff63 	bl	800fba8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ece2:	e175      	b.n	800efd0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ece4:	7bbb      	ldrb	r3, [r7, #14]
 800ece6:	2b03      	cmp	r3, #3
 800ece8:	f040 8172 	bne.w	800efd0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	b2da      	uxtb	r2, r3
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ed02:	2b03      	cmp	r3, #3
 800ed04:	d903      	bls.n	800ed0e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	220d      	movs	r2, #13
 800ed0a:	701a      	strb	r2, [r3, #0]
      break;
 800ed0c:	e160      	b.n	800efd0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	795b      	ldrb	r3, [r3, #5]
 800ed12:	4619      	mov	r1, r3
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f000 ff97 	bl	800fc48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	791b      	ldrb	r3, [r3, #4]
 800ed1e:	4619      	mov	r1, r3
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f000 ff91 	bl	800fc48 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	701a      	strb	r2, [r3, #0]
      break;
 800ed2c:	e150      	b.n	800efd0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ed2e:	2112      	movs	r1, #18
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f000 f9f1 	bl	800f118 <USBH_Get_DevDesc>
 800ed36:	4603      	mov	r3, r0
 800ed38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ed3a:	7bbb      	ldrb	r3, [r7, #14]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d103      	bne.n	800ed48 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2202      	movs	r2, #2
 800ed44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ed46:	e145      	b.n	800efd4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ed48:	7bbb      	ldrb	r3, [r7, #14]
 800ed4a:	2b03      	cmp	r3, #3
 800ed4c:	f040 8142 	bne.w	800efd4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ed56:	3301      	adds	r3, #1
 800ed58:	b2da      	uxtb	r2, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ed66:	2b03      	cmp	r3, #3
 800ed68:	d903      	bls.n	800ed72 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	220d      	movs	r2, #13
 800ed6e:	701a      	strb	r2, [r3, #0]
      break;
 800ed70:	e130      	b.n	800efd4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	795b      	ldrb	r3, [r3, #5]
 800ed76:	4619      	mov	r1, r3
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f000 ff65 	bl	800fc48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	791b      	ldrb	r3, [r3, #4]
 800ed82:	4619      	mov	r1, r3
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 ff5f 	bl	800fc48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2200      	movs	r2, #0
 800ed94:	701a      	strb	r2, [r3, #0]
      break;
 800ed96:	e11d      	b.n	800efd4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ed98:	2101      	movs	r1, #1
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f000 fa68 	bl	800f270 <USBH_SetAddress>
 800eda0:	4603      	mov	r3, r0
 800eda2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800eda4:	7bbb      	ldrb	r3, [r7, #14]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d132      	bne.n	800ee10 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800edaa:	2002      	movs	r0, #2
 800edac:	f001 fa42 	bl	8010234 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2201      	movs	r2, #1
 800edb4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2203      	movs	r2, #3
 800edbc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	7919      	ldrb	r1, [r3, #4]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800edd2:	b292      	uxth	r2, r2
 800edd4:	9202      	str	r2, [sp, #8]
 800edd6:	2200      	movs	r2, #0
 800edd8:	9201      	str	r2, [sp, #4]
 800edda:	9300      	str	r3, [sp, #0]
 800eddc:	4603      	mov	r3, r0
 800edde:	2280      	movs	r2, #128	; 0x80
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f000 fee1 	bl	800fba8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	7959      	ldrb	r1, [r3, #5]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800edfa:	b292      	uxth	r2, r2
 800edfc:	9202      	str	r2, [sp, #8]
 800edfe:	2200      	movs	r2, #0
 800ee00:	9201      	str	r2, [sp, #4]
 800ee02:	9300      	str	r3, [sp, #0]
 800ee04:	4603      	mov	r3, r0
 800ee06:	2200      	movs	r2, #0
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f000 fecd 	bl	800fba8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ee0e:	e0e3      	b.n	800efd8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ee10:	7bbb      	ldrb	r3, [r7, #14]
 800ee12:	2b03      	cmp	r3, #3
 800ee14:	f040 80e0 	bne.w	800efd8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	220d      	movs	r2, #13
 800ee1c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2200      	movs	r2, #0
 800ee22:	705a      	strb	r2, [r3, #1]
      break;
 800ee24:	e0d8      	b.n	800efd8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ee26:	2109      	movs	r1, #9
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f000 f99d 	bl	800f168 <USBH_Get_CfgDesc>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ee32:	7bbb      	ldrb	r3, [r7, #14]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d103      	bne.n	800ee40 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2204      	movs	r2, #4
 800ee3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ee3e:	e0cd      	b.n	800efdc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ee40:	7bbb      	ldrb	r3, [r7, #14]
 800ee42:	2b03      	cmp	r3, #3
 800ee44:	f040 80ca 	bne.w	800efdc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ee4e:	3301      	adds	r3, #1
 800ee50:	b2da      	uxtb	r2, r3
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ee5e:	2b03      	cmp	r3, #3
 800ee60:	d903      	bls.n	800ee6a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	220d      	movs	r2, #13
 800ee66:	701a      	strb	r2, [r3, #0]
      break;
 800ee68:	e0b8      	b.n	800efdc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	795b      	ldrb	r3, [r3, #5]
 800ee6e:	4619      	mov	r1, r3
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f000 fee9 	bl	800fc48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	791b      	ldrb	r3, [r3, #4]
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f000 fee3 	bl	800fc48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2200      	movs	r2, #0
 800ee86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	701a      	strb	r2, [r3, #0]
      break;
 800ee8e:	e0a5      	b.n	800efdc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ee96:	4619      	mov	r1, r3
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f000 f965 	bl	800f168 <USBH_Get_CfgDesc>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800eea2:	7bbb      	ldrb	r3, [r7, #14]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d103      	bne.n	800eeb0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2205      	movs	r2, #5
 800eeac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800eeae:	e097      	b.n	800efe0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eeb0:	7bbb      	ldrb	r3, [r7, #14]
 800eeb2:	2b03      	cmp	r3, #3
 800eeb4:	f040 8094 	bne.w	800efe0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eebe:	3301      	adds	r3, #1
 800eec0:	b2da      	uxtb	r2, r3
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eece:	2b03      	cmp	r3, #3
 800eed0:	d903      	bls.n	800eeda <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	220d      	movs	r2, #13
 800eed6:	701a      	strb	r2, [r3, #0]
      break;
 800eed8:	e082      	b.n	800efe0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	795b      	ldrb	r3, [r3, #5]
 800eede:	4619      	mov	r1, r3
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f000 feb1 	bl	800fc48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	791b      	ldrb	r3, [r3, #4]
 800eeea:	4619      	mov	r1, r3
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f000 feab 	bl	800fc48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2200      	movs	r2, #0
 800eef6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2200      	movs	r2, #0
 800eefc:	701a      	strb	r2, [r3, #0]
      break;
 800eefe:	e06f      	b.n	800efe0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d019      	beq.n	800ef3e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ef16:	23ff      	movs	r3, #255	; 0xff
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f000 f949 	bl	800f1b0 <USBH_Get_StringDesc>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ef22:	7bbb      	ldrb	r3, [r7, #14]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d103      	bne.n	800ef30 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2206      	movs	r2, #6
 800ef2c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ef2e:	e059      	b.n	800efe4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ef30:	7bbb      	ldrb	r3, [r7, #14]
 800ef32:	2b03      	cmp	r3, #3
 800ef34:	d156      	bne.n	800efe4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2206      	movs	r2, #6
 800ef3a:	705a      	strb	r2, [r3, #1]
      break;
 800ef3c:	e052      	b.n	800efe4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2206      	movs	r2, #6
 800ef42:	705a      	strb	r2, [r3, #1]
      break;
 800ef44:	e04e      	b.n	800efe4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d019      	beq.n	800ef84 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ef5c:	23ff      	movs	r3, #255	; 0xff
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f000 f926 	bl	800f1b0 <USBH_Get_StringDesc>
 800ef64:	4603      	mov	r3, r0
 800ef66:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ef68:	7bbb      	ldrb	r3, [r7, #14]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d103      	bne.n	800ef76 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2207      	movs	r2, #7
 800ef72:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ef74:	e038      	b.n	800efe8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ef76:	7bbb      	ldrb	r3, [r7, #14]
 800ef78:	2b03      	cmp	r3, #3
 800ef7a:	d135      	bne.n	800efe8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2207      	movs	r2, #7
 800ef80:	705a      	strb	r2, [r3, #1]
      break;
 800ef82:	e031      	b.n	800efe8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2207      	movs	r2, #7
 800ef88:	705a      	strb	r2, [r3, #1]
      break;
 800ef8a:	e02d      	b.n	800efe8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d017      	beq.n	800efc6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800efa2:	23ff      	movs	r3, #255	; 0xff
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f000 f903 	bl	800f1b0 <USBH_Get_StringDesc>
 800efaa:	4603      	mov	r3, r0
 800efac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800efae:	7bbb      	ldrb	r3, [r7, #14]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d102      	bne.n	800efba <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800efb4:	2300      	movs	r3, #0
 800efb6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800efb8:	e018      	b.n	800efec <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800efba:	7bbb      	ldrb	r3, [r7, #14]
 800efbc:	2b03      	cmp	r3, #3
 800efbe:	d115      	bne.n	800efec <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800efc0:	2300      	movs	r3, #0
 800efc2:	73fb      	strb	r3, [r7, #15]
      break;
 800efc4:	e012      	b.n	800efec <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800efc6:	2300      	movs	r3, #0
 800efc8:	73fb      	strb	r3, [r7, #15]
      break;
 800efca:	e00f      	b.n	800efec <USBH_HandleEnum+0x3bc>

    default:
      break;
 800efcc:	bf00      	nop
 800efce:	e00e      	b.n	800efee <USBH_HandleEnum+0x3be>
      break;
 800efd0:	bf00      	nop
 800efd2:	e00c      	b.n	800efee <USBH_HandleEnum+0x3be>
      break;
 800efd4:	bf00      	nop
 800efd6:	e00a      	b.n	800efee <USBH_HandleEnum+0x3be>
      break;
 800efd8:	bf00      	nop
 800efda:	e008      	b.n	800efee <USBH_HandleEnum+0x3be>
      break;
 800efdc:	bf00      	nop
 800efde:	e006      	b.n	800efee <USBH_HandleEnum+0x3be>
      break;
 800efe0:	bf00      	nop
 800efe2:	e004      	b.n	800efee <USBH_HandleEnum+0x3be>
      break;
 800efe4:	bf00      	nop
 800efe6:	e002      	b.n	800efee <USBH_HandleEnum+0x3be>
      break;
 800efe8:	bf00      	nop
 800efea:	e000      	b.n	800efee <USBH_HandleEnum+0x3be>
      break;
 800efec:	bf00      	nop
  }
  return Status;
 800efee:	7bfb      	ldrb	r3, [r7, #15]
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3710      	adds	r7, #16
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800eff8:	b480      	push	{r7}
 800effa:	b083      	sub	sp, #12
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	683a      	ldr	r2, [r7, #0]
 800f006:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800f00a:	bf00      	nop
 800f00c:	370c      	adds	r7, #12
 800f00e:	46bd      	mov	sp, r7
 800f010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f014:	4770      	bx	lr

0800f016 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f016:	b580      	push	{r7, lr}
 800f018:	b082      	sub	sp, #8
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f024:	1c5a      	adds	r2, r3, #1
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f000 f804 	bl	800f03a <USBH_HandleSof>
}
 800f032:	bf00      	nop
 800f034:	3708      	adds	r7, #8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b082      	sub	sp, #8
 800f03e:	af00      	add	r7, sp, #0
 800f040:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	b2db      	uxtb	r3, r3
 800f048:	2b0b      	cmp	r3, #11
 800f04a:	d10a      	bne.n	800f062 <USBH_HandleSof+0x28>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f052:	2b00      	cmp	r3, #0
 800f054:	d005      	beq.n	800f062 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f05c:	699b      	ldr	r3, [r3, #24]
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	4798      	blx	r3
  }
}
 800f062:	bf00      	nop
 800f064:	3708      	adds	r7, #8
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}

0800f06a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f06a:	b480      	push	{r7}
 800f06c:	b083      	sub	sp, #12
 800f06e:	af00      	add	r7, sp, #0
 800f070:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2201      	movs	r2, #1
 800f076:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800f07a:	bf00      	nop
}
 800f07c:	370c      	adds	r7, #12
 800f07e:	46bd      	mov	sp, r7
 800f080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f084:	4770      	bx	lr

0800f086 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f086:	b480      	push	{r7}
 800f088:	b083      	sub	sp, #12
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f096:	bf00      	nop
}
 800f098:	370c      	adds	r7, #12
 800f09a:	46bd      	mov	sp, r7
 800f09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a0:	4770      	bx	lr

0800f0a2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f0a2:	b480      	push	{r7}
 800f0a4:	b083      	sub	sp, #12
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2201      	movs	r2, #1
 800f0ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f0c2:	2300      	movs	r3, #0
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	370c      	adds	r7, #12
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr

0800f0d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b082      	sub	sp, #8
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f000 ff56 	bl	800ffa2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	791b      	ldrb	r3, [r3, #4]
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f000 fda3 	bl	800fc48 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	795b      	ldrb	r3, [r3, #5]
 800f106:	4619      	mov	r1, r3
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f000 fd9d 	bl	800fc48 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f10e:	2300      	movs	r3, #0
}
 800f110:	4618      	mov	r0, r3
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b086      	sub	sp, #24
 800f11c:	af02      	add	r7, sp, #8
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	460b      	mov	r3, r1
 800f122:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f12a:	78fb      	ldrb	r3, [r7, #3]
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	9300      	str	r3, [sp, #0]
 800f130:	4613      	mov	r3, r2
 800f132:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f136:	2100      	movs	r1, #0
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 f864 	bl	800f206 <USBH_GetDescriptor>
 800f13e:	4603      	mov	r3, r0
 800f140:	73fb      	strb	r3, [r7, #15]
 800f142:	7bfb      	ldrb	r3, [r7, #15]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d10a      	bne.n	800f15e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f154:	78fa      	ldrb	r2, [r7, #3]
 800f156:	b292      	uxth	r2, r2
 800f158:	4619      	mov	r1, r3
 800f15a:	f000 f918 	bl	800f38e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f160:	4618      	mov	r0, r3
 800f162:	3710      	adds	r7, #16
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b086      	sub	sp, #24
 800f16c:	af02      	add	r7, sp, #8
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	460b      	mov	r3, r1
 800f172:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	331c      	adds	r3, #28
 800f178:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f17a:	887b      	ldrh	r3, [r7, #2]
 800f17c:	9300      	str	r3, [sp, #0]
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f184:	2100      	movs	r1, #0
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f000 f83d 	bl	800f206 <USBH_GetDescriptor>
 800f18c:	4603      	mov	r3, r0
 800f18e:	72fb      	strb	r3, [r7, #11]
 800f190:	7afb      	ldrb	r3, [r7, #11]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d107      	bne.n	800f1a6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f19c:	887a      	ldrh	r2, [r7, #2]
 800f19e:	68f9      	ldr	r1, [r7, #12]
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f000 f964 	bl	800f46e <USBH_ParseCfgDesc>
  }

  return status;
 800f1a6:	7afb      	ldrb	r3, [r7, #11]
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3710      	adds	r7, #16
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b088      	sub	sp, #32
 800f1b4:	af02      	add	r7, sp, #8
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	607a      	str	r2, [r7, #4]
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	460b      	mov	r3, r1
 800f1be:	72fb      	strb	r3, [r7, #11]
 800f1c0:	4613      	mov	r3, r2
 800f1c2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f1c4:	7afb      	ldrb	r3, [r7, #11]
 800f1c6:	b29b      	uxth	r3, r3
 800f1c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f1cc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f1d4:	893b      	ldrh	r3, [r7, #8]
 800f1d6:	9300      	str	r3, [sp, #0]
 800f1d8:	460b      	mov	r3, r1
 800f1da:	2100      	movs	r1, #0
 800f1dc:	68f8      	ldr	r0, [r7, #12]
 800f1de:	f000 f812 	bl	800f206 <USBH_GetDescriptor>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	75fb      	strb	r3, [r7, #23]
 800f1e6:	7dfb      	ldrb	r3, [r7, #23]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d107      	bne.n	800f1fc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f1f2:	893a      	ldrh	r2, [r7, #8]
 800f1f4:	6879      	ldr	r1, [r7, #4]
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f000 fa37 	bl	800f66a <USBH_ParseStringDesc>
  }

  return status;
 800f1fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3718      	adds	r7, #24
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}

0800f206 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f206:	b580      	push	{r7, lr}
 800f208:	b084      	sub	sp, #16
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	60f8      	str	r0, [r7, #12]
 800f20e:	607b      	str	r3, [r7, #4]
 800f210:	460b      	mov	r3, r1
 800f212:	72fb      	strb	r3, [r7, #11]
 800f214:	4613      	mov	r3, r2
 800f216:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	789b      	ldrb	r3, [r3, #2]
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	d11c      	bne.n	800f25a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f220:	7afb      	ldrb	r3, [r7, #11]
 800f222:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f226:	b2da      	uxtb	r2, r3
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	2206      	movs	r2, #6
 800f230:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	893a      	ldrh	r2, [r7, #8]
 800f236:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f238:	893b      	ldrh	r3, [r7, #8]
 800f23a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f23e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f242:	d104      	bne.n	800f24e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	f240 4209 	movw	r2, #1033	; 0x409
 800f24a:	829a      	strh	r2, [r3, #20]
 800f24c:	e002      	b.n	800f254 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2200      	movs	r2, #0
 800f252:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	8b3a      	ldrh	r2, [r7, #24]
 800f258:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f25a:	8b3b      	ldrh	r3, [r7, #24]
 800f25c:	461a      	mov	r2, r3
 800f25e:	6879      	ldr	r1, [r7, #4]
 800f260:	68f8      	ldr	r0, [r7, #12]
 800f262:	f000 fa50 	bl	800f706 <USBH_CtlReq>
 800f266:	4603      	mov	r3, r0
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3710      	adds	r7, #16
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	460b      	mov	r3, r1
 800f27a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	789b      	ldrb	r3, [r3, #2]
 800f280:	2b01      	cmp	r3, #1
 800f282:	d10f      	bne.n	800f2a4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2200      	movs	r2, #0
 800f288:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2205      	movs	r2, #5
 800f28e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f290:	78fb      	ldrb	r3, [r7, #3]
 800f292:	b29a      	uxth	r2, r3
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2200      	movs	r2, #0
 800f29c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	2100      	movs	r1, #0
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f000 fa2c 	bl	800f706 <USBH_CtlReq>
 800f2ae:	4603      	mov	r3, r0
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3708      	adds	r7, #8
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}

0800f2b8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	460b      	mov	r3, r1
 800f2c2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	789b      	ldrb	r3, [r3, #2]
 800f2c8:	2b01      	cmp	r3, #1
 800f2ca:	d10e      	bne.n	800f2ea <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2209      	movs	r2, #9
 800f2d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	887a      	ldrh	r2, [r7, #2]
 800f2dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	2100      	movs	r1, #0
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f000 fa09 	bl	800f706 <USBH_CtlReq>
 800f2f4:	4603      	mov	r3, r0
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3708      	adds	r7, #8
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}

0800f2fe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f2fe:	b580      	push	{r7, lr}
 800f300:	b082      	sub	sp, #8
 800f302:	af00      	add	r7, sp, #0
 800f304:	6078      	str	r0, [r7, #4]
 800f306:	460b      	mov	r3, r1
 800f308:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	789b      	ldrb	r3, [r3, #2]
 800f30e:	2b01      	cmp	r3, #1
 800f310:	d10f      	bne.n	800f332 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2200      	movs	r2, #0
 800f316:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2203      	movs	r2, #3
 800f31c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f31e:	78fb      	ldrb	r3, [r7, #3]
 800f320:	b29a      	uxth	r2, r3
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2200      	movs	r2, #0
 800f32a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2200      	movs	r2, #0
 800f330:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f332:	2200      	movs	r2, #0
 800f334:	2100      	movs	r1, #0
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f000 f9e5 	bl	800f706 <USBH_CtlReq>
 800f33c:	4603      	mov	r3, r0
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3708      	adds	r7, #8
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}

0800f346 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f346:	b580      	push	{r7, lr}
 800f348:	b082      	sub	sp, #8
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	6078      	str	r0, [r7, #4]
 800f34e:	460b      	mov	r3, r1
 800f350:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	789b      	ldrb	r3, [r3, #2]
 800f356:	2b01      	cmp	r3, #1
 800f358:	d10f      	bne.n	800f37a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2202      	movs	r2, #2
 800f35e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2201      	movs	r2, #1
 800f364:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2200      	movs	r2, #0
 800f36a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f36c:	78fb      	ldrb	r3, [r7, #3]
 800f36e:	b29a      	uxth	r2, r3
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2200      	movs	r2, #0
 800f378:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f37a:	2200      	movs	r2, #0
 800f37c:	2100      	movs	r1, #0
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f000 f9c1 	bl	800f706 <USBH_CtlReq>
 800f384:	4603      	mov	r3, r0
}
 800f386:	4618      	mov	r0, r3
 800f388:	3708      	adds	r7, #8
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}

0800f38e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f38e:	b480      	push	{r7}
 800f390:	b085      	sub	sp, #20
 800f392:	af00      	add	r7, sp, #0
 800f394:	60f8      	str	r0, [r7, #12]
 800f396:	60b9      	str	r1, [r7, #8]
 800f398:	4613      	mov	r3, r2
 800f39a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	781a      	ldrb	r2, [r3, #0]
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	785a      	ldrb	r2, [r3, #1]
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	3302      	adds	r3, #2
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	b29a      	uxth	r2, r3
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	3303      	adds	r3, #3
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	b29b      	uxth	r3, r3
 800f3bc:	021b      	lsls	r3, r3, #8
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	4313      	orrs	r3, r2
 800f3c2:	b29a      	uxth	r2, r3
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	791a      	ldrb	r2, [r3, #4]
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	795a      	ldrb	r2, [r3, #5]
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	799a      	ldrb	r2, [r3, #6]
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	79da      	ldrb	r2, [r3, #7]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800f3e8:	88fb      	ldrh	r3, [r7, #6]
 800f3ea:	2b08      	cmp	r3, #8
 800f3ec:	d939      	bls.n	800f462 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	3308      	adds	r3, #8
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	b29a      	uxth	r2, r3
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	3309      	adds	r3, #9
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	b29b      	uxth	r3, r3
 800f3fe:	021b      	lsls	r3, r3, #8
 800f400:	b29b      	uxth	r3, r3
 800f402:	4313      	orrs	r3, r2
 800f404:	b29a      	uxth	r2, r3
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	330a      	adds	r3, #10
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	b29a      	uxth	r2, r3
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	330b      	adds	r3, #11
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	b29b      	uxth	r3, r3
 800f41a:	021b      	lsls	r3, r3, #8
 800f41c:	b29b      	uxth	r3, r3
 800f41e:	4313      	orrs	r3, r2
 800f420:	b29a      	uxth	r2, r3
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	330c      	adds	r3, #12
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	b29a      	uxth	r2, r3
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	330d      	adds	r3, #13
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	b29b      	uxth	r3, r3
 800f436:	021b      	lsls	r3, r3, #8
 800f438:	b29b      	uxth	r3, r3
 800f43a:	4313      	orrs	r3, r2
 800f43c:	b29a      	uxth	r2, r3
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	7b9a      	ldrb	r2, [r3, #14]
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	7bda      	ldrb	r2, [r3, #15]
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	7c1a      	ldrb	r2, [r3, #16]
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	7c5a      	ldrb	r2, [r3, #17]
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	745a      	strb	r2, [r3, #17]
  }
}
 800f462:	bf00      	nop
 800f464:	3714      	adds	r7, #20
 800f466:	46bd      	mov	sp, r7
 800f468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46c:	4770      	bx	lr

0800f46e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800f46e:	b580      	push	{r7, lr}
 800f470:	b08a      	sub	sp, #40	; 0x28
 800f472:	af00      	add	r7, sp, #0
 800f474:	60f8      	str	r0, [r7, #12]
 800f476:	60b9      	str	r1, [r7, #8]
 800f478:	4613      	mov	r3, r2
 800f47a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f480:	2300      	movs	r3, #0
 800f482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800f486:	2300      	movs	r3, #0
 800f488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	781a      	ldrb	r2, [r3, #0]
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	785a      	ldrb	r2, [r3, #1]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	3302      	adds	r3, #2
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	b29a      	uxth	r2, r3
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	3303      	adds	r3, #3
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	021b      	lsls	r3, r3, #8
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	4313      	orrs	r3, r2
 800f4b6:	b29a      	uxth	r2, r3
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	791a      	ldrb	r2, [r3, #4]
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	795a      	ldrb	r2, [r3, #5]
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	799a      	ldrb	r2, [r3, #6]
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	79da      	ldrb	r2, [r3, #7]
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	7a1a      	ldrb	r2, [r3, #8]
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f4e4:	88fb      	ldrh	r3, [r7, #6]
 800f4e6:	2b09      	cmp	r3, #9
 800f4e8:	d95f      	bls.n	800f5aa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800f4ea:	2309      	movs	r3, #9
 800f4ec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f4f2:	e051      	b.n	800f598 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f4f4:	f107 0316 	add.w	r3, r7, #22
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4fc:	f000 f8e8 	bl	800f6d0 <USBH_GetNextDesc>
 800f500:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800f502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f504:	785b      	ldrb	r3, [r3, #1]
 800f506:	2b04      	cmp	r3, #4
 800f508:	d146      	bne.n	800f598 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800f50a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f50e:	221a      	movs	r2, #26
 800f510:	fb02 f303 	mul.w	r3, r2, r3
 800f514:	3308      	adds	r3, #8
 800f516:	68fa      	ldr	r2, [r7, #12]
 800f518:	4413      	add	r3, r2
 800f51a:	3302      	adds	r3, #2
 800f51c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f51e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f520:	69f8      	ldr	r0, [r7, #28]
 800f522:	f000 f846 	bl	800f5b2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f526:	2300      	movs	r3, #0
 800f528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800f52c:	2300      	movs	r3, #0
 800f52e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f530:	e022      	b.n	800f578 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f532:	f107 0316 	add.w	r3, r7, #22
 800f536:	4619      	mov	r1, r3
 800f538:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f53a:	f000 f8c9 	bl	800f6d0 <USBH_GetNextDesc>
 800f53e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800f540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f542:	785b      	ldrb	r3, [r3, #1]
 800f544:	2b05      	cmp	r3, #5
 800f546:	d117      	bne.n	800f578 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f54c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f550:	3201      	adds	r2, #1
 800f552:	00d2      	lsls	r2, r2, #3
 800f554:	211a      	movs	r1, #26
 800f556:	fb01 f303 	mul.w	r3, r1, r3
 800f55a:	4413      	add	r3, r2
 800f55c:	3308      	adds	r3, #8
 800f55e:	68fa      	ldr	r2, [r7, #12]
 800f560:	4413      	add	r3, r2
 800f562:	3304      	adds	r3, #4
 800f564:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800f566:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f568:	69b8      	ldr	r0, [r7, #24]
 800f56a:	f000 f851 	bl	800f610 <USBH_ParseEPDesc>
            ep_ix++;
 800f56e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f572:	3301      	adds	r3, #1
 800f574:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	791b      	ldrb	r3, [r3, #4]
 800f57c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f580:	429a      	cmp	r2, r3
 800f582:	d204      	bcs.n	800f58e <USBH_ParseCfgDesc+0x120>
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	885a      	ldrh	r2, [r3, #2]
 800f588:	8afb      	ldrh	r3, [r7, #22]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d8d1      	bhi.n	800f532 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800f58e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f592:	3301      	adds	r3, #1
 800f594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f598:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	d804      	bhi.n	800f5aa <USBH_ParseCfgDesc+0x13c>
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	885a      	ldrh	r2, [r3, #2]
 800f5a4:	8afb      	ldrh	r3, [r7, #22]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d8a4      	bhi.n	800f4f4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800f5aa:	bf00      	nop
 800f5ac:	3728      	adds	r7, #40	; 0x28
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}

0800f5b2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f5b2:	b480      	push	{r7}
 800f5b4:	b083      	sub	sp, #12
 800f5b6:	af00      	add	r7, sp, #0
 800f5b8:	6078      	str	r0, [r7, #4]
 800f5ba:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	781a      	ldrb	r2, [r3, #0]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	785a      	ldrb	r2, [r3, #1]
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	789a      	ldrb	r2, [r3, #2]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	78da      	ldrb	r2, [r3, #3]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	791a      	ldrb	r2, [r3, #4]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	795a      	ldrb	r2, [r3, #5]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	799a      	ldrb	r2, [r3, #6]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	79da      	ldrb	r2, [r3, #7]
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	7a1a      	ldrb	r2, [r3, #8]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	721a      	strb	r2, [r3, #8]
}
 800f604:	bf00      	nop
 800f606:	370c      	adds	r7, #12
 800f608:	46bd      	mov	sp, r7
 800f60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60e:	4770      	bx	lr

0800f610 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800f610:	b480      	push	{r7}
 800f612:	b083      	sub	sp, #12
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	781a      	ldrb	r2, [r3, #0]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	785a      	ldrb	r2, [r3, #1]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	789a      	ldrb	r2, [r3, #2]
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	78da      	ldrb	r2, [r3, #3]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	3304      	adds	r3, #4
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	b29a      	uxth	r2, r3
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	3305      	adds	r3, #5
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	b29b      	uxth	r3, r3
 800f64a:	021b      	lsls	r3, r3, #8
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	4313      	orrs	r3, r2
 800f650:	b29a      	uxth	r2, r3
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	799a      	ldrb	r2, [r3, #6]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	719a      	strb	r2, [r3, #6]
}
 800f65e:	bf00      	nop
 800f660:	370c      	adds	r7, #12
 800f662:	46bd      	mov	sp, r7
 800f664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f668:	4770      	bx	lr

0800f66a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f66a:	b480      	push	{r7}
 800f66c:	b087      	sub	sp, #28
 800f66e:	af00      	add	r7, sp, #0
 800f670:	60f8      	str	r0, [r7, #12]
 800f672:	60b9      	str	r1, [r7, #8]
 800f674:	4613      	mov	r3, r2
 800f676:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	3301      	adds	r3, #1
 800f67c:	781b      	ldrb	r3, [r3, #0]
 800f67e:	2b03      	cmp	r3, #3
 800f680:	d120      	bne.n	800f6c4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	1e9a      	subs	r2, r3, #2
 800f688:	88fb      	ldrh	r3, [r7, #6]
 800f68a:	4293      	cmp	r3, r2
 800f68c:	bf28      	it	cs
 800f68e:	4613      	movcs	r3, r2
 800f690:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	3302      	adds	r3, #2
 800f696:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f698:	2300      	movs	r3, #0
 800f69a:	82fb      	strh	r3, [r7, #22]
 800f69c:	e00b      	b.n	800f6b6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f69e:	8afb      	ldrh	r3, [r7, #22]
 800f6a0:	68fa      	ldr	r2, [r7, #12]
 800f6a2:	4413      	add	r3, r2
 800f6a4:	781a      	ldrb	r2, [r3, #0]
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f6b0:	8afb      	ldrh	r3, [r7, #22]
 800f6b2:	3302      	adds	r3, #2
 800f6b4:	82fb      	strh	r3, [r7, #22]
 800f6b6:	8afa      	ldrh	r2, [r7, #22]
 800f6b8:	8abb      	ldrh	r3, [r7, #20]
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d3ef      	bcc.n	800f69e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	701a      	strb	r2, [r3, #0]
  }
}
 800f6c4:	bf00      	nop
 800f6c6:	371c      	adds	r7, #28
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr

0800f6d0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b085      	sub	sp, #20
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	881a      	ldrh	r2, [r3, #0]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	b29b      	uxth	r3, r3
 800f6e4:	4413      	add	r3, r2
 800f6e6:	b29a      	uxth	r2, r3
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	4413      	add	r3, r2
 800f6f6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f6f8:	68fb      	ldr	r3, [r7, #12]
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3714      	adds	r7, #20
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr

0800f706 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f706:	b580      	push	{r7, lr}
 800f708:	b086      	sub	sp, #24
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	60f8      	str	r0, [r7, #12]
 800f70e:	60b9      	str	r1, [r7, #8]
 800f710:	4613      	mov	r3, r2
 800f712:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f714:	2301      	movs	r3, #1
 800f716:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	789b      	ldrb	r3, [r3, #2]
 800f71c:	2b01      	cmp	r3, #1
 800f71e:	d002      	beq.n	800f726 <USBH_CtlReq+0x20>
 800f720:	2b02      	cmp	r3, #2
 800f722:	d00f      	beq.n	800f744 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800f724:	e027      	b.n	800f776 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	68ba      	ldr	r2, [r7, #8]
 800f72a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	88fa      	ldrh	r2, [r7, #6]
 800f730:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2201      	movs	r2, #1
 800f736:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2202      	movs	r2, #2
 800f73c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f73e:	2301      	movs	r3, #1
 800f740:	75fb      	strb	r3, [r7, #23]
      break;
 800f742:	e018      	b.n	800f776 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800f744:	68f8      	ldr	r0, [r7, #12]
 800f746:	f000 f81b 	bl	800f780 <USBH_HandleControl>
 800f74a:	4603      	mov	r3, r0
 800f74c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f74e:	7dfb      	ldrb	r3, [r7, #23]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d002      	beq.n	800f75a <USBH_CtlReq+0x54>
 800f754:	7dfb      	ldrb	r3, [r7, #23]
 800f756:	2b03      	cmp	r3, #3
 800f758:	d106      	bne.n	800f768 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	2201      	movs	r2, #1
 800f75e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	2200      	movs	r2, #0
 800f764:	761a      	strb	r2, [r3, #24]
      break;
 800f766:	e005      	b.n	800f774 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800f768:	7dfb      	ldrb	r3, [r7, #23]
 800f76a:	2b02      	cmp	r3, #2
 800f76c:	d102      	bne.n	800f774 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	2201      	movs	r2, #1
 800f772:	709a      	strb	r2, [r3, #2]
      break;
 800f774:	bf00      	nop
  }
  return status;
 800f776:	7dfb      	ldrb	r3, [r7, #23]
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3718      	adds	r7, #24
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b086      	sub	sp, #24
 800f784:	af02      	add	r7, sp, #8
 800f786:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f788:	2301      	movs	r3, #1
 800f78a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f78c:	2300      	movs	r3, #0
 800f78e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	7e1b      	ldrb	r3, [r3, #24]
 800f794:	3b01      	subs	r3, #1
 800f796:	2b0a      	cmp	r3, #10
 800f798:	f200 8156 	bhi.w	800fa48 <USBH_HandleControl+0x2c8>
 800f79c:	a201      	add	r2, pc, #4	; (adr r2, 800f7a4 <USBH_HandleControl+0x24>)
 800f79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7a2:	bf00      	nop
 800f7a4:	0800f7d1 	.word	0x0800f7d1
 800f7a8:	0800f7eb 	.word	0x0800f7eb
 800f7ac:	0800f855 	.word	0x0800f855
 800f7b0:	0800f87b 	.word	0x0800f87b
 800f7b4:	0800f8b3 	.word	0x0800f8b3
 800f7b8:	0800f8dd 	.word	0x0800f8dd
 800f7bc:	0800f92f 	.word	0x0800f92f
 800f7c0:	0800f951 	.word	0x0800f951
 800f7c4:	0800f98d 	.word	0x0800f98d
 800f7c8:	0800f9b3 	.word	0x0800f9b3
 800f7cc:	0800f9f1 	.word	0x0800f9f1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f103 0110 	add.w	r1, r3, #16
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	795b      	ldrb	r3, [r3, #5]
 800f7da:	461a      	mov	r2, r3
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f000 f943 	bl	800fa68 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2202      	movs	r2, #2
 800f7e6:	761a      	strb	r2, [r3, #24]
      break;
 800f7e8:	e139      	b.n	800fa5e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	795b      	ldrb	r3, [r3, #5]
 800f7ee:	4619      	mov	r1, r3
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f000 fcc5 	bl	8010180 <USBH_LL_GetURBState>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f7fa:	7bbb      	ldrb	r3, [r7, #14]
 800f7fc:	2b01      	cmp	r3, #1
 800f7fe:	d11e      	bne.n	800f83e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	7c1b      	ldrb	r3, [r3, #16]
 800f804:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f808:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	8adb      	ldrh	r3, [r3, #22]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d00a      	beq.n	800f828 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f812:	7b7b      	ldrb	r3, [r7, #13]
 800f814:	2b80      	cmp	r3, #128	; 0x80
 800f816:	d103      	bne.n	800f820 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2203      	movs	r2, #3
 800f81c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f81e:	e115      	b.n	800fa4c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2205      	movs	r2, #5
 800f824:	761a      	strb	r2, [r3, #24]
      break;
 800f826:	e111      	b.n	800fa4c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800f828:	7b7b      	ldrb	r3, [r7, #13]
 800f82a:	2b80      	cmp	r3, #128	; 0x80
 800f82c:	d103      	bne.n	800f836 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2209      	movs	r2, #9
 800f832:	761a      	strb	r2, [r3, #24]
      break;
 800f834:	e10a      	b.n	800fa4c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2207      	movs	r2, #7
 800f83a:	761a      	strb	r2, [r3, #24]
      break;
 800f83c:	e106      	b.n	800fa4c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f83e:	7bbb      	ldrb	r3, [r7, #14]
 800f840:	2b04      	cmp	r3, #4
 800f842:	d003      	beq.n	800f84c <USBH_HandleControl+0xcc>
 800f844:	7bbb      	ldrb	r3, [r7, #14]
 800f846:	2b02      	cmp	r3, #2
 800f848:	f040 8100 	bne.w	800fa4c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	220b      	movs	r2, #11
 800f850:	761a      	strb	r2, [r3, #24]
      break;
 800f852:	e0fb      	b.n	800fa4c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f85a:	b29a      	uxth	r2, r3
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6899      	ldr	r1, [r3, #8]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	899a      	ldrh	r2, [r3, #12]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	791b      	ldrb	r3, [r3, #4]
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f000 f93a 	bl	800fae6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2204      	movs	r2, #4
 800f876:	761a      	strb	r2, [r3, #24]
      break;
 800f878:	e0f1      	b.n	800fa5e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	791b      	ldrb	r3, [r3, #4]
 800f87e:	4619      	mov	r1, r3
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f000 fc7d 	bl	8010180 <USBH_LL_GetURBState>
 800f886:	4603      	mov	r3, r0
 800f888:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f88a:	7bbb      	ldrb	r3, [r7, #14]
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d102      	bne.n	800f896 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2209      	movs	r2, #9
 800f894:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f896:	7bbb      	ldrb	r3, [r7, #14]
 800f898:	2b05      	cmp	r3, #5
 800f89a:	d102      	bne.n	800f8a2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f89c:	2303      	movs	r3, #3
 800f89e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f8a0:	e0d6      	b.n	800fa50 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800f8a2:	7bbb      	ldrb	r3, [r7, #14]
 800f8a4:	2b04      	cmp	r3, #4
 800f8a6:	f040 80d3 	bne.w	800fa50 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	220b      	movs	r2, #11
 800f8ae:	761a      	strb	r2, [r3, #24]
      break;
 800f8b0:	e0ce      	b.n	800fa50 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6899      	ldr	r1, [r3, #8]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	899a      	ldrh	r2, [r3, #12]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	795b      	ldrb	r3, [r3, #5]
 800f8be:	2001      	movs	r0, #1
 800f8c0:	9000      	str	r0, [sp, #0]
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f000 f8ea 	bl	800fa9c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f8ce:	b29a      	uxth	r2, r3
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2206      	movs	r2, #6
 800f8d8:	761a      	strb	r2, [r3, #24]
      break;
 800f8da:	e0c0      	b.n	800fa5e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	795b      	ldrb	r3, [r3, #5]
 800f8e0:	4619      	mov	r1, r3
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f000 fc4c 	bl	8010180 <USBH_LL_GetURBState>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f8ec:	7bbb      	ldrb	r3, [r7, #14]
 800f8ee:	2b01      	cmp	r3, #1
 800f8f0:	d103      	bne.n	800f8fa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2207      	movs	r2, #7
 800f8f6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f8f8:	e0ac      	b.n	800fa54 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800f8fa:	7bbb      	ldrb	r3, [r7, #14]
 800f8fc:	2b05      	cmp	r3, #5
 800f8fe:	d105      	bne.n	800f90c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	220c      	movs	r2, #12
 800f904:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f906:	2303      	movs	r3, #3
 800f908:	73fb      	strb	r3, [r7, #15]
      break;
 800f90a:	e0a3      	b.n	800fa54 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f90c:	7bbb      	ldrb	r3, [r7, #14]
 800f90e:	2b02      	cmp	r3, #2
 800f910:	d103      	bne.n	800f91a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2205      	movs	r2, #5
 800f916:	761a      	strb	r2, [r3, #24]
      break;
 800f918:	e09c      	b.n	800fa54 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800f91a:	7bbb      	ldrb	r3, [r7, #14]
 800f91c:	2b04      	cmp	r3, #4
 800f91e:	f040 8099 	bne.w	800fa54 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	220b      	movs	r2, #11
 800f926:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f928:	2302      	movs	r3, #2
 800f92a:	73fb      	strb	r3, [r7, #15]
      break;
 800f92c:	e092      	b.n	800fa54 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	791b      	ldrb	r3, [r3, #4]
 800f932:	2200      	movs	r2, #0
 800f934:	2100      	movs	r1, #0
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f000 f8d5 	bl	800fae6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f942:	b29a      	uxth	r2, r3
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2208      	movs	r2, #8
 800f94c:	761a      	strb	r2, [r3, #24]

      break;
 800f94e:	e086      	b.n	800fa5e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	791b      	ldrb	r3, [r3, #4]
 800f954:	4619      	mov	r1, r3
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 fc12 	bl	8010180 <USBH_LL_GetURBState>
 800f95c:	4603      	mov	r3, r0
 800f95e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f960:	7bbb      	ldrb	r3, [r7, #14]
 800f962:	2b01      	cmp	r3, #1
 800f964:	d105      	bne.n	800f972 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	220d      	movs	r2, #13
 800f96a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f96c:	2300      	movs	r3, #0
 800f96e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f970:	e072      	b.n	800fa58 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800f972:	7bbb      	ldrb	r3, [r7, #14]
 800f974:	2b04      	cmp	r3, #4
 800f976:	d103      	bne.n	800f980 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	220b      	movs	r2, #11
 800f97c:	761a      	strb	r2, [r3, #24]
      break;
 800f97e:	e06b      	b.n	800fa58 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800f980:	7bbb      	ldrb	r3, [r7, #14]
 800f982:	2b05      	cmp	r3, #5
 800f984:	d168      	bne.n	800fa58 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800f986:	2303      	movs	r3, #3
 800f988:	73fb      	strb	r3, [r7, #15]
      break;
 800f98a:	e065      	b.n	800fa58 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	795b      	ldrb	r3, [r3, #5]
 800f990:	2201      	movs	r2, #1
 800f992:	9200      	str	r2, [sp, #0]
 800f994:	2200      	movs	r2, #0
 800f996:	2100      	movs	r1, #0
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f000 f87f 	bl	800fa9c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f9a4:	b29a      	uxth	r2, r3
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	220a      	movs	r2, #10
 800f9ae:	761a      	strb	r2, [r3, #24]
      break;
 800f9b0:	e055      	b.n	800fa5e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	795b      	ldrb	r3, [r3, #5]
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f000 fbe1 	bl	8010180 <USBH_LL_GetURBState>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f9c2:	7bbb      	ldrb	r3, [r7, #14]
 800f9c4:	2b01      	cmp	r3, #1
 800f9c6:	d105      	bne.n	800f9d4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	220d      	movs	r2, #13
 800f9d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f9d2:	e043      	b.n	800fa5c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f9d4:	7bbb      	ldrb	r3, [r7, #14]
 800f9d6:	2b02      	cmp	r3, #2
 800f9d8:	d103      	bne.n	800f9e2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2209      	movs	r2, #9
 800f9de:	761a      	strb	r2, [r3, #24]
      break;
 800f9e0:	e03c      	b.n	800fa5c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800f9e2:	7bbb      	ldrb	r3, [r7, #14]
 800f9e4:	2b04      	cmp	r3, #4
 800f9e6:	d139      	bne.n	800fa5c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	220b      	movs	r2, #11
 800f9ec:	761a      	strb	r2, [r3, #24]
      break;
 800f9ee:	e035      	b.n	800fa5c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	7e5b      	ldrb	r3, [r3, #25]
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	b2da      	uxtb	r2, r3
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	765a      	strb	r2, [r3, #25]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	7e5b      	ldrb	r3, [r3, #25]
 800fa00:	2b02      	cmp	r3, #2
 800fa02:	d806      	bhi.n	800fa12 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2201      	movs	r2, #1
 800fa08:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2201      	movs	r2, #1
 800fa0e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800fa10:	e025      	b.n	800fa5e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fa18:	2106      	movs	r1, #6
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2200      	movs	r2, #0
 800fa22:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	795b      	ldrb	r3, [r3, #5]
 800fa28:	4619      	mov	r1, r3
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f000 f90c 	bl	800fc48 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	791b      	ldrb	r3, [r3, #4]
 800fa34:	4619      	mov	r1, r3
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f000 f906 	bl	800fc48 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800fa42:	2302      	movs	r3, #2
 800fa44:	73fb      	strb	r3, [r7, #15]
      break;
 800fa46:	e00a      	b.n	800fa5e <USBH_HandleControl+0x2de>

    default:
      break;
 800fa48:	bf00      	nop
 800fa4a:	e008      	b.n	800fa5e <USBH_HandleControl+0x2de>
      break;
 800fa4c:	bf00      	nop
 800fa4e:	e006      	b.n	800fa5e <USBH_HandleControl+0x2de>
      break;
 800fa50:	bf00      	nop
 800fa52:	e004      	b.n	800fa5e <USBH_HandleControl+0x2de>
      break;
 800fa54:	bf00      	nop
 800fa56:	e002      	b.n	800fa5e <USBH_HandleControl+0x2de>
      break;
 800fa58:	bf00      	nop
 800fa5a:	e000      	b.n	800fa5e <USBH_HandleControl+0x2de>
      break;
 800fa5c:	bf00      	nop
  }

  return status;
 800fa5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3710      	adds	r7, #16
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b088      	sub	sp, #32
 800fa6c:	af04      	add	r7, sp, #16
 800fa6e:	60f8      	str	r0, [r7, #12]
 800fa70:	60b9      	str	r1, [r7, #8]
 800fa72:	4613      	mov	r3, r2
 800fa74:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fa76:	79f9      	ldrb	r1, [r7, #7]
 800fa78:	2300      	movs	r3, #0
 800fa7a:	9303      	str	r3, [sp, #12]
 800fa7c:	2308      	movs	r3, #8
 800fa7e:	9302      	str	r3, [sp, #8]
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	9301      	str	r3, [sp, #4]
 800fa84:	2300      	movs	r3, #0
 800fa86:	9300      	str	r3, [sp, #0]
 800fa88:	2300      	movs	r3, #0
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	68f8      	ldr	r0, [r7, #12]
 800fa8e:	f000 fb46 	bl	801011e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800fa92:	2300      	movs	r3, #0
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3710      	adds	r7, #16
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b088      	sub	sp, #32
 800faa0:	af04      	add	r7, sp, #16
 800faa2:	60f8      	str	r0, [r7, #12]
 800faa4:	60b9      	str	r1, [r7, #8]
 800faa6:	4611      	mov	r1, r2
 800faa8:	461a      	mov	r2, r3
 800faaa:	460b      	mov	r3, r1
 800faac:	80fb      	strh	r3, [r7, #6]
 800faae:	4613      	mov	r3, r2
 800fab0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d001      	beq.n	800fac0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800fabc:	2300      	movs	r3, #0
 800fabe:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fac0:	7979      	ldrb	r1, [r7, #5]
 800fac2:	7e3b      	ldrb	r3, [r7, #24]
 800fac4:	9303      	str	r3, [sp, #12]
 800fac6:	88fb      	ldrh	r3, [r7, #6]
 800fac8:	9302      	str	r3, [sp, #8]
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	9301      	str	r3, [sp, #4]
 800face:	2301      	movs	r3, #1
 800fad0:	9300      	str	r3, [sp, #0]
 800fad2:	2300      	movs	r3, #0
 800fad4:	2200      	movs	r2, #0
 800fad6:	68f8      	ldr	r0, [r7, #12]
 800fad8:	f000 fb21 	bl	801011e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800fadc:	2300      	movs	r3, #0
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3710      	adds	r7, #16
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}

0800fae6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800fae6:	b580      	push	{r7, lr}
 800fae8:	b088      	sub	sp, #32
 800faea:	af04      	add	r7, sp, #16
 800faec:	60f8      	str	r0, [r7, #12]
 800faee:	60b9      	str	r1, [r7, #8]
 800faf0:	4611      	mov	r1, r2
 800faf2:	461a      	mov	r2, r3
 800faf4:	460b      	mov	r3, r1
 800faf6:	80fb      	strh	r3, [r7, #6]
 800faf8:	4613      	mov	r3, r2
 800fafa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fafc:	7979      	ldrb	r1, [r7, #5]
 800fafe:	2300      	movs	r3, #0
 800fb00:	9303      	str	r3, [sp, #12]
 800fb02:	88fb      	ldrh	r3, [r7, #6]
 800fb04:	9302      	str	r3, [sp, #8]
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	9301      	str	r3, [sp, #4]
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	9300      	str	r3, [sp, #0]
 800fb0e:	2300      	movs	r3, #0
 800fb10:	2201      	movs	r2, #1
 800fb12:	68f8      	ldr	r0, [r7, #12]
 800fb14:	f000 fb03 	bl	801011e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800fb18:	2300      	movs	r3, #0

}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3710      	adds	r7, #16
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}

0800fb22 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800fb22:	b580      	push	{r7, lr}
 800fb24:	b088      	sub	sp, #32
 800fb26:	af04      	add	r7, sp, #16
 800fb28:	60f8      	str	r0, [r7, #12]
 800fb2a:	60b9      	str	r1, [r7, #8]
 800fb2c:	4611      	mov	r1, r2
 800fb2e:	461a      	mov	r2, r3
 800fb30:	460b      	mov	r3, r1
 800fb32:	80fb      	strh	r3, [r7, #6]
 800fb34:	4613      	mov	r3, r2
 800fb36:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d001      	beq.n	800fb46 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800fb42:	2300      	movs	r3, #0
 800fb44:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fb46:	7979      	ldrb	r1, [r7, #5]
 800fb48:	7e3b      	ldrb	r3, [r7, #24]
 800fb4a:	9303      	str	r3, [sp, #12]
 800fb4c:	88fb      	ldrh	r3, [r7, #6]
 800fb4e:	9302      	str	r3, [sp, #8]
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	9301      	str	r3, [sp, #4]
 800fb54:	2301      	movs	r3, #1
 800fb56:	9300      	str	r3, [sp, #0]
 800fb58:	2302      	movs	r3, #2
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	68f8      	ldr	r0, [r7, #12]
 800fb5e:	f000 fade 	bl	801011e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800fb62:	2300      	movs	r3, #0
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3710      	adds	r7, #16
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b088      	sub	sp, #32
 800fb70:	af04      	add	r7, sp, #16
 800fb72:	60f8      	str	r0, [r7, #12]
 800fb74:	60b9      	str	r1, [r7, #8]
 800fb76:	4611      	mov	r1, r2
 800fb78:	461a      	mov	r2, r3
 800fb7a:	460b      	mov	r3, r1
 800fb7c:	80fb      	strh	r3, [r7, #6]
 800fb7e:	4613      	mov	r3, r2
 800fb80:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fb82:	7979      	ldrb	r1, [r7, #5]
 800fb84:	2300      	movs	r3, #0
 800fb86:	9303      	str	r3, [sp, #12]
 800fb88:	88fb      	ldrh	r3, [r7, #6]
 800fb8a:	9302      	str	r3, [sp, #8]
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	9301      	str	r3, [sp, #4]
 800fb90:	2301      	movs	r3, #1
 800fb92:	9300      	str	r3, [sp, #0]
 800fb94:	2302      	movs	r3, #2
 800fb96:	2201      	movs	r2, #1
 800fb98:	68f8      	ldr	r0, [r7, #12]
 800fb9a:	f000 fac0 	bl	801011e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800fb9e:	2300      	movs	r3, #0
}
 800fba0:	4618      	mov	r0, r3
 800fba2:	3710      	adds	r7, #16
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}

0800fba8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b086      	sub	sp, #24
 800fbac:	af04      	add	r7, sp, #16
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	4608      	mov	r0, r1
 800fbb2:	4611      	mov	r1, r2
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	70fb      	strb	r3, [r7, #3]
 800fbba:	460b      	mov	r3, r1
 800fbbc:	70bb      	strb	r3, [r7, #2]
 800fbbe:	4613      	mov	r3, r2
 800fbc0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800fbc2:	7878      	ldrb	r0, [r7, #1]
 800fbc4:	78ba      	ldrb	r2, [r7, #2]
 800fbc6:	78f9      	ldrb	r1, [r7, #3]
 800fbc8:	8b3b      	ldrh	r3, [r7, #24]
 800fbca:	9302      	str	r3, [sp, #8]
 800fbcc:	7d3b      	ldrb	r3, [r7, #20]
 800fbce:	9301      	str	r3, [sp, #4]
 800fbd0:	7c3b      	ldrb	r3, [r7, #16]
 800fbd2:	9300      	str	r3, [sp, #0]
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f000 fa53 	bl	8010082 <USBH_LL_OpenPipe>

  return USBH_OK;
 800fbdc:	2300      	movs	r3, #0
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3708      	adds	r7, #8
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}

0800fbe6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800fbe6:	b580      	push	{r7, lr}
 800fbe8:	b082      	sub	sp, #8
 800fbea:	af00      	add	r7, sp, #0
 800fbec:	6078      	str	r0, [r7, #4]
 800fbee:	460b      	mov	r3, r1
 800fbf0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800fbf2:	78fb      	ldrb	r3, [r7, #3]
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f000 fa72 	bl	80100e0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800fbfc:	2300      	movs	r3, #0
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3708      	adds	r7, #8
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}

0800fc06 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800fc06:	b580      	push	{r7, lr}
 800fc08:	b084      	sub	sp, #16
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
 800fc0e:	460b      	mov	r3, r1
 800fc10:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f000 f836 	bl	800fc84 <USBH_GetFreePipe>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800fc1c:	89fb      	ldrh	r3, [r7, #14]
 800fc1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc22:	4293      	cmp	r3, r2
 800fc24:	d00a      	beq.n	800fc3c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800fc26:	78fa      	ldrb	r2, [r7, #3]
 800fc28:	89fb      	ldrh	r3, [r7, #14]
 800fc2a:	f003 030f 	and.w	r3, r3, #15
 800fc2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fc32:	6879      	ldr	r1, [r7, #4]
 800fc34:	33e0      	adds	r3, #224	; 0xe0
 800fc36:	009b      	lsls	r3, r3, #2
 800fc38:	440b      	add	r3, r1
 800fc3a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800fc3c:	89fb      	ldrh	r3, [r7, #14]
 800fc3e:	b2db      	uxtb	r3, r3
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	3710      	adds	r7, #16
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}

0800fc48 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b083      	sub	sp, #12
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	460b      	mov	r3, r1
 800fc52:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800fc54:	78fb      	ldrb	r3, [r7, #3]
 800fc56:	2b0a      	cmp	r3, #10
 800fc58:	d80d      	bhi.n	800fc76 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800fc5a:	78fb      	ldrb	r3, [r7, #3]
 800fc5c:	687a      	ldr	r2, [r7, #4]
 800fc5e:	33e0      	adds	r3, #224	; 0xe0
 800fc60:	009b      	lsls	r3, r3, #2
 800fc62:	4413      	add	r3, r2
 800fc64:	685a      	ldr	r2, [r3, #4]
 800fc66:	78fb      	ldrb	r3, [r7, #3]
 800fc68:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800fc6c:	6879      	ldr	r1, [r7, #4]
 800fc6e:	33e0      	adds	r3, #224	; 0xe0
 800fc70:	009b      	lsls	r3, r3, #2
 800fc72:	440b      	add	r3, r1
 800fc74:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800fc76:	2300      	movs	r3, #0
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	370c      	adds	r7, #12
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr

0800fc84 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800fc84:	b480      	push	{r7}
 800fc86:	b085      	sub	sp, #20
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800fc90:	2300      	movs	r3, #0
 800fc92:	73fb      	strb	r3, [r7, #15]
 800fc94:	e00f      	b.n	800fcb6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800fc96:	7bfb      	ldrb	r3, [r7, #15]
 800fc98:	687a      	ldr	r2, [r7, #4]
 800fc9a:	33e0      	adds	r3, #224	; 0xe0
 800fc9c:	009b      	lsls	r3, r3, #2
 800fc9e:	4413      	add	r3, r2
 800fca0:	685b      	ldr	r3, [r3, #4]
 800fca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d102      	bne.n	800fcb0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800fcaa:	7bfb      	ldrb	r3, [r7, #15]
 800fcac:	b29b      	uxth	r3, r3
 800fcae:	e007      	b.n	800fcc0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800fcb0:	7bfb      	ldrb	r3, [r7, #15]
 800fcb2:	3301      	adds	r3, #1
 800fcb4:	73fb      	strb	r3, [r7, #15]
 800fcb6:	7bfb      	ldrb	r3, [r7, #15]
 800fcb8:	2b0a      	cmp	r3, #10
 800fcba:	d9ec      	bls.n	800fc96 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800fcbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3714      	adds	r7, #20
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr

0800fccc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800fcd0:	2201      	movs	r2, #1
 800fcd2:	490e      	ldr	r1, [pc, #56]	; (800fd0c <MX_USB_HOST_Init+0x40>)
 800fcd4:	480e      	ldr	r0, [pc, #56]	; (800fd10 <MX_USB_HOST_Init+0x44>)
 800fcd6:	f7fe fca1 	bl	800e61c <USBH_Init>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d001      	beq.n	800fce4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800fce0:	f7f8 fe76 	bl	80089d0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800fce4:	490b      	ldr	r1, [pc, #44]	; (800fd14 <MX_USB_HOST_Init+0x48>)
 800fce6:	480a      	ldr	r0, [pc, #40]	; (800fd10 <MX_USB_HOST_Init+0x44>)
 800fce8:	f7fe fd26 	bl	800e738 <USBH_RegisterClass>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d001      	beq.n	800fcf6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800fcf2:	f7f8 fe6d 	bl	80089d0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800fcf6:	4806      	ldr	r0, [pc, #24]	; (800fd10 <MX_USB_HOST_Init+0x44>)
 800fcf8:	f7fe fdaa 	bl	800e850 <USBH_Start>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d001      	beq.n	800fd06 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800fd02:	f7f8 fe65 	bl	80089d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800fd06:	bf00      	nop
 800fd08:	bd80      	pop	{r7, pc}
 800fd0a:	bf00      	nop
 800fd0c:	0800fd2d 	.word	0x0800fd2d
 800fd10:	2000025c 	.word	0x2000025c
 800fd14:	20000028 	.word	0x20000028

0800fd18 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800fd1c:	4802      	ldr	r0, [pc, #8]	; (800fd28 <MX_USB_HOST_Process+0x10>)
 800fd1e:	f7fe fda7 	bl	800e870 <USBH_Process>
}
 800fd22:	bf00      	nop
 800fd24:	bd80      	pop	{r7, pc}
 800fd26:	bf00      	nop
 800fd28:	2000025c 	.word	0x2000025c

0800fd2c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b083      	sub	sp, #12
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	460b      	mov	r3, r1
 800fd36:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800fd38:	78fb      	ldrb	r3, [r7, #3]
 800fd3a:	3b01      	subs	r3, #1
 800fd3c:	2b04      	cmp	r3, #4
 800fd3e:	d819      	bhi.n	800fd74 <USBH_UserProcess+0x48>
 800fd40:	a201      	add	r2, pc, #4	; (adr r2, 800fd48 <USBH_UserProcess+0x1c>)
 800fd42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd46:	bf00      	nop
 800fd48:	0800fd75 	.word	0x0800fd75
 800fd4c:	0800fd65 	.word	0x0800fd65
 800fd50:	0800fd75 	.word	0x0800fd75
 800fd54:	0800fd6d 	.word	0x0800fd6d
 800fd58:	0800fd5d 	.word	0x0800fd5d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800fd5c:	4b09      	ldr	r3, [pc, #36]	; (800fd84 <USBH_UserProcess+0x58>)
 800fd5e:	2203      	movs	r2, #3
 800fd60:	701a      	strb	r2, [r3, #0]
  break;
 800fd62:	e008      	b.n	800fd76 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800fd64:	4b07      	ldr	r3, [pc, #28]	; (800fd84 <USBH_UserProcess+0x58>)
 800fd66:	2202      	movs	r2, #2
 800fd68:	701a      	strb	r2, [r3, #0]
  break;
 800fd6a:	e004      	b.n	800fd76 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800fd6c:	4b05      	ldr	r3, [pc, #20]	; (800fd84 <USBH_UserProcess+0x58>)
 800fd6e:	2201      	movs	r2, #1
 800fd70:	701a      	strb	r2, [r3, #0]
  break;
 800fd72:	e000      	b.n	800fd76 <USBH_UserProcess+0x4a>

  default:
  break;
 800fd74:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800fd76:	bf00      	nop
 800fd78:	370c      	adds	r7, #12
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop
 800fd84:	200000d0 	.word	0x200000d0

0800fd88 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b08a      	sub	sp, #40	; 0x28
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fd90:	f107 0314 	add.w	r3, r7, #20
 800fd94:	2200      	movs	r2, #0
 800fd96:	601a      	str	r2, [r3, #0]
 800fd98:	605a      	str	r2, [r3, #4]
 800fd9a:	609a      	str	r2, [r3, #8]
 800fd9c:	60da      	str	r2, [r3, #12]
 800fd9e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fda8:	d147      	bne.n	800fe3a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fdaa:	2300      	movs	r3, #0
 800fdac:	613b      	str	r3, [r7, #16]
 800fdae:	4b25      	ldr	r3, [pc, #148]	; (800fe44 <HAL_HCD_MspInit+0xbc>)
 800fdb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdb2:	4a24      	ldr	r2, [pc, #144]	; (800fe44 <HAL_HCD_MspInit+0xbc>)
 800fdb4:	f043 0301 	orr.w	r3, r3, #1
 800fdb8:	6313      	str	r3, [r2, #48]	; 0x30
 800fdba:	4b22      	ldr	r3, [pc, #136]	; (800fe44 <HAL_HCD_MspInit+0xbc>)
 800fdbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdbe:	f003 0301 	and.w	r3, r3, #1
 800fdc2:	613b      	str	r3, [r7, #16]
 800fdc4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800fdc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fdca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800fdd4:	f107 0314 	add.w	r3, r7, #20
 800fdd8:	4619      	mov	r1, r3
 800fdda:	481b      	ldr	r0, [pc, #108]	; (800fe48 <HAL_HCD_MspInit+0xc0>)
 800fddc:	f7f9 fa4a 	bl	8009274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800fde0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800fde4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fde6:	2302      	movs	r3, #2
 800fde8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fdea:	2300      	movs	r3, #0
 800fdec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fdf2:	230a      	movs	r3, #10
 800fdf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fdf6:	f107 0314 	add.w	r3, r7, #20
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	4812      	ldr	r0, [pc, #72]	; (800fe48 <HAL_HCD_MspInit+0xc0>)
 800fdfe:	f7f9 fa39 	bl	8009274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fe02:	4b10      	ldr	r3, [pc, #64]	; (800fe44 <HAL_HCD_MspInit+0xbc>)
 800fe04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe06:	4a0f      	ldr	r2, [pc, #60]	; (800fe44 <HAL_HCD_MspInit+0xbc>)
 800fe08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe0c:	6353      	str	r3, [r2, #52]	; 0x34
 800fe0e:	2300      	movs	r3, #0
 800fe10:	60fb      	str	r3, [r7, #12]
 800fe12:	4b0c      	ldr	r3, [pc, #48]	; (800fe44 <HAL_HCD_MspInit+0xbc>)
 800fe14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe16:	4a0b      	ldr	r2, [pc, #44]	; (800fe44 <HAL_HCD_MspInit+0xbc>)
 800fe18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fe1c:	6453      	str	r3, [r2, #68]	; 0x44
 800fe1e:	4b09      	ldr	r3, [pc, #36]	; (800fe44 <HAL_HCD_MspInit+0xbc>)
 800fe20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe26:	60fb      	str	r3, [r7, #12]
 800fe28:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	2100      	movs	r1, #0
 800fe2e:	2043      	movs	r0, #67	; 0x43
 800fe30:	f7f9 f9e9 	bl	8009206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fe34:	2043      	movs	r0, #67	; 0x43
 800fe36:	f7f9 fa02 	bl	800923e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fe3a:	bf00      	nop
 800fe3c:	3728      	adds	r7, #40	; 0x28
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}
 800fe42:	bf00      	nop
 800fe44:	40023800 	.word	0x40023800
 800fe48:	40020000 	.word	0x40020000

0800fe4c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b082      	sub	sp, #8
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7ff f8db 	bl	800f016 <USBH_LL_IncTimer>
}
 800fe60:	bf00      	nop
 800fe62:	3708      	adds	r7, #8
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}

0800fe68 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7ff f913 	bl	800f0a2 <USBH_LL_Connect>
}
 800fe7c:	bf00      	nop
 800fe7e:	3708      	adds	r7, #8
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b082      	sub	sp, #8
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7ff f91c 	bl	800f0d0 <USBH_LL_Disconnect>
}
 800fe98:	bf00      	nop
 800fe9a:	3708      	adds	r7, #8
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}

0800fea0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800fea0:	b480      	push	{r7}
 800fea2:	b083      	sub	sp, #12
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	460b      	mov	r3, r1
 800feaa:	70fb      	strb	r3, [r7, #3]
 800feac:	4613      	mov	r3, r2
 800feae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800feb0:	bf00      	nop
 800feb2:	370c      	adds	r7, #12
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr

0800febc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b082      	sub	sp, #8
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800feca:	4618      	mov	r0, r3
 800fecc:	f7ff f8cd 	bl	800f06a <USBH_LL_PortEnabled>
}
 800fed0:	bf00      	nop
 800fed2:	3708      	adds	r7, #8
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7ff f8cd 	bl	800f086 <USBH_LL_PortDisabled>
}
 800feec:	bf00      	nop
 800feee:	3708      	adds	r7, #8
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ff02:	2b01      	cmp	r3, #1
 800ff04:	d12a      	bne.n	800ff5c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ff06:	4a18      	ldr	r2, [pc, #96]	; (800ff68 <USBH_LL_Init+0x74>)
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	4a15      	ldr	r2, [pc, #84]	; (800ff68 <USBH_LL_Init+0x74>)
 800ff12:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ff16:	4b14      	ldr	r3, [pc, #80]	; (800ff68 <USBH_LL_Init+0x74>)
 800ff18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ff1c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ff1e:	4b12      	ldr	r3, [pc, #72]	; (800ff68 <USBH_LL_Init+0x74>)
 800ff20:	2208      	movs	r2, #8
 800ff22:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ff24:	4b10      	ldr	r3, [pc, #64]	; (800ff68 <USBH_LL_Init+0x74>)
 800ff26:	2201      	movs	r2, #1
 800ff28:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ff2a:	4b0f      	ldr	r3, [pc, #60]	; (800ff68 <USBH_LL_Init+0x74>)
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ff30:	4b0d      	ldr	r3, [pc, #52]	; (800ff68 <USBH_LL_Init+0x74>)
 800ff32:	2202      	movs	r2, #2
 800ff34:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ff36:	4b0c      	ldr	r3, [pc, #48]	; (800ff68 <USBH_LL_Init+0x74>)
 800ff38:	2200      	movs	r2, #0
 800ff3a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ff3c:	480a      	ldr	r0, [pc, #40]	; (800ff68 <USBH_LL_Init+0x74>)
 800ff3e:	f7f9 fb72 	bl	8009626 <HAL_HCD_Init>
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d001      	beq.n	800ff4c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ff48:	f7f8 fd42 	bl	80089d0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ff4c:	4806      	ldr	r0, [pc, #24]	; (800ff68 <USBH_LL_Init+0x74>)
 800ff4e:	f7f9 ff56 	bl	8009dfe <HAL_HCD_GetCurrentFrame>
 800ff52:	4603      	mov	r3, r0
 800ff54:	4619      	mov	r1, r3
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f7ff f84e 	bl	800eff8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ff5c:	2300      	movs	r3, #0
}
 800ff5e:	4618      	mov	r0, r3
 800ff60:	3708      	adds	r7, #8
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}
 800ff66:	bf00      	nop
 800ff68:	20000634 	.word	0x20000634

0800ff6c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b084      	sub	sp, #16
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff74:	2300      	movs	r3, #0
 800ff76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ff78:	2300      	movs	r3, #0
 800ff7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7f9 fec5 	bl	8009d12 <HAL_HCD_Start>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ff8c:	7bfb      	ldrb	r3, [r7, #15]
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f000 f95c 	bl	801024c <USBH_Get_USB_Status>
 800ff94:	4603      	mov	r3, r0
 800ff96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff98:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3710      	adds	r7, #16
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}

0800ffa2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ffa2:	b580      	push	{r7, lr}
 800ffa4:	b084      	sub	sp, #16
 800ffa6:	af00      	add	r7, sp, #0
 800ffa8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7f9 fecd 	bl	8009d58 <HAL_HCD_Stop>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ffc2:	7bfb      	ldrb	r3, [r7, #15]
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f000 f941 	bl	801024c <USBH_Get_USB_Status>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffce:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3710      	adds	r7, #16
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}

0800ffd8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b084      	sub	sp, #16
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7f9 ff15 	bl	8009e1a <HAL_HCD_GetCurrentSpeed>
 800fff0:	4603      	mov	r3, r0
 800fff2:	2b02      	cmp	r3, #2
 800fff4:	d00c      	beq.n	8010010 <USBH_LL_GetSpeed+0x38>
 800fff6:	2b02      	cmp	r3, #2
 800fff8:	d80d      	bhi.n	8010016 <USBH_LL_GetSpeed+0x3e>
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d002      	beq.n	8010004 <USBH_LL_GetSpeed+0x2c>
 800fffe:	2b01      	cmp	r3, #1
 8010000:	d003      	beq.n	801000a <USBH_LL_GetSpeed+0x32>
 8010002:	e008      	b.n	8010016 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010004:	2300      	movs	r3, #0
 8010006:	73fb      	strb	r3, [r7, #15]
    break;
 8010008:	e008      	b.n	801001c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801000a:	2301      	movs	r3, #1
 801000c:	73fb      	strb	r3, [r7, #15]
    break;
 801000e:	e005      	b.n	801001c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010010:	2302      	movs	r3, #2
 8010012:	73fb      	strb	r3, [r7, #15]
    break;
 8010014:	e002      	b.n	801001c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010016:	2301      	movs	r3, #1
 8010018:	73fb      	strb	r3, [r7, #15]
    break;
 801001a:	bf00      	nop
  }
  return  speed;
 801001c:	7bfb      	ldrb	r3, [r7, #15]
}
 801001e:	4618      	mov	r0, r3
 8010020:	3710      	adds	r7, #16
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}

08010026 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010026:	b580      	push	{r7, lr}
 8010028:	b084      	sub	sp, #16
 801002a:	af00      	add	r7, sp, #0
 801002c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801002e:	2300      	movs	r3, #0
 8010030:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010032:	2300      	movs	r3, #0
 8010034:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801003c:	4618      	mov	r0, r3
 801003e:	f7f9 fea8 	bl	8009d92 <HAL_HCD_ResetPort>
 8010042:	4603      	mov	r3, r0
 8010044:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010046:	7bfb      	ldrb	r3, [r7, #15]
 8010048:	4618      	mov	r0, r3
 801004a:	f000 f8ff 	bl	801024c <USBH_Get_USB_Status>
 801004e:	4603      	mov	r3, r0
 8010050:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010052:	7bbb      	ldrb	r3, [r7, #14]
}
 8010054:	4618      	mov	r0, r3
 8010056:	3710      	adds	r7, #16
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}

0801005c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b082      	sub	sp, #8
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	460b      	mov	r3, r1
 8010066:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801006e:	78fa      	ldrb	r2, [r7, #3]
 8010070:	4611      	mov	r1, r2
 8010072:	4618      	mov	r0, r3
 8010074:	f7f9 feaf 	bl	8009dd6 <HAL_HCD_HC_GetXferCount>
 8010078:	4603      	mov	r3, r0
}
 801007a:	4618      	mov	r0, r3
 801007c:	3708      	adds	r7, #8
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}

08010082 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010082:	b590      	push	{r4, r7, lr}
 8010084:	b089      	sub	sp, #36	; 0x24
 8010086:	af04      	add	r7, sp, #16
 8010088:	6078      	str	r0, [r7, #4]
 801008a:	4608      	mov	r0, r1
 801008c:	4611      	mov	r1, r2
 801008e:	461a      	mov	r2, r3
 8010090:	4603      	mov	r3, r0
 8010092:	70fb      	strb	r3, [r7, #3]
 8010094:	460b      	mov	r3, r1
 8010096:	70bb      	strb	r3, [r7, #2]
 8010098:	4613      	mov	r3, r2
 801009a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801009c:	2300      	movs	r3, #0
 801009e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80100a0:	2300      	movs	r3, #0
 80100a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80100aa:	787c      	ldrb	r4, [r7, #1]
 80100ac:	78ba      	ldrb	r2, [r7, #2]
 80100ae:	78f9      	ldrb	r1, [r7, #3]
 80100b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80100b2:	9302      	str	r3, [sp, #8]
 80100b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80100b8:	9301      	str	r3, [sp, #4]
 80100ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80100be:	9300      	str	r3, [sp, #0]
 80100c0:	4623      	mov	r3, r4
 80100c2:	f7f9 fb12 	bl	80096ea <HAL_HCD_HC_Init>
 80100c6:	4603      	mov	r3, r0
 80100c8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80100ca:	7bfb      	ldrb	r3, [r7, #15]
 80100cc:	4618      	mov	r0, r3
 80100ce:	f000 f8bd 	bl	801024c <USBH_Get_USB_Status>
 80100d2:	4603      	mov	r3, r0
 80100d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3714      	adds	r7, #20
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd90      	pop	{r4, r7, pc}

080100e0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b084      	sub	sp, #16
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	460b      	mov	r3, r1
 80100ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100ec:	2300      	movs	r3, #0
 80100ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80100f0:	2300      	movs	r3, #0
 80100f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80100fa:	78fa      	ldrb	r2, [r7, #3]
 80100fc:	4611      	mov	r1, r2
 80100fe:	4618      	mov	r0, r3
 8010100:	f7f9 fb82 	bl	8009808 <HAL_HCD_HC_Halt>
 8010104:	4603      	mov	r3, r0
 8010106:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010108:	7bfb      	ldrb	r3, [r7, #15]
 801010a:	4618      	mov	r0, r3
 801010c:	f000 f89e 	bl	801024c <USBH_Get_USB_Status>
 8010110:	4603      	mov	r3, r0
 8010112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010114:	7bbb      	ldrb	r3, [r7, #14]
}
 8010116:	4618      	mov	r0, r3
 8010118:	3710      	adds	r7, #16
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}

0801011e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801011e:	b590      	push	{r4, r7, lr}
 8010120:	b089      	sub	sp, #36	; 0x24
 8010122:	af04      	add	r7, sp, #16
 8010124:	6078      	str	r0, [r7, #4]
 8010126:	4608      	mov	r0, r1
 8010128:	4611      	mov	r1, r2
 801012a:	461a      	mov	r2, r3
 801012c:	4603      	mov	r3, r0
 801012e:	70fb      	strb	r3, [r7, #3]
 8010130:	460b      	mov	r3, r1
 8010132:	70bb      	strb	r3, [r7, #2]
 8010134:	4613      	mov	r3, r2
 8010136:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010138:	2300      	movs	r3, #0
 801013a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801013c:	2300      	movs	r3, #0
 801013e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010146:	787c      	ldrb	r4, [r7, #1]
 8010148:	78ba      	ldrb	r2, [r7, #2]
 801014a:	78f9      	ldrb	r1, [r7, #3]
 801014c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010150:	9303      	str	r3, [sp, #12]
 8010152:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010154:	9302      	str	r3, [sp, #8]
 8010156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010158:	9301      	str	r3, [sp, #4]
 801015a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	4623      	mov	r3, r4
 8010162:	f7f9 fb75 	bl	8009850 <HAL_HCD_HC_SubmitRequest>
 8010166:	4603      	mov	r3, r0
 8010168:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801016a:	7bfb      	ldrb	r3, [r7, #15]
 801016c:	4618      	mov	r0, r3
 801016e:	f000 f86d 	bl	801024c <USBH_Get_USB_Status>
 8010172:	4603      	mov	r3, r0
 8010174:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010176:	7bbb      	ldrb	r3, [r7, #14]
}
 8010178:	4618      	mov	r0, r3
 801017a:	3714      	adds	r7, #20
 801017c:	46bd      	mov	sp, r7
 801017e:	bd90      	pop	{r4, r7, pc}

08010180 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b082      	sub	sp, #8
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
 8010188:	460b      	mov	r3, r1
 801018a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010192:	78fa      	ldrb	r2, [r7, #3]
 8010194:	4611      	mov	r1, r2
 8010196:	4618      	mov	r0, r3
 8010198:	f7f9 fe09 	bl	8009dae <HAL_HCD_HC_GetURBState>
 801019c:	4603      	mov	r3, r0
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3708      	adds	r7, #8
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}

080101a6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80101a6:	b580      	push	{r7, lr}
 80101a8:	b082      	sub	sp, #8
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	6078      	str	r0, [r7, #4]
 80101ae:	460b      	mov	r3, r1
 80101b0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	d103      	bne.n	80101c4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80101bc:	78fb      	ldrb	r3, [r7, #3]
 80101be:	4618      	mov	r0, r3
 80101c0:	f000 f870 	bl	80102a4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80101c4:	20c8      	movs	r0, #200	; 0xc8
 80101c6:	f7f8 ff1f 	bl	8009008 <HAL_Delay>
  return USBH_OK;
 80101ca:	2300      	movs	r3, #0
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3708      	adds	r7, #8
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b085      	sub	sp, #20
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	460b      	mov	r3, r1
 80101de:	70fb      	strb	r3, [r7, #3]
 80101e0:	4613      	mov	r3, r2
 80101e2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80101ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80101ec:	78fb      	ldrb	r3, [r7, #3]
 80101ee:	68fa      	ldr	r2, [r7, #12]
 80101f0:	212c      	movs	r1, #44	; 0x2c
 80101f2:	fb01 f303 	mul.w	r3, r1, r3
 80101f6:	4413      	add	r3, r2
 80101f8:	333b      	adds	r3, #59	; 0x3b
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d009      	beq.n	8010214 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010200:	78fb      	ldrb	r3, [r7, #3]
 8010202:	68fa      	ldr	r2, [r7, #12]
 8010204:	212c      	movs	r1, #44	; 0x2c
 8010206:	fb01 f303 	mul.w	r3, r1, r3
 801020a:	4413      	add	r3, r2
 801020c:	3354      	adds	r3, #84	; 0x54
 801020e:	78ba      	ldrb	r2, [r7, #2]
 8010210:	701a      	strb	r2, [r3, #0]
 8010212:	e008      	b.n	8010226 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010214:	78fb      	ldrb	r3, [r7, #3]
 8010216:	68fa      	ldr	r2, [r7, #12]
 8010218:	212c      	movs	r1, #44	; 0x2c
 801021a:	fb01 f303 	mul.w	r3, r1, r3
 801021e:	4413      	add	r3, r2
 8010220:	3355      	adds	r3, #85	; 0x55
 8010222:	78ba      	ldrb	r2, [r7, #2]
 8010224:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010226:	2300      	movs	r3, #0
}
 8010228:	4618      	mov	r0, r3
 801022a:	3714      	adds	r7, #20
 801022c:	46bd      	mov	sp, r7
 801022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010232:	4770      	bx	lr

08010234 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b082      	sub	sp, #8
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f7f8 fee3 	bl	8009008 <HAL_Delay>
}
 8010242:	bf00      	nop
 8010244:	3708      	adds	r7, #8
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
	...

0801024c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801024c:	b480      	push	{r7}
 801024e:	b085      	sub	sp, #20
 8010250:	af00      	add	r7, sp, #0
 8010252:	4603      	mov	r3, r0
 8010254:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010256:	2300      	movs	r3, #0
 8010258:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801025a:	79fb      	ldrb	r3, [r7, #7]
 801025c:	2b03      	cmp	r3, #3
 801025e:	d817      	bhi.n	8010290 <USBH_Get_USB_Status+0x44>
 8010260:	a201      	add	r2, pc, #4	; (adr r2, 8010268 <USBH_Get_USB_Status+0x1c>)
 8010262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010266:	bf00      	nop
 8010268:	08010279 	.word	0x08010279
 801026c:	0801027f 	.word	0x0801027f
 8010270:	08010285 	.word	0x08010285
 8010274:	0801028b 	.word	0x0801028b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010278:	2300      	movs	r3, #0
 801027a:	73fb      	strb	r3, [r7, #15]
    break;
 801027c:	e00b      	b.n	8010296 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801027e:	2302      	movs	r3, #2
 8010280:	73fb      	strb	r3, [r7, #15]
    break;
 8010282:	e008      	b.n	8010296 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010284:	2301      	movs	r3, #1
 8010286:	73fb      	strb	r3, [r7, #15]
    break;
 8010288:	e005      	b.n	8010296 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801028a:	2302      	movs	r3, #2
 801028c:	73fb      	strb	r3, [r7, #15]
    break;
 801028e:	e002      	b.n	8010296 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010290:	2302      	movs	r3, #2
 8010292:	73fb      	strb	r3, [r7, #15]
    break;
 8010294:	bf00      	nop
  }
  return usb_status;
 8010296:	7bfb      	ldrb	r3, [r7, #15]
}
 8010298:	4618      	mov	r0, r3
 801029a:	3714      	adds	r7, #20
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr

080102a4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b084      	sub	sp, #16
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	4603      	mov	r3, r0
 80102ac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80102ae:	79fb      	ldrb	r3, [r7, #7]
 80102b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80102b2:	79fb      	ldrb	r3, [r7, #7]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d102      	bne.n	80102be <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80102b8:	2301      	movs	r3, #1
 80102ba:	73fb      	strb	r3, [r7, #15]
 80102bc:	e001      	b.n	80102c2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80102be:	2300      	movs	r3, #0
 80102c0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80102c2:	7bfb      	ldrb	r3, [r7, #15]
 80102c4:	461a      	mov	r2, r3
 80102c6:	2101      	movs	r1, #1
 80102c8:	4803      	ldr	r0, [pc, #12]	; (80102d8 <MX_DriverVbusFS+0x34>)
 80102ca:	f7f9 f96f 	bl	80095ac <HAL_GPIO_WritePin>
}
 80102ce:	bf00      	nop
 80102d0:	3710      	adds	r7, #16
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	bf00      	nop
 80102d8:	40020800 	.word	0x40020800

080102dc <__errno>:
 80102dc:	4b01      	ldr	r3, [pc, #4]	; (80102e4 <__errno+0x8>)
 80102de:	6818      	ldr	r0, [r3, #0]
 80102e0:	4770      	bx	lr
 80102e2:	bf00      	nop
 80102e4:	20000048 	.word	0x20000048

080102e8 <__libc_init_array>:
 80102e8:	b570      	push	{r4, r5, r6, lr}
 80102ea:	4d0d      	ldr	r5, [pc, #52]	; (8010320 <__libc_init_array+0x38>)
 80102ec:	4c0d      	ldr	r4, [pc, #52]	; (8010324 <__libc_init_array+0x3c>)
 80102ee:	1b64      	subs	r4, r4, r5
 80102f0:	10a4      	asrs	r4, r4, #2
 80102f2:	2600      	movs	r6, #0
 80102f4:	42a6      	cmp	r6, r4
 80102f6:	d109      	bne.n	801030c <__libc_init_array+0x24>
 80102f8:	4d0b      	ldr	r5, [pc, #44]	; (8010328 <__libc_init_array+0x40>)
 80102fa:	4c0c      	ldr	r4, [pc, #48]	; (801032c <__libc_init_array+0x44>)
 80102fc:	f000 f8f8 	bl	80104f0 <_init>
 8010300:	1b64      	subs	r4, r4, r5
 8010302:	10a4      	asrs	r4, r4, #2
 8010304:	2600      	movs	r6, #0
 8010306:	42a6      	cmp	r6, r4
 8010308:	d105      	bne.n	8010316 <__libc_init_array+0x2e>
 801030a:	bd70      	pop	{r4, r5, r6, pc}
 801030c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010310:	4798      	blx	r3
 8010312:	3601      	adds	r6, #1
 8010314:	e7ee      	b.n	80102f4 <__libc_init_array+0xc>
 8010316:	f855 3b04 	ldr.w	r3, [r5], #4
 801031a:	4798      	blx	r3
 801031c:	3601      	adds	r6, #1
 801031e:	e7f2      	b.n	8010306 <__libc_init_array+0x1e>
 8010320:	0801052c 	.word	0x0801052c
 8010324:	0801052c 	.word	0x0801052c
 8010328:	0801052c 	.word	0x0801052c
 801032c:	08010530 	.word	0x08010530

08010330 <malloc>:
 8010330:	4b02      	ldr	r3, [pc, #8]	; (801033c <malloc+0xc>)
 8010332:	4601      	mov	r1, r0
 8010334:	6818      	ldr	r0, [r3, #0]
 8010336:	f000 b863 	b.w	8010400 <_malloc_r>
 801033a:	bf00      	nop
 801033c:	20000048 	.word	0x20000048

08010340 <free>:
 8010340:	4b02      	ldr	r3, [pc, #8]	; (801034c <free+0xc>)
 8010342:	4601      	mov	r1, r0
 8010344:	6818      	ldr	r0, [r3, #0]
 8010346:	f000 b80b 	b.w	8010360 <_free_r>
 801034a:	bf00      	nop
 801034c:	20000048 	.word	0x20000048

08010350 <memset>:
 8010350:	4402      	add	r2, r0
 8010352:	4603      	mov	r3, r0
 8010354:	4293      	cmp	r3, r2
 8010356:	d100      	bne.n	801035a <memset+0xa>
 8010358:	4770      	bx	lr
 801035a:	f803 1b01 	strb.w	r1, [r3], #1
 801035e:	e7f9      	b.n	8010354 <memset+0x4>

08010360 <_free_r>:
 8010360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010362:	2900      	cmp	r1, #0
 8010364:	d048      	beq.n	80103f8 <_free_r+0x98>
 8010366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801036a:	9001      	str	r0, [sp, #4]
 801036c:	2b00      	cmp	r3, #0
 801036e:	f1a1 0404 	sub.w	r4, r1, #4
 8010372:	bfb8      	it	lt
 8010374:	18e4      	addlt	r4, r4, r3
 8010376:	f000 f8ad 	bl	80104d4 <__malloc_lock>
 801037a:	4a20      	ldr	r2, [pc, #128]	; (80103fc <_free_r+0x9c>)
 801037c:	9801      	ldr	r0, [sp, #4]
 801037e:	6813      	ldr	r3, [r2, #0]
 8010380:	4615      	mov	r5, r2
 8010382:	b933      	cbnz	r3, 8010392 <_free_r+0x32>
 8010384:	6063      	str	r3, [r4, #4]
 8010386:	6014      	str	r4, [r2, #0]
 8010388:	b003      	add	sp, #12
 801038a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801038e:	f000 b8a7 	b.w	80104e0 <__malloc_unlock>
 8010392:	42a3      	cmp	r3, r4
 8010394:	d90b      	bls.n	80103ae <_free_r+0x4e>
 8010396:	6821      	ldr	r1, [r4, #0]
 8010398:	1862      	adds	r2, r4, r1
 801039a:	4293      	cmp	r3, r2
 801039c:	bf04      	itt	eq
 801039e:	681a      	ldreq	r2, [r3, #0]
 80103a0:	685b      	ldreq	r3, [r3, #4]
 80103a2:	6063      	str	r3, [r4, #4]
 80103a4:	bf04      	itt	eq
 80103a6:	1852      	addeq	r2, r2, r1
 80103a8:	6022      	streq	r2, [r4, #0]
 80103aa:	602c      	str	r4, [r5, #0]
 80103ac:	e7ec      	b.n	8010388 <_free_r+0x28>
 80103ae:	461a      	mov	r2, r3
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	b10b      	cbz	r3, 80103b8 <_free_r+0x58>
 80103b4:	42a3      	cmp	r3, r4
 80103b6:	d9fa      	bls.n	80103ae <_free_r+0x4e>
 80103b8:	6811      	ldr	r1, [r2, #0]
 80103ba:	1855      	adds	r5, r2, r1
 80103bc:	42a5      	cmp	r5, r4
 80103be:	d10b      	bne.n	80103d8 <_free_r+0x78>
 80103c0:	6824      	ldr	r4, [r4, #0]
 80103c2:	4421      	add	r1, r4
 80103c4:	1854      	adds	r4, r2, r1
 80103c6:	42a3      	cmp	r3, r4
 80103c8:	6011      	str	r1, [r2, #0]
 80103ca:	d1dd      	bne.n	8010388 <_free_r+0x28>
 80103cc:	681c      	ldr	r4, [r3, #0]
 80103ce:	685b      	ldr	r3, [r3, #4]
 80103d0:	6053      	str	r3, [r2, #4]
 80103d2:	4421      	add	r1, r4
 80103d4:	6011      	str	r1, [r2, #0]
 80103d6:	e7d7      	b.n	8010388 <_free_r+0x28>
 80103d8:	d902      	bls.n	80103e0 <_free_r+0x80>
 80103da:	230c      	movs	r3, #12
 80103dc:	6003      	str	r3, [r0, #0]
 80103de:	e7d3      	b.n	8010388 <_free_r+0x28>
 80103e0:	6825      	ldr	r5, [r4, #0]
 80103e2:	1961      	adds	r1, r4, r5
 80103e4:	428b      	cmp	r3, r1
 80103e6:	bf04      	itt	eq
 80103e8:	6819      	ldreq	r1, [r3, #0]
 80103ea:	685b      	ldreq	r3, [r3, #4]
 80103ec:	6063      	str	r3, [r4, #4]
 80103ee:	bf04      	itt	eq
 80103f0:	1949      	addeq	r1, r1, r5
 80103f2:	6021      	streq	r1, [r4, #0]
 80103f4:	6054      	str	r4, [r2, #4]
 80103f6:	e7c7      	b.n	8010388 <_free_r+0x28>
 80103f8:	b003      	add	sp, #12
 80103fa:	bd30      	pop	{r4, r5, pc}
 80103fc:	200000d4 	.word	0x200000d4

08010400 <_malloc_r>:
 8010400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010402:	1ccd      	adds	r5, r1, #3
 8010404:	f025 0503 	bic.w	r5, r5, #3
 8010408:	3508      	adds	r5, #8
 801040a:	2d0c      	cmp	r5, #12
 801040c:	bf38      	it	cc
 801040e:	250c      	movcc	r5, #12
 8010410:	2d00      	cmp	r5, #0
 8010412:	4606      	mov	r6, r0
 8010414:	db01      	blt.n	801041a <_malloc_r+0x1a>
 8010416:	42a9      	cmp	r1, r5
 8010418:	d903      	bls.n	8010422 <_malloc_r+0x22>
 801041a:	230c      	movs	r3, #12
 801041c:	6033      	str	r3, [r6, #0]
 801041e:	2000      	movs	r0, #0
 8010420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010422:	f000 f857 	bl	80104d4 <__malloc_lock>
 8010426:	4921      	ldr	r1, [pc, #132]	; (80104ac <_malloc_r+0xac>)
 8010428:	680a      	ldr	r2, [r1, #0]
 801042a:	4614      	mov	r4, r2
 801042c:	b99c      	cbnz	r4, 8010456 <_malloc_r+0x56>
 801042e:	4f20      	ldr	r7, [pc, #128]	; (80104b0 <_malloc_r+0xb0>)
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	b923      	cbnz	r3, 801043e <_malloc_r+0x3e>
 8010434:	4621      	mov	r1, r4
 8010436:	4630      	mov	r0, r6
 8010438:	f000 f83c 	bl	80104b4 <_sbrk_r>
 801043c:	6038      	str	r0, [r7, #0]
 801043e:	4629      	mov	r1, r5
 8010440:	4630      	mov	r0, r6
 8010442:	f000 f837 	bl	80104b4 <_sbrk_r>
 8010446:	1c43      	adds	r3, r0, #1
 8010448:	d123      	bne.n	8010492 <_malloc_r+0x92>
 801044a:	230c      	movs	r3, #12
 801044c:	6033      	str	r3, [r6, #0]
 801044e:	4630      	mov	r0, r6
 8010450:	f000 f846 	bl	80104e0 <__malloc_unlock>
 8010454:	e7e3      	b.n	801041e <_malloc_r+0x1e>
 8010456:	6823      	ldr	r3, [r4, #0]
 8010458:	1b5b      	subs	r3, r3, r5
 801045a:	d417      	bmi.n	801048c <_malloc_r+0x8c>
 801045c:	2b0b      	cmp	r3, #11
 801045e:	d903      	bls.n	8010468 <_malloc_r+0x68>
 8010460:	6023      	str	r3, [r4, #0]
 8010462:	441c      	add	r4, r3
 8010464:	6025      	str	r5, [r4, #0]
 8010466:	e004      	b.n	8010472 <_malloc_r+0x72>
 8010468:	6863      	ldr	r3, [r4, #4]
 801046a:	42a2      	cmp	r2, r4
 801046c:	bf0c      	ite	eq
 801046e:	600b      	streq	r3, [r1, #0]
 8010470:	6053      	strne	r3, [r2, #4]
 8010472:	4630      	mov	r0, r6
 8010474:	f000 f834 	bl	80104e0 <__malloc_unlock>
 8010478:	f104 000b 	add.w	r0, r4, #11
 801047c:	1d23      	adds	r3, r4, #4
 801047e:	f020 0007 	bic.w	r0, r0, #7
 8010482:	1ac2      	subs	r2, r0, r3
 8010484:	d0cc      	beq.n	8010420 <_malloc_r+0x20>
 8010486:	1a1b      	subs	r3, r3, r0
 8010488:	50a3      	str	r3, [r4, r2]
 801048a:	e7c9      	b.n	8010420 <_malloc_r+0x20>
 801048c:	4622      	mov	r2, r4
 801048e:	6864      	ldr	r4, [r4, #4]
 8010490:	e7cc      	b.n	801042c <_malloc_r+0x2c>
 8010492:	1cc4      	adds	r4, r0, #3
 8010494:	f024 0403 	bic.w	r4, r4, #3
 8010498:	42a0      	cmp	r0, r4
 801049a:	d0e3      	beq.n	8010464 <_malloc_r+0x64>
 801049c:	1a21      	subs	r1, r4, r0
 801049e:	4630      	mov	r0, r6
 80104a0:	f000 f808 	bl	80104b4 <_sbrk_r>
 80104a4:	3001      	adds	r0, #1
 80104a6:	d1dd      	bne.n	8010464 <_malloc_r+0x64>
 80104a8:	e7cf      	b.n	801044a <_malloc_r+0x4a>
 80104aa:	bf00      	nop
 80104ac:	200000d4 	.word	0x200000d4
 80104b0:	200000d8 	.word	0x200000d8

080104b4 <_sbrk_r>:
 80104b4:	b538      	push	{r3, r4, r5, lr}
 80104b6:	4d06      	ldr	r5, [pc, #24]	; (80104d0 <_sbrk_r+0x1c>)
 80104b8:	2300      	movs	r3, #0
 80104ba:	4604      	mov	r4, r0
 80104bc:	4608      	mov	r0, r1
 80104be:	602b      	str	r3, [r5, #0]
 80104c0:	f7f8 fcba 	bl	8008e38 <_sbrk>
 80104c4:	1c43      	adds	r3, r0, #1
 80104c6:	d102      	bne.n	80104ce <_sbrk_r+0x1a>
 80104c8:	682b      	ldr	r3, [r5, #0]
 80104ca:	b103      	cbz	r3, 80104ce <_sbrk_r+0x1a>
 80104cc:	6023      	str	r3, [r4, #0]
 80104ce:	bd38      	pop	{r3, r4, r5, pc}
 80104d0:	20000938 	.word	0x20000938

080104d4 <__malloc_lock>:
 80104d4:	4801      	ldr	r0, [pc, #4]	; (80104dc <__malloc_lock+0x8>)
 80104d6:	f000 b809 	b.w	80104ec <__retarget_lock_acquire_recursive>
 80104da:	bf00      	nop
 80104dc:	20000940 	.word	0x20000940

080104e0 <__malloc_unlock>:
 80104e0:	4801      	ldr	r0, [pc, #4]	; (80104e8 <__malloc_unlock+0x8>)
 80104e2:	f000 b804 	b.w	80104ee <__retarget_lock_release_recursive>
 80104e6:	bf00      	nop
 80104e8:	20000940 	.word	0x20000940

080104ec <__retarget_lock_acquire_recursive>:
 80104ec:	4770      	bx	lr

080104ee <__retarget_lock_release_recursive>:
 80104ee:	4770      	bx	lr

080104f0 <_init>:
 80104f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104f2:	bf00      	nop
 80104f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104f6:	bc08      	pop	{r3}
 80104f8:	469e      	mov	lr, r3
 80104fa:	4770      	bx	lr

080104fc <_fini>:
 80104fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104fe:	bf00      	nop
 8010500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010502:	bc08      	pop	{r3}
 8010504:	469e      	mov	lr, r3
 8010506:	4770      	bx	lr
