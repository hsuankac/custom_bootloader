
user_app_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008380  08020188  08020188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08028508  08028508  00018508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028524  08028524  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08028524  08028524  00018524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802852c  0802852c  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802852c  0802852c  0001852c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028530  08028530  00018530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08028534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b8  2**0
                  CONTENTS
 10 .bss          0000089c  200000b8  200000b8  000200b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000954  20000954  000200b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001da18  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d4c  00000000  00000000  0003db00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001330  00000000  00000000  00041850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011f0  00000000  00000000  00042b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024005  00000000  00000000  00043d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019e13  00000000  00000000  00067d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdc66  00000000  00000000  00081b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014f7ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005244  00000000  00000000  0014f844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020188 <__do_global_dtors_aux>:
 8020188:	b510      	push	{r4, lr}
 802018a:	4c05      	ldr	r4, [pc, #20]	; (80201a0 <__do_global_dtors_aux+0x18>)
 802018c:	7823      	ldrb	r3, [r4, #0]
 802018e:	b933      	cbnz	r3, 802019e <__do_global_dtors_aux+0x16>
 8020190:	4b04      	ldr	r3, [pc, #16]	; (80201a4 <__do_global_dtors_aux+0x1c>)
 8020192:	b113      	cbz	r3, 802019a <__do_global_dtors_aux+0x12>
 8020194:	4804      	ldr	r0, [pc, #16]	; (80201a8 <__do_global_dtors_aux+0x20>)
 8020196:	f3af 8000 	nop.w
 802019a:	2301      	movs	r3, #1
 802019c:	7023      	strb	r3, [r4, #0]
 802019e:	bd10      	pop	{r4, pc}
 80201a0:	200000b8 	.word	0x200000b8
 80201a4:	00000000 	.word	0x00000000
 80201a8:	080284f0 	.word	0x080284f0

080201ac <frame_dummy>:
 80201ac:	b508      	push	{r3, lr}
 80201ae:	4b03      	ldr	r3, [pc, #12]	; (80201bc <frame_dummy+0x10>)
 80201b0:	b11b      	cbz	r3, 80201ba <frame_dummy+0xe>
 80201b2:	4903      	ldr	r1, [pc, #12]	; (80201c0 <frame_dummy+0x14>)
 80201b4:	4803      	ldr	r0, [pc, #12]	; (80201c4 <frame_dummy+0x18>)
 80201b6:	f3af 8000 	nop.w
 80201ba:	bd08      	pop	{r3, pc}
 80201bc:	00000000 	.word	0x00000000
 80201c0:	200000bc 	.word	0x200000bc
 80201c4:	080284f0 	.word	0x080284f0

080201c8 <__aeabi_uldivmod>:
 80201c8:	b953      	cbnz	r3, 80201e0 <__aeabi_uldivmod+0x18>
 80201ca:	b94a      	cbnz	r2, 80201e0 <__aeabi_uldivmod+0x18>
 80201cc:	2900      	cmp	r1, #0
 80201ce:	bf08      	it	eq
 80201d0:	2800      	cmpeq	r0, #0
 80201d2:	bf1c      	itt	ne
 80201d4:	f04f 31ff 	movne.w	r1, #4294967295
 80201d8:	f04f 30ff 	movne.w	r0, #4294967295
 80201dc:	f000 b96e 	b.w	80204bc <__aeabi_idiv0>
 80201e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80201e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80201e8:	f000 f806 	bl	80201f8 <__udivmoddi4>
 80201ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80201f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80201f4:	b004      	add	sp, #16
 80201f6:	4770      	bx	lr

080201f8 <__udivmoddi4>:
 80201f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80201fc:	9d08      	ldr	r5, [sp, #32]
 80201fe:	4604      	mov	r4, r0
 8020200:	468c      	mov	ip, r1
 8020202:	2b00      	cmp	r3, #0
 8020204:	f040 8083 	bne.w	802030e <__udivmoddi4+0x116>
 8020208:	428a      	cmp	r2, r1
 802020a:	4617      	mov	r7, r2
 802020c:	d947      	bls.n	802029e <__udivmoddi4+0xa6>
 802020e:	fab2 f282 	clz	r2, r2
 8020212:	b142      	cbz	r2, 8020226 <__udivmoddi4+0x2e>
 8020214:	f1c2 0020 	rsb	r0, r2, #32
 8020218:	fa24 f000 	lsr.w	r0, r4, r0
 802021c:	4091      	lsls	r1, r2
 802021e:	4097      	lsls	r7, r2
 8020220:	ea40 0c01 	orr.w	ip, r0, r1
 8020224:	4094      	lsls	r4, r2
 8020226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 802022a:	0c23      	lsrs	r3, r4, #16
 802022c:	fbbc f6f8 	udiv	r6, ip, r8
 8020230:	fa1f fe87 	uxth.w	lr, r7
 8020234:	fb08 c116 	mls	r1, r8, r6, ip
 8020238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802023c:	fb06 f10e 	mul.w	r1, r6, lr
 8020240:	4299      	cmp	r1, r3
 8020242:	d909      	bls.n	8020258 <__udivmoddi4+0x60>
 8020244:	18fb      	adds	r3, r7, r3
 8020246:	f106 30ff 	add.w	r0, r6, #4294967295
 802024a:	f080 8119 	bcs.w	8020480 <__udivmoddi4+0x288>
 802024e:	4299      	cmp	r1, r3
 8020250:	f240 8116 	bls.w	8020480 <__udivmoddi4+0x288>
 8020254:	3e02      	subs	r6, #2
 8020256:	443b      	add	r3, r7
 8020258:	1a5b      	subs	r3, r3, r1
 802025a:	b2a4      	uxth	r4, r4
 802025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8020260:	fb08 3310 	mls	r3, r8, r0, r3
 8020264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020268:	fb00 fe0e 	mul.w	lr, r0, lr
 802026c:	45a6      	cmp	lr, r4
 802026e:	d909      	bls.n	8020284 <__udivmoddi4+0x8c>
 8020270:	193c      	adds	r4, r7, r4
 8020272:	f100 33ff 	add.w	r3, r0, #4294967295
 8020276:	f080 8105 	bcs.w	8020484 <__udivmoddi4+0x28c>
 802027a:	45a6      	cmp	lr, r4
 802027c:	f240 8102 	bls.w	8020484 <__udivmoddi4+0x28c>
 8020280:	3802      	subs	r0, #2
 8020282:	443c      	add	r4, r7
 8020284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020288:	eba4 040e 	sub.w	r4, r4, lr
 802028c:	2600      	movs	r6, #0
 802028e:	b11d      	cbz	r5, 8020298 <__udivmoddi4+0xa0>
 8020290:	40d4      	lsrs	r4, r2
 8020292:	2300      	movs	r3, #0
 8020294:	e9c5 4300 	strd	r4, r3, [r5]
 8020298:	4631      	mov	r1, r6
 802029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802029e:	b902      	cbnz	r2, 80202a2 <__udivmoddi4+0xaa>
 80202a0:	deff      	udf	#255	; 0xff
 80202a2:	fab2 f282 	clz	r2, r2
 80202a6:	2a00      	cmp	r2, #0
 80202a8:	d150      	bne.n	802034c <__udivmoddi4+0x154>
 80202aa:	1bcb      	subs	r3, r1, r7
 80202ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80202b0:	fa1f f887 	uxth.w	r8, r7
 80202b4:	2601      	movs	r6, #1
 80202b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80202ba:	0c21      	lsrs	r1, r4, #16
 80202bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80202c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80202c4:	fb08 f30c 	mul.w	r3, r8, ip
 80202c8:	428b      	cmp	r3, r1
 80202ca:	d907      	bls.n	80202dc <__udivmoddi4+0xe4>
 80202cc:	1879      	adds	r1, r7, r1
 80202ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80202d2:	d202      	bcs.n	80202da <__udivmoddi4+0xe2>
 80202d4:	428b      	cmp	r3, r1
 80202d6:	f200 80e9 	bhi.w	80204ac <__udivmoddi4+0x2b4>
 80202da:	4684      	mov	ip, r0
 80202dc:	1ac9      	subs	r1, r1, r3
 80202de:	b2a3      	uxth	r3, r4
 80202e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80202e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80202e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80202ec:	fb08 f800 	mul.w	r8, r8, r0
 80202f0:	45a0      	cmp	r8, r4
 80202f2:	d907      	bls.n	8020304 <__udivmoddi4+0x10c>
 80202f4:	193c      	adds	r4, r7, r4
 80202f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80202fa:	d202      	bcs.n	8020302 <__udivmoddi4+0x10a>
 80202fc:	45a0      	cmp	r8, r4
 80202fe:	f200 80d9 	bhi.w	80204b4 <__udivmoddi4+0x2bc>
 8020302:	4618      	mov	r0, r3
 8020304:	eba4 0408 	sub.w	r4, r4, r8
 8020308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 802030c:	e7bf      	b.n	802028e <__udivmoddi4+0x96>
 802030e:	428b      	cmp	r3, r1
 8020310:	d909      	bls.n	8020326 <__udivmoddi4+0x12e>
 8020312:	2d00      	cmp	r5, #0
 8020314:	f000 80b1 	beq.w	802047a <__udivmoddi4+0x282>
 8020318:	2600      	movs	r6, #0
 802031a:	e9c5 0100 	strd	r0, r1, [r5]
 802031e:	4630      	mov	r0, r6
 8020320:	4631      	mov	r1, r6
 8020322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020326:	fab3 f683 	clz	r6, r3
 802032a:	2e00      	cmp	r6, #0
 802032c:	d14a      	bne.n	80203c4 <__udivmoddi4+0x1cc>
 802032e:	428b      	cmp	r3, r1
 8020330:	d302      	bcc.n	8020338 <__udivmoddi4+0x140>
 8020332:	4282      	cmp	r2, r0
 8020334:	f200 80b8 	bhi.w	80204a8 <__udivmoddi4+0x2b0>
 8020338:	1a84      	subs	r4, r0, r2
 802033a:	eb61 0103 	sbc.w	r1, r1, r3
 802033e:	2001      	movs	r0, #1
 8020340:	468c      	mov	ip, r1
 8020342:	2d00      	cmp	r5, #0
 8020344:	d0a8      	beq.n	8020298 <__udivmoddi4+0xa0>
 8020346:	e9c5 4c00 	strd	r4, ip, [r5]
 802034a:	e7a5      	b.n	8020298 <__udivmoddi4+0xa0>
 802034c:	f1c2 0320 	rsb	r3, r2, #32
 8020350:	fa20 f603 	lsr.w	r6, r0, r3
 8020354:	4097      	lsls	r7, r2
 8020356:	fa01 f002 	lsl.w	r0, r1, r2
 802035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 802035e:	40d9      	lsrs	r1, r3
 8020360:	4330      	orrs	r0, r6
 8020362:	0c03      	lsrs	r3, r0, #16
 8020364:	fbb1 f6fe 	udiv	r6, r1, lr
 8020368:	fa1f f887 	uxth.w	r8, r7
 802036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8020370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020374:	fb06 f108 	mul.w	r1, r6, r8
 8020378:	4299      	cmp	r1, r3
 802037a:	fa04 f402 	lsl.w	r4, r4, r2
 802037e:	d909      	bls.n	8020394 <__udivmoddi4+0x19c>
 8020380:	18fb      	adds	r3, r7, r3
 8020382:	f106 3cff 	add.w	ip, r6, #4294967295
 8020386:	f080 808d 	bcs.w	80204a4 <__udivmoddi4+0x2ac>
 802038a:	4299      	cmp	r1, r3
 802038c:	f240 808a 	bls.w	80204a4 <__udivmoddi4+0x2ac>
 8020390:	3e02      	subs	r6, #2
 8020392:	443b      	add	r3, r7
 8020394:	1a5b      	subs	r3, r3, r1
 8020396:	b281      	uxth	r1, r0
 8020398:	fbb3 f0fe 	udiv	r0, r3, lr
 802039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80203a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80203a4:	fb00 f308 	mul.w	r3, r0, r8
 80203a8:	428b      	cmp	r3, r1
 80203aa:	d907      	bls.n	80203bc <__udivmoddi4+0x1c4>
 80203ac:	1879      	adds	r1, r7, r1
 80203ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80203b2:	d273      	bcs.n	802049c <__udivmoddi4+0x2a4>
 80203b4:	428b      	cmp	r3, r1
 80203b6:	d971      	bls.n	802049c <__udivmoddi4+0x2a4>
 80203b8:	3802      	subs	r0, #2
 80203ba:	4439      	add	r1, r7
 80203bc:	1acb      	subs	r3, r1, r3
 80203be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80203c2:	e778      	b.n	80202b6 <__udivmoddi4+0xbe>
 80203c4:	f1c6 0c20 	rsb	ip, r6, #32
 80203c8:	fa03 f406 	lsl.w	r4, r3, r6
 80203cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80203d0:	431c      	orrs	r4, r3
 80203d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80203d6:	fa01 f306 	lsl.w	r3, r1, r6
 80203da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80203de:	fa21 f10c 	lsr.w	r1, r1, ip
 80203e2:	431f      	orrs	r7, r3
 80203e4:	0c3b      	lsrs	r3, r7, #16
 80203e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80203ea:	fa1f f884 	uxth.w	r8, r4
 80203ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80203f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80203f6:	fb09 fa08 	mul.w	sl, r9, r8
 80203fa:	458a      	cmp	sl, r1
 80203fc:	fa02 f206 	lsl.w	r2, r2, r6
 8020400:	fa00 f306 	lsl.w	r3, r0, r6
 8020404:	d908      	bls.n	8020418 <__udivmoddi4+0x220>
 8020406:	1861      	adds	r1, r4, r1
 8020408:	f109 30ff 	add.w	r0, r9, #4294967295
 802040c:	d248      	bcs.n	80204a0 <__udivmoddi4+0x2a8>
 802040e:	458a      	cmp	sl, r1
 8020410:	d946      	bls.n	80204a0 <__udivmoddi4+0x2a8>
 8020412:	f1a9 0902 	sub.w	r9, r9, #2
 8020416:	4421      	add	r1, r4
 8020418:	eba1 010a 	sub.w	r1, r1, sl
 802041c:	b2bf      	uxth	r7, r7
 802041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8020422:	fb0e 1110 	mls	r1, lr, r0, r1
 8020426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 802042a:	fb00 f808 	mul.w	r8, r0, r8
 802042e:	45b8      	cmp	r8, r7
 8020430:	d907      	bls.n	8020442 <__udivmoddi4+0x24a>
 8020432:	19e7      	adds	r7, r4, r7
 8020434:	f100 31ff 	add.w	r1, r0, #4294967295
 8020438:	d22e      	bcs.n	8020498 <__udivmoddi4+0x2a0>
 802043a:	45b8      	cmp	r8, r7
 802043c:	d92c      	bls.n	8020498 <__udivmoddi4+0x2a0>
 802043e:	3802      	subs	r0, #2
 8020440:	4427      	add	r7, r4
 8020442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020446:	eba7 0708 	sub.w	r7, r7, r8
 802044a:	fba0 8902 	umull	r8, r9, r0, r2
 802044e:	454f      	cmp	r7, r9
 8020450:	46c6      	mov	lr, r8
 8020452:	4649      	mov	r1, r9
 8020454:	d31a      	bcc.n	802048c <__udivmoddi4+0x294>
 8020456:	d017      	beq.n	8020488 <__udivmoddi4+0x290>
 8020458:	b15d      	cbz	r5, 8020472 <__udivmoddi4+0x27a>
 802045a:	ebb3 020e 	subs.w	r2, r3, lr
 802045e:	eb67 0701 	sbc.w	r7, r7, r1
 8020462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8020466:	40f2      	lsrs	r2, r6
 8020468:	ea4c 0202 	orr.w	r2, ip, r2
 802046c:	40f7      	lsrs	r7, r6
 802046e:	e9c5 2700 	strd	r2, r7, [r5]
 8020472:	2600      	movs	r6, #0
 8020474:	4631      	mov	r1, r6
 8020476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802047a:	462e      	mov	r6, r5
 802047c:	4628      	mov	r0, r5
 802047e:	e70b      	b.n	8020298 <__udivmoddi4+0xa0>
 8020480:	4606      	mov	r6, r0
 8020482:	e6e9      	b.n	8020258 <__udivmoddi4+0x60>
 8020484:	4618      	mov	r0, r3
 8020486:	e6fd      	b.n	8020284 <__udivmoddi4+0x8c>
 8020488:	4543      	cmp	r3, r8
 802048a:	d2e5      	bcs.n	8020458 <__udivmoddi4+0x260>
 802048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8020490:	eb69 0104 	sbc.w	r1, r9, r4
 8020494:	3801      	subs	r0, #1
 8020496:	e7df      	b.n	8020458 <__udivmoddi4+0x260>
 8020498:	4608      	mov	r0, r1
 802049a:	e7d2      	b.n	8020442 <__udivmoddi4+0x24a>
 802049c:	4660      	mov	r0, ip
 802049e:	e78d      	b.n	80203bc <__udivmoddi4+0x1c4>
 80204a0:	4681      	mov	r9, r0
 80204a2:	e7b9      	b.n	8020418 <__udivmoddi4+0x220>
 80204a4:	4666      	mov	r6, ip
 80204a6:	e775      	b.n	8020394 <__udivmoddi4+0x19c>
 80204a8:	4630      	mov	r0, r6
 80204aa:	e74a      	b.n	8020342 <__udivmoddi4+0x14a>
 80204ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80204b0:	4439      	add	r1, r7
 80204b2:	e713      	b.n	80202dc <__udivmoddi4+0xe4>
 80204b4:	3802      	subs	r0, #2
 80204b6:	443c      	add	r4, r7
 80204b8:	e724      	b.n	8020304 <__udivmoddi4+0x10c>
 80204ba:	bf00      	nop

080204bc <__aeabi_idiv0>:
 80204bc:	4770      	bx	lr
 80204be:	bf00      	nop

080204c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80204c0:	b580      	push	{r7, lr}
 80204c2:	b082      	sub	sp, #8
 80204c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80204c6:	f000 fd2d 	bl	8020f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80204ca:	f000 f829 	bl	8020520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80204ce:	f000 f979 	bl	80207c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80204d2:	f000 f88f 	bl	80205f4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80204d6:	f000 f8bb 	bl	8020650 <MX_I2S3_Init>
  MX_SPI1_Init();
 80204da:	f000 f8e9 	bl	80206b0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80204de:	f007 fbf5 	bl	8027ccc <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80204e2:	f000 f91b 	bl	802071c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80204e6:	f000 f943 	bl	8020770 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80204ea:	f007 fc15 	bl	8027d18 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_UART_Transmit(&huart2, (uint8_t*)userdata, sizeof(userdata), HAL_MAX_DELAY);
 80204ee:	f04f 33ff 	mov.w	r3, #4294967295
 80204f2:	2228      	movs	r2, #40	; 0x28
 80204f4:	4908      	ldr	r1, [pc, #32]	; (8020518 <main+0x58>)
 80204f6:	4809      	ldr	r0, [pc, #36]	; (802051c <main+0x5c>)
 80204f8:	f004 fa74 	bl	80249e4 <HAL_UART_Transmit>
    uint32_t current_tick = HAL_GetTick();
 80204fc:	f000 fd78 	bl	8020ff0 <HAL_GetTick>
 8020500:	6078      	str	r0, [r7, #4]
    while(HAL_GetTick() <= current_tick + 1000);
 8020502:	bf00      	nop
 8020504:	f000 fd74 	bl	8020ff0 <HAL_GetTick>
 8020508:	4602      	mov	r2, r0
 802050a:	687b      	ldr	r3, [r7, #4]
 802050c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8020510:	429a      	cmp	r2, r3
 8020512:	d9f7      	bls.n	8020504 <main+0x44>
  {
 8020514:	e7e9      	b.n	80204ea <main+0x2a>
 8020516:	bf00      	nop
 8020518:	20000000 	.word	0x20000000
 802051c:	200001d8 	.word	0x200001d8

08020520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020520:	b580      	push	{r7, lr}
 8020522:	b094      	sub	sp, #80	; 0x50
 8020524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8020526:	f107 0320 	add.w	r3, r7, #32
 802052a:	2230      	movs	r2, #48	; 0x30
 802052c:	2100      	movs	r1, #0
 802052e:	4618      	mov	r0, r3
 8020530:	f007 ff0e 	bl	8028350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020534:	f107 030c 	add.w	r3, r7, #12
 8020538:	2200      	movs	r2, #0
 802053a:	601a      	str	r2, [r3, #0]
 802053c:	605a      	str	r2, [r3, #4]
 802053e:	609a      	str	r2, [r3, #8]
 8020540:	60da      	str	r2, [r3, #12]
 8020542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8020544:	2300      	movs	r3, #0
 8020546:	60bb      	str	r3, [r7, #8]
 8020548:	4b28      	ldr	r3, [pc, #160]	; (80205ec <SystemClock_Config+0xcc>)
 802054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802054c:	4a27      	ldr	r2, [pc, #156]	; (80205ec <SystemClock_Config+0xcc>)
 802054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020552:	6413      	str	r3, [r2, #64]	; 0x40
 8020554:	4b25      	ldr	r3, [pc, #148]	; (80205ec <SystemClock_Config+0xcc>)
 8020556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802055c:	60bb      	str	r3, [r7, #8]
 802055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8020560:	2300      	movs	r3, #0
 8020562:	607b      	str	r3, [r7, #4]
 8020564:	4b22      	ldr	r3, [pc, #136]	; (80205f0 <SystemClock_Config+0xd0>)
 8020566:	681b      	ldr	r3, [r3, #0]
 8020568:	4a21      	ldr	r2, [pc, #132]	; (80205f0 <SystemClock_Config+0xd0>)
 802056a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802056e:	6013      	str	r3, [r2, #0]
 8020570:	4b1f      	ldr	r3, [pc, #124]	; (80205f0 <SystemClock_Config+0xd0>)
 8020572:	681b      	ldr	r3, [r3, #0]
 8020574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020578:	607b      	str	r3, [r7, #4]
 802057a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 802057c:	2301      	movs	r3, #1
 802057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8020580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020586:	2302      	movs	r3, #2
 8020588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 802058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8020590:	2308      	movs	r3, #8
 8020592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8020594:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8020598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 802059a:	2302      	movs	r3, #2
 802059c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 802059e:	2307      	movs	r3, #7
 80205a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80205a2:	f107 0320 	add.w	r3, r7, #32
 80205a6:	4618      	mov	r0, r3
 80205a8:	f003 fb92 	bl	8023cd0 <HAL_RCC_OscConfig>
 80205ac:	4603      	mov	r3, r0
 80205ae:	2b00      	cmp	r3, #0
 80205b0:	d001      	beq.n	80205b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80205b2:	f000 fa0d 	bl	80209d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80205b6:	230f      	movs	r3, #15
 80205b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80205ba:	2302      	movs	r3, #2
 80205bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80205be:	2300      	movs	r3, #0
 80205c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80205c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80205c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80205c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80205cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80205ce:	f107 030c 	add.w	r3, r7, #12
 80205d2:	2105      	movs	r1, #5
 80205d4:	4618      	mov	r0, r3
 80205d6:	f003 fdf3 	bl	80241c0 <HAL_RCC_ClockConfig>
 80205da:	4603      	mov	r3, r0
 80205dc:	2b00      	cmp	r3, #0
 80205de:	d001      	beq.n	80205e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80205e0:	f000 f9f6 	bl	80209d0 <Error_Handler>
  }
}
 80205e4:	bf00      	nop
 80205e6:	3750      	adds	r7, #80	; 0x50
 80205e8:	46bd      	mov	sp, r7
 80205ea:	bd80      	pop	{r7, pc}
 80205ec:	40023800 	.word	0x40023800
 80205f0:	40007000 	.word	0x40007000

080205f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80205f4:	b580      	push	{r7, lr}
 80205f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80205f8:	4b12      	ldr	r3, [pc, #72]	; (8020644 <MX_I2C1_Init+0x50>)
 80205fa:	4a13      	ldr	r2, [pc, #76]	; (8020648 <MX_I2C1_Init+0x54>)
 80205fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80205fe:	4b11      	ldr	r3, [pc, #68]	; (8020644 <MX_I2C1_Init+0x50>)
 8020600:	4a12      	ldr	r2, [pc, #72]	; (802064c <MX_I2C1_Init+0x58>)
 8020602:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8020604:	4b0f      	ldr	r3, [pc, #60]	; (8020644 <MX_I2C1_Init+0x50>)
 8020606:	2200      	movs	r2, #0
 8020608:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 802060a:	4b0e      	ldr	r3, [pc, #56]	; (8020644 <MX_I2C1_Init+0x50>)
 802060c:	2200      	movs	r2, #0
 802060e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020610:	4b0c      	ldr	r3, [pc, #48]	; (8020644 <MX_I2C1_Init+0x50>)
 8020612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8020616:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020618:	4b0a      	ldr	r3, [pc, #40]	; (8020644 <MX_I2C1_Init+0x50>)
 802061a:	2200      	movs	r2, #0
 802061c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 802061e:	4b09      	ldr	r3, [pc, #36]	; (8020644 <MX_I2C1_Init+0x50>)
 8020620:	2200      	movs	r2, #0
 8020622:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8020624:	4b07      	ldr	r3, [pc, #28]	; (8020644 <MX_I2C1_Init+0x50>)
 8020626:	2200      	movs	r2, #0
 8020628:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 802062a:	4b06      	ldr	r3, [pc, #24]	; (8020644 <MX_I2C1_Init+0x50>)
 802062c:	2200      	movs	r2, #0
 802062e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8020630:	4804      	ldr	r0, [pc, #16]	; (8020644 <MX_I2C1_Init+0x50>)
 8020632:	f002 fd69 	bl	8023108 <HAL_I2C_Init>
 8020636:	4603      	mov	r3, r0
 8020638:	2b00      	cmp	r3, #0
 802063a:	d001      	beq.n	8020640 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 802063c:	f000 f9c8 	bl	80209d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8020640:	bf00      	nop
 8020642:	bd80      	pop	{r7, pc}
 8020644:	2000012c 	.word	0x2000012c
 8020648:	40005400 	.word	0x40005400
 802064c:	000186a0 	.word	0x000186a0

08020650 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8020650:	b580      	push	{r7, lr}
 8020652:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8020654:	4b13      	ldr	r3, [pc, #76]	; (80206a4 <MX_I2S3_Init+0x54>)
 8020656:	4a14      	ldr	r2, [pc, #80]	; (80206a8 <MX_I2S3_Init+0x58>)
 8020658:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 802065a:	4b12      	ldr	r3, [pc, #72]	; (80206a4 <MX_I2S3_Init+0x54>)
 802065c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020660:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8020662:	4b10      	ldr	r3, [pc, #64]	; (80206a4 <MX_I2S3_Init+0x54>)
 8020664:	2200      	movs	r2, #0
 8020666:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8020668:	4b0e      	ldr	r3, [pc, #56]	; (80206a4 <MX_I2S3_Init+0x54>)
 802066a:	2200      	movs	r2, #0
 802066c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 802066e:	4b0d      	ldr	r3, [pc, #52]	; (80206a4 <MX_I2S3_Init+0x54>)
 8020670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020674:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8020676:	4b0b      	ldr	r3, [pc, #44]	; (80206a4 <MX_I2S3_Init+0x54>)
 8020678:	4a0c      	ldr	r2, [pc, #48]	; (80206ac <MX_I2S3_Init+0x5c>)
 802067a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 802067c:	4b09      	ldr	r3, [pc, #36]	; (80206a4 <MX_I2S3_Init+0x54>)
 802067e:	2200      	movs	r2, #0
 8020680:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8020682:	4b08      	ldr	r3, [pc, #32]	; (80206a4 <MX_I2S3_Init+0x54>)
 8020684:	2200      	movs	r2, #0
 8020686:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8020688:	4b06      	ldr	r3, [pc, #24]	; (80206a4 <MX_I2S3_Init+0x54>)
 802068a:	2200      	movs	r2, #0
 802068c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 802068e:	4805      	ldr	r0, [pc, #20]	; (80206a4 <MX_I2S3_Init+0x54>)
 8020690:	f002 fe7e 	bl	8023390 <HAL_I2S_Init>
 8020694:	4603      	mov	r3, r0
 8020696:	2b00      	cmp	r3, #0
 8020698:	d001      	beq.n	802069e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 802069a:	f000 f999 	bl	80209d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 802069e:	bf00      	nop
 80206a0:	bd80      	pop	{r7, pc}
 80206a2:	bf00      	nop
 80206a4:	2000021c 	.word	0x2000021c
 80206a8:	40003c00 	.word	0x40003c00
 80206ac:	00017700 	.word	0x00017700

080206b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80206b0:	b580      	push	{r7, lr}
 80206b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80206b4:	4b17      	ldr	r3, [pc, #92]	; (8020714 <MX_SPI1_Init+0x64>)
 80206b6:	4a18      	ldr	r2, [pc, #96]	; (8020718 <MX_SPI1_Init+0x68>)
 80206b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80206ba:	4b16      	ldr	r3, [pc, #88]	; (8020714 <MX_SPI1_Init+0x64>)
 80206bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80206c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80206c2:	4b14      	ldr	r3, [pc, #80]	; (8020714 <MX_SPI1_Init+0x64>)
 80206c4:	2200      	movs	r2, #0
 80206c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80206c8:	4b12      	ldr	r3, [pc, #72]	; (8020714 <MX_SPI1_Init+0x64>)
 80206ca:	2200      	movs	r2, #0
 80206cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80206ce:	4b11      	ldr	r3, [pc, #68]	; (8020714 <MX_SPI1_Init+0x64>)
 80206d0:	2200      	movs	r2, #0
 80206d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80206d4:	4b0f      	ldr	r3, [pc, #60]	; (8020714 <MX_SPI1_Init+0x64>)
 80206d6:	2200      	movs	r2, #0
 80206d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80206da:	4b0e      	ldr	r3, [pc, #56]	; (8020714 <MX_SPI1_Init+0x64>)
 80206dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80206e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80206e2:	4b0c      	ldr	r3, [pc, #48]	; (8020714 <MX_SPI1_Init+0x64>)
 80206e4:	2200      	movs	r2, #0
 80206e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80206e8:	4b0a      	ldr	r3, [pc, #40]	; (8020714 <MX_SPI1_Init+0x64>)
 80206ea:	2200      	movs	r2, #0
 80206ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80206ee:	4b09      	ldr	r3, [pc, #36]	; (8020714 <MX_SPI1_Init+0x64>)
 80206f0:	2200      	movs	r2, #0
 80206f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80206f4:	4b07      	ldr	r3, [pc, #28]	; (8020714 <MX_SPI1_Init+0x64>)
 80206f6:	2200      	movs	r2, #0
 80206f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80206fa:	4b06      	ldr	r3, [pc, #24]	; (8020714 <MX_SPI1_Init+0x64>)
 80206fc:	220a      	movs	r2, #10
 80206fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8020700:	4804      	ldr	r0, [pc, #16]	; (8020714 <MX_SPI1_Init+0x64>)
 8020702:	f004 f899 	bl	8024838 <HAL_SPI_Init>
 8020706:	4603      	mov	r3, r0
 8020708:	2b00      	cmp	r3, #0
 802070a:	d001      	beq.n	8020710 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 802070c:	f000 f960 	bl	80209d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8020710:	bf00      	nop
 8020712:	bd80      	pop	{r7, pc}
 8020714:	20000180 	.word	0x20000180
 8020718:	40013000 	.word	0x40013000

0802071c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 802071c:	b580      	push	{r7, lr}
 802071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8020720:	4b11      	ldr	r3, [pc, #68]	; (8020768 <MX_USART2_UART_Init+0x4c>)
 8020722:	4a12      	ldr	r2, [pc, #72]	; (802076c <MX_USART2_UART_Init+0x50>)
 8020724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8020726:	4b10      	ldr	r3, [pc, #64]	; (8020768 <MX_USART2_UART_Init+0x4c>)
 8020728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802072c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802072e:	4b0e      	ldr	r3, [pc, #56]	; (8020768 <MX_USART2_UART_Init+0x4c>)
 8020730:	2200      	movs	r2, #0
 8020732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8020734:	4b0c      	ldr	r3, [pc, #48]	; (8020768 <MX_USART2_UART_Init+0x4c>)
 8020736:	2200      	movs	r2, #0
 8020738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 802073a:	4b0b      	ldr	r3, [pc, #44]	; (8020768 <MX_USART2_UART_Init+0x4c>)
 802073c:	2200      	movs	r2, #0
 802073e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8020740:	4b09      	ldr	r3, [pc, #36]	; (8020768 <MX_USART2_UART_Init+0x4c>)
 8020742:	220c      	movs	r2, #12
 8020744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020746:	4b08      	ldr	r3, [pc, #32]	; (8020768 <MX_USART2_UART_Init+0x4c>)
 8020748:	2200      	movs	r2, #0
 802074a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802074c:	4b06      	ldr	r3, [pc, #24]	; (8020768 <MX_USART2_UART_Init+0x4c>)
 802074e:	2200      	movs	r2, #0
 8020750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8020752:	4805      	ldr	r0, [pc, #20]	; (8020768 <MX_USART2_UART_Init+0x4c>)
 8020754:	f004 f8f9 	bl	802494a <HAL_UART_Init>
 8020758:	4603      	mov	r3, r0
 802075a:	2b00      	cmp	r3, #0
 802075c:	d001      	beq.n	8020762 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 802075e:	f000 f937 	bl	80209d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8020762:	bf00      	nop
 8020764:	bd80      	pop	{r7, pc}
 8020766:	bf00      	nop
 8020768:	200001d8 	.word	0x200001d8
 802076c:	40004400 	.word	0x40004400

08020770 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8020770:	b580      	push	{r7, lr}
 8020772:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8020774:	4b11      	ldr	r3, [pc, #68]	; (80207bc <MX_USART3_UART_Init+0x4c>)
 8020776:	4a12      	ldr	r2, [pc, #72]	; (80207c0 <MX_USART3_UART_Init+0x50>)
 8020778:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 802077a:	4b10      	ldr	r3, [pc, #64]	; (80207bc <MX_USART3_UART_Init+0x4c>)
 802077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020780:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8020782:	4b0e      	ldr	r3, [pc, #56]	; (80207bc <MX_USART3_UART_Init+0x4c>)
 8020784:	2200      	movs	r2, #0
 8020786:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8020788:	4b0c      	ldr	r3, [pc, #48]	; (80207bc <MX_USART3_UART_Init+0x4c>)
 802078a:	2200      	movs	r2, #0
 802078c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 802078e:	4b0b      	ldr	r3, [pc, #44]	; (80207bc <MX_USART3_UART_Init+0x4c>)
 8020790:	2200      	movs	r2, #0
 8020792:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8020794:	4b09      	ldr	r3, [pc, #36]	; (80207bc <MX_USART3_UART_Init+0x4c>)
 8020796:	220c      	movs	r2, #12
 8020798:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802079a:	4b08      	ldr	r3, [pc, #32]	; (80207bc <MX_USART3_UART_Init+0x4c>)
 802079c:	2200      	movs	r2, #0
 802079e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80207a0:	4b06      	ldr	r3, [pc, #24]	; (80207bc <MX_USART3_UART_Init+0x4c>)
 80207a2:	2200      	movs	r2, #0
 80207a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80207a6:	4805      	ldr	r0, [pc, #20]	; (80207bc <MX_USART3_UART_Init+0x4c>)
 80207a8:	f004 f8cf 	bl	802494a <HAL_UART_Init>
 80207ac:	4603      	mov	r3, r0
 80207ae:	2b00      	cmp	r3, #0
 80207b0:	d001      	beq.n	80207b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80207b2:	f000 f90d 	bl	80209d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80207b6:	bf00      	nop
 80207b8:	bd80      	pop	{r7, pc}
 80207ba:	bf00      	nop
 80207bc:	200000e8 	.word	0x200000e8
 80207c0:	40004800 	.word	0x40004800

080207c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80207c4:	b580      	push	{r7, lr}
 80207c6:	b08c      	sub	sp, #48	; 0x30
 80207c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80207ca:	f107 031c 	add.w	r3, r7, #28
 80207ce:	2200      	movs	r2, #0
 80207d0:	601a      	str	r2, [r3, #0]
 80207d2:	605a      	str	r2, [r3, #4]
 80207d4:	609a      	str	r2, [r3, #8]
 80207d6:	60da      	str	r2, [r3, #12]
 80207d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80207da:	2300      	movs	r3, #0
 80207dc:	61bb      	str	r3, [r7, #24]
 80207de:	4b76      	ldr	r3, [pc, #472]	; (80209b8 <MX_GPIO_Init+0x1f4>)
 80207e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80207e2:	4a75      	ldr	r2, [pc, #468]	; (80209b8 <MX_GPIO_Init+0x1f4>)
 80207e4:	f043 0310 	orr.w	r3, r3, #16
 80207e8:	6313      	str	r3, [r2, #48]	; 0x30
 80207ea:	4b73      	ldr	r3, [pc, #460]	; (80209b8 <MX_GPIO_Init+0x1f4>)
 80207ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80207ee:	f003 0310 	and.w	r3, r3, #16
 80207f2:	61bb      	str	r3, [r7, #24]
 80207f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80207f6:	2300      	movs	r3, #0
 80207f8:	617b      	str	r3, [r7, #20]
 80207fa:	4b6f      	ldr	r3, [pc, #444]	; (80209b8 <MX_GPIO_Init+0x1f4>)
 80207fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80207fe:	4a6e      	ldr	r2, [pc, #440]	; (80209b8 <MX_GPIO_Init+0x1f4>)
 8020800:	f043 0304 	orr.w	r3, r3, #4
 8020804:	6313      	str	r3, [r2, #48]	; 0x30
 8020806:	4b6c      	ldr	r3, [pc, #432]	; (80209b8 <MX_GPIO_Init+0x1f4>)
 8020808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802080a:	f003 0304 	and.w	r3, r3, #4
 802080e:	617b      	str	r3, [r7, #20]
 8020810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020812:	2300      	movs	r3, #0
 8020814:	613b      	str	r3, [r7, #16]
 8020816:	4b68      	ldr	r3, [pc, #416]	; (80209b8 <MX_GPIO_Init+0x1f4>)
 8020818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802081a:	4a67      	ldr	r2, [pc, #412]	; (80209b8 <MX_GPIO_Init+0x1f4>)
 802081c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020820:	6313      	str	r3, [r2, #48]	; 0x30
 8020822:	4b65      	ldr	r3, [pc, #404]	; (80209b8 <MX_GPIO_Init+0x1f4>)
 8020824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802082a:	613b      	str	r3, [r7, #16]
 802082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802082e:	2300      	movs	r3, #0
 8020830:	60fb      	str	r3, [r7, #12]
 8020832:	4b61      	ldr	r3, [pc, #388]	; (80209b8 <MX_GPIO_Init+0x1f4>)
 8020834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020836:	4a60      	ldr	r2, [pc, #384]	; (80209b8 <MX_GPIO_Init+0x1f4>)
 8020838:	f043 0301 	orr.w	r3, r3, #1
 802083c:	6313      	str	r3, [r2, #48]	; 0x30
 802083e:	4b5e      	ldr	r3, [pc, #376]	; (80209b8 <MX_GPIO_Init+0x1f4>)
 8020840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020842:	f003 0301 	and.w	r3, r3, #1
 8020846:	60fb      	str	r3, [r7, #12]
 8020848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802084a:	2300      	movs	r3, #0
 802084c:	60bb      	str	r3, [r7, #8]
 802084e:	4b5a      	ldr	r3, [pc, #360]	; (80209b8 <MX_GPIO_Init+0x1f4>)
 8020850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020852:	4a59      	ldr	r2, [pc, #356]	; (80209b8 <MX_GPIO_Init+0x1f4>)
 8020854:	f043 0302 	orr.w	r3, r3, #2
 8020858:	6313      	str	r3, [r2, #48]	; 0x30
 802085a:	4b57      	ldr	r3, [pc, #348]	; (80209b8 <MX_GPIO_Init+0x1f4>)
 802085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802085e:	f003 0302 	and.w	r3, r3, #2
 8020862:	60bb      	str	r3, [r7, #8]
 8020864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020866:	2300      	movs	r3, #0
 8020868:	607b      	str	r3, [r7, #4]
 802086a:	4b53      	ldr	r3, [pc, #332]	; (80209b8 <MX_GPIO_Init+0x1f4>)
 802086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802086e:	4a52      	ldr	r2, [pc, #328]	; (80209b8 <MX_GPIO_Init+0x1f4>)
 8020870:	f043 0308 	orr.w	r3, r3, #8
 8020874:	6313      	str	r3, [r2, #48]	; 0x30
 8020876:	4b50      	ldr	r3, [pc, #320]	; (80209b8 <MX_GPIO_Init+0x1f4>)
 8020878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802087a:	f003 0308 	and.w	r3, r3, #8
 802087e:	607b      	str	r3, [r7, #4]
 8020880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8020882:	2200      	movs	r2, #0
 8020884:	2108      	movs	r1, #8
 8020886:	484d      	ldr	r0, [pc, #308]	; (80209bc <MX_GPIO_Init+0x1f8>)
 8020888:	f000 fe90 	bl	80215ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 802088c:	2201      	movs	r2, #1
 802088e:	2101      	movs	r1, #1
 8020890:	484b      	ldr	r0, [pc, #300]	; (80209c0 <MX_GPIO_Init+0x1fc>)
 8020892:	f000 fe8b 	bl	80215ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8020896:	2200      	movs	r2, #0
 8020898:	f24f 0110 	movw	r1, #61456	; 0xf010
 802089c:	4849      	ldr	r0, [pc, #292]	; (80209c4 <MX_GPIO_Init+0x200>)
 802089e:	f000 fe85 	bl	80215ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80208a2:	2308      	movs	r3, #8
 80208a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80208a6:	2301      	movs	r3, #1
 80208a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80208aa:	2300      	movs	r3, #0
 80208ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80208ae:	2300      	movs	r3, #0
 80208b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80208b2:	f107 031c 	add.w	r3, r7, #28
 80208b6:	4619      	mov	r1, r3
 80208b8:	4840      	ldr	r0, [pc, #256]	; (80209bc <MX_GPIO_Init+0x1f8>)
 80208ba:	f000 fcdb 	bl	8021274 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80208be:	2301      	movs	r3, #1
 80208c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80208c2:	2301      	movs	r3, #1
 80208c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80208c6:	2300      	movs	r3, #0
 80208c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80208ca:	2300      	movs	r3, #0
 80208cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80208ce:	f107 031c 	add.w	r3, r7, #28
 80208d2:	4619      	mov	r1, r3
 80208d4:	483a      	ldr	r0, [pc, #232]	; (80209c0 <MX_GPIO_Init+0x1fc>)
 80208d6:	f000 fccd 	bl	8021274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80208da:	2308      	movs	r3, #8
 80208dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80208de:	2302      	movs	r3, #2
 80208e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80208e2:	2300      	movs	r3, #0
 80208e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80208e6:	2300      	movs	r3, #0
 80208e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80208ea:	2305      	movs	r3, #5
 80208ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80208ee:	f107 031c 	add.w	r3, r7, #28
 80208f2:	4619      	mov	r1, r3
 80208f4:	4832      	ldr	r0, [pc, #200]	; (80209c0 <MX_GPIO_Init+0x1fc>)
 80208f6:	f000 fcbd 	bl	8021274 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80208fa:	2301      	movs	r3, #1
 80208fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80208fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8020902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020904:	2300      	movs	r3, #0
 8020906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8020908:	f107 031c 	add.w	r3, r7, #28
 802090c:	4619      	mov	r1, r3
 802090e:	482e      	ldr	r0, [pc, #184]	; (80209c8 <MX_GPIO_Init+0x204>)
 8020910:	f000 fcb0 	bl	8021274 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8020914:	2304      	movs	r3, #4
 8020916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020918:	2300      	movs	r3, #0
 802091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802091c:	2300      	movs	r3, #0
 802091e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8020920:	f107 031c 	add.w	r3, r7, #28
 8020924:	4619      	mov	r1, r3
 8020926:	4829      	ldr	r0, [pc, #164]	; (80209cc <MX_GPIO_Init+0x208>)
 8020928:	f000 fca4 	bl	8021274 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 802092c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020932:	2302      	movs	r3, #2
 8020934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020936:	2300      	movs	r3, #0
 8020938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802093a:	2300      	movs	r3, #0
 802093c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 802093e:	2305      	movs	r3, #5
 8020940:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8020942:	f107 031c 	add.w	r3, r7, #28
 8020946:	4619      	mov	r1, r3
 8020948:	4820      	ldr	r0, [pc, #128]	; (80209cc <MX_GPIO_Init+0x208>)
 802094a:	f000 fc93 	bl	8021274 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 802094e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8020952:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020954:	2301      	movs	r3, #1
 8020956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020958:	2300      	movs	r3, #0
 802095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802095c:	2300      	movs	r3, #0
 802095e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020960:	f107 031c 	add.w	r3, r7, #28
 8020964:	4619      	mov	r1, r3
 8020966:	4817      	ldr	r0, [pc, #92]	; (80209c4 <MX_GPIO_Init+0x200>)
 8020968:	f000 fc84 	bl	8021274 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 802096c:	2320      	movs	r3, #32
 802096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020970:	2300      	movs	r3, #0
 8020972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020974:	2300      	movs	r3, #0
 8020976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8020978:	f107 031c 	add.w	r3, r7, #28
 802097c:	4619      	mov	r1, r3
 802097e:	4811      	ldr	r0, [pc, #68]	; (80209c4 <MX_GPIO_Init+0x200>)
 8020980:	f000 fc78 	bl	8021274 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8020984:	2302      	movs	r3, #2
 8020986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020988:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 802098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802098e:	2300      	movs	r3, #0
 8020990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8020992:	f107 031c 	add.w	r3, r7, #28
 8020996:	4619      	mov	r1, r3
 8020998:	4808      	ldr	r0, [pc, #32]	; (80209bc <MX_GPIO_Init+0x1f8>)
 802099a:	f000 fc6b 	bl	8021274 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 802099e:	2200      	movs	r2, #0
 80209a0:	2100      	movs	r1, #0
 80209a2:	2006      	movs	r0, #6
 80209a4:	f000 fc2f 	bl	8021206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80209a8:	2006      	movs	r0, #6
 80209aa:	f000 fc48 	bl	802123e <HAL_NVIC_EnableIRQ>

}
 80209ae:	bf00      	nop
 80209b0:	3730      	adds	r7, #48	; 0x30
 80209b2:	46bd      	mov	sp, r7
 80209b4:	bd80      	pop	{r7, pc}
 80209b6:	bf00      	nop
 80209b8:	40023800 	.word	0x40023800
 80209bc:	40021000 	.word	0x40021000
 80209c0:	40020800 	.word	0x40020800
 80209c4:	40020c00 	.word	0x40020c00
 80209c8:	40020000 	.word	0x40020000
 80209cc:	40020400 	.word	0x40020400

080209d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80209d0:	b480      	push	{r7}
 80209d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80209d4:	b672      	cpsid	i
}
 80209d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80209d8:	e7fe      	b.n	80209d8 <Error_Handler+0x8>
	...

080209dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80209dc:	b580      	push	{r7, lr}
 80209de:	b082      	sub	sp, #8
 80209e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80209e2:	2300      	movs	r3, #0
 80209e4:	607b      	str	r3, [r7, #4]
 80209e6:	4b10      	ldr	r3, [pc, #64]	; (8020a28 <HAL_MspInit+0x4c>)
 80209e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80209ea:	4a0f      	ldr	r2, [pc, #60]	; (8020a28 <HAL_MspInit+0x4c>)
 80209ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80209f0:	6453      	str	r3, [r2, #68]	; 0x44
 80209f2:	4b0d      	ldr	r3, [pc, #52]	; (8020a28 <HAL_MspInit+0x4c>)
 80209f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80209f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80209fa:	607b      	str	r3, [r7, #4]
 80209fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80209fe:	2300      	movs	r3, #0
 8020a00:	603b      	str	r3, [r7, #0]
 8020a02:	4b09      	ldr	r3, [pc, #36]	; (8020a28 <HAL_MspInit+0x4c>)
 8020a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a06:	4a08      	ldr	r2, [pc, #32]	; (8020a28 <HAL_MspInit+0x4c>)
 8020a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8020a0e:	4b06      	ldr	r3, [pc, #24]	; (8020a28 <HAL_MspInit+0x4c>)
 8020a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020a16:	603b      	str	r3, [r7, #0]
 8020a18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8020a1a:	2007      	movs	r0, #7
 8020a1c:	f000 fbe8 	bl	80211f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020a20:	bf00      	nop
 8020a22:	3708      	adds	r7, #8
 8020a24:	46bd      	mov	sp, r7
 8020a26:	bd80      	pop	{r7, pc}
 8020a28:	40023800 	.word	0x40023800

08020a2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8020a2c:	b580      	push	{r7, lr}
 8020a2e:	b08a      	sub	sp, #40	; 0x28
 8020a30:	af00      	add	r7, sp, #0
 8020a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020a34:	f107 0314 	add.w	r3, r7, #20
 8020a38:	2200      	movs	r2, #0
 8020a3a:	601a      	str	r2, [r3, #0]
 8020a3c:	605a      	str	r2, [r3, #4]
 8020a3e:	609a      	str	r2, [r3, #8]
 8020a40:	60da      	str	r2, [r3, #12]
 8020a42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8020a44:	687b      	ldr	r3, [r7, #4]
 8020a46:	681b      	ldr	r3, [r3, #0]
 8020a48:	4a19      	ldr	r2, [pc, #100]	; (8020ab0 <HAL_I2C_MspInit+0x84>)
 8020a4a:	4293      	cmp	r3, r2
 8020a4c:	d12c      	bne.n	8020aa8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8020a4e:	2300      	movs	r3, #0
 8020a50:	613b      	str	r3, [r7, #16]
 8020a52:	4b18      	ldr	r3, [pc, #96]	; (8020ab4 <HAL_I2C_MspInit+0x88>)
 8020a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a56:	4a17      	ldr	r2, [pc, #92]	; (8020ab4 <HAL_I2C_MspInit+0x88>)
 8020a58:	f043 0302 	orr.w	r3, r3, #2
 8020a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8020a5e:	4b15      	ldr	r3, [pc, #84]	; (8020ab4 <HAL_I2C_MspInit+0x88>)
 8020a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a62:	f003 0302 	and.w	r3, r3, #2
 8020a66:	613b      	str	r3, [r7, #16]
 8020a68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8020a6a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8020a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8020a70:	2312      	movs	r3, #18
 8020a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8020a74:	2301      	movs	r3, #1
 8020a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020a78:	2300      	movs	r3, #0
 8020a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8020a7c:	2304      	movs	r3, #4
 8020a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020a80:	f107 0314 	add.w	r3, r7, #20
 8020a84:	4619      	mov	r1, r3
 8020a86:	480c      	ldr	r0, [pc, #48]	; (8020ab8 <HAL_I2C_MspInit+0x8c>)
 8020a88:	f000 fbf4 	bl	8021274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8020a8c:	2300      	movs	r3, #0
 8020a8e:	60fb      	str	r3, [r7, #12]
 8020a90:	4b08      	ldr	r3, [pc, #32]	; (8020ab4 <HAL_I2C_MspInit+0x88>)
 8020a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a94:	4a07      	ldr	r2, [pc, #28]	; (8020ab4 <HAL_I2C_MspInit+0x88>)
 8020a96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8020a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8020a9c:	4b05      	ldr	r3, [pc, #20]	; (8020ab4 <HAL_I2C_MspInit+0x88>)
 8020a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8020aa4:	60fb      	str	r3, [r7, #12]
 8020aa6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8020aa8:	bf00      	nop
 8020aaa:	3728      	adds	r7, #40	; 0x28
 8020aac:	46bd      	mov	sp, r7
 8020aae:	bd80      	pop	{r7, pc}
 8020ab0:	40005400 	.word	0x40005400
 8020ab4:	40023800 	.word	0x40023800
 8020ab8:	40020400 	.word	0x40020400

08020abc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8020abc:	b580      	push	{r7, lr}
 8020abe:	b08e      	sub	sp, #56	; 0x38
 8020ac0:	af00      	add	r7, sp, #0
 8020ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020ac8:	2200      	movs	r2, #0
 8020aca:	601a      	str	r2, [r3, #0]
 8020acc:	605a      	str	r2, [r3, #4]
 8020ace:	609a      	str	r2, [r3, #8]
 8020ad0:	60da      	str	r2, [r3, #12]
 8020ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8020ad4:	f107 0314 	add.w	r3, r7, #20
 8020ad8:	2200      	movs	r2, #0
 8020ada:	601a      	str	r2, [r3, #0]
 8020adc:	605a      	str	r2, [r3, #4]
 8020ade:	609a      	str	r2, [r3, #8]
 8020ae0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8020ae2:	687b      	ldr	r3, [r7, #4]
 8020ae4:	681b      	ldr	r3, [r3, #0]
 8020ae6:	4a31      	ldr	r2, [pc, #196]	; (8020bac <HAL_I2S_MspInit+0xf0>)
 8020ae8:	4293      	cmp	r3, r2
 8020aea:	d15a      	bne.n	8020ba2 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8020aec:	2301      	movs	r3, #1
 8020aee:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8020af0:	23c0      	movs	r3, #192	; 0xc0
 8020af2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8020af4:	2302      	movs	r3, #2
 8020af6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8020af8:	f107 0314 	add.w	r3, r7, #20
 8020afc:	4618      	mov	r0, r3
 8020afe:	f003 fd5b 	bl	80245b8 <HAL_RCCEx_PeriphCLKConfig>
 8020b02:	4603      	mov	r3, r0
 8020b04:	2b00      	cmp	r3, #0
 8020b06:	d001      	beq.n	8020b0c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8020b08:	f7ff ff62 	bl	80209d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8020b0c:	2300      	movs	r3, #0
 8020b0e:	613b      	str	r3, [r7, #16]
 8020b10:	4b27      	ldr	r3, [pc, #156]	; (8020bb0 <HAL_I2S_MspInit+0xf4>)
 8020b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020b14:	4a26      	ldr	r2, [pc, #152]	; (8020bb0 <HAL_I2S_MspInit+0xf4>)
 8020b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8020b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8020b1c:	4b24      	ldr	r3, [pc, #144]	; (8020bb0 <HAL_I2S_MspInit+0xf4>)
 8020b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8020b24:	613b      	str	r3, [r7, #16]
 8020b26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020b28:	2300      	movs	r3, #0
 8020b2a:	60fb      	str	r3, [r7, #12]
 8020b2c:	4b20      	ldr	r3, [pc, #128]	; (8020bb0 <HAL_I2S_MspInit+0xf4>)
 8020b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b30:	4a1f      	ldr	r2, [pc, #124]	; (8020bb0 <HAL_I2S_MspInit+0xf4>)
 8020b32:	f043 0301 	orr.w	r3, r3, #1
 8020b36:	6313      	str	r3, [r2, #48]	; 0x30
 8020b38:	4b1d      	ldr	r3, [pc, #116]	; (8020bb0 <HAL_I2S_MspInit+0xf4>)
 8020b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b3c:	f003 0301 	and.w	r3, r3, #1
 8020b40:	60fb      	str	r3, [r7, #12]
 8020b42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8020b44:	2300      	movs	r3, #0
 8020b46:	60bb      	str	r3, [r7, #8]
 8020b48:	4b19      	ldr	r3, [pc, #100]	; (8020bb0 <HAL_I2S_MspInit+0xf4>)
 8020b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b4c:	4a18      	ldr	r2, [pc, #96]	; (8020bb0 <HAL_I2S_MspInit+0xf4>)
 8020b4e:	f043 0304 	orr.w	r3, r3, #4
 8020b52:	6313      	str	r3, [r2, #48]	; 0x30
 8020b54:	4b16      	ldr	r3, [pc, #88]	; (8020bb0 <HAL_I2S_MspInit+0xf4>)
 8020b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b58:	f003 0304 	and.w	r3, r3, #4
 8020b5c:	60bb      	str	r3, [r7, #8]
 8020b5e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8020b60:	2310      	movs	r3, #16
 8020b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020b64:	2302      	movs	r3, #2
 8020b66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020b68:	2300      	movs	r3, #0
 8020b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020b6c:	2300      	movs	r3, #0
 8020b6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8020b70:	2306      	movs	r3, #6
 8020b72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8020b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020b78:	4619      	mov	r1, r3
 8020b7a:	480e      	ldr	r0, [pc, #56]	; (8020bb4 <HAL_I2S_MspInit+0xf8>)
 8020b7c:	f000 fb7a 	bl	8021274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8020b80:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8020b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020b86:	2302      	movs	r3, #2
 8020b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020b8a:	2300      	movs	r3, #0
 8020b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020b8e:	2300      	movs	r3, #0
 8020b90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8020b92:	2306      	movs	r3, #6
 8020b94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020b9a:	4619      	mov	r1, r3
 8020b9c:	4806      	ldr	r0, [pc, #24]	; (8020bb8 <HAL_I2S_MspInit+0xfc>)
 8020b9e:	f000 fb69 	bl	8021274 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8020ba2:	bf00      	nop
 8020ba4:	3738      	adds	r7, #56	; 0x38
 8020ba6:	46bd      	mov	sp, r7
 8020ba8:	bd80      	pop	{r7, pc}
 8020baa:	bf00      	nop
 8020bac:	40003c00 	.word	0x40003c00
 8020bb0:	40023800 	.word	0x40023800
 8020bb4:	40020000 	.word	0x40020000
 8020bb8:	40020800 	.word	0x40020800

08020bbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8020bbc:	b580      	push	{r7, lr}
 8020bbe:	b08a      	sub	sp, #40	; 0x28
 8020bc0:	af00      	add	r7, sp, #0
 8020bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020bc4:	f107 0314 	add.w	r3, r7, #20
 8020bc8:	2200      	movs	r2, #0
 8020bca:	601a      	str	r2, [r3, #0]
 8020bcc:	605a      	str	r2, [r3, #4]
 8020bce:	609a      	str	r2, [r3, #8]
 8020bd0:	60da      	str	r2, [r3, #12]
 8020bd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8020bd4:	687b      	ldr	r3, [r7, #4]
 8020bd6:	681b      	ldr	r3, [r3, #0]
 8020bd8:	4a19      	ldr	r2, [pc, #100]	; (8020c40 <HAL_SPI_MspInit+0x84>)
 8020bda:	4293      	cmp	r3, r2
 8020bdc:	d12b      	bne.n	8020c36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8020bde:	2300      	movs	r3, #0
 8020be0:	613b      	str	r3, [r7, #16]
 8020be2:	4b18      	ldr	r3, [pc, #96]	; (8020c44 <HAL_SPI_MspInit+0x88>)
 8020be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020be6:	4a17      	ldr	r2, [pc, #92]	; (8020c44 <HAL_SPI_MspInit+0x88>)
 8020be8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8020bec:	6453      	str	r3, [r2, #68]	; 0x44
 8020bee:	4b15      	ldr	r3, [pc, #84]	; (8020c44 <HAL_SPI_MspInit+0x88>)
 8020bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020bf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8020bf6:	613b      	str	r3, [r7, #16]
 8020bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020bfa:	2300      	movs	r3, #0
 8020bfc:	60fb      	str	r3, [r7, #12]
 8020bfe:	4b11      	ldr	r3, [pc, #68]	; (8020c44 <HAL_SPI_MspInit+0x88>)
 8020c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c02:	4a10      	ldr	r2, [pc, #64]	; (8020c44 <HAL_SPI_MspInit+0x88>)
 8020c04:	f043 0301 	orr.w	r3, r3, #1
 8020c08:	6313      	str	r3, [r2, #48]	; 0x30
 8020c0a:	4b0e      	ldr	r3, [pc, #56]	; (8020c44 <HAL_SPI_MspInit+0x88>)
 8020c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c0e:	f003 0301 	and.w	r3, r3, #1
 8020c12:	60fb      	str	r3, [r7, #12]
 8020c14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8020c16:	23e0      	movs	r3, #224	; 0xe0
 8020c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020c1a:	2302      	movs	r3, #2
 8020c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020c1e:	2300      	movs	r3, #0
 8020c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020c22:	2300      	movs	r3, #0
 8020c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8020c26:	2305      	movs	r3, #5
 8020c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020c2a:	f107 0314 	add.w	r3, r7, #20
 8020c2e:	4619      	mov	r1, r3
 8020c30:	4805      	ldr	r0, [pc, #20]	; (8020c48 <HAL_SPI_MspInit+0x8c>)
 8020c32:	f000 fb1f 	bl	8021274 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8020c36:	bf00      	nop
 8020c38:	3728      	adds	r7, #40	; 0x28
 8020c3a:	46bd      	mov	sp, r7
 8020c3c:	bd80      	pop	{r7, pc}
 8020c3e:	bf00      	nop
 8020c40:	40013000 	.word	0x40013000
 8020c44:	40023800 	.word	0x40023800
 8020c48:	40020000 	.word	0x40020000

08020c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8020c4c:	b580      	push	{r7, lr}
 8020c4e:	b08c      	sub	sp, #48	; 0x30
 8020c50:	af00      	add	r7, sp, #0
 8020c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020c54:	f107 031c 	add.w	r3, r7, #28
 8020c58:	2200      	movs	r2, #0
 8020c5a:	601a      	str	r2, [r3, #0]
 8020c5c:	605a      	str	r2, [r3, #4]
 8020c5e:	609a      	str	r2, [r3, #8]
 8020c60:	60da      	str	r2, [r3, #12]
 8020c62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8020c64:	687b      	ldr	r3, [r7, #4]
 8020c66:	681b      	ldr	r3, [r3, #0]
 8020c68:	4a42      	ldr	r2, [pc, #264]	; (8020d74 <HAL_UART_MspInit+0x128>)
 8020c6a:	4293      	cmp	r3, r2
 8020c6c:	d12c      	bne.n	8020cc8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8020c6e:	2300      	movs	r3, #0
 8020c70:	61bb      	str	r3, [r7, #24]
 8020c72:	4b41      	ldr	r3, [pc, #260]	; (8020d78 <HAL_UART_MspInit+0x12c>)
 8020c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c76:	4a40      	ldr	r2, [pc, #256]	; (8020d78 <HAL_UART_MspInit+0x12c>)
 8020c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8020c7e:	4b3e      	ldr	r3, [pc, #248]	; (8020d78 <HAL_UART_MspInit+0x12c>)
 8020c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020c86:	61bb      	str	r3, [r7, #24]
 8020c88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020c8a:	2300      	movs	r3, #0
 8020c8c:	617b      	str	r3, [r7, #20]
 8020c8e:	4b3a      	ldr	r3, [pc, #232]	; (8020d78 <HAL_UART_MspInit+0x12c>)
 8020c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c92:	4a39      	ldr	r2, [pc, #228]	; (8020d78 <HAL_UART_MspInit+0x12c>)
 8020c94:	f043 0301 	orr.w	r3, r3, #1
 8020c98:	6313      	str	r3, [r2, #48]	; 0x30
 8020c9a:	4b37      	ldr	r3, [pc, #220]	; (8020d78 <HAL_UART_MspInit+0x12c>)
 8020c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c9e:	f003 0301 	and.w	r3, r3, #1
 8020ca2:	617b      	str	r3, [r7, #20]
 8020ca4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8020ca6:	230c      	movs	r3, #12
 8020ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020caa:	2302      	movs	r3, #2
 8020cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020cae:	2300      	movs	r3, #0
 8020cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020cb2:	2303      	movs	r3, #3
 8020cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8020cb6:	2307      	movs	r3, #7
 8020cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020cba:	f107 031c 	add.w	r3, r7, #28
 8020cbe:	4619      	mov	r1, r3
 8020cc0:	482e      	ldr	r0, [pc, #184]	; (8020d7c <HAL_UART_MspInit+0x130>)
 8020cc2:	f000 fad7 	bl	8021274 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8020cc6:	e050      	b.n	8020d6a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8020cc8:	687b      	ldr	r3, [r7, #4]
 8020cca:	681b      	ldr	r3, [r3, #0]
 8020ccc:	4a2c      	ldr	r2, [pc, #176]	; (8020d80 <HAL_UART_MspInit+0x134>)
 8020cce:	4293      	cmp	r3, r2
 8020cd0:	d14b      	bne.n	8020d6a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8020cd2:	2300      	movs	r3, #0
 8020cd4:	613b      	str	r3, [r7, #16]
 8020cd6:	4b28      	ldr	r3, [pc, #160]	; (8020d78 <HAL_UART_MspInit+0x12c>)
 8020cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020cda:	4a27      	ldr	r2, [pc, #156]	; (8020d78 <HAL_UART_MspInit+0x12c>)
 8020cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8020ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8020ce2:	4b25      	ldr	r3, [pc, #148]	; (8020d78 <HAL_UART_MspInit+0x12c>)
 8020ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8020cea:	613b      	str	r3, [r7, #16]
 8020cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8020cee:	2300      	movs	r3, #0
 8020cf0:	60fb      	str	r3, [r7, #12]
 8020cf2:	4b21      	ldr	r3, [pc, #132]	; (8020d78 <HAL_UART_MspInit+0x12c>)
 8020cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cf6:	4a20      	ldr	r2, [pc, #128]	; (8020d78 <HAL_UART_MspInit+0x12c>)
 8020cf8:	f043 0302 	orr.w	r3, r3, #2
 8020cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8020cfe:	4b1e      	ldr	r3, [pc, #120]	; (8020d78 <HAL_UART_MspInit+0x12c>)
 8020d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d02:	f003 0302 	and.w	r3, r3, #2
 8020d06:	60fb      	str	r3, [r7, #12]
 8020d08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8020d0a:	2300      	movs	r3, #0
 8020d0c:	60bb      	str	r3, [r7, #8]
 8020d0e:	4b1a      	ldr	r3, [pc, #104]	; (8020d78 <HAL_UART_MspInit+0x12c>)
 8020d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d12:	4a19      	ldr	r2, [pc, #100]	; (8020d78 <HAL_UART_MspInit+0x12c>)
 8020d14:	f043 0308 	orr.w	r3, r3, #8
 8020d18:	6313      	str	r3, [r2, #48]	; 0x30
 8020d1a:	4b17      	ldr	r3, [pc, #92]	; (8020d78 <HAL_UART_MspInit+0x12c>)
 8020d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d1e:	f003 0308 	and.w	r3, r3, #8
 8020d22:	60bb      	str	r3, [r7, #8]
 8020d24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8020d26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020d2c:	2302      	movs	r3, #2
 8020d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d30:	2300      	movs	r3, #0
 8020d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020d34:	2303      	movs	r3, #3
 8020d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8020d38:	2307      	movs	r3, #7
 8020d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020d3c:	f107 031c 	add.w	r3, r7, #28
 8020d40:	4619      	mov	r1, r3
 8020d42:	4810      	ldr	r0, [pc, #64]	; (8020d84 <HAL_UART_MspInit+0x138>)
 8020d44:	f000 fa96 	bl	8021274 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8020d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020d4e:	2302      	movs	r3, #2
 8020d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d52:	2300      	movs	r3, #0
 8020d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020d56:	2303      	movs	r3, #3
 8020d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8020d5a:	2307      	movs	r3, #7
 8020d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020d5e:	f107 031c 	add.w	r3, r7, #28
 8020d62:	4619      	mov	r1, r3
 8020d64:	4808      	ldr	r0, [pc, #32]	; (8020d88 <HAL_UART_MspInit+0x13c>)
 8020d66:	f000 fa85 	bl	8021274 <HAL_GPIO_Init>
}
 8020d6a:	bf00      	nop
 8020d6c:	3730      	adds	r7, #48	; 0x30
 8020d6e:	46bd      	mov	sp, r7
 8020d70:	bd80      	pop	{r7, pc}
 8020d72:	bf00      	nop
 8020d74:	40004400 	.word	0x40004400
 8020d78:	40023800 	.word	0x40023800
 8020d7c:	40020000 	.word	0x40020000
 8020d80:	40004800 	.word	0x40004800
 8020d84:	40020400 	.word	0x40020400
 8020d88:	40020c00 	.word	0x40020c00

08020d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8020d8c:	b480      	push	{r7}
 8020d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8020d90:	e7fe      	b.n	8020d90 <NMI_Handler+0x4>

08020d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020d92:	b480      	push	{r7}
 8020d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8020d96:	e7fe      	b.n	8020d96 <HardFault_Handler+0x4>

08020d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020d98:	b480      	push	{r7}
 8020d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020d9c:	e7fe      	b.n	8020d9c <MemManage_Handler+0x4>

08020d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020d9e:	b480      	push	{r7}
 8020da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8020da2:	e7fe      	b.n	8020da2 <BusFault_Handler+0x4>

08020da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8020da4:	b480      	push	{r7}
 8020da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020da8:	e7fe      	b.n	8020da8 <UsageFault_Handler+0x4>

08020daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8020daa:	b480      	push	{r7}
 8020dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8020dae:	bf00      	nop
 8020db0:	46bd      	mov	sp, r7
 8020db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020db6:	4770      	bx	lr

08020db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020db8:	b480      	push	{r7}
 8020dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020dbc:	bf00      	nop
 8020dbe:	46bd      	mov	sp, r7
 8020dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dc4:	4770      	bx	lr

08020dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020dc6:	b480      	push	{r7}
 8020dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8020dca:	bf00      	nop
 8020dcc:	46bd      	mov	sp, r7
 8020dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dd2:	4770      	bx	lr

08020dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8020dd4:	b580      	push	{r7, lr}
 8020dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020dd8:	f000 f8f6 	bl	8020fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8020ddc:	bf00      	nop
 8020dde:	bd80      	pop	{r7, pc}

08020de0 <EXTI0_IRQHandler>:
  * @brief This function handles EXTI line0 interrupt.
  */

uint8_t flag = 0;
void EXTI0_IRQHandler(void)
{
 8020de0:	b580      	push	{r7, lr}
 8020de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, !flag);
 8020de4:	4b0d      	ldr	r3, [pc, #52]	; (8020e1c <EXTI0_IRQHandler+0x3c>)
 8020de6:	781b      	ldrb	r3, [r3, #0]
 8020de8:	2b00      	cmp	r3, #0
 8020dea:	bf0c      	ite	eq
 8020dec:	2301      	moveq	r3, #1
 8020dee:	2300      	movne	r3, #0
 8020df0:	b2db      	uxtb	r3, r3
 8020df2:	461a      	mov	r2, r3
 8020df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020df8:	4809      	ldr	r0, [pc, #36]	; (8020e20 <EXTI0_IRQHandler+0x40>)
 8020dfa:	f000 fbd7 	bl	80215ac <HAL_GPIO_WritePin>
  flag = !flag;
 8020dfe:	4b07      	ldr	r3, [pc, #28]	; (8020e1c <EXTI0_IRQHandler+0x3c>)
 8020e00:	781b      	ldrb	r3, [r3, #0]
 8020e02:	2b00      	cmp	r3, #0
 8020e04:	bf0c      	ite	eq
 8020e06:	2301      	moveq	r3, #1
 8020e08:	2300      	movne	r3, #0
 8020e0a:	b2db      	uxtb	r3, r3
 8020e0c:	461a      	mov	r2, r3
 8020e0e:	4b03      	ldr	r3, [pc, #12]	; (8020e1c <EXTI0_IRQHandler+0x3c>)
 8020e10:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8020e12:	2001      	movs	r0, #1
 8020e14:	f000 fbe4 	bl	80215e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8020e18:	bf00      	nop
 8020e1a:	bd80      	pop	{r7, pc}
 8020e1c:	200000d4 	.word	0x200000d4
 8020e20:	40020c00 	.word	0x40020c00

08020e24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8020e24:	b580      	push	{r7, lr}
 8020e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8020e28:	4802      	ldr	r0, [pc, #8]	; (8020e34 <OTG_FS_IRQHandler+0x10>)
 8020e2a:	f000 fe67 	bl	8021afc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8020e2e:	bf00      	nop
 8020e30:	bd80      	pop	{r7, pc}
 8020e32:	bf00      	nop
 8020e34:	20000640 	.word	0x20000640

08020e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8020e38:	b580      	push	{r7, lr}
 8020e3a:	b086      	sub	sp, #24
 8020e3c:	af00      	add	r7, sp, #0
 8020e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8020e40:	4a14      	ldr	r2, [pc, #80]	; (8020e94 <_sbrk+0x5c>)
 8020e42:	4b15      	ldr	r3, [pc, #84]	; (8020e98 <_sbrk+0x60>)
 8020e44:	1ad3      	subs	r3, r2, r3
 8020e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8020e48:	697b      	ldr	r3, [r7, #20]
 8020e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8020e4c:	4b13      	ldr	r3, [pc, #76]	; (8020e9c <_sbrk+0x64>)
 8020e4e:	681b      	ldr	r3, [r3, #0]
 8020e50:	2b00      	cmp	r3, #0
 8020e52:	d102      	bne.n	8020e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8020e54:	4b11      	ldr	r3, [pc, #68]	; (8020e9c <_sbrk+0x64>)
 8020e56:	4a12      	ldr	r2, [pc, #72]	; (8020ea0 <_sbrk+0x68>)
 8020e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8020e5a:	4b10      	ldr	r3, [pc, #64]	; (8020e9c <_sbrk+0x64>)
 8020e5c:	681a      	ldr	r2, [r3, #0]
 8020e5e:	687b      	ldr	r3, [r7, #4]
 8020e60:	4413      	add	r3, r2
 8020e62:	693a      	ldr	r2, [r7, #16]
 8020e64:	429a      	cmp	r2, r3
 8020e66:	d207      	bcs.n	8020e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8020e68:	f007 fa38 	bl	80282dc <__errno>
 8020e6c:	4603      	mov	r3, r0
 8020e6e:	220c      	movs	r2, #12
 8020e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8020e72:	f04f 33ff 	mov.w	r3, #4294967295
 8020e76:	e009      	b.n	8020e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8020e78:	4b08      	ldr	r3, [pc, #32]	; (8020e9c <_sbrk+0x64>)
 8020e7a:	681b      	ldr	r3, [r3, #0]
 8020e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8020e7e:	4b07      	ldr	r3, [pc, #28]	; (8020e9c <_sbrk+0x64>)
 8020e80:	681a      	ldr	r2, [r3, #0]
 8020e82:	687b      	ldr	r3, [r7, #4]
 8020e84:	4413      	add	r3, r2
 8020e86:	4a05      	ldr	r2, [pc, #20]	; (8020e9c <_sbrk+0x64>)
 8020e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8020e8a:	68fb      	ldr	r3, [r7, #12]
}
 8020e8c:	4618      	mov	r0, r3
 8020e8e:	3718      	adds	r7, #24
 8020e90:	46bd      	mov	sp, r7
 8020e92:	bd80      	pop	{r7, pc}
 8020e94:	20020000 	.word	0x20020000
 8020e98:	00000400 	.word	0x00000400
 8020e9c:	200000d8 	.word	0x200000d8
 8020ea0:	20000958 	.word	0x20000958

08020ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8020ea4:	b480      	push	{r7}
 8020ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8020ea8:	4b07      	ldr	r3, [pc, #28]	; (8020ec8 <SystemInit+0x24>)
 8020eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020eae:	4a06      	ldr	r2, [pc, #24]	; (8020ec8 <SystemInit+0x24>)
 8020eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8020eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8020eb8:	4b03      	ldr	r3, [pc, #12]	; (8020ec8 <SystemInit+0x24>)
 8020eba:	4a04      	ldr	r2, [pc, #16]	; (8020ecc <SystemInit+0x28>)
 8020ebc:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8020ebe:	bf00      	nop
 8020ec0:	46bd      	mov	sp, r7
 8020ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ec6:	4770      	bx	lr
 8020ec8:	e000ed00 	.word	0xe000ed00
 8020ecc:	08020000 	.word	0x08020000

08020ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8020ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8020f08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8020ed4:	480d      	ldr	r0, [pc, #52]	; (8020f0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8020ed6:	490e      	ldr	r1, [pc, #56]	; (8020f10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8020ed8:	4a0e      	ldr	r2, [pc, #56]	; (8020f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8020eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8020edc:	e002      	b.n	8020ee4 <LoopCopyDataInit>

08020ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8020ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8020ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8020ee2:	3304      	adds	r3, #4

08020ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8020ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8020ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8020ee8:	d3f9      	bcc.n	8020ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8020eea:	4a0b      	ldr	r2, [pc, #44]	; (8020f18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8020eec:	4c0b      	ldr	r4, [pc, #44]	; (8020f1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8020eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8020ef0:	e001      	b.n	8020ef6 <LoopFillZerobss>

08020ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8020ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8020ef4:	3204      	adds	r2, #4

08020ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8020ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8020ef8:	d3fb      	bcc.n	8020ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8020efa:	f7ff ffd3 	bl	8020ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8020efe:	f007 f9f3 	bl	80282e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8020f02:	f7ff fadd 	bl	80204c0 <main>
  bx  lr    
 8020f06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8020f08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8020f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8020f10:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8020f14:	08028534 	.word	0x08028534
  ldr r2, =_sbss
 8020f18:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8020f1c:	20000954 	.word	0x20000954

08020f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8020f20:	e7fe      	b.n	8020f20 <ADC_IRQHandler>
	...

08020f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020f24:	b580      	push	{r7, lr}
 8020f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8020f28:	4b0e      	ldr	r3, [pc, #56]	; (8020f64 <HAL_Init+0x40>)
 8020f2a:	681b      	ldr	r3, [r3, #0]
 8020f2c:	4a0d      	ldr	r2, [pc, #52]	; (8020f64 <HAL_Init+0x40>)
 8020f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8020f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8020f34:	4b0b      	ldr	r3, [pc, #44]	; (8020f64 <HAL_Init+0x40>)
 8020f36:	681b      	ldr	r3, [r3, #0]
 8020f38:	4a0a      	ldr	r2, [pc, #40]	; (8020f64 <HAL_Init+0x40>)
 8020f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8020f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8020f40:	4b08      	ldr	r3, [pc, #32]	; (8020f64 <HAL_Init+0x40>)
 8020f42:	681b      	ldr	r3, [r3, #0]
 8020f44:	4a07      	ldr	r2, [pc, #28]	; (8020f64 <HAL_Init+0x40>)
 8020f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8020f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020f4c:	2003      	movs	r0, #3
 8020f4e:	f000 f94f 	bl	80211f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8020f52:	2000      	movs	r0, #0
 8020f54:	f000 f808 	bl	8020f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8020f58:	f7ff fd40 	bl	80209dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8020f5c:	2300      	movs	r3, #0
}
 8020f5e:	4618      	mov	r0, r3
 8020f60:	bd80      	pop	{r7, pc}
 8020f62:	bf00      	nop
 8020f64:	40023c00 	.word	0x40023c00

08020f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020f68:	b580      	push	{r7, lr}
 8020f6a:	b082      	sub	sp, #8
 8020f6c:	af00      	add	r7, sp, #0
 8020f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8020f70:	4b12      	ldr	r3, [pc, #72]	; (8020fbc <HAL_InitTick+0x54>)
 8020f72:	681a      	ldr	r2, [r3, #0]
 8020f74:	4b12      	ldr	r3, [pc, #72]	; (8020fc0 <HAL_InitTick+0x58>)
 8020f76:	781b      	ldrb	r3, [r3, #0]
 8020f78:	4619      	mov	r1, r3
 8020f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8020f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8020f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8020f86:	4618      	mov	r0, r3
 8020f88:	f000 f967 	bl	802125a <HAL_SYSTICK_Config>
 8020f8c:	4603      	mov	r3, r0
 8020f8e:	2b00      	cmp	r3, #0
 8020f90:	d001      	beq.n	8020f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8020f92:	2301      	movs	r3, #1
 8020f94:	e00e      	b.n	8020fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020f96:	687b      	ldr	r3, [r7, #4]
 8020f98:	2b0f      	cmp	r3, #15
 8020f9a:	d80a      	bhi.n	8020fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020f9c:	2200      	movs	r2, #0
 8020f9e:	6879      	ldr	r1, [r7, #4]
 8020fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8020fa4:	f000 f92f 	bl	8021206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8020fa8:	4a06      	ldr	r2, [pc, #24]	; (8020fc4 <HAL_InitTick+0x5c>)
 8020faa:	687b      	ldr	r3, [r7, #4]
 8020fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8020fae:	2300      	movs	r3, #0
 8020fb0:	e000      	b.n	8020fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8020fb2:	2301      	movs	r3, #1
}
 8020fb4:	4618      	mov	r0, r3
 8020fb6:	3708      	adds	r7, #8
 8020fb8:	46bd      	mov	sp, r7
 8020fba:	bd80      	pop	{r7, pc}
 8020fbc:	20000028 	.word	0x20000028
 8020fc0:	20000030 	.word	0x20000030
 8020fc4:	2000002c 	.word	0x2000002c

08020fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020fc8:	b480      	push	{r7}
 8020fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8020fcc:	4b06      	ldr	r3, [pc, #24]	; (8020fe8 <HAL_IncTick+0x20>)
 8020fce:	781b      	ldrb	r3, [r3, #0]
 8020fd0:	461a      	mov	r2, r3
 8020fd2:	4b06      	ldr	r3, [pc, #24]	; (8020fec <HAL_IncTick+0x24>)
 8020fd4:	681b      	ldr	r3, [r3, #0]
 8020fd6:	4413      	add	r3, r2
 8020fd8:	4a04      	ldr	r2, [pc, #16]	; (8020fec <HAL_IncTick+0x24>)
 8020fda:	6013      	str	r3, [r2, #0]
}
 8020fdc:	bf00      	nop
 8020fde:	46bd      	mov	sp, r7
 8020fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fe4:	4770      	bx	lr
 8020fe6:	bf00      	nop
 8020fe8:	20000030 	.word	0x20000030
 8020fec:	20000264 	.word	0x20000264

08020ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020ff0:	b480      	push	{r7}
 8020ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8020ff4:	4b03      	ldr	r3, [pc, #12]	; (8021004 <HAL_GetTick+0x14>)
 8020ff6:	681b      	ldr	r3, [r3, #0]
}
 8020ff8:	4618      	mov	r0, r3
 8020ffa:	46bd      	mov	sp, r7
 8020ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021000:	4770      	bx	lr
 8021002:	bf00      	nop
 8021004:	20000264 	.word	0x20000264

08021008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8021008:	b580      	push	{r7, lr}
 802100a:	b084      	sub	sp, #16
 802100c:	af00      	add	r7, sp, #0
 802100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8021010:	f7ff ffee 	bl	8020ff0 <HAL_GetTick>
 8021014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8021016:	687b      	ldr	r3, [r7, #4]
 8021018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802101a:	68fb      	ldr	r3, [r7, #12]
 802101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021020:	d005      	beq.n	802102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8021022:	4b0a      	ldr	r3, [pc, #40]	; (802104c <HAL_Delay+0x44>)
 8021024:	781b      	ldrb	r3, [r3, #0]
 8021026:	461a      	mov	r2, r3
 8021028:	68fb      	ldr	r3, [r7, #12]
 802102a:	4413      	add	r3, r2
 802102c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 802102e:	bf00      	nop
 8021030:	f7ff ffde 	bl	8020ff0 <HAL_GetTick>
 8021034:	4602      	mov	r2, r0
 8021036:	68bb      	ldr	r3, [r7, #8]
 8021038:	1ad3      	subs	r3, r2, r3
 802103a:	68fa      	ldr	r2, [r7, #12]
 802103c:	429a      	cmp	r2, r3
 802103e:	d8f7      	bhi.n	8021030 <HAL_Delay+0x28>
  {
  }
}
 8021040:	bf00      	nop
 8021042:	bf00      	nop
 8021044:	3710      	adds	r7, #16
 8021046:	46bd      	mov	sp, r7
 8021048:	bd80      	pop	{r7, pc}
 802104a:	bf00      	nop
 802104c:	20000030 	.word	0x20000030

08021050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8021050:	b480      	push	{r7}
 8021052:	b085      	sub	sp, #20
 8021054:	af00      	add	r7, sp, #0
 8021056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8021058:	687b      	ldr	r3, [r7, #4]
 802105a:	f003 0307 	and.w	r3, r3, #7
 802105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8021060:	4b0c      	ldr	r3, [pc, #48]	; (8021094 <__NVIC_SetPriorityGrouping+0x44>)
 8021062:	68db      	ldr	r3, [r3, #12]
 8021064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8021066:	68ba      	ldr	r2, [r7, #8]
 8021068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802106c:	4013      	ands	r3, r2
 802106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8021070:	68fb      	ldr	r3, [r7, #12]
 8021072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8021074:	68bb      	ldr	r3, [r7, #8]
 8021076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8021078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 802107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8021080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8021082:	4a04      	ldr	r2, [pc, #16]	; (8021094 <__NVIC_SetPriorityGrouping+0x44>)
 8021084:	68bb      	ldr	r3, [r7, #8]
 8021086:	60d3      	str	r3, [r2, #12]
}
 8021088:	bf00      	nop
 802108a:	3714      	adds	r7, #20
 802108c:	46bd      	mov	sp, r7
 802108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021092:	4770      	bx	lr
 8021094:	e000ed00 	.word	0xe000ed00

08021098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8021098:	b480      	push	{r7}
 802109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802109c:	4b04      	ldr	r3, [pc, #16]	; (80210b0 <__NVIC_GetPriorityGrouping+0x18>)
 802109e:	68db      	ldr	r3, [r3, #12]
 80210a0:	0a1b      	lsrs	r3, r3, #8
 80210a2:	f003 0307 	and.w	r3, r3, #7
}
 80210a6:	4618      	mov	r0, r3
 80210a8:	46bd      	mov	sp, r7
 80210aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210ae:	4770      	bx	lr
 80210b0:	e000ed00 	.word	0xe000ed00

080210b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80210b4:	b480      	push	{r7}
 80210b6:	b083      	sub	sp, #12
 80210b8:	af00      	add	r7, sp, #0
 80210ba:	4603      	mov	r3, r0
 80210bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80210be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80210c2:	2b00      	cmp	r3, #0
 80210c4:	db0b      	blt.n	80210de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80210c6:	79fb      	ldrb	r3, [r7, #7]
 80210c8:	f003 021f 	and.w	r2, r3, #31
 80210cc:	4907      	ldr	r1, [pc, #28]	; (80210ec <__NVIC_EnableIRQ+0x38>)
 80210ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80210d2:	095b      	lsrs	r3, r3, #5
 80210d4:	2001      	movs	r0, #1
 80210d6:	fa00 f202 	lsl.w	r2, r0, r2
 80210da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80210de:	bf00      	nop
 80210e0:	370c      	adds	r7, #12
 80210e2:	46bd      	mov	sp, r7
 80210e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210e8:	4770      	bx	lr
 80210ea:	bf00      	nop
 80210ec:	e000e100 	.word	0xe000e100

080210f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80210f0:	b480      	push	{r7}
 80210f2:	b083      	sub	sp, #12
 80210f4:	af00      	add	r7, sp, #0
 80210f6:	4603      	mov	r3, r0
 80210f8:	6039      	str	r1, [r7, #0]
 80210fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80210fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021100:	2b00      	cmp	r3, #0
 8021102:	db0a      	blt.n	802111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021104:	683b      	ldr	r3, [r7, #0]
 8021106:	b2da      	uxtb	r2, r3
 8021108:	490c      	ldr	r1, [pc, #48]	; (802113c <__NVIC_SetPriority+0x4c>)
 802110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802110e:	0112      	lsls	r2, r2, #4
 8021110:	b2d2      	uxtb	r2, r2
 8021112:	440b      	add	r3, r1
 8021114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8021118:	e00a      	b.n	8021130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802111a:	683b      	ldr	r3, [r7, #0]
 802111c:	b2da      	uxtb	r2, r3
 802111e:	4908      	ldr	r1, [pc, #32]	; (8021140 <__NVIC_SetPriority+0x50>)
 8021120:	79fb      	ldrb	r3, [r7, #7]
 8021122:	f003 030f 	and.w	r3, r3, #15
 8021126:	3b04      	subs	r3, #4
 8021128:	0112      	lsls	r2, r2, #4
 802112a:	b2d2      	uxtb	r2, r2
 802112c:	440b      	add	r3, r1
 802112e:	761a      	strb	r2, [r3, #24]
}
 8021130:	bf00      	nop
 8021132:	370c      	adds	r7, #12
 8021134:	46bd      	mov	sp, r7
 8021136:	f85d 7b04 	ldr.w	r7, [sp], #4
 802113a:	4770      	bx	lr
 802113c:	e000e100 	.word	0xe000e100
 8021140:	e000ed00 	.word	0xe000ed00

08021144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8021144:	b480      	push	{r7}
 8021146:	b089      	sub	sp, #36	; 0x24
 8021148:	af00      	add	r7, sp, #0
 802114a:	60f8      	str	r0, [r7, #12]
 802114c:	60b9      	str	r1, [r7, #8]
 802114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8021150:	68fb      	ldr	r3, [r7, #12]
 8021152:	f003 0307 	and.w	r3, r3, #7
 8021156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8021158:	69fb      	ldr	r3, [r7, #28]
 802115a:	f1c3 0307 	rsb	r3, r3, #7
 802115e:	2b04      	cmp	r3, #4
 8021160:	bf28      	it	cs
 8021162:	2304      	movcs	r3, #4
 8021164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8021166:	69fb      	ldr	r3, [r7, #28]
 8021168:	3304      	adds	r3, #4
 802116a:	2b06      	cmp	r3, #6
 802116c:	d902      	bls.n	8021174 <NVIC_EncodePriority+0x30>
 802116e:	69fb      	ldr	r3, [r7, #28]
 8021170:	3b03      	subs	r3, #3
 8021172:	e000      	b.n	8021176 <NVIC_EncodePriority+0x32>
 8021174:	2300      	movs	r3, #0
 8021176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8021178:	f04f 32ff 	mov.w	r2, #4294967295
 802117c:	69bb      	ldr	r3, [r7, #24]
 802117e:	fa02 f303 	lsl.w	r3, r2, r3
 8021182:	43da      	mvns	r2, r3
 8021184:	68bb      	ldr	r3, [r7, #8]
 8021186:	401a      	ands	r2, r3
 8021188:	697b      	ldr	r3, [r7, #20]
 802118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802118c:	f04f 31ff 	mov.w	r1, #4294967295
 8021190:	697b      	ldr	r3, [r7, #20]
 8021192:	fa01 f303 	lsl.w	r3, r1, r3
 8021196:	43d9      	mvns	r1, r3
 8021198:	687b      	ldr	r3, [r7, #4]
 802119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802119c:	4313      	orrs	r3, r2
         );
}
 802119e:	4618      	mov	r0, r3
 80211a0:	3724      	adds	r7, #36	; 0x24
 80211a2:	46bd      	mov	sp, r7
 80211a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211a8:	4770      	bx	lr
	...

080211ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80211ac:	b580      	push	{r7, lr}
 80211ae:	b082      	sub	sp, #8
 80211b0:	af00      	add	r7, sp, #0
 80211b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80211b4:	687b      	ldr	r3, [r7, #4]
 80211b6:	3b01      	subs	r3, #1
 80211b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80211bc:	d301      	bcc.n	80211c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80211be:	2301      	movs	r3, #1
 80211c0:	e00f      	b.n	80211e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80211c2:	4a0a      	ldr	r2, [pc, #40]	; (80211ec <SysTick_Config+0x40>)
 80211c4:	687b      	ldr	r3, [r7, #4]
 80211c6:	3b01      	subs	r3, #1
 80211c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80211ca:	210f      	movs	r1, #15
 80211cc:	f04f 30ff 	mov.w	r0, #4294967295
 80211d0:	f7ff ff8e 	bl	80210f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80211d4:	4b05      	ldr	r3, [pc, #20]	; (80211ec <SysTick_Config+0x40>)
 80211d6:	2200      	movs	r2, #0
 80211d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80211da:	4b04      	ldr	r3, [pc, #16]	; (80211ec <SysTick_Config+0x40>)
 80211dc:	2207      	movs	r2, #7
 80211de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80211e0:	2300      	movs	r3, #0
}
 80211e2:	4618      	mov	r0, r3
 80211e4:	3708      	adds	r7, #8
 80211e6:	46bd      	mov	sp, r7
 80211e8:	bd80      	pop	{r7, pc}
 80211ea:	bf00      	nop
 80211ec:	e000e010 	.word	0xe000e010

080211f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80211f0:	b580      	push	{r7, lr}
 80211f2:	b082      	sub	sp, #8
 80211f4:	af00      	add	r7, sp, #0
 80211f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80211f8:	6878      	ldr	r0, [r7, #4]
 80211fa:	f7ff ff29 	bl	8021050 <__NVIC_SetPriorityGrouping>
}
 80211fe:	bf00      	nop
 8021200:	3708      	adds	r7, #8
 8021202:	46bd      	mov	sp, r7
 8021204:	bd80      	pop	{r7, pc}

08021206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8021206:	b580      	push	{r7, lr}
 8021208:	b086      	sub	sp, #24
 802120a:	af00      	add	r7, sp, #0
 802120c:	4603      	mov	r3, r0
 802120e:	60b9      	str	r1, [r7, #8]
 8021210:	607a      	str	r2, [r7, #4]
 8021212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8021214:	2300      	movs	r3, #0
 8021216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8021218:	f7ff ff3e 	bl	8021098 <__NVIC_GetPriorityGrouping>
 802121c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802121e:	687a      	ldr	r2, [r7, #4]
 8021220:	68b9      	ldr	r1, [r7, #8]
 8021222:	6978      	ldr	r0, [r7, #20]
 8021224:	f7ff ff8e 	bl	8021144 <NVIC_EncodePriority>
 8021228:	4602      	mov	r2, r0
 802122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802122e:	4611      	mov	r1, r2
 8021230:	4618      	mov	r0, r3
 8021232:	f7ff ff5d 	bl	80210f0 <__NVIC_SetPriority>
}
 8021236:	bf00      	nop
 8021238:	3718      	adds	r7, #24
 802123a:	46bd      	mov	sp, r7
 802123c:	bd80      	pop	{r7, pc}

0802123e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802123e:	b580      	push	{r7, lr}
 8021240:	b082      	sub	sp, #8
 8021242:	af00      	add	r7, sp, #0
 8021244:	4603      	mov	r3, r0
 8021246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8021248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802124c:	4618      	mov	r0, r3
 802124e:	f7ff ff31 	bl	80210b4 <__NVIC_EnableIRQ>
}
 8021252:	bf00      	nop
 8021254:	3708      	adds	r7, #8
 8021256:	46bd      	mov	sp, r7
 8021258:	bd80      	pop	{r7, pc}

0802125a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802125a:	b580      	push	{r7, lr}
 802125c:	b082      	sub	sp, #8
 802125e:	af00      	add	r7, sp, #0
 8021260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8021262:	6878      	ldr	r0, [r7, #4]
 8021264:	f7ff ffa2 	bl	80211ac <SysTick_Config>
 8021268:	4603      	mov	r3, r0
}
 802126a:	4618      	mov	r0, r3
 802126c:	3708      	adds	r7, #8
 802126e:	46bd      	mov	sp, r7
 8021270:	bd80      	pop	{r7, pc}
	...

08021274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8021274:	b480      	push	{r7}
 8021276:	b089      	sub	sp, #36	; 0x24
 8021278:	af00      	add	r7, sp, #0
 802127a:	6078      	str	r0, [r7, #4]
 802127c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802127e:	2300      	movs	r3, #0
 8021280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8021282:	2300      	movs	r3, #0
 8021284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8021286:	2300      	movs	r3, #0
 8021288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802128a:	2300      	movs	r3, #0
 802128c:	61fb      	str	r3, [r7, #28]
 802128e:	e16b      	b.n	8021568 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8021290:	2201      	movs	r2, #1
 8021292:	69fb      	ldr	r3, [r7, #28]
 8021294:	fa02 f303 	lsl.w	r3, r2, r3
 8021298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 802129a:	683b      	ldr	r3, [r7, #0]
 802129c:	681b      	ldr	r3, [r3, #0]
 802129e:	697a      	ldr	r2, [r7, #20]
 80212a0:	4013      	ands	r3, r2
 80212a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80212a4:	693a      	ldr	r2, [r7, #16]
 80212a6:	697b      	ldr	r3, [r7, #20]
 80212a8:	429a      	cmp	r2, r3
 80212aa:	f040 815a 	bne.w	8021562 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80212ae:	683b      	ldr	r3, [r7, #0]
 80212b0:	685b      	ldr	r3, [r3, #4]
 80212b2:	f003 0303 	and.w	r3, r3, #3
 80212b6:	2b01      	cmp	r3, #1
 80212b8:	d005      	beq.n	80212c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80212ba:	683b      	ldr	r3, [r7, #0]
 80212bc:	685b      	ldr	r3, [r3, #4]
 80212be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80212c2:	2b02      	cmp	r3, #2
 80212c4:	d130      	bne.n	8021328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80212c6:	687b      	ldr	r3, [r7, #4]
 80212c8:	689b      	ldr	r3, [r3, #8]
 80212ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80212cc:	69fb      	ldr	r3, [r7, #28]
 80212ce:	005b      	lsls	r3, r3, #1
 80212d0:	2203      	movs	r2, #3
 80212d2:	fa02 f303 	lsl.w	r3, r2, r3
 80212d6:	43db      	mvns	r3, r3
 80212d8:	69ba      	ldr	r2, [r7, #24]
 80212da:	4013      	ands	r3, r2
 80212dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80212de:	683b      	ldr	r3, [r7, #0]
 80212e0:	68da      	ldr	r2, [r3, #12]
 80212e2:	69fb      	ldr	r3, [r7, #28]
 80212e4:	005b      	lsls	r3, r3, #1
 80212e6:	fa02 f303 	lsl.w	r3, r2, r3
 80212ea:	69ba      	ldr	r2, [r7, #24]
 80212ec:	4313      	orrs	r3, r2
 80212ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80212f0:	687b      	ldr	r3, [r7, #4]
 80212f2:	69ba      	ldr	r2, [r7, #24]
 80212f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80212f6:	687b      	ldr	r3, [r7, #4]
 80212f8:	685b      	ldr	r3, [r3, #4]
 80212fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80212fc:	2201      	movs	r2, #1
 80212fe:	69fb      	ldr	r3, [r7, #28]
 8021300:	fa02 f303 	lsl.w	r3, r2, r3
 8021304:	43db      	mvns	r3, r3
 8021306:	69ba      	ldr	r2, [r7, #24]
 8021308:	4013      	ands	r3, r2
 802130a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 802130c:	683b      	ldr	r3, [r7, #0]
 802130e:	685b      	ldr	r3, [r3, #4]
 8021310:	091b      	lsrs	r3, r3, #4
 8021312:	f003 0201 	and.w	r2, r3, #1
 8021316:	69fb      	ldr	r3, [r7, #28]
 8021318:	fa02 f303 	lsl.w	r3, r2, r3
 802131c:	69ba      	ldr	r2, [r7, #24]
 802131e:	4313      	orrs	r3, r2
 8021320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8021322:	687b      	ldr	r3, [r7, #4]
 8021324:	69ba      	ldr	r2, [r7, #24]
 8021326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8021328:	683b      	ldr	r3, [r7, #0]
 802132a:	685b      	ldr	r3, [r3, #4]
 802132c:	f003 0303 	and.w	r3, r3, #3
 8021330:	2b03      	cmp	r3, #3
 8021332:	d017      	beq.n	8021364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8021334:	687b      	ldr	r3, [r7, #4]
 8021336:	68db      	ldr	r3, [r3, #12]
 8021338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802133a:	69fb      	ldr	r3, [r7, #28]
 802133c:	005b      	lsls	r3, r3, #1
 802133e:	2203      	movs	r2, #3
 8021340:	fa02 f303 	lsl.w	r3, r2, r3
 8021344:	43db      	mvns	r3, r3
 8021346:	69ba      	ldr	r2, [r7, #24]
 8021348:	4013      	ands	r3, r2
 802134a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 802134c:	683b      	ldr	r3, [r7, #0]
 802134e:	689a      	ldr	r2, [r3, #8]
 8021350:	69fb      	ldr	r3, [r7, #28]
 8021352:	005b      	lsls	r3, r3, #1
 8021354:	fa02 f303 	lsl.w	r3, r2, r3
 8021358:	69ba      	ldr	r2, [r7, #24]
 802135a:	4313      	orrs	r3, r2
 802135c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 802135e:	687b      	ldr	r3, [r7, #4]
 8021360:	69ba      	ldr	r2, [r7, #24]
 8021362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8021364:	683b      	ldr	r3, [r7, #0]
 8021366:	685b      	ldr	r3, [r3, #4]
 8021368:	f003 0303 	and.w	r3, r3, #3
 802136c:	2b02      	cmp	r3, #2
 802136e:	d123      	bne.n	80213b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8021370:	69fb      	ldr	r3, [r7, #28]
 8021372:	08da      	lsrs	r2, r3, #3
 8021374:	687b      	ldr	r3, [r7, #4]
 8021376:	3208      	adds	r2, #8
 8021378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802137c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 802137e:	69fb      	ldr	r3, [r7, #28]
 8021380:	f003 0307 	and.w	r3, r3, #7
 8021384:	009b      	lsls	r3, r3, #2
 8021386:	220f      	movs	r2, #15
 8021388:	fa02 f303 	lsl.w	r3, r2, r3
 802138c:	43db      	mvns	r3, r3
 802138e:	69ba      	ldr	r2, [r7, #24]
 8021390:	4013      	ands	r3, r2
 8021392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8021394:	683b      	ldr	r3, [r7, #0]
 8021396:	691a      	ldr	r2, [r3, #16]
 8021398:	69fb      	ldr	r3, [r7, #28]
 802139a:	f003 0307 	and.w	r3, r3, #7
 802139e:	009b      	lsls	r3, r3, #2
 80213a0:	fa02 f303 	lsl.w	r3, r2, r3
 80213a4:	69ba      	ldr	r2, [r7, #24]
 80213a6:	4313      	orrs	r3, r2
 80213a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80213aa:	69fb      	ldr	r3, [r7, #28]
 80213ac:	08da      	lsrs	r2, r3, #3
 80213ae:	687b      	ldr	r3, [r7, #4]
 80213b0:	3208      	adds	r2, #8
 80213b2:	69b9      	ldr	r1, [r7, #24]
 80213b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80213b8:	687b      	ldr	r3, [r7, #4]
 80213ba:	681b      	ldr	r3, [r3, #0]
 80213bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80213be:	69fb      	ldr	r3, [r7, #28]
 80213c0:	005b      	lsls	r3, r3, #1
 80213c2:	2203      	movs	r2, #3
 80213c4:	fa02 f303 	lsl.w	r3, r2, r3
 80213c8:	43db      	mvns	r3, r3
 80213ca:	69ba      	ldr	r2, [r7, #24]
 80213cc:	4013      	ands	r3, r2
 80213ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80213d0:	683b      	ldr	r3, [r7, #0]
 80213d2:	685b      	ldr	r3, [r3, #4]
 80213d4:	f003 0203 	and.w	r2, r3, #3
 80213d8:	69fb      	ldr	r3, [r7, #28]
 80213da:	005b      	lsls	r3, r3, #1
 80213dc:	fa02 f303 	lsl.w	r3, r2, r3
 80213e0:	69ba      	ldr	r2, [r7, #24]
 80213e2:	4313      	orrs	r3, r2
 80213e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80213e6:	687b      	ldr	r3, [r7, #4]
 80213e8:	69ba      	ldr	r2, [r7, #24]
 80213ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80213ec:	683b      	ldr	r3, [r7, #0]
 80213ee:	685b      	ldr	r3, [r3, #4]
 80213f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80213f4:	2b00      	cmp	r3, #0
 80213f6:	f000 80b4 	beq.w	8021562 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80213fa:	2300      	movs	r3, #0
 80213fc:	60fb      	str	r3, [r7, #12]
 80213fe:	4b60      	ldr	r3, [pc, #384]	; (8021580 <HAL_GPIO_Init+0x30c>)
 8021400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021402:	4a5f      	ldr	r2, [pc, #380]	; (8021580 <HAL_GPIO_Init+0x30c>)
 8021404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021408:	6453      	str	r3, [r2, #68]	; 0x44
 802140a:	4b5d      	ldr	r3, [pc, #372]	; (8021580 <HAL_GPIO_Init+0x30c>)
 802140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802140e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021412:	60fb      	str	r3, [r7, #12]
 8021414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8021416:	4a5b      	ldr	r2, [pc, #364]	; (8021584 <HAL_GPIO_Init+0x310>)
 8021418:	69fb      	ldr	r3, [r7, #28]
 802141a:	089b      	lsrs	r3, r3, #2
 802141c:	3302      	adds	r3, #2
 802141e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8021424:	69fb      	ldr	r3, [r7, #28]
 8021426:	f003 0303 	and.w	r3, r3, #3
 802142a:	009b      	lsls	r3, r3, #2
 802142c:	220f      	movs	r2, #15
 802142e:	fa02 f303 	lsl.w	r3, r2, r3
 8021432:	43db      	mvns	r3, r3
 8021434:	69ba      	ldr	r2, [r7, #24]
 8021436:	4013      	ands	r3, r2
 8021438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 802143a:	687b      	ldr	r3, [r7, #4]
 802143c:	4a52      	ldr	r2, [pc, #328]	; (8021588 <HAL_GPIO_Init+0x314>)
 802143e:	4293      	cmp	r3, r2
 8021440:	d02b      	beq.n	802149a <HAL_GPIO_Init+0x226>
 8021442:	687b      	ldr	r3, [r7, #4]
 8021444:	4a51      	ldr	r2, [pc, #324]	; (802158c <HAL_GPIO_Init+0x318>)
 8021446:	4293      	cmp	r3, r2
 8021448:	d025      	beq.n	8021496 <HAL_GPIO_Init+0x222>
 802144a:	687b      	ldr	r3, [r7, #4]
 802144c:	4a50      	ldr	r2, [pc, #320]	; (8021590 <HAL_GPIO_Init+0x31c>)
 802144e:	4293      	cmp	r3, r2
 8021450:	d01f      	beq.n	8021492 <HAL_GPIO_Init+0x21e>
 8021452:	687b      	ldr	r3, [r7, #4]
 8021454:	4a4f      	ldr	r2, [pc, #316]	; (8021594 <HAL_GPIO_Init+0x320>)
 8021456:	4293      	cmp	r3, r2
 8021458:	d019      	beq.n	802148e <HAL_GPIO_Init+0x21a>
 802145a:	687b      	ldr	r3, [r7, #4]
 802145c:	4a4e      	ldr	r2, [pc, #312]	; (8021598 <HAL_GPIO_Init+0x324>)
 802145e:	4293      	cmp	r3, r2
 8021460:	d013      	beq.n	802148a <HAL_GPIO_Init+0x216>
 8021462:	687b      	ldr	r3, [r7, #4]
 8021464:	4a4d      	ldr	r2, [pc, #308]	; (802159c <HAL_GPIO_Init+0x328>)
 8021466:	4293      	cmp	r3, r2
 8021468:	d00d      	beq.n	8021486 <HAL_GPIO_Init+0x212>
 802146a:	687b      	ldr	r3, [r7, #4]
 802146c:	4a4c      	ldr	r2, [pc, #304]	; (80215a0 <HAL_GPIO_Init+0x32c>)
 802146e:	4293      	cmp	r3, r2
 8021470:	d007      	beq.n	8021482 <HAL_GPIO_Init+0x20e>
 8021472:	687b      	ldr	r3, [r7, #4]
 8021474:	4a4b      	ldr	r2, [pc, #300]	; (80215a4 <HAL_GPIO_Init+0x330>)
 8021476:	4293      	cmp	r3, r2
 8021478:	d101      	bne.n	802147e <HAL_GPIO_Init+0x20a>
 802147a:	2307      	movs	r3, #7
 802147c:	e00e      	b.n	802149c <HAL_GPIO_Init+0x228>
 802147e:	2308      	movs	r3, #8
 8021480:	e00c      	b.n	802149c <HAL_GPIO_Init+0x228>
 8021482:	2306      	movs	r3, #6
 8021484:	e00a      	b.n	802149c <HAL_GPIO_Init+0x228>
 8021486:	2305      	movs	r3, #5
 8021488:	e008      	b.n	802149c <HAL_GPIO_Init+0x228>
 802148a:	2304      	movs	r3, #4
 802148c:	e006      	b.n	802149c <HAL_GPIO_Init+0x228>
 802148e:	2303      	movs	r3, #3
 8021490:	e004      	b.n	802149c <HAL_GPIO_Init+0x228>
 8021492:	2302      	movs	r3, #2
 8021494:	e002      	b.n	802149c <HAL_GPIO_Init+0x228>
 8021496:	2301      	movs	r3, #1
 8021498:	e000      	b.n	802149c <HAL_GPIO_Init+0x228>
 802149a:	2300      	movs	r3, #0
 802149c:	69fa      	ldr	r2, [r7, #28]
 802149e:	f002 0203 	and.w	r2, r2, #3
 80214a2:	0092      	lsls	r2, r2, #2
 80214a4:	4093      	lsls	r3, r2
 80214a6:	69ba      	ldr	r2, [r7, #24]
 80214a8:	4313      	orrs	r3, r2
 80214aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80214ac:	4935      	ldr	r1, [pc, #212]	; (8021584 <HAL_GPIO_Init+0x310>)
 80214ae:	69fb      	ldr	r3, [r7, #28]
 80214b0:	089b      	lsrs	r3, r3, #2
 80214b2:	3302      	adds	r3, #2
 80214b4:	69ba      	ldr	r2, [r7, #24]
 80214b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80214ba:	4b3b      	ldr	r3, [pc, #236]	; (80215a8 <HAL_GPIO_Init+0x334>)
 80214bc:	681b      	ldr	r3, [r3, #0]
 80214be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80214c0:	693b      	ldr	r3, [r7, #16]
 80214c2:	43db      	mvns	r3, r3
 80214c4:	69ba      	ldr	r2, [r7, #24]
 80214c6:	4013      	ands	r3, r2
 80214c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80214ca:	683b      	ldr	r3, [r7, #0]
 80214cc:	685b      	ldr	r3, [r3, #4]
 80214ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80214d2:	2b00      	cmp	r3, #0
 80214d4:	d003      	beq.n	80214de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80214d6:	69ba      	ldr	r2, [r7, #24]
 80214d8:	693b      	ldr	r3, [r7, #16]
 80214da:	4313      	orrs	r3, r2
 80214dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80214de:	4a32      	ldr	r2, [pc, #200]	; (80215a8 <HAL_GPIO_Init+0x334>)
 80214e0:	69bb      	ldr	r3, [r7, #24]
 80214e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80214e4:	4b30      	ldr	r3, [pc, #192]	; (80215a8 <HAL_GPIO_Init+0x334>)
 80214e6:	685b      	ldr	r3, [r3, #4]
 80214e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80214ea:	693b      	ldr	r3, [r7, #16]
 80214ec:	43db      	mvns	r3, r3
 80214ee:	69ba      	ldr	r2, [r7, #24]
 80214f0:	4013      	ands	r3, r2
 80214f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80214f4:	683b      	ldr	r3, [r7, #0]
 80214f6:	685b      	ldr	r3, [r3, #4]
 80214f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80214fc:	2b00      	cmp	r3, #0
 80214fe:	d003      	beq.n	8021508 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8021500:	69ba      	ldr	r2, [r7, #24]
 8021502:	693b      	ldr	r3, [r7, #16]
 8021504:	4313      	orrs	r3, r2
 8021506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8021508:	4a27      	ldr	r2, [pc, #156]	; (80215a8 <HAL_GPIO_Init+0x334>)
 802150a:	69bb      	ldr	r3, [r7, #24]
 802150c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802150e:	4b26      	ldr	r3, [pc, #152]	; (80215a8 <HAL_GPIO_Init+0x334>)
 8021510:	689b      	ldr	r3, [r3, #8]
 8021512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8021514:	693b      	ldr	r3, [r7, #16]
 8021516:	43db      	mvns	r3, r3
 8021518:	69ba      	ldr	r2, [r7, #24]
 802151a:	4013      	ands	r3, r2
 802151c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802151e:	683b      	ldr	r3, [r7, #0]
 8021520:	685b      	ldr	r3, [r3, #4]
 8021522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021526:	2b00      	cmp	r3, #0
 8021528:	d003      	beq.n	8021532 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 802152a:	69ba      	ldr	r2, [r7, #24]
 802152c:	693b      	ldr	r3, [r7, #16]
 802152e:	4313      	orrs	r3, r2
 8021530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8021532:	4a1d      	ldr	r2, [pc, #116]	; (80215a8 <HAL_GPIO_Init+0x334>)
 8021534:	69bb      	ldr	r3, [r7, #24]
 8021536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8021538:	4b1b      	ldr	r3, [pc, #108]	; (80215a8 <HAL_GPIO_Init+0x334>)
 802153a:	68db      	ldr	r3, [r3, #12]
 802153c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802153e:	693b      	ldr	r3, [r7, #16]
 8021540:	43db      	mvns	r3, r3
 8021542:	69ba      	ldr	r2, [r7, #24]
 8021544:	4013      	ands	r3, r2
 8021546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8021548:	683b      	ldr	r3, [r7, #0]
 802154a:	685b      	ldr	r3, [r3, #4]
 802154c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8021550:	2b00      	cmp	r3, #0
 8021552:	d003      	beq.n	802155c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8021554:	69ba      	ldr	r2, [r7, #24]
 8021556:	693b      	ldr	r3, [r7, #16]
 8021558:	4313      	orrs	r3, r2
 802155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 802155c:	4a12      	ldr	r2, [pc, #72]	; (80215a8 <HAL_GPIO_Init+0x334>)
 802155e:	69bb      	ldr	r3, [r7, #24]
 8021560:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8021562:	69fb      	ldr	r3, [r7, #28]
 8021564:	3301      	adds	r3, #1
 8021566:	61fb      	str	r3, [r7, #28]
 8021568:	69fb      	ldr	r3, [r7, #28]
 802156a:	2b0f      	cmp	r3, #15
 802156c:	f67f ae90 	bls.w	8021290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8021570:	bf00      	nop
 8021572:	bf00      	nop
 8021574:	3724      	adds	r7, #36	; 0x24
 8021576:	46bd      	mov	sp, r7
 8021578:	f85d 7b04 	ldr.w	r7, [sp], #4
 802157c:	4770      	bx	lr
 802157e:	bf00      	nop
 8021580:	40023800 	.word	0x40023800
 8021584:	40013800 	.word	0x40013800
 8021588:	40020000 	.word	0x40020000
 802158c:	40020400 	.word	0x40020400
 8021590:	40020800 	.word	0x40020800
 8021594:	40020c00 	.word	0x40020c00
 8021598:	40021000 	.word	0x40021000
 802159c:	40021400 	.word	0x40021400
 80215a0:	40021800 	.word	0x40021800
 80215a4:	40021c00 	.word	0x40021c00
 80215a8:	40013c00 	.word	0x40013c00

080215ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80215ac:	b480      	push	{r7}
 80215ae:	b083      	sub	sp, #12
 80215b0:	af00      	add	r7, sp, #0
 80215b2:	6078      	str	r0, [r7, #4]
 80215b4:	460b      	mov	r3, r1
 80215b6:	807b      	strh	r3, [r7, #2]
 80215b8:	4613      	mov	r3, r2
 80215ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80215bc:	787b      	ldrb	r3, [r7, #1]
 80215be:	2b00      	cmp	r3, #0
 80215c0:	d003      	beq.n	80215ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80215c2:	887a      	ldrh	r2, [r7, #2]
 80215c4:	687b      	ldr	r3, [r7, #4]
 80215c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80215c8:	e003      	b.n	80215d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80215ca:	887b      	ldrh	r3, [r7, #2]
 80215cc:	041a      	lsls	r2, r3, #16
 80215ce:	687b      	ldr	r3, [r7, #4]
 80215d0:	619a      	str	r2, [r3, #24]
}
 80215d2:	bf00      	nop
 80215d4:	370c      	adds	r7, #12
 80215d6:	46bd      	mov	sp, r7
 80215d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215dc:	4770      	bx	lr
	...

080215e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80215e0:	b580      	push	{r7, lr}
 80215e2:	b082      	sub	sp, #8
 80215e4:	af00      	add	r7, sp, #0
 80215e6:	4603      	mov	r3, r0
 80215e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80215ea:	4b08      	ldr	r3, [pc, #32]	; (802160c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80215ec:	695a      	ldr	r2, [r3, #20]
 80215ee:	88fb      	ldrh	r3, [r7, #6]
 80215f0:	4013      	ands	r3, r2
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	d006      	beq.n	8021604 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80215f6:	4a05      	ldr	r2, [pc, #20]	; (802160c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80215f8:	88fb      	ldrh	r3, [r7, #6]
 80215fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80215fc:	88fb      	ldrh	r3, [r7, #6]
 80215fe:	4618      	mov	r0, r3
 8021600:	f000 f806 	bl	8021610 <HAL_GPIO_EXTI_Callback>
  }
}
 8021604:	bf00      	nop
 8021606:	3708      	adds	r7, #8
 8021608:	46bd      	mov	sp, r7
 802160a:	bd80      	pop	{r7, pc}
 802160c:	40013c00 	.word	0x40013c00

08021610 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8021610:	b480      	push	{r7}
 8021612:	b083      	sub	sp, #12
 8021614:	af00      	add	r7, sp, #0
 8021616:	4603      	mov	r3, r0
 8021618:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 802161a:	bf00      	nop
 802161c:	370c      	adds	r7, #12
 802161e:	46bd      	mov	sp, r7
 8021620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021624:	4770      	bx	lr

08021626 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8021626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021628:	b08f      	sub	sp, #60	; 0x3c
 802162a:	af0a      	add	r7, sp, #40	; 0x28
 802162c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 802162e:	687b      	ldr	r3, [r7, #4]
 8021630:	2b00      	cmp	r3, #0
 8021632:	d101      	bne.n	8021638 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8021634:	2301      	movs	r3, #1
 8021636:	e054      	b.n	80216e2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8021638:	687b      	ldr	r3, [r7, #4]
 802163a:	681b      	ldr	r3, [r3, #0]
 802163c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 802163e:	687b      	ldr	r3, [r7, #4]
 8021640:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8021644:	b2db      	uxtb	r3, r3
 8021646:	2b00      	cmp	r3, #0
 8021648:	d106      	bne.n	8021658 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 802164a:	687b      	ldr	r3, [r7, #4]
 802164c:	2200      	movs	r2, #0
 802164e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8021652:	6878      	ldr	r0, [r7, #4]
 8021654:	f006 fb98 	bl	8027d88 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8021658:	687b      	ldr	r3, [r7, #4]
 802165a:	2203      	movs	r2, #3
 802165c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8021660:	68fb      	ldr	r3, [r7, #12]
 8021662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021668:	2b00      	cmp	r3, #0
 802166a:	d102      	bne.n	8021672 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 802166c:	687b      	ldr	r3, [r7, #4]
 802166e:	2200      	movs	r2, #0
 8021670:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8021672:	687b      	ldr	r3, [r7, #4]
 8021674:	681b      	ldr	r3, [r3, #0]
 8021676:	4618      	mov	r0, r3
 8021678:	f003 fcee 	bl	8025058 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 802167c:	687b      	ldr	r3, [r7, #4]
 802167e:	681b      	ldr	r3, [r3, #0]
 8021680:	603b      	str	r3, [r7, #0]
 8021682:	687e      	ldr	r6, [r7, #4]
 8021684:	466d      	mov	r5, sp
 8021686:	f106 0410 	add.w	r4, r6, #16
 802168a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802168c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802168e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021692:	e894 0003 	ldmia.w	r4, {r0, r1}
 8021696:	e885 0003 	stmia.w	r5, {r0, r1}
 802169a:	1d33      	adds	r3, r6, #4
 802169c:	cb0e      	ldmia	r3, {r1, r2, r3}
 802169e:	6838      	ldr	r0, [r7, #0]
 80216a0:	f003 fc68 	bl	8024f74 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80216a4:	687b      	ldr	r3, [r7, #4]
 80216a6:	681b      	ldr	r3, [r3, #0]
 80216a8:	2101      	movs	r1, #1
 80216aa:	4618      	mov	r0, r3
 80216ac:	f003 fce5 	bl	802507a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80216b0:	687b      	ldr	r3, [r7, #4]
 80216b2:	681b      	ldr	r3, [r3, #0]
 80216b4:	603b      	str	r3, [r7, #0]
 80216b6:	687e      	ldr	r6, [r7, #4]
 80216b8:	466d      	mov	r5, sp
 80216ba:	f106 0410 	add.w	r4, r6, #16
 80216be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80216c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80216c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80216c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80216c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80216ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80216ce:	1d33      	adds	r3, r6, #4
 80216d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80216d2:	6838      	ldr	r0, [r7, #0]
 80216d4:	f003 fe4c 	bl	8025370 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80216d8:	687b      	ldr	r3, [r7, #4]
 80216da:	2201      	movs	r2, #1
 80216dc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80216e0:	2300      	movs	r3, #0
}
 80216e2:	4618      	mov	r0, r3
 80216e4:	3714      	adds	r7, #20
 80216e6:	46bd      	mov	sp, r7
 80216e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080216ea <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80216ea:	b590      	push	{r4, r7, lr}
 80216ec:	b089      	sub	sp, #36	; 0x24
 80216ee:	af04      	add	r7, sp, #16
 80216f0:	6078      	str	r0, [r7, #4]
 80216f2:	4608      	mov	r0, r1
 80216f4:	4611      	mov	r1, r2
 80216f6:	461a      	mov	r2, r3
 80216f8:	4603      	mov	r3, r0
 80216fa:	70fb      	strb	r3, [r7, #3]
 80216fc:	460b      	mov	r3, r1
 80216fe:	70bb      	strb	r3, [r7, #2]
 8021700:	4613      	mov	r3, r2
 8021702:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8021704:	687b      	ldr	r3, [r7, #4]
 8021706:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 802170a:	2b01      	cmp	r3, #1
 802170c:	d101      	bne.n	8021712 <HAL_HCD_HC_Init+0x28>
 802170e:	2302      	movs	r3, #2
 8021710:	e076      	b.n	8021800 <HAL_HCD_HC_Init+0x116>
 8021712:	687b      	ldr	r3, [r7, #4]
 8021714:	2201      	movs	r2, #1
 8021716:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 802171a:	78fb      	ldrb	r3, [r7, #3]
 802171c:	687a      	ldr	r2, [r7, #4]
 802171e:	212c      	movs	r1, #44	; 0x2c
 8021720:	fb01 f303 	mul.w	r3, r1, r3
 8021724:	4413      	add	r3, r2
 8021726:	333d      	adds	r3, #61	; 0x3d
 8021728:	2200      	movs	r2, #0
 802172a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 802172c:	78fb      	ldrb	r3, [r7, #3]
 802172e:	687a      	ldr	r2, [r7, #4]
 8021730:	212c      	movs	r1, #44	; 0x2c
 8021732:	fb01 f303 	mul.w	r3, r1, r3
 8021736:	4413      	add	r3, r2
 8021738:	3338      	adds	r3, #56	; 0x38
 802173a:	787a      	ldrb	r2, [r7, #1]
 802173c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 802173e:	78fb      	ldrb	r3, [r7, #3]
 8021740:	687a      	ldr	r2, [r7, #4]
 8021742:	212c      	movs	r1, #44	; 0x2c
 8021744:	fb01 f303 	mul.w	r3, r1, r3
 8021748:	4413      	add	r3, r2
 802174a:	3340      	adds	r3, #64	; 0x40
 802174c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 802174e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8021750:	78fb      	ldrb	r3, [r7, #3]
 8021752:	687a      	ldr	r2, [r7, #4]
 8021754:	212c      	movs	r1, #44	; 0x2c
 8021756:	fb01 f303 	mul.w	r3, r1, r3
 802175a:	4413      	add	r3, r2
 802175c:	3339      	adds	r3, #57	; 0x39
 802175e:	78fa      	ldrb	r2, [r7, #3]
 8021760:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8021762:	78fb      	ldrb	r3, [r7, #3]
 8021764:	687a      	ldr	r2, [r7, #4]
 8021766:	212c      	movs	r1, #44	; 0x2c
 8021768:	fb01 f303 	mul.w	r3, r1, r3
 802176c:	4413      	add	r3, r2
 802176e:	333f      	adds	r3, #63	; 0x3f
 8021770:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8021774:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8021776:	78fb      	ldrb	r3, [r7, #3]
 8021778:	78ba      	ldrb	r2, [r7, #2]
 802177a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 802177e:	b2d0      	uxtb	r0, r2
 8021780:	687a      	ldr	r2, [r7, #4]
 8021782:	212c      	movs	r1, #44	; 0x2c
 8021784:	fb01 f303 	mul.w	r3, r1, r3
 8021788:	4413      	add	r3, r2
 802178a:	333a      	adds	r3, #58	; 0x3a
 802178c:	4602      	mov	r2, r0
 802178e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8021790:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8021794:	2b00      	cmp	r3, #0
 8021796:	da09      	bge.n	80217ac <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8021798:	78fb      	ldrb	r3, [r7, #3]
 802179a:	687a      	ldr	r2, [r7, #4]
 802179c:	212c      	movs	r1, #44	; 0x2c
 802179e:	fb01 f303 	mul.w	r3, r1, r3
 80217a2:	4413      	add	r3, r2
 80217a4:	333b      	adds	r3, #59	; 0x3b
 80217a6:	2201      	movs	r2, #1
 80217a8:	701a      	strb	r2, [r3, #0]
 80217aa:	e008      	b.n	80217be <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80217ac:	78fb      	ldrb	r3, [r7, #3]
 80217ae:	687a      	ldr	r2, [r7, #4]
 80217b0:	212c      	movs	r1, #44	; 0x2c
 80217b2:	fb01 f303 	mul.w	r3, r1, r3
 80217b6:	4413      	add	r3, r2
 80217b8:	333b      	adds	r3, #59	; 0x3b
 80217ba:	2200      	movs	r2, #0
 80217bc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80217be:	78fb      	ldrb	r3, [r7, #3]
 80217c0:	687a      	ldr	r2, [r7, #4]
 80217c2:	212c      	movs	r1, #44	; 0x2c
 80217c4:	fb01 f303 	mul.w	r3, r1, r3
 80217c8:	4413      	add	r3, r2
 80217ca:	333c      	adds	r3, #60	; 0x3c
 80217cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80217d0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80217d2:	687b      	ldr	r3, [r7, #4]
 80217d4:	6818      	ldr	r0, [r3, #0]
 80217d6:	787c      	ldrb	r4, [r7, #1]
 80217d8:	78ba      	ldrb	r2, [r7, #2]
 80217da:	78f9      	ldrb	r1, [r7, #3]
 80217dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80217de:	9302      	str	r3, [sp, #8]
 80217e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80217e4:	9301      	str	r3, [sp, #4]
 80217e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80217ea:	9300      	str	r3, [sp, #0]
 80217ec:	4623      	mov	r3, r4
 80217ee:	f003 ff39 	bl	8025664 <USB_HC_Init>
 80217f2:	4603      	mov	r3, r0
 80217f4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80217f6:	687b      	ldr	r3, [r7, #4]
 80217f8:	2200      	movs	r2, #0
 80217fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80217fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8021800:	4618      	mov	r0, r3
 8021802:	3714      	adds	r7, #20
 8021804:	46bd      	mov	sp, r7
 8021806:	bd90      	pop	{r4, r7, pc}

08021808 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8021808:	b580      	push	{r7, lr}
 802180a:	b084      	sub	sp, #16
 802180c:	af00      	add	r7, sp, #0
 802180e:	6078      	str	r0, [r7, #4]
 8021810:	460b      	mov	r3, r1
 8021812:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8021814:	2300      	movs	r3, #0
 8021816:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8021818:	687b      	ldr	r3, [r7, #4]
 802181a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 802181e:	2b01      	cmp	r3, #1
 8021820:	d101      	bne.n	8021826 <HAL_HCD_HC_Halt+0x1e>
 8021822:	2302      	movs	r3, #2
 8021824:	e00f      	b.n	8021846 <HAL_HCD_HC_Halt+0x3e>
 8021826:	687b      	ldr	r3, [r7, #4]
 8021828:	2201      	movs	r2, #1
 802182a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802182e:	687b      	ldr	r3, [r7, #4]
 8021830:	681b      	ldr	r3, [r3, #0]
 8021832:	78fa      	ldrb	r2, [r7, #3]
 8021834:	4611      	mov	r1, r2
 8021836:	4618      	mov	r0, r3
 8021838:	f004 f975 	bl	8025b26 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 802183c:	687b      	ldr	r3, [r7, #4]
 802183e:	2200      	movs	r2, #0
 8021840:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8021844:	7bfb      	ldrb	r3, [r7, #15]
}
 8021846:	4618      	mov	r0, r3
 8021848:	3710      	adds	r7, #16
 802184a:	46bd      	mov	sp, r7
 802184c:	bd80      	pop	{r7, pc}
	...

08021850 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8021850:	b580      	push	{r7, lr}
 8021852:	b082      	sub	sp, #8
 8021854:	af00      	add	r7, sp, #0
 8021856:	6078      	str	r0, [r7, #4]
 8021858:	4608      	mov	r0, r1
 802185a:	4611      	mov	r1, r2
 802185c:	461a      	mov	r2, r3
 802185e:	4603      	mov	r3, r0
 8021860:	70fb      	strb	r3, [r7, #3]
 8021862:	460b      	mov	r3, r1
 8021864:	70bb      	strb	r3, [r7, #2]
 8021866:	4613      	mov	r3, r2
 8021868:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 802186a:	78fb      	ldrb	r3, [r7, #3]
 802186c:	687a      	ldr	r2, [r7, #4]
 802186e:	212c      	movs	r1, #44	; 0x2c
 8021870:	fb01 f303 	mul.w	r3, r1, r3
 8021874:	4413      	add	r3, r2
 8021876:	333b      	adds	r3, #59	; 0x3b
 8021878:	78ba      	ldrb	r2, [r7, #2]
 802187a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 802187c:	78fb      	ldrb	r3, [r7, #3]
 802187e:	687a      	ldr	r2, [r7, #4]
 8021880:	212c      	movs	r1, #44	; 0x2c
 8021882:	fb01 f303 	mul.w	r3, r1, r3
 8021886:	4413      	add	r3, r2
 8021888:	333f      	adds	r3, #63	; 0x3f
 802188a:	787a      	ldrb	r2, [r7, #1]
 802188c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 802188e:	7c3b      	ldrb	r3, [r7, #16]
 8021890:	2b00      	cmp	r3, #0
 8021892:	d112      	bne.n	80218ba <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8021894:	78fb      	ldrb	r3, [r7, #3]
 8021896:	687a      	ldr	r2, [r7, #4]
 8021898:	212c      	movs	r1, #44	; 0x2c
 802189a:	fb01 f303 	mul.w	r3, r1, r3
 802189e:	4413      	add	r3, r2
 80218a0:	3342      	adds	r3, #66	; 0x42
 80218a2:	2203      	movs	r2, #3
 80218a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80218a6:	78fb      	ldrb	r3, [r7, #3]
 80218a8:	687a      	ldr	r2, [r7, #4]
 80218aa:	212c      	movs	r1, #44	; 0x2c
 80218ac:	fb01 f303 	mul.w	r3, r1, r3
 80218b0:	4413      	add	r3, r2
 80218b2:	333d      	adds	r3, #61	; 0x3d
 80218b4:	7f3a      	ldrb	r2, [r7, #28]
 80218b6:	701a      	strb	r2, [r3, #0]
 80218b8:	e008      	b.n	80218cc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80218ba:	78fb      	ldrb	r3, [r7, #3]
 80218bc:	687a      	ldr	r2, [r7, #4]
 80218be:	212c      	movs	r1, #44	; 0x2c
 80218c0:	fb01 f303 	mul.w	r3, r1, r3
 80218c4:	4413      	add	r3, r2
 80218c6:	3342      	adds	r3, #66	; 0x42
 80218c8:	2202      	movs	r2, #2
 80218ca:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80218cc:	787b      	ldrb	r3, [r7, #1]
 80218ce:	2b03      	cmp	r3, #3
 80218d0:	f200 80c6 	bhi.w	8021a60 <HAL_HCD_HC_SubmitRequest+0x210>
 80218d4:	a201      	add	r2, pc, #4	; (adr r2, 80218dc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80218d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80218da:	bf00      	nop
 80218dc:	080218ed 	.word	0x080218ed
 80218e0:	08021a4d 	.word	0x08021a4d
 80218e4:	08021951 	.word	0x08021951
 80218e8:	080219cf 	.word	0x080219cf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80218ec:	7c3b      	ldrb	r3, [r7, #16]
 80218ee:	2b01      	cmp	r3, #1
 80218f0:	f040 80b8 	bne.w	8021a64 <HAL_HCD_HC_SubmitRequest+0x214>
 80218f4:	78bb      	ldrb	r3, [r7, #2]
 80218f6:	2b00      	cmp	r3, #0
 80218f8:	f040 80b4 	bne.w	8021a64 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80218fc:	8b3b      	ldrh	r3, [r7, #24]
 80218fe:	2b00      	cmp	r3, #0
 8021900:	d108      	bne.n	8021914 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8021902:	78fb      	ldrb	r3, [r7, #3]
 8021904:	687a      	ldr	r2, [r7, #4]
 8021906:	212c      	movs	r1, #44	; 0x2c
 8021908:	fb01 f303 	mul.w	r3, r1, r3
 802190c:	4413      	add	r3, r2
 802190e:	3355      	adds	r3, #85	; 0x55
 8021910:	2201      	movs	r2, #1
 8021912:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8021914:	78fb      	ldrb	r3, [r7, #3]
 8021916:	687a      	ldr	r2, [r7, #4]
 8021918:	212c      	movs	r1, #44	; 0x2c
 802191a:	fb01 f303 	mul.w	r3, r1, r3
 802191e:	4413      	add	r3, r2
 8021920:	3355      	adds	r3, #85	; 0x55
 8021922:	781b      	ldrb	r3, [r3, #0]
 8021924:	2b00      	cmp	r3, #0
 8021926:	d109      	bne.n	802193c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8021928:	78fb      	ldrb	r3, [r7, #3]
 802192a:	687a      	ldr	r2, [r7, #4]
 802192c:	212c      	movs	r1, #44	; 0x2c
 802192e:	fb01 f303 	mul.w	r3, r1, r3
 8021932:	4413      	add	r3, r2
 8021934:	3342      	adds	r3, #66	; 0x42
 8021936:	2200      	movs	r2, #0
 8021938:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 802193a:	e093      	b.n	8021a64 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 802193c:	78fb      	ldrb	r3, [r7, #3]
 802193e:	687a      	ldr	r2, [r7, #4]
 8021940:	212c      	movs	r1, #44	; 0x2c
 8021942:	fb01 f303 	mul.w	r3, r1, r3
 8021946:	4413      	add	r3, r2
 8021948:	3342      	adds	r3, #66	; 0x42
 802194a:	2202      	movs	r2, #2
 802194c:	701a      	strb	r2, [r3, #0]
      break;
 802194e:	e089      	b.n	8021a64 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8021950:	78bb      	ldrb	r3, [r7, #2]
 8021952:	2b00      	cmp	r3, #0
 8021954:	d11d      	bne.n	8021992 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8021956:	78fb      	ldrb	r3, [r7, #3]
 8021958:	687a      	ldr	r2, [r7, #4]
 802195a:	212c      	movs	r1, #44	; 0x2c
 802195c:	fb01 f303 	mul.w	r3, r1, r3
 8021960:	4413      	add	r3, r2
 8021962:	3355      	adds	r3, #85	; 0x55
 8021964:	781b      	ldrb	r3, [r3, #0]
 8021966:	2b00      	cmp	r3, #0
 8021968:	d109      	bne.n	802197e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802196a:	78fb      	ldrb	r3, [r7, #3]
 802196c:	687a      	ldr	r2, [r7, #4]
 802196e:	212c      	movs	r1, #44	; 0x2c
 8021970:	fb01 f303 	mul.w	r3, r1, r3
 8021974:	4413      	add	r3, r2
 8021976:	3342      	adds	r3, #66	; 0x42
 8021978:	2200      	movs	r2, #0
 802197a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 802197c:	e073      	b.n	8021a66 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 802197e:	78fb      	ldrb	r3, [r7, #3]
 8021980:	687a      	ldr	r2, [r7, #4]
 8021982:	212c      	movs	r1, #44	; 0x2c
 8021984:	fb01 f303 	mul.w	r3, r1, r3
 8021988:	4413      	add	r3, r2
 802198a:	3342      	adds	r3, #66	; 0x42
 802198c:	2202      	movs	r2, #2
 802198e:	701a      	strb	r2, [r3, #0]
      break;
 8021990:	e069      	b.n	8021a66 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8021992:	78fb      	ldrb	r3, [r7, #3]
 8021994:	687a      	ldr	r2, [r7, #4]
 8021996:	212c      	movs	r1, #44	; 0x2c
 8021998:	fb01 f303 	mul.w	r3, r1, r3
 802199c:	4413      	add	r3, r2
 802199e:	3354      	adds	r3, #84	; 0x54
 80219a0:	781b      	ldrb	r3, [r3, #0]
 80219a2:	2b00      	cmp	r3, #0
 80219a4:	d109      	bne.n	80219ba <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80219a6:	78fb      	ldrb	r3, [r7, #3]
 80219a8:	687a      	ldr	r2, [r7, #4]
 80219aa:	212c      	movs	r1, #44	; 0x2c
 80219ac:	fb01 f303 	mul.w	r3, r1, r3
 80219b0:	4413      	add	r3, r2
 80219b2:	3342      	adds	r3, #66	; 0x42
 80219b4:	2200      	movs	r2, #0
 80219b6:	701a      	strb	r2, [r3, #0]
      break;
 80219b8:	e055      	b.n	8021a66 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80219ba:	78fb      	ldrb	r3, [r7, #3]
 80219bc:	687a      	ldr	r2, [r7, #4]
 80219be:	212c      	movs	r1, #44	; 0x2c
 80219c0:	fb01 f303 	mul.w	r3, r1, r3
 80219c4:	4413      	add	r3, r2
 80219c6:	3342      	adds	r3, #66	; 0x42
 80219c8:	2202      	movs	r2, #2
 80219ca:	701a      	strb	r2, [r3, #0]
      break;
 80219cc:	e04b      	b.n	8021a66 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80219ce:	78bb      	ldrb	r3, [r7, #2]
 80219d0:	2b00      	cmp	r3, #0
 80219d2:	d11d      	bne.n	8021a10 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80219d4:	78fb      	ldrb	r3, [r7, #3]
 80219d6:	687a      	ldr	r2, [r7, #4]
 80219d8:	212c      	movs	r1, #44	; 0x2c
 80219da:	fb01 f303 	mul.w	r3, r1, r3
 80219de:	4413      	add	r3, r2
 80219e0:	3355      	adds	r3, #85	; 0x55
 80219e2:	781b      	ldrb	r3, [r3, #0]
 80219e4:	2b00      	cmp	r3, #0
 80219e6:	d109      	bne.n	80219fc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80219e8:	78fb      	ldrb	r3, [r7, #3]
 80219ea:	687a      	ldr	r2, [r7, #4]
 80219ec:	212c      	movs	r1, #44	; 0x2c
 80219ee:	fb01 f303 	mul.w	r3, r1, r3
 80219f2:	4413      	add	r3, r2
 80219f4:	3342      	adds	r3, #66	; 0x42
 80219f6:	2200      	movs	r2, #0
 80219f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80219fa:	e034      	b.n	8021a66 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80219fc:	78fb      	ldrb	r3, [r7, #3]
 80219fe:	687a      	ldr	r2, [r7, #4]
 8021a00:	212c      	movs	r1, #44	; 0x2c
 8021a02:	fb01 f303 	mul.w	r3, r1, r3
 8021a06:	4413      	add	r3, r2
 8021a08:	3342      	adds	r3, #66	; 0x42
 8021a0a:	2202      	movs	r2, #2
 8021a0c:	701a      	strb	r2, [r3, #0]
      break;
 8021a0e:	e02a      	b.n	8021a66 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8021a10:	78fb      	ldrb	r3, [r7, #3]
 8021a12:	687a      	ldr	r2, [r7, #4]
 8021a14:	212c      	movs	r1, #44	; 0x2c
 8021a16:	fb01 f303 	mul.w	r3, r1, r3
 8021a1a:	4413      	add	r3, r2
 8021a1c:	3354      	adds	r3, #84	; 0x54
 8021a1e:	781b      	ldrb	r3, [r3, #0]
 8021a20:	2b00      	cmp	r3, #0
 8021a22:	d109      	bne.n	8021a38 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8021a24:	78fb      	ldrb	r3, [r7, #3]
 8021a26:	687a      	ldr	r2, [r7, #4]
 8021a28:	212c      	movs	r1, #44	; 0x2c
 8021a2a:	fb01 f303 	mul.w	r3, r1, r3
 8021a2e:	4413      	add	r3, r2
 8021a30:	3342      	adds	r3, #66	; 0x42
 8021a32:	2200      	movs	r2, #0
 8021a34:	701a      	strb	r2, [r3, #0]
      break;
 8021a36:	e016      	b.n	8021a66 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8021a38:	78fb      	ldrb	r3, [r7, #3]
 8021a3a:	687a      	ldr	r2, [r7, #4]
 8021a3c:	212c      	movs	r1, #44	; 0x2c
 8021a3e:	fb01 f303 	mul.w	r3, r1, r3
 8021a42:	4413      	add	r3, r2
 8021a44:	3342      	adds	r3, #66	; 0x42
 8021a46:	2202      	movs	r2, #2
 8021a48:	701a      	strb	r2, [r3, #0]
      break;
 8021a4a:	e00c      	b.n	8021a66 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8021a4c:	78fb      	ldrb	r3, [r7, #3]
 8021a4e:	687a      	ldr	r2, [r7, #4]
 8021a50:	212c      	movs	r1, #44	; 0x2c
 8021a52:	fb01 f303 	mul.w	r3, r1, r3
 8021a56:	4413      	add	r3, r2
 8021a58:	3342      	adds	r3, #66	; 0x42
 8021a5a:	2200      	movs	r2, #0
 8021a5c:	701a      	strb	r2, [r3, #0]
      break;
 8021a5e:	e002      	b.n	8021a66 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8021a60:	bf00      	nop
 8021a62:	e000      	b.n	8021a66 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8021a64:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8021a66:	78fb      	ldrb	r3, [r7, #3]
 8021a68:	687a      	ldr	r2, [r7, #4]
 8021a6a:	212c      	movs	r1, #44	; 0x2c
 8021a6c:	fb01 f303 	mul.w	r3, r1, r3
 8021a70:	4413      	add	r3, r2
 8021a72:	3344      	adds	r3, #68	; 0x44
 8021a74:	697a      	ldr	r2, [r7, #20]
 8021a76:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8021a78:	78fb      	ldrb	r3, [r7, #3]
 8021a7a:	8b3a      	ldrh	r2, [r7, #24]
 8021a7c:	6879      	ldr	r1, [r7, #4]
 8021a7e:	202c      	movs	r0, #44	; 0x2c
 8021a80:	fb00 f303 	mul.w	r3, r0, r3
 8021a84:	440b      	add	r3, r1
 8021a86:	334c      	adds	r3, #76	; 0x4c
 8021a88:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8021a8a:	78fb      	ldrb	r3, [r7, #3]
 8021a8c:	687a      	ldr	r2, [r7, #4]
 8021a8e:	212c      	movs	r1, #44	; 0x2c
 8021a90:	fb01 f303 	mul.w	r3, r1, r3
 8021a94:	4413      	add	r3, r2
 8021a96:	3360      	adds	r3, #96	; 0x60
 8021a98:	2200      	movs	r2, #0
 8021a9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8021a9c:	78fb      	ldrb	r3, [r7, #3]
 8021a9e:	687a      	ldr	r2, [r7, #4]
 8021aa0:	212c      	movs	r1, #44	; 0x2c
 8021aa2:	fb01 f303 	mul.w	r3, r1, r3
 8021aa6:	4413      	add	r3, r2
 8021aa8:	3350      	adds	r3, #80	; 0x50
 8021aaa:	2200      	movs	r2, #0
 8021aac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8021aae:	78fb      	ldrb	r3, [r7, #3]
 8021ab0:	687a      	ldr	r2, [r7, #4]
 8021ab2:	212c      	movs	r1, #44	; 0x2c
 8021ab4:	fb01 f303 	mul.w	r3, r1, r3
 8021ab8:	4413      	add	r3, r2
 8021aba:	3339      	adds	r3, #57	; 0x39
 8021abc:	78fa      	ldrb	r2, [r7, #3]
 8021abe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8021ac0:	78fb      	ldrb	r3, [r7, #3]
 8021ac2:	687a      	ldr	r2, [r7, #4]
 8021ac4:	212c      	movs	r1, #44	; 0x2c
 8021ac6:	fb01 f303 	mul.w	r3, r1, r3
 8021aca:	4413      	add	r3, r2
 8021acc:	3361      	adds	r3, #97	; 0x61
 8021ace:	2200      	movs	r2, #0
 8021ad0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8021ad2:	687b      	ldr	r3, [r7, #4]
 8021ad4:	6818      	ldr	r0, [r3, #0]
 8021ad6:	78fb      	ldrb	r3, [r7, #3]
 8021ad8:	222c      	movs	r2, #44	; 0x2c
 8021ada:	fb02 f303 	mul.w	r3, r2, r3
 8021ade:	3338      	adds	r3, #56	; 0x38
 8021ae0:	687a      	ldr	r2, [r7, #4]
 8021ae2:	18d1      	adds	r1, r2, r3
 8021ae4:	687b      	ldr	r3, [r7, #4]
 8021ae6:	691b      	ldr	r3, [r3, #16]
 8021ae8:	b2db      	uxtb	r3, r3
 8021aea:	461a      	mov	r2, r3
 8021aec:	f003 fec8 	bl	8025880 <USB_HC_StartXfer>
 8021af0:	4603      	mov	r3, r0
}
 8021af2:	4618      	mov	r0, r3
 8021af4:	3708      	adds	r7, #8
 8021af6:	46bd      	mov	sp, r7
 8021af8:	bd80      	pop	{r7, pc}
 8021afa:	bf00      	nop

08021afc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8021afc:	b580      	push	{r7, lr}
 8021afe:	b086      	sub	sp, #24
 8021b00:	af00      	add	r7, sp, #0
 8021b02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8021b04:	687b      	ldr	r3, [r7, #4]
 8021b06:	681b      	ldr	r3, [r3, #0]
 8021b08:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8021b0a:	693b      	ldr	r3, [r7, #16]
 8021b0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8021b0e:	687b      	ldr	r3, [r7, #4]
 8021b10:	681b      	ldr	r3, [r3, #0]
 8021b12:	4618      	mov	r0, r3
 8021b14:	f003 fbeb 	bl	80252ee <USB_GetMode>
 8021b18:	4603      	mov	r3, r0
 8021b1a:	2b01      	cmp	r3, #1
 8021b1c:	f040 80f6 	bne.w	8021d0c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8021b20:	687b      	ldr	r3, [r7, #4]
 8021b22:	681b      	ldr	r3, [r3, #0]
 8021b24:	4618      	mov	r0, r3
 8021b26:	f003 fbcf 	bl	80252c8 <USB_ReadInterrupts>
 8021b2a:	4603      	mov	r3, r0
 8021b2c:	2b00      	cmp	r3, #0
 8021b2e:	f000 80ec 	beq.w	8021d0a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8021b32:	687b      	ldr	r3, [r7, #4]
 8021b34:	681b      	ldr	r3, [r3, #0]
 8021b36:	4618      	mov	r0, r3
 8021b38:	f003 fbc6 	bl	80252c8 <USB_ReadInterrupts>
 8021b3c:	4603      	mov	r3, r0
 8021b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8021b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8021b46:	d104      	bne.n	8021b52 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8021b48:	687b      	ldr	r3, [r7, #4]
 8021b4a:	681b      	ldr	r3, [r3, #0]
 8021b4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8021b50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8021b52:	687b      	ldr	r3, [r7, #4]
 8021b54:	681b      	ldr	r3, [r3, #0]
 8021b56:	4618      	mov	r0, r3
 8021b58:	f003 fbb6 	bl	80252c8 <USB_ReadInterrupts>
 8021b5c:	4603      	mov	r3, r0
 8021b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8021b66:	d104      	bne.n	8021b72 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8021b68:	687b      	ldr	r3, [r7, #4]
 8021b6a:	681b      	ldr	r3, [r3, #0]
 8021b6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8021b70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8021b72:	687b      	ldr	r3, [r7, #4]
 8021b74:	681b      	ldr	r3, [r3, #0]
 8021b76:	4618      	mov	r0, r3
 8021b78:	f003 fba6 	bl	80252c8 <USB_ReadInterrupts>
 8021b7c:	4603      	mov	r3, r0
 8021b7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8021b82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8021b86:	d104      	bne.n	8021b92 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8021b88:	687b      	ldr	r3, [r7, #4]
 8021b8a:	681b      	ldr	r3, [r3, #0]
 8021b8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8021b90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8021b92:	687b      	ldr	r3, [r7, #4]
 8021b94:	681b      	ldr	r3, [r3, #0]
 8021b96:	4618      	mov	r0, r3
 8021b98:	f003 fb96 	bl	80252c8 <USB_ReadInterrupts>
 8021b9c:	4603      	mov	r3, r0
 8021b9e:	f003 0302 	and.w	r3, r3, #2
 8021ba2:	2b02      	cmp	r3, #2
 8021ba4:	d103      	bne.n	8021bae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8021ba6:	687b      	ldr	r3, [r7, #4]
 8021ba8:	681b      	ldr	r3, [r3, #0]
 8021baa:	2202      	movs	r2, #2
 8021bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8021bae:	687b      	ldr	r3, [r7, #4]
 8021bb0:	681b      	ldr	r3, [r3, #0]
 8021bb2:	4618      	mov	r0, r3
 8021bb4:	f003 fb88 	bl	80252c8 <USB_ReadInterrupts>
 8021bb8:	4603      	mov	r3, r0
 8021bba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8021bbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8021bc2:	d11c      	bne.n	8021bfe <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8021bc4:	687b      	ldr	r3, [r7, #4]
 8021bc6:	681b      	ldr	r3, [r3, #0]
 8021bc8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8021bcc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8021bce:	68fb      	ldr	r3, [r7, #12]
 8021bd0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8021bd4:	681b      	ldr	r3, [r3, #0]
 8021bd6:	f003 0301 	and.w	r3, r3, #1
 8021bda:	2b00      	cmp	r3, #0
 8021bdc:	d10f      	bne.n	8021bfe <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8021bde:	2110      	movs	r1, #16
 8021be0:	6938      	ldr	r0, [r7, #16]
 8021be2:	f003 fa97 	bl	8025114 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8021be6:	6938      	ldr	r0, [r7, #16]
 8021be8:	f003 fab8 	bl	802515c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8021bec:	687b      	ldr	r3, [r7, #4]
 8021bee:	681b      	ldr	r3, [r3, #0]
 8021bf0:	2101      	movs	r1, #1
 8021bf2:	4618      	mov	r0, r3
 8021bf4:	f003 fc70 	bl	80254d8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8021bf8:	6878      	ldr	r0, [r7, #4]
 8021bfa:	f006 f943 	bl	8027e84 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8021bfe:	687b      	ldr	r3, [r7, #4]
 8021c00:	681b      	ldr	r3, [r3, #0]
 8021c02:	4618      	mov	r0, r3
 8021c04:	f003 fb60 	bl	80252c8 <USB_ReadInterrupts>
 8021c08:	4603      	mov	r3, r0
 8021c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8021c0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8021c12:	d102      	bne.n	8021c1a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8021c14:	6878      	ldr	r0, [r7, #4]
 8021c16:	f001 fa03 	bl	8023020 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8021c1a:	687b      	ldr	r3, [r7, #4]
 8021c1c:	681b      	ldr	r3, [r3, #0]
 8021c1e:	4618      	mov	r0, r3
 8021c20:	f003 fb52 	bl	80252c8 <USB_ReadInterrupts>
 8021c24:	4603      	mov	r3, r0
 8021c26:	f003 0308 	and.w	r3, r3, #8
 8021c2a:	2b08      	cmp	r3, #8
 8021c2c:	d106      	bne.n	8021c3c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8021c2e:	6878      	ldr	r0, [r7, #4]
 8021c30:	f006 f90c 	bl	8027e4c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8021c34:	687b      	ldr	r3, [r7, #4]
 8021c36:	681b      	ldr	r3, [r3, #0]
 8021c38:	2208      	movs	r2, #8
 8021c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8021c3c:	687b      	ldr	r3, [r7, #4]
 8021c3e:	681b      	ldr	r3, [r3, #0]
 8021c40:	4618      	mov	r0, r3
 8021c42:	f003 fb41 	bl	80252c8 <USB_ReadInterrupts>
 8021c46:	4603      	mov	r3, r0
 8021c48:	f003 0310 	and.w	r3, r3, #16
 8021c4c:	2b10      	cmp	r3, #16
 8021c4e:	d101      	bne.n	8021c54 <HAL_HCD_IRQHandler+0x158>
 8021c50:	2301      	movs	r3, #1
 8021c52:	e000      	b.n	8021c56 <HAL_HCD_IRQHandler+0x15a>
 8021c54:	2300      	movs	r3, #0
 8021c56:	2b00      	cmp	r3, #0
 8021c58:	d012      	beq.n	8021c80 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8021c5a:	687b      	ldr	r3, [r7, #4]
 8021c5c:	681b      	ldr	r3, [r3, #0]
 8021c5e:	699a      	ldr	r2, [r3, #24]
 8021c60:	687b      	ldr	r3, [r7, #4]
 8021c62:	681b      	ldr	r3, [r3, #0]
 8021c64:	f022 0210 	bic.w	r2, r2, #16
 8021c68:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8021c6a:	6878      	ldr	r0, [r7, #4]
 8021c6c:	f001 f906 	bl	8022e7c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8021c70:	687b      	ldr	r3, [r7, #4]
 8021c72:	681b      	ldr	r3, [r3, #0]
 8021c74:	699a      	ldr	r2, [r3, #24]
 8021c76:	687b      	ldr	r3, [r7, #4]
 8021c78:	681b      	ldr	r3, [r3, #0]
 8021c7a:	f042 0210 	orr.w	r2, r2, #16
 8021c7e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8021c80:	687b      	ldr	r3, [r7, #4]
 8021c82:	681b      	ldr	r3, [r3, #0]
 8021c84:	4618      	mov	r0, r3
 8021c86:	f003 fb1f 	bl	80252c8 <USB_ReadInterrupts>
 8021c8a:	4603      	mov	r3, r0
 8021c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021c90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8021c94:	d13a      	bne.n	8021d0c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8021c96:	687b      	ldr	r3, [r7, #4]
 8021c98:	681b      	ldr	r3, [r3, #0]
 8021c9a:	4618      	mov	r0, r3
 8021c9c:	f003 ff32 	bl	8025b04 <USB_HC_ReadInterrupt>
 8021ca0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8021ca2:	2300      	movs	r3, #0
 8021ca4:	617b      	str	r3, [r7, #20]
 8021ca6:	e025      	b.n	8021cf4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8021ca8:	697b      	ldr	r3, [r7, #20]
 8021caa:	f003 030f 	and.w	r3, r3, #15
 8021cae:	68ba      	ldr	r2, [r7, #8]
 8021cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8021cb4:	f003 0301 	and.w	r3, r3, #1
 8021cb8:	2b00      	cmp	r3, #0
 8021cba:	d018      	beq.n	8021cee <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8021cbc:	697b      	ldr	r3, [r7, #20]
 8021cbe:	015a      	lsls	r2, r3, #5
 8021cc0:	68fb      	ldr	r3, [r7, #12]
 8021cc2:	4413      	add	r3, r2
 8021cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8021cc8:	681b      	ldr	r3, [r3, #0]
 8021cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8021cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8021cd2:	d106      	bne.n	8021ce2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8021cd4:	697b      	ldr	r3, [r7, #20]
 8021cd6:	b2db      	uxtb	r3, r3
 8021cd8:	4619      	mov	r1, r3
 8021cda:	6878      	ldr	r0, [r7, #4]
 8021cdc:	f000 f8ab 	bl	8021e36 <HCD_HC_IN_IRQHandler>
 8021ce0:	e005      	b.n	8021cee <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8021ce2:	697b      	ldr	r3, [r7, #20]
 8021ce4:	b2db      	uxtb	r3, r3
 8021ce6:	4619      	mov	r1, r3
 8021ce8:	6878      	ldr	r0, [r7, #4]
 8021cea:	f000 fcc6 	bl	802267a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8021cee:	697b      	ldr	r3, [r7, #20]
 8021cf0:	3301      	adds	r3, #1
 8021cf2:	617b      	str	r3, [r7, #20]
 8021cf4:	687b      	ldr	r3, [r7, #4]
 8021cf6:	689b      	ldr	r3, [r3, #8]
 8021cf8:	697a      	ldr	r2, [r7, #20]
 8021cfa:	429a      	cmp	r2, r3
 8021cfc:	d3d4      	bcc.n	8021ca8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8021cfe:	687b      	ldr	r3, [r7, #4]
 8021d00:	681b      	ldr	r3, [r3, #0]
 8021d02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8021d06:	615a      	str	r2, [r3, #20]
 8021d08:	e000      	b.n	8021d0c <HAL_HCD_IRQHandler+0x210>
      return;
 8021d0a:	bf00      	nop
    }
  }
}
 8021d0c:	3718      	adds	r7, #24
 8021d0e:	46bd      	mov	sp, r7
 8021d10:	bd80      	pop	{r7, pc}

08021d12 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8021d12:	b580      	push	{r7, lr}
 8021d14:	b082      	sub	sp, #8
 8021d16:	af00      	add	r7, sp, #0
 8021d18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8021d1a:	687b      	ldr	r3, [r7, #4]
 8021d1c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8021d20:	2b01      	cmp	r3, #1
 8021d22:	d101      	bne.n	8021d28 <HAL_HCD_Start+0x16>
 8021d24:	2302      	movs	r3, #2
 8021d26:	e013      	b.n	8021d50 <HAL_HCD_Start+0x3e>
 8021d28:	687b      	ldr	r3, [r7, #4]
 8021d2a:	2201      	movs	r2, #1
 8021d2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8021d30:	687b      	ldr	r3, [r7, #4]
 8021d32:	681b      	ldr	r3, [r3, #0]
 8021d34:	2101      	movs	r1, #1
 8021d36:	4618      	mov	r0, r3
 8021d38:	f003 fc32 	bl	80255a0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8021d3c:	687b      	ldr	r3, [r7, #4]
 8021d3e:	681b      	ldr	r3, [r3, #0]
 8021d40:	4618      	mov	r0, r3
 8021d42:	f003 f978 	bl	8025036 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8021d46:	687b      	ldr	r3, [r7, #4]
 8021d48:	2200      	movs	r2, #0
 8021d4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8021d4e:	2300      	movs	r3, #0
}
 8021d50:	4618      	mov	r0, r3
 8021d52:	3708      	adds	r7, #8
 8021d54:	46bd      	mov	sp, r7
 8021d56:	bd80      	pop	{r7, pc}

08021d58 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8021d58:	b580      	push	{r7, lr}
 8021d5a:	b082      	sub	sp, #8
 8021d5c:	af00      	add	r7, sp, #0
 8021d5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8021d60:	687b      	ldr	r3, [r7, #4]
 8021d62:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8021d66:	2b01      	cmp	r3, #1
 8021d68:	d101      	bne.n	8021d6e <HAL_HCD_Stop+0x16>
 8021d6a:	2302      	movs	r3, #2
 8021d6c:	e00d      	b.n	8021d8a <HAL_HCD_Stop+0x32>
 8021d6e:	687b      	ldr	r3, [r7, #4]
 8021d70:	2201      	movs	r2, #1
 8021d72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8021d76:	687b      	ldr	r3, [r7, #4]
 8021d78:	681b      	ldr	r3, [r3, #0]
 8021d7a:	4618      	mov	r0, r3
 8021d7c:	f004 f82c 	bl	8025dd8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8021d80:	687b      	ldr	r3, [r7, #4]
 8021d82:	2200      	movs	r2, #0
 8021d84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8021d88:	2300      	movs	r3, #0
}
 8021d8a:	4618      	mov	r0, r3
 8021d8c:	3708      	adds	r7, #8
 8021d8e:	46bd      	mov	sp, r7
 8021d90:	bd80      	pop	{r7, pc}

08021d92 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8021d92:	b580      	push	{r7, lr}
 8021d94:	b082      	sub	sp, #8
 8021d96:	af00      	add	r7, sp, #0
 8021d98:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8021d9a:	687b      	ldr	r3, [r7, #4]
 8021d9c:	681b      	ldr	r3, [r3, #0]
 8021d9e:	4618      	mov	r0, r3
 8021da0:	f003 fbd4 	bl	802554c <USB_ResetPort>
 8021da4:	4603      	mov	r3, r0
}
 8021da6:	4618      	mov	r0, r3
 8021da8:	3708      	adds	r7, #8
 8021daa:	46bd      	mov	sp, r7
 8021dac:	bd80      	pop	{r7, pc}

08021dae <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8021dae:	b480      	push	{r7}
 8021db0:	b083      	sub	sp, #12
 8021db2:	af00      	add	r7, sp, #0
 8021db4:	6078      	str	r0, [r7, #4]
 8021db6:	460b      	mov	r3, r1
 8021db8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8021dba:	78fb      	ldrb	r3, [r7, #3]
 8021dbc:	687a      	ldr	r2, [r7, #4]
 8021dbe:	212c      	movs	r1, #44	; 0x2c
 8021dc0:	fb01 f303 	mul.w	r3, r1, r3
 8021dc4:	4413      	add	r3, r2
 8021dc6:	3360      	adds	r3, #96	; 0x60
 8021dc8:	781b      	ldrb	r3, [r3, #0]
}
 8021dca:	4618      	mov	r0, r3
 8021dcc:	370c      	adds	r7, #12
 8021dce:	46bd      	mov	sp, r7
 8021dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dd4:	4770      	bx	lr

08021dd6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8021dd6:	b480      	push	{r7}
 8021dd8:	b083      	sub	sp, #12
 8021dda:	af00      	add	r7, sp, #0
 8021ddc:	6078      	str	r0, [r7, #4]
 8021dde:	460b      	mov	r3, r1
 8021de0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8021de2:	78fb      	ldrb	r3, [r7, #3]
 8021de4:	687a      	ldr	r2, [r7, #4]
 8021de6:	212c      	movs	r1, #44	; 0x2c
 8021de8:	fb01 f303 	mul.w	r3, r1, r3
 8021dec:	4413      	add	r3, r2
 8021dee:	3350      	adds	r3, #80	; 0x50
 8021df0:	681b      	ldr	r3, [r3, #0]
}
 8021df2:	4618      	mov	r0, r3
 8021df4:	370c      	adds	r7, #12
 8021df6:	46bd      	mov	sp, r7
 8021df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dfc:	4770      	bx	lr

08021dfe <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8021dfe:	b580      	push	{r7, lr}
 8021e00:	b082      	sub	sp, #8
 8021e02:	af00      	add	r7, sp, #0
 8021e04:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8021e06:	687b      	ldr	r3, [r7, #4]
 8021e08:	681b      	ldr	r3, [r3, #0]
 8021e0a:	4618      	mov	r0, r3
 8021e0c:	f003 fc18 	bl	8025640 <USB_GetCurrentFrame>
 8021e10:	4603      	mov	r3, r0
}
 8021e12:	4618      	mov	r0, r3
 8021e14:	3708      	adds	r7, #8
 8021e16:	46bd      	mov	sp, r7
 8021e18:	bd80      	pop	{r7, pc}

08021e1a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8021e1a:	b580      	push	{r7, lr}
 8021e1c:	b082      	sub	sp, #8
 8021e1e:	af00      	add	r7, sp, #0
 8021e20:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8021e22:	687b      	ldr	r3, [r7, #4]
 8021e24:	681b      	ldr	r3, [r3, #0]
 8021e26:	4618      	mov	r0, r3
 8021e28:	f003 fbf3 	bl	8025612 <USB_GetHostSpeed>
 8021e2c:	4603      	mov	r3, r0
}
 8021e2e:	4618      	mov	r0, r3
 8021e30:	3708      	adds	r7, #8
 8021e32:	46bd      	mov	sp, r7
 8021e34:	bd80      	pop	{r7, pc}

08021e36 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8021e36:	b580      	push	{r7, lr}
 8021e38:	b086      	sub	sp, #24
 8021e3a:	af00      	add	r7, sp, #0
 8021e3c:	6078      	str	r0, [r7, #4]
 8021e3e:	460b      	mov	r3, r1
 8021e40:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8021e42:	687b      	ldr	r3, [r7, #4]
 8021e44:	681b      	ldr	r3, [r3, #0]
 8021e46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8021e48:	697b      	ldr	r3, [r7, #20]
 8021e4a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8021e4c:	78fb      	ldrb	r3, [r7, #3]
 8021e4e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8021e50:	68fb      	ldr	r3, [r7, #12]
 8021e52:	015a      	lsls	r2, r3, #5
 8021e54:	693b      	ldr	r3, [r7, #16]
 8021e56:	4413      	add	r3, r2
 8021e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8021e5c:	689b      	ldr	r3, [r3, #8]
 8021e5e:	f003 0304 	and.w	r3, r3, #4
 8021e62:	2b04      	cmp	r3, #4
 8021e64:	d119      	bne.n	8021e9a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8021e66:	68fb      	ldr	r3, [r7, #12]
 8021e68:	015a      	lsls	r2, r3, #5
 8021e6a:	693b      	ldr	r3, [r7, #16]
 8021e6c:	4413      	add	r3, r2
 8021e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8021e72:	461a      	mov	r2, r3
 8021e74:	2304      	movs	r3, #4
 8021e76:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8021e78:	68fb      	ldr	r3, [r7, #12]
 8021e7a:	015a      	lsls	r2, r3, #5
 8021e7c:	693b      	ldr	r3, [r7, #16]
 8021e7e:	4413      	add	r3, r2
 8021e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8021e84:	68db      	ldr	r3, [r3, #12]
 8021e86:	68fa      	ldr	r2, [r7, #12]
 8021e88:	0151      	lsls	r1, r2, #5
 8021e8a:	693a      	ldr	r2, [r7, #16]
 8021e8c:	440a      	add	r2, r1
 8021e8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8021e92:	f043 0302 	orr.w	r3, r3, #2
 8021e96:	60d3      	str	r3, [r2, #12]
 8021e98:	e101      	b.n	802209e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8021e9a:	68fb      	ldr	r3, [r7, #12]
 8021e9c:	015a      	lsls	r2, r3, #5
 8021e9e:	693b      	ldr	r3, [r7, #16]
 8021ea0:	4413      	add	r3, r2
 8021ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8021ea6:	689b      	ldr	r3, [r3, #8]
 8021ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021eb0:	d12b      	bne.n	8021f0a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8021eb2:	68fb      	ldr	r3, [r7, #12]
 8021eb4:	015a      	lsls	r2, r3, #5
 8021eb6:	693b      	ldr	r3, [r7, #16]
 8021eb8:	4413      	add	r3, r2
 8021eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8021ebe:	461a      	mov	r2, r3
 8021ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021ec4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8021ec6:	687a      	ldr	r2, [r7, #4]
 8021ec8:	68fb      	ldr	r3, [r7, #12]
 8021eca:	212c      	movs	r1, #44	; 0x2c
 8021ecc:	fb01 f303 	mul.w	r3, r1, r3
 8021ed0:	4413      	add	r3, r2
 8021ed2:	3361      	adds	r3, #97	; 0x61
 8021ed4:	2207      	movs	r2, #7
 8021ed6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8021ed8:	68fb      	ldr	r3, [r7, #12]
 8021eda:	015a      	lsls	r2, r3, #5
 8021edc:	693b      	ldr	r3, [r7, #16]
 8021ede:	4413      	add	r3, r2
 8021ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8021ee4:	68db      	ldr	r3, [r3, #12]
 8021ee6:	68fa      	ldr	r2, [r7, #12]
 8021ee8:	0151      	lsls	r1, r2, #5
 8021eea:	693a      	ldr	r2, [r7, #16]
 8021eec:	440a      	add	r2, r1
 8021eee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8021ef2:	f043 0302 	orr.w	r3, r3, #2
 8021ef6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8021ef8:	687b      	ldr	r3, [r7, #4]
 8021efa:	681b      	ldr	r3, [r3, #0]
 8021efc:	68fa      	ldr	r2, [r7, #12]
 8021efe:	b2d2      	uxtb	r2, r2
 8021f00:	4611      	mov	r1, r2
 8021f02:	4618      	mov	r0, r3
 8021f04:	f003 fe0f 	bl	8025b26 <USB_HC_Halt>
 8021f08:	e0c9      	b.n	802209e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8021f0a:	68fb      	ldr	r3, [r7, #12]
 8021f0c:	015a      	lsls	r2, r3, #5
 8021f0e:	693b      	ldr	r3, [r7, #16]
 8021f10:	4413      	add	r3, r2
 8021f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8021f16:	689b      	ldr	r3, [r3, #8]
 8021f18:	f003 0320 	and.w	r3, r3, #32
 8021f1c:	2b20      	cmp	r3, #32
 8021f1e:	d109      	bne.n	8021f34 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8021f20:	68fb      	ldr	r3, [r7, #12]
 8021f22:	015a      	lsls	r2, r3, #5
 8021f24:	693b      	ldr	r3, [r7, #16]
 8021f26:	4413      	add	r3, r2
 8021f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8021f2c:	461a      	mov	r2, r3
 8021f2e:	2320      	movs	r3, #32
 8021f30:	6093      	str	r3, [r2, #8]
 8021f32:	e0b4      	b.n	802209e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8021f34:	68fb      	ldr	r3, [r7, #12]
 8021f36:	015a      	lsls	r2, r3, #5
 8021f38:	693b      	ldr	r3, [r7, #16]
 8021f3a:	4413      	add	r3, r2
 8021f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8021f40:	689b      	ldr	r3, [r3, #8]
 8021f42:	f003 0308 	and.w	r3, r3, #8
 8021f46:	2b08      	cmp	r3, #8
 8021f48:	d133      	bne.n	8021fb2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8021f4a:	68fb      	ldr	r3, [r7, #12]
 8021f4c:	015a      	lsls	r2, r3, #5
 8021f4e:	693b      	ldr	r3, [r7, #16]
 8021f50:	4413      	add	r3, r2
 8021f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8021f56:	68db      	ldr	r3, [r3, #12]
 8021f58:	68fa      	ldr	r2, [r7, #12]
 8021f5a:	0151      	lsls	r1, r2, #5
 8021f5c:	693a      	ldr	r2, [r7, #16]
 8021f5e:	440a      	add	r2, r1
 8021f60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8021f64:	f043 0302 	orr.w	r3, r3, #2
 8021f68:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8021f6a:	687a      	ldr	r2, [r7, #4]
 8021f6c:	68fb      	ldr	r3, [r7, #12]
 8021f6e:	212c      	movs	r1, #44	; 0x2c
 8021f70:	fb01 f303 	mul.w	r3, r1, r3
 8021f74:	4413      	add	r3, r2
 8021f76:	3361      	adds	r3, #97	; 0x61
 8021f78:	2205      	movs	r2, #5
 8021f7a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8021f7c:	68fb      	ldr	r3, [r7, #12]
 8021f7e:	015a      	lsls	r2, r3, #5
 8021f80:	693b      	ldr	r3, [r7, #16]
 8021f82:	4413      	add	r3, r2
 8021f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8021f88:	461a      	mov	r2, r3
 8021f8a:	2310      	movs	r3, #16
 8021f8c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8021f8e:	68fb      	ldr	r3, [r7, #12]
 8021f90:	015a      	lsls	r2, r3, #5
 8021f92:	693b      	ldr	r3, [r7, #16]
 8021f94:	4413      	add	r3, r2
 8021f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8021f9a:	461a      	mov	r2, r3
 8021f9c:	2308      	movs	r3, #8
 8021f9e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8021fa0:	687b      	ldr	r3, [r7, #4]
 8021fa2:	681b      	ldr	r3, [r3, #0]
 8021fa4:	68fa      	ldr	r2, [r7, #12]
 8021fa6:	b2d2      	uxtb	r2, r2
 8021fa8:	4611      	mov	r1, r2
 8021faa:	4618      	mov	r0, r3
 8021fac:	f003 fdbb 	bl	8025b26 <USB_HC_Halt>
 8021fb0:	e075      	b.n	802209e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8021fb2:	68fb      	ldr	r3, [r7, #12]
 8021fb4:	015a      	lsls	r2, r3, #5
 8021fb6:	693b      	ldr	r3, [r7, #16]
 8021fb8:	4413      	add	r3, r2
 8021fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8021fbe:	689b      	ldr	r3, [r3, #8]
 8021fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021fc8:	d134      	bne.n	8022034 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8021fca:	68fb      	ldr	r3, [r7, #12]
 8021fcc:	015a      	lsls	r2, r3, #5
 8021fce:	693b      	ldr	r3, [r7, #16]
 8021fd0:	4413      	add	r3, r2
 8021fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8021fd6:	68db      	ldr	r3, [r3, #12]
 8021fd8:	68fa      	ldr	r2, [r7, #12]
 8021fda:	0151      	lsls	r1, r2, #5
 8021fdc:	693a      	ldr	r2, [r7, #16]
 8021fde:	440a      	add	r2, r1
 8021fe0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8021fe4:	f043 0302 	orr.w	r3, r3, #2
 8021fe8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8021fea:	687a      	ldr	r2, [r7, #4]
 8021fec:	68fb      	ldr	r3, [r7, #12]
 8021fee:	212c      	movs	r1, #44	; 0x2c
 8021ff0:	fb01 f303 	mul.w	r3, r1, r3
 8021ff4:	4413      	add	r3, r2
 8021ff6:	3361      	adds	r3, #97	; 0x61
 8021ff8:	2208      	movs	r2, #8
 8021ffa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8021ffc:	68fb      	ldr	r3, [r7, #12]
 8021ffe:	015a      	lsls	r2, r3, #5
 8022000:	693b      	ldr	r3, [r7, #16]
 8022002:	4413      	add	r3, r2
 8022004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022008:	461a      	mov	r2, r3
 802200a:	2310      	movs	r3, #16
 802200c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 802200e:	68fb      	ldr	r3, [r7, #12]
 8022010:	015a      	lsls	r2, r3, #5
 8022012:	693b      	ldr	r3, [r7, #16]
 8022014:	4413      	add	r3, r2
 8022016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802201a:	461a      	mov	r2, r3
 802201c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022020:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8022022:	687b      	ldr	r3, [r7, #4]
 8022024:	681b      	ldr	r3, [r3, #0]
 8022026:	68fa      	ldr	r2, [r7, #12]
 8022028:	b2d2      	uxtb	r2, r2
 802202a:	4611      	mov	r1, r2
 802202c:	4618      	mov	r0, r3
 802202e:	f003 fd7a 	bl	8025b26 <USB_HC_Halt>
 8022032:	e034      	b.n	802209e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8022034:	68fb      	ldr	r3, [r7, #12]
 8022036:	015a      	lsls	r2, r3, #5
 8022038:	693b      	ldr	r3, [r7, #16]
 802203a:	4413      	add	r3, r2
 802203c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022040:	689b      	ldr	r3, [r3, #8]
 8022042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022046:	2b80      	cmp	r3, #128	; 0x80
 8022048:	d129      	bne.n	802209e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 802204a:	68fb      	ldr	r3, [r7, #12]
 802204c:	015a      	lsls	r2, r3, #5
 802204e:	693b      	ldr	r3, [r7, #16]
 8022050:	4413      	add	r3, r2
 8022052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022056:	68db      	ldr	r3, [r3, #12]
 8022058:	68fa      	ldr	r2, [r7, #12]
 802205a:	0151      	lsls	r1, r2, #5
 802205c:	693a      	ldr	r2, [r7, #16]
 802205e:	440a      	add	r2, r1
 8022060:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8022064:	f043 0302 	orr.w	r3, r3, #2
 8022068:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 802206a:	687a      	ldr	r2, [r7, #4]
 802206c:	68fb      	ldr	r3, [r7, #12]
 802206e:	212c      	movs	r1, #44	; 0x2c
 8022070:	fb01 f303 	mul.w	r3, r1, r3
 8022074:	4413      	add	r3, r2
 8022076:	3361      	adds	r3, #97	; 0x61
 8022078:	2206      	movs	r2, #6
 802207a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802207c:	687b      	ldr	r3, [r7, #4]
 802207e:	681b      	ldr	r3, [r3, #0]
 8022080:	68fa      	ldr	r2, [r7, #12]
 8022082:	b2d2      	uxtb	r2, r2
 8022084:	4611      	mov	r1, r2
 8022086:	4618      	mov	r0, r3
 8022088:	f003 fd4d 	bl	8025b26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 802208c:	68fb      	ldr	r3, [r7, #12]
 802208e:	015a      	lsls	r2, r3, #5
 8022090:	693b      	ldr	r3, [r7, #16]
 8022092:	4413      	add	r3, r2
 8022094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022098:	461a      	mov	r2, r3
 802209a:	2380      	movs	r3, #128	; 0x80
 802209c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 802209e:	68fb      	ldr	r3, [r7, #12]
 80220a0:	015a      	lsls	r2, r3, #5
 80220a2:	693b      	ldr	r3, [r7, #16]
 80220a4:	4413      	add	r3, r2
 80220a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80220aa:	689b      	ldr	r3, [r3, #8]
 80220ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80220b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80220b4:	d122      	bne.n	80220fc <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80220b6:	68fb      	ldr	r3, [r7, #12]
 80220b8:	015a      	lsls	r2, r3, #5
 80220ba:	693b      	ldr	r3, [r7, #16]
 80220bc:	4413      	add	r3, r2
 80220be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80220c2:	68db      	ldr	r3, [r3, #12]
 80220c4:	68fa      	ldr	r2, [r7, #12]
 80220c6:	0151      	lsls	r1, r2, #5
 80220c8:	693a      	ldr	r2, [r7, #16]
 80220ca:	440a      	add	r2, r1
 80220cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80220d0:	f043 0302 	orr.w	r3, r3, #2
 80220d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80220d6:	687b      	ldr	r3, [r7, #4]
 80220d8:	681b      	ldr	r3, [r3, #0]
 80220da:	68fa      	ldr	r2, [r7, #12]
 80220dc:	b2d2      	uxtb	r2, r2
 80220de:	4611      	mov	r1, r2
 80220e0:	4618      	mov	r0, r3
 80220e2:	f003 fd20 	bl	8025b26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80220e6:	68fb      	ldr	r3, [r7, #12]
 80220e8:	015a      	lsls	r2, r3, #5
 80220ea:	693b      	ldr	r3, [r7, #16]
 80220ec:	4413      	add	r3, r2
 80220ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80220f2:	461a      	mov	r2, r3
 80220f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80220f8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80220fa:	e2ba      	b.n	8022672 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80220fc:	68fb      	ldr	r3, [r7, #12]
 80220fe:	015a      	lsls	r2, r3, #5
 8022100:	693b      	ldr	r3, [r7, #16]
 8022102:	4413      	add	r3, r2
 8022104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022108:	689b      	ldr	r3, [r3, #8]
 802210a:	f003 0301 	and.w	r3, r3, #1
 802210e:	2b01      	cmp	r3, #1
 8022110:	f040 811b 	bne.w	802234a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8022114:	687b      	ldr	r3, [r7, #4]
 8022116:	691b      	ldr	r3, [r3, #16]
 8022118:	2b00      	cmp	r3, #0
 802211a:	d019      	beq.n	8022150 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 802211c:	687a      	ldr	r2, [r7, #4]
 802211e:	68fb      	ldr	r3, [r7, #12]
 8022120:	212c      	movs	r1, #44	; 0x2c
 8022122:	fb01 f303 	mul.w	r3, r1, r3
 8022126:	4413      	add	r3, r2
 8022128:	3348      	adds	r3, #72	; 0x48
 802212a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 802212c:	68fb      	ldr	r3, [r7, #12]
 802212e:	0159      	lsls	r1, r3, #5
 8022130:	693b      	ldr	r3, [r7, #16]
 8022132:	440b      	add	r3, r1
 8022134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022138:	691b      	ldr	r3, [r3, #16]
 802213a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 802213e:	1ad2      	subs	r2, r2, r3
 8022140:	6879      	ldr	r1, [r7, #4]
 8022142:	68fb      	ldr	r3, [r7, #12]
 8022144:	202c      	movs	r0, #44	; 0x2c
 8022146:	fb00 f303 	mul.w	r3, r0, r3
 802214a:	440b      	add	r3, r1
 802214c:	3350      	adds	r3, #80	; 0x50
 802214e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8022150:	687a      	ldr	r2, [r7, #4]
 8022152:	68fb      	ldr	r3, [r7, #12]
 8022154:	212c      	movs	r1, #44	; 0x2c
 8022156:	fb01 f303 	mul.w	r3, r1, r3
 802215a:	4413      	add	r3, r2
 802215c:	3361      	adds	r3, #97	; 0x61
 802215e:	2201      	movs	r2, #1
 8022160:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8022162:	687a      	ldr	r2, [r7, #4]
 8022164:	68fb      	ldr	r3, [r7, #12]
 8022166:	212c      	movs	r1, #44	; 0x2c
 8022168:	fb01 f303 	mul.w	r3, r1, r3
 802216c:	4413      	add	r3, r2
 802216e:	335c      	adds	r3, #92	; 0x5c
 8022170:	2200      	movs	r2, #0
 8022172:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8022174:	68fb      	ldr	r3, [r7, #12]
 8022176:	015a      	lsls	r2, r3, #5
 8022178:	693b      	ldr	r3, [r7, #16]
 802217a:	4413      	add	r3, r2
 802217c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022180:	461a      	mov	r2, r3
 8022182:	2301      	movs	r3, #1
 8022184:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8022186:	687a      	ldr	r2, [r7, #4]
 8022188:	68fb      	ldr	r3, [r7, #12]
 802218a:	212c      	movs	r1, #44	; 0x2c
 802218c:	fb01 f303 	mul.w	r3, r1, r3
 8022190:	4413      	add	r3, r2
 8022192:	333f      	adds	r3, #63	; 0x3f
 8022194:	781b      	ldrb	r3, [r3, #0]
 8022196:	2b00      	cmp	r3, #0
 8022198:	d009      	beq.n	80221ae <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 802219a:	687a      	ldr	r2, [r7, #4]
 802219c:	68fb      	ldr	r3, [r7, #12]
 802219e:	212c      	movs	r1, #44	; 0x2c
 80221a0:	fb01 f303 	mul.w	r3, r1, r3
 80221a4:	4413      	add	r3, r2
 80221a6:	333f      	adds	r3, #63	; 0x3f
 80221a8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80221aa:	2b02      	cmp	r3, #2
 80221ac:	d121      	bne.n	80221f2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80221ae:	68fb      	ldr	r3, [r7, #12]
 80221b0:	015a      	lsls	r2, r3, #5
 80221b2:	693b      	ldr	r3, [r7, #16]
 80221b4:	4413      	add	r3, r2
 80221b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80221ba:	68db      	ldr	r3, [r3, #12]
 80221bc:	68fa      	ldr	r2, [r7, #12]
 80221be:	0151      	lsls	r1, r2, #5
 80221c0:	693a      	ldr	r2, [r7, #16]
 80221c2:	440a      	add	r2, r1
 80221c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80221c8:	f043 0302 	orr.w	r3, r3, #2
 80221cc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80221ce:	687b      	ldr	r3, [r7, #4]
 80221d0:	681b      	ldr	r3, [r3, #0]
 80221d2:	68fa      	ldr	r2, [r7, #12]
 80221d4:	b2d2      	uxtb	r2, r2
 80221d6:	4611      	mov	r1, r2
 80221d8:	4618      	mov	r0, r3
 80221da:	f003 fca4 	bl	8025b26 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80221de:	68fb      	ldr	r3, [r7, #12]
 80221e0:	015a      	lsls	r2, r3, #5
 80221e2:	693b      	ldr	r3, [r7, #16]
 80221e4:	4413      	add	r3, r2
 80221e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80221ea:	461a      	mov	r2, r3
 80221ec:	2310      	movs	r3, #16
 80221ee:	6093      	str	r3, [r2, #8]
 80221f0:	e066      	b.n	80222c0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80221f2:	687a      	ldr	r2, [r7, #4]
 80221f4:	68fb      	ldr	r3, [r7, #12]
 80221f6:	212c      	movs	r1, #44	; 0x2c
 80221f8:	fb01 f303 	mul.w	r3, r1, r3
 80221fc:	4413      	add	r3, r2
 80221fe:	333f      	adds	r3, #63	; 0x3f
 8022200:	781b      	ldrb	r3, [r3, #0]
 8022202:	2b03      	cmp	r3, #3
 8022204:	d127      	bne.n	8022256 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8022206:	68fb      	ldr	r3, [r7, #12]
 8022208:	015a      	lsls	r2, r3, #5
 802220a:	693b      	ldr	r3, [r7, #16]
 802220c:	4413      	add	r3, r2
 802220e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022212:	681b      	ldr	r3, [r3, #0]
 8022214:	68fa      	ldr	r2, [r7, #12]
 8022216:	0151      	lsls	r1, r2, #5
 8022218:	693a      	ldr	r2, [r7, #16]
 802221a:	440a      	add	r2, r1
 802221c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8022220:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8022224:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8022226:	687a      	ldr	r2, [r7, #4]
 8022228:	68fb      	ldr	r3, [r7, #12]
 802222a:	212c      	movs	r1, #44	; 0x2c
 802222c:	fb01 f303 	mul.w	r3, r1, r3
 8022230:	4413      	add	r3, r2
 8022232:	3360      	adds	r3, #96	; 0x60
 8022234:	2201      	movs	r2, #1
 8022236:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8022238:	68fb      	ldr	r3, [r7, #12]
 802223a:	b2d9      	uxtb	r1, r3
 802223c:	687a      	ldr	r2, [r7, #4]
 802223e:	68fb      	ldr	r3, [r7, #12]
 8022240:	202c      	movs	r0, #44	; 0x2c
 8022242:	fb00 f303 	mul.w	r3, r0, r3
 8022246:	4413      	add	r3, r2
 8022248:	3360      	adds	r3, #96	; 0x60
 802224a:	781b      	ldrb	r3, [r3, #0]
 802224c:	461a      	mov	r2, r3
 802224e:	6878      	ldr	r0, [r7, #4]
 8022250:	f005 fe26 	bl	8027ea0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8022254:	e034      	b.n	80222c0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8022256:	687a      	ldr	r2, [r7, #4]
 8022258:	68fb      	ldr	r3, [r7, #12]
 802225a:	212c      	movs	r1, #44	; 0x2c
 802225c:	fb01 f303 	mul.w	r3, r1, r3
 8022260:	4413      	add	r3, r2
 8022262:	333f      	adds	r3, #63	; 0x3f
 8022264:	781b      	ldrb	r3, [r3, #0]
 8022266:	2b01      	cmp	r3, #1
 8022268:	d12a      	bne.n	80222c0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 802226a:	687a      	ldr	r2, [r7, #4]
 802226c:	68fb      	ldr	r3, [r7, #12]
 802226e:	212c      	movs	r1, #44	; 0x2c
 8022270:	fb01 f303 	mul.w	r3, r1, r3
 8022274:	4413      	add	r3, r2
 8022276:	3360      	adds	r3, #96	; 0x60
 8022278:	2201      	movs	r2, #1
 802227a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 802227c:	687a      	ldr	r2, [r7, #4]
 802227e:	68fb      	ldr	r3, [r7, #12]
 8022280:	212c      	movs	r1, #44	; 0x2c
 8022282:	fb01 f303 	mul.w	r3, r1, r3
 8022286:	4413      	add	r3, r2
 8022288:	3354      	adds	r3, #84	; 0x54
 802228a:	781b      	ldrb	r3, [r3, #0]
 802228c:	f083 0301 	eor.w	r3, r3, #1
 8022290:	b2d8      	uxtb	r0, r3
 8022292:	687a      	ldr	r2, [r7, #4]
 8022294:	68fb      	ldr	r3, [r7, #12]
 8022296:	212c      	movs	r1, #44	; 0x2c
 8022298:	fb01 f303 	mul.w	r3, r1, r3
 802229c:	4413      	add	r3, r2
 802229e:	3354      	adds	r3, #84	; 0x54
 80222a0:	4602      	mov	r2, r0
 80222a2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80222a4:	68fb      	ldr	r3, [r7, #12]
 80222a6:	b2d9      	uxtb	r1, r3
 80222a8:	687a      	ldr	r2, [r7, #4]
 80222aa:	68fb      	ldr	r3, [r7, #12]
 80222ac:	202c      	movs	r0, #44	; 0x2c
 80222ae:	fb00 f303 	mul.w	r3, r0, r3
 80222b2:	4413      	add	r3, r2
 80222b4:	3360      	adds	r3, #96	; 0x60
 80222b6:	781b      	ldrb	r3, [r3, #0]
 80222b8:	461a      	mov	r2, r3
 80222ba:	6878      	ldr	r0, [r7, #4]
 80222bc:	f005 fdf0 	bl	8027ea0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80222c0:	687b      	ldr	r3, [r7, #4]
 80222c2:	691b      	ldr	r3, [r3, #16]
 80222c4:	2b01      	cmp	r3, #1
 80222c6:	d12b      	bne.n	8022320 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80222c8:	687a      	ldr	r2, [r7, #4]
 80222ca:	68fb      	ldr	r3, [r7, #12]
 80222cc:	212c      	movs	r1, #44	; 0x2c
 80222ce:	fb01 f303 	mul.w	r3, r1, r3
 80222d2:	4413      	add	r3, r2
 80222d4:	3348      	adds	r3, #72	; 0x48
 80222d6:	681b      	ldr	r3, [r3, #0]
 80222d8:	6879      	ldr	r1, [r7, #4]
 80222da:	68fa      	ldr	r2, [r7, #12]
 80222dc:	202c      	movs	r0, #44	; 0x2c
 80222de:	fb00 f202 	mul.w	r2, r0, r2
 80222e2:	440a      	add	r2, r1
 80222e4:	3240      	adds	r2, #64	; 0x40
 80222e6:	8812      	ldrh	r2, [r2, #0]
 80222e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80222ec:	f003 0301 	and.w	r3, r3, #1
 80222f0:	2b00      	cmp	r3, #0
 80222f2:	f000 81be 	beq.w	8022672 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80222f6:	687a      	ldr	r2, [r7, #4]
 80222f8:	68fb      	ldr	r3, [r7, #12]
 80222fa:	212c      	movs	r1, #44	; 0x2c
 80222fc:	fb01 f303 	mul.w	r3, r1, r3
 8022300:	4413      	add	r3, r2
 8022302:	3354      	adds	r3, #84	; 0x54
 8022304:	781b      	ldrb	r3, [r3, #0]
 8022306:	f083 0301 	eor.w	r3, r3, #1
 802230a:	b2d8      	uxtb	r0, r3
 802230c:	687a      	ldr	r2, [r7, #4]
 802230e:	68fb      	ldr	r3, [r7, #12]
 8022310:	212c      	movs	r1, #44	; 0x2c
 8022312:	fb01 f303 	mul.w	r3, r1, r3
 8022316:	4413      	add	r3, r2
 8022318:	3354      	adds	r3, #84	; 0x54
 802231a:	4602      	mov	r2, r0
 802231c:	701a      	strb	r2, [r3, #0]
}
 802231e:	e1a8      	b.n	8022672 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8022320:	687a      	ldr	r2, [r7, #4]
 8022322:	68fb      	ldr	r3, [r7, #12]
 8022324:	212c      	movs	r1, #44	; 0x2c
 8022326:	fb01 f303 	mul.w	r3, r1, r3
 802232a:	4413      	add	r3, r2
 802232c:	3354      	adds	r3, #84	; 0x54
 802232e:	781b      	ldrb	r3, [r3, #0]
 8022330:	f083 0301 	eor.w	r3, r3, #1
 8022334:	b2d8      	uxtb	r0, r3
 8022336:	687a      	ldr	r2, [r7, #4]
 8022338:	68fb      	ldr	r3, [r7, #12]
 802233a:	212c      	movs	r1, #44	; 0x2c
 802233c:	fb01 f303 	mul.w	r3, r1, r3
 8022340:	4413      	add	r3, r2
 8022342:	3354      	adds	r3, #84	; 0x54
 8022344:	4602      	mov	r2, r0
 8022346:	701a      	strb	r2, [r3, #0]
}
 8022348:	e193      	b.n	8022672 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 802234a:	68fb      	ldr	r3, [r7, #12]
 802234c:	015a      	lsls	r2, r3, #5
 802234e:	693b      	ldr	r3, [r7, #16]
 8022350:	4413      	add	r3, r2
 8022352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022356:	689b      	ldr	r3, [r3, #8]
 8022358:	f003 0302 	and.w	r3, r3, #2
 802235c:	2b02      	cmp	r3, #2
 802235e:	f040 8106 	bne.w	802256e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8022362:	68fb      	ldr	r3, [r7, #12]
 8022364:	015a      	lsls	r2, r3, #5
 8022366:	693b      	ldr	r3, [r7, #16]
 8022368:	4413      	add	r3, r2
 802236a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802236e:	68db      	ldr	r3, [r3, #12]
 8022370:	68fa      	ldr	r2, [r7, #12]
 8022372:	0151      	lsls	r1, r2, #5
 8022374:	693a      	ldr	r2, [r7, #16]
 8022376:	440a      	add	r2, r1
 8022378:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802237c:	f023 0302 	bic.w	r3, r3, #2
 8022380:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8022382:	687a      	ldr	r2, [r7, #4]
 8022384:	68fb      	ldr	r3, [r7, #12]
 8022386:	212c      	movs	r1, #44	; 0x2c
 8022388:	fb01 f303 	mul.w	r3, r1, r3
 802238c:	4413      	add	r3, r2
 802238e:	3361      	adds	r3, #97	; 0x61
 8022390:	781b      	ldrb	r3, [r3, #0]
 8022392:	2b01      	cmp	r3, #1
 8022394:	d109      	bne.n	80223aa <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8022396:	687a      	ldr	r2, [r7, #4]
 8022398:	68fb      	ldr	r3, [r7, #12]
 802239a:	212c      	movs	r1, #44	; 0x2c
 802239c:	fb01 f303 	mul.w	r3, r1, r3
 80223a0:	4413      	add	r3, r2
 80223a2:	3360      	adds	r3, #96	; 0x60
 80223a4:	2201      	movs	r2, #1
 80223a6:	701a      	strb	r2, [r3, #0]
 80223a8:	e0c9      	b.n	802253e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80223aa:	687a      	ldr	r2, [r7, #4]
 80223ac:	68fb      	ldr	r3, [r7, #12]
 80223ae:	212c      	movs	r1, #44	; 0x2c
 80223b0:	fb01 f303 	mul.w	r3, r1, r3
 80223b4:	4413      	add	r3, r2
 80223b6:	3361      	adds	r3, #97	; 0x61
 80223b8:	781b      	ldrb	r3, [r3, #0]
 80223ba:	2b05      	cmp	r3, #5
 80223bc:	d109      	bne.n	80223d2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80223be:	687a      	ldr	r2, [r7, #4]
 80223c0:	68fb      	ldr	r3, [r7, #12]
 80223c2:	212c      	movs	r1, #44	; 0x2c
 80223c4:	fb01 f303 	mul.w	r3, r1, r3
 80223c8:	4413      	add	r3, r2
 80223ca:	3360      	adds	r3, #96	; 0x60
 80223cc:	2205      	movs	r2, #5
 80223ce:	701a      	strb	r2, [r3, #0]
 80223d0:	e0b5      	b.n	802253e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80223d2:	687a      	ldr	r2, [r7, #4]
 80223d4:	68fb      	ldr	r3, [r7, #12]
 80223d6:	212c      	movs	r1, #44	; 0x2c
 80223d8:	fb01 f303 	mul.w	r3, r1, r3
 80223dc:	4413      	add	r3, r2
 80223de:	3361      	adds	r3, #97	; 0x61
 80223e0:	781b      	ldrb	r3, [r3, #0]
 80223e2:	2b06      	cmp	r3, #6
 80223e4:	d009      	beq.n	80223fa <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80223e6:	687a      	ldr	r2, [r7, #4]
 80223e8:	68fb      	ldr	r3, [r7, #12]
 80223ea:	212c      	movs	r1, #44	; 0x2c
 80223ec:	fb01 f303 	mul.w	r3, r1, r3
 80223f0:	4413      	add	r3, r2
 80223f2:	3361      	adds	r3, #97	; 0x61
 80223f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80223f6:	2b08      	cmp	r3, #8
 80223f8:	d150      	bne.n	802249c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80223fa:	687a      	ldr	r2, [r7, #4]
 80223fc:	68fb      	ldr	r3, [r7, #12]
 80223fe:	212c      	movs	r1, #44	; 0x2c
 8022400:	fb01 f303 	mul.w	r3, r1, r3
 8022404:	4413      	add	r3, r2
 8022406:	335c      	adds	r3, #92	; 0x5c
 8022408:	681b      	ldr	r3, [r3, #0]
 802240a:	1c5a      	adds	r2, r3, #1
 802240c:	6879      	ldr	r1, [r7, #4]
 802240e:	68fb      	ldr	r3, [r7, #12]
 8022410:	202c      	movs	r0, #44	; 0x2c
 8022412:	fb00 f303 	mul.w	r3, r0, r3
 8022416:	440b      	add	r3, r1
 8022418:	335c      	adds	r3, #92	; 0x5c
 802241a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 802241c:	687a      	ldr	r2, [r7, #4]
 802241e:	68fb      	ldr	r3, [r7, #12]
 8022420:	212c      	movs	r1, #44	; 0x2c
 8022422:	fb01 f303 	mul.w	r3, r1, r3
 8022426:	4413      	add	r3, r2
 8022428:	335c      	adds	r3, #92	; 0x5c
 802242a:	681b      	ldr	r3, [r3, #0]
 802242c:	2b02      	cmp	r3, #2
 802242e:	d912      	bls.n	8022456 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8022430:	687a      	ldr	r2, [r7, #4]
 8022432:	68fb      	ldr	r3, [r7, #12]
 8022434:	212c      	movs	r1, #44	; 0x2c
 8022436:	fb01 f303 	mul.w	r3, r1, r3
 802243a:	4413      	add	r3, r2
 802243c:	335c      	adds	r3, #92	; 0x5c
 802243e:	2200      	movs	r2, #0
 8022440:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8022442:	687a      	ldr	r2, [r7, #4]
 8022444:	68fb      	ldr	r3, [r7, #12]
 8022446:	212c      	movs	r1, #44	; 0x2c
 8022448:	fb01 f303 	mul.w	r3, r1, r3
 802244c:	4413      	add	r3, r2
 802244e:	3360      	adds	r3, #96	; 0x60
 8022450:	2204      	movs	r2, #4
 8022452:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8022454:	e073      	b.n	802253e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8022456:	687a      	ldr	r2, [r7, #4]
 8022458:	68fb      	ldr	r3, [r7, #12]
 802245a:	212c      	movs	r1, #44	; 0x2c
 802245c:	fb01 f303 	mul.w	r3, r1, r3
 8022460:	4413      	add	r3, r2
 8022462:	3360      	adds	r3, #96	; 0x60
 8022464:	2202      	movs	r2, #2
 8022466:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8022468:	68fb      	ldr	r3, [r7, #12]
 802246a:	015a      	lsls	r2, r3, #5
 802246c:	693b      	ldr	r3, [r7, #16]
 802246e:	4413      	add	r3, r2
 8022470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022474:	681b      	ldr	r3, [r3, #0]
 8022476:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8022478:	68bb      	ldr	r3, [r7, #8]
 802247a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802247e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8022480:	68bb      	ldr	r3, [r7, #8]
 8022482:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8022486:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8022488:	68fb      	ldr	r3, [r7, #12]
 802248a:	015a      	lsls	r2, r3, #5
 802248c:	693b      	ldr	r3, [r7, #16]
 802248e:	4413      	add	r3, r2
 8022490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022494:	461a      	mov	r2, r3
 8022496:	68bb      	ldr	r3, [r7, #8]
 8022498:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 802249a:	e050      	b.n	802253e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 802249c:	687a      	ldr	r2, [r7, #4]
 802249e:	68fb      	ldr	r3, [r7, #12]
 80224a0:	212c      	movs	r1, #44	; 0x2c
 80224a2:	fb01 f303 	mul.w	r3, r1, r3
 80224a6:	4413      	add	r3, r2
 80224a8:	3361      	adds	r3, #97	; 0x61
 80224aa:	781b      	ldrb	r3, [r3, #0]
 80224ac:	2b03      	cmp	r3, #3
 80224ae:	d122      	bne.n	80224f6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80224b0:	687a      	ldr	r2, [r7, #4]
 80224b2:	68fb      	ldr	r3, [r7, #12]
 80224b4:	212c      	movs	r1, #44	; 0x2c
 80224b6:	fb01 f303 	mul.w	r3, r1, r3
 80224ba:	4413      	add	r3, r2
 80224bc:	3360      	adds	r3, #96	; 0x60
 80224be:	2202      	movs	r2, #2
 80224c0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80224c2:	68fb      	ldr	r3, [r7, #12]
 80224c4:	015a      	lsls	r2, r3, #5
 80224c6:	693b      	ldr	r3, [r7, #16]
 80224c8:	4413      	add	r3, r2
 80224ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80224ce:	681b      	ldr	r3, [r3, #0]
 80224d0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80224d2:	68bb      	ldr	r3, [r7, #8]
 80224d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80224d8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80224da:	68bb      	ldr	r3, [r7, #8]
 80224dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80224e0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80224e2:	68fb      	ldr	r3, [r7, #12]
 80224e4:	015a      	lsls	r2, r3, #5
 80224e6:	693b      	ldr	r3, [r7, #16]
 80224e8:	4413      	add	r3, r2
 80224ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80224ee:	461a      	mov	r2, r3
 80224f0:	68bb      	ldr	r3, [r7, #8]
 80224f2:	6013      	str	r3, [r2, #0]
 80224f4:	e023      	b.n	802253e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80224f6:	687a      	ldr	r2, [r7, #4]
 80224f8:	68fb      	ldr	r3, [r7, #12]
 80224fa:	212c      	movs	r1, #44	; 0x2c
 80224fc:	fb01 f303 	mul.w	r3, r1, r3
 8022500:	4413      	add	r3, r2
 8022502:	3361      	adds	r3, #97	; 0x61
 8022504:	781b      	ldrb	r3, [r3, #0]
 8022506:	2b07      	cmp	r3, #7
 8022508:	d119      	bne.n	802253e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 802250a:	687a      	ldr	r2, [r7, #4]
 802250c:	68fb      	ldr	r3, [r7, #12]
 802250e:	212c      	movs	r1, #44	; 0x2c
 8022510:	fb01 f303 	mul.w	r3, r1, r3
 8022514:	4413      	add	r3, r2
 8022516:	335c      	adds	r3, #92	; 0x5c
 8022518:	681b      	ldr	r3, [r3, #0]
 802251a:	1c5a      	adds	r2, r3, #1
 802251c:	6879      	ldr	r1, [r7, #4]
 802251e:	68fb      	ldr	r3, [r7, #12]
 8022520:	202c      	movs	r0, #44	; 0x2c
 8022522:	fb00 f303 	mul.w	r3, r0, r3
 8022526:	440b      	add	r3, r1
 8022528:	335c      	adds	r3, #92	; 0x5c
 802252a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 802252c:	687a      	ldr	r2, [r7, #4]
 802252e:	68fb      	ldr	r3, [r7, #12]
 8022530:	212c      	movs	r1, #44	; 0x2c
 8022532:	fb01 f303 	mul.w	r3, r1, r3
 8022536:	4413      	add	r3, r2
 8022538:	3360      	adds	r3, #96	; 0x60
 802253a:	2204      	movs	r2, #4
 802253c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 802253e:	68fb      	ldr	r3, [r7, #12]
 8022540:	015a      	lsls	r2, r3, #5
 8022542:	693b      	ldr	r3, [r7, #16]
 8022544:	4413      	add	r3, r2
 8022546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802254a:	461a      	mov	r2, r3
 802254c:	2302      	movs	r3, #2
 802254e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8022550:	68fb      	ldr	r3, [r7, #12]
 8022552:	b2d9      	uxtb	r1, r3
 8022554:	687a      	ldr	r2, [r7, #4]
 8022556:	68fb      	ldr	r3, [r7, #12]
 8022558:	202c      	movs	r0, #44	; 0x2c
 802255a:	fb00 f303 	mul.w	r3, r0, r3
 802255e:	4413      	add	r3, r2
 8022560:	3360      	adds	r3, #96	; 0x60
 8022562:	781b      	ldrb	r3, [r3, #0]
 8022564:	461a      	mov	r2, r3
 8022566:	6878      	ldr	r0, [r7, #4]
 8022568:	f005 fc9a 	bl	8027ea0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 802256c:	e081      	b.n	8022672 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 802256e:	68fb      	ldr	r3, [r7, #12]
 8022570:	015a      	lsls	r2, r3, #5
 8022572:	693b      	ldr	r3, [r7, #16]
 8022574:	4413      	add	r3, r2
 8022576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802257a:	689b      	ldr	r3, [r3, #8]
 802257c:	f003 0310 	and.w	r3, r3, #16
 8022580:	2b10      	cmp	r3, #16
 8022582:	d176      	bne.n	8022672 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8022584:	687a      	ldr	r2, [r7, #4]
 8022586:	68fb      	ldr	r3, [r7, #12]
 8022588:	212c      	movs	r1, #44	; 0x2c
 802258a:	fb01 f303 	mul.w	r3, r1, r3
 802258e:	4413      	add	r3, r2
 8022590:	333f      	adds	r3, #63	; 0x3f
 8022592:	781b      	ldrb	r3, [r3, #0]
 8022594:	2b03      	cmp	r3, #3
 8022596:	d121      	bne.n	80225dc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8022598:	687a      	ldr	r2, [r7, #4]
 802259a:	68fb      	ldr	r3, [r7, #12]
 802259c:	212c      	movs	r1, #44	; 0x2c
 802259e:	fb01 f303 	mul.w	r3, r1, r3
 80225a2:	4413      	add	r3, r2
 80225a4:	335c      	adds	r3, #92	; 0x5c
 80225a6:	2200      	movs	r2, #0
 80225a8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80225aa:	68fb      	ldr	r3, [r7, #12]
 80225ac:	015a      	lsls	r2, r3, #5
 80225ae:	693b      	ldr	r3, [r7, #16]
 80225b0:	4413      	add	r3, r2
 80225b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80225b6:	68db      	ldr	r3, [r3, #12]
 80225b8:	68fa      	ldr	r2, [r7, #12]
 80225ba:	0151      	lsls	r1, r2, #5
 80225bc:	693a      	ldr	r2, [r7, #16]
 80225be:	440a      	add	r2, r1
 80225c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80225c4:	f043 0302 	orr.w	r3, r3, #2
 80225c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80225ca:	687b      	ldr	r3, [r7, #4]
 80225cc:	681b      	ldr	r3, [r3, #0]
 80225ce:	68fa      	ldr	r2, [r7, #12]
 80225d0:	b2d2      	uxtb	r2, r2
 80225d2:	4611      	mov	r1, r2
 80225d4:	4618      	mov	r0, r3
 80225d6:	f003 faa6 	bl	8025b26 <USB_HC_Halt>
 80225da:	e041      	b.n	8022660 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80225dc:	687a      	ldr	r2, [r7, #4]
 80225de:	68fb      	ldr	r3, [r7, #12]
 80225e0:	212c      	movs	r1, #44	; 0x2c
 80225e2:	fb01 f303 	mul.w	r3, r1, r3
 80225e6:	4413      	add	r3, r2
 80225e8:	333f      	adds	r3, #63	; 0x3f
 80225ea:	781b      	ldrb	r3, [r3, #0]
 80225ec:	2b00      	cmp	r3, #0
 80225ee:	d009      	beq.n	8022604 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80225f0:	687a      	ldr	r2, [r7, #4]
 80225f2:	68fb      	ldr	r3, [r7, #12]
 80225f4:	212c      	movs	r1, #44	; 0x2c
 80225f6:	fb01 f303 	mul.w	r3, r1, r3
 80225fa:	4413      	add	r3, r2
 80225fc:	333f      	adds	r3, #63	; 0x3f
 80225fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8022600:	2b02      	cmp	r3, #2
 8022602:	d12d      	bne.n	8022660 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8022604:	687a      	ldr	r2, [r7, #4]
 8022606:	68fb      	ldr	r3, [r7, #12]
 8022608:	212c      	movs	r1, #44	; 0x2c
 802260a:	fb01 f303 	mul.w	r3, r1, r3
 802260e:	4413      	add	r3, r2
 8022610:	335c      	adds	r3, #92	; 0x5c
 8022612:	2200      	movs	r2, #0
 8022614:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8022616:	687b      	ldr	r3, [r7, #4]
 8022618:	691b      	ldr	r3, [r3, #16]
 802261a:	2b00      	cmp	r3, #0
 802261c:	d120      	bne.n	8022660 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 802261e:	687a      	ldr	r2, [r7, #4]
 8022620:	68fb      	ldr	r3, [r7, #12]
 8022622:	212c      	movs	r1, #44	; 0x2c
 8022624:	fb01 f303 	mul.w	r3, r1, r3
 8022628:	4413      	add	r3, r2
 802262a:	3361      	adds	r3, #97	; 0x61
 802262c:	2203      	movs	r2, #3
 802262e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8022630:	68fb      	ldr	r3, [r7, #12]
 8022632:	015a      	lsls	r2, r3, #5
 8022634:	693b      	ldr	r3, [r7, #16]
 8022636:	4413      	add	r3, r2
 8022638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802263c:	68db      	ldr	r3, [r3, #12]
 802263e:	68fa      	ldr	r2, [r7, #12]
 8022640:	0151      	lsls	r1, r2, #5
 8022642:	693a      	ldr	r2, [r7, #16]
 8022644:	440a      	add	r2, r1
 8022646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802264a:	f043 0302 	orr.w	r3, r3, #2
 802264e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8022650:	687b      	ldr	r3, [r7, #4]
 8022652:	681b      	ldr	r3, [r3, #0]
 8022654:	68fa      	ldr	r2, [r7, #12]
 8022656:	b2d2      	uxtb	r2, r2
 8022658:	4611      	mov	r1, r2
 802265a:	4618      	mov	r0, r3
 802265c:	f003 fa63 	bl	8025b26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8022660:	68fb      	ldr	r3, [r7, #12]
 8022662:	015a      	lsls	r2, r3, #5
 8022664:	693b      	ldr	r3, [r7, #16]
 8022666:	4413      	add	r3, r2
 8022668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802266c:	461a      	mov	r2, r3
 802266e:	2310      	movs	r3, #16
 8022670:	6093      	str	r3, [r2, #8]
}
 8022672:	bf00      	nop
 8022674:	3718      	adds	r7, #24
 8022676:	46bd      	mov	sp, r7
 8022678:	bd80      	pop	{r7, pc}

0802267a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 802267a:	b580      	push	{r7, lr}
 802267c:	b088      	sub	sp, #32
 802267e:	af00      	add	r7, sp, #0
 8022680:	6078      	str	r0, [r7, #4]
 8022682:	460b      	mov	r3, r1
 8022684:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8022686:	687b      	ldr	r3, [r7, #4]
 8022688:	681b      	ldr	r3, [r3, #0]
 802268a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802268c:	69fb      	ldr	r3, [r7, #28]
 802268e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8022690:	78fb      	ldrb	r3, [r7, #3]
 8022692:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8022694:	697b      	ldr	r3, [r7, #20]
 8022696:	015a      	lsls	r2, r3, #5
 8022698:	69bb      	ldr	r3, [r7, #24]
 802269a:	4413      	add	r3, r2
 802269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80226a0:	689b      	ldr	r3, [r3, #8]
 80226a2:	f003 0304 	and.w	r3, r3, #4
 80226a6:	2b04      	cmp	r3, #4
 80226a8:	d119      	bne.n	80226de <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80226aa:	697b      	ldr	r3, [r7, #20]
 80226ac:	015a      	lsls	r2, r3, #5
 80226ae:	69bb      	ldr	r3, [r7, #24]
 80226b0:	4413      	add	r3, r2
 80226b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80226b6:	461a      	mov	r2, r3
 80226b8:	2304      	movs	r3, #4
 80226ba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80226bc:	697b      	ldr	r3, [r7, #20]
 80226be:	015a      	lsls	r2, r3, #5
 80226c0:	69bb      	ldr	r3, [r7, #24]
 80226c2:	4413      	add	r3, r2
 80226c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80226c8:	68db      	ldr	r3, [r3, #12]
 80226ca:	697a      	ldr	r2, [r7, #20]
 80226cc:	0151      	lsls	r1, r2, #5
 80226ce:	69ba      	ldr	r2, [r7, #24]
 80226d0:	440a      	add	r2, r1
 80226d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80226d6:	f043 0302 	orr.w	r3, r3, #2
 80226da:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80226dc:	e3ca      	b.n	8022e74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80226de:	697b      	ldr	r3, [r7, #20]
 80226e0:	015a      	lsls	r2, r3, #5
 80226e2:	69bb      	ldr	r3, [r7, #24]
 80226e4:	4413      	add	r3, r2
 80226e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80226ea:	689b      	ldr	r3, [r3, #8]
 80226ec:	f003 0320 	and.w	r3, r3, #32
 80226f0:	2b20      	cmp	r3, #32
 80226f2:	d13e      	bne.n	8022772 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80226f4:	697b      	ldr	r3, [r7, #20]
 80226f6:	015a      	lsls	r2, r3, #5
 80226f8:	69bb      	ldr	r3, [r7, #24]
 80226fa:	4413      	add	r3, r2
 80226fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022700:	461a      	mov	r2, r3
 8022702:	2320      	movs	r3, #32
 8022704:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8022706:	687a      	ldr	r2, [r7, #4]
 8022708:	697b      	ldr	r3, [r7, #20]
 802270a:	212c      	movs	r1, #44	; 0x2c
 802270c:	fb01 f303 	mul.w	r3, r1, r3
 8022710:	4413      	add	r3, r2
 8022712:	333d      	adds	r3, #61	; 0x3d
 8022714:	781b      	ldrb	r3, [r3, #0]
 8022716:	2b01      	cmp	r3, #1
 8022718:	f040 83ac 	bne.w	8022e74 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 802271c:	687a      	ldr	r2, [r7, #4]
 802271e:	697b      	ldr	r3, [r7, #20]
 8022720:	212c      	movs	r1, #44	; 0x2c
 8022722:	fb01 f303 	mul.w	r3, r1, r3
 8022726:	4413      	add	r3, r2
 8022728:	333d      	adds	r3, #61	; 0x3d
 802272a:	2200      	movs	r2, #0
 802272c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 802272e:	687a      	ldr	r2, [r7, #4]
 8022730:	697b      	ldr	r3, [r7, #20]
 8022732:	212c      	movs	r1, #44	; 0x2c
 8022734:	fb01 f303 	mul.w	r3, r1, r3
 8022738:	4413      	add	r3, r2
 802273a:	3360      	adds	r3, #96	; 0x60
 802273c:	2202      	movs	r2, #2
 802273e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8022740:	697b      	ldr	r3, [r7, #20]
 8022742:	015a      	lsls	r2, r3, #5
 8022744:	69bb      	ldr	r3, [r7, #24]
 8022746:	4413      	add	r3, r2
 8022748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802274c:	68db      	ldr	r3, [r3, #12]
 802274e:	697a      	ldr	r2, [r7, #20]
 8022750:	0151      	lsls	r1, r2, #5
 8022752:	69ba      	ldr	r2, [r7, #24]
 8022754:	440a      	add	r2, r1
 8022756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802275a:	f043 0302 	orr.w	r3, r3, #2
 802275e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8022760:	687b      	ldr	r3, [r7, #4]
 8022762:	681b      	ldr	r3, [r3, #0]
 8022764:	697a      	ldr	r2, [r7, #20]
 8022766:	b2d2      	uxtb	r2, r2
 8022768:	4611      	mov	r1, r2
 802276a:	4618      	mov	r0, r3
 802276c:	f003 f9db 	bl	8025b26 <USB_HC_Halt>
}
 8022770:	e380      	b.n	8022e74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8022772:	697b      	ldr	r3, [r7, #20]
 8022774:	015a      	lsls	r2, r3, #5
 8022776:	69bb      	ldr	r3, [r7, #24]
 8022778:	4413      	add	r3, r2
 802277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802277e:	689b      	ldr	r3, [r3, #8]
 8022780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8022784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022788:	d122      	bne.n	80227d0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 802278a:	697b      	ldr	r3, [r7, #20]
 802278c:	015a      	lsls	r2, r3, #5
 802278e:	69bb      	ldr	r3, [r7, #24]
 8022790:	4413      	add	r3, r2
 8022792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022796:	68db      	ldr	r3, [r3, #12]
 8022798:	697a      	ldr	r2, [r7, #20]
 802279a:	0151      	lsls	r1, r2, #5
 802279c:	69ba      	ldr	r2, [r7, #24]
 802279e:	440a      	add	r2, r1
 80227a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80227a4:	f043 0302 	orr.w	r3, r3, #2
 80227a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80227aa:	687b      	ldr	r3, [r7, #4]
 80227ac:	681b      	ldr	r3, [r3, #0]
 80227ae:	697a      	ldr	r2, [r7, #20]
 80227b0:	b2d2      	uxtb	r2, r2
 80227b2:	4611      	mov	r1, r2
 80227b4:	4618      	mov	r0, r3
 80227b6:	f003 f9b6 	bl	8025b26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80227ba:	697b      	ldr	r3, [r7, #20]
 80227bc:	015a      	lsls	r2, r3, #5
 80227be:	69bb      	ldr	r3, [r7, #24]
 80227c0:	4413      	add	r3, r2
 80227c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80227c6:	461a      	mov	r2, r3
 80227c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80227cc:	6093      	str	r3, [r2, #8]
}
 80227ce:	e351      	b.n	8022e74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80227d0:	697b      	ldr	r3, [r7, #20]
 80227d2:	015a      	lsls	r2, r3, #5
 80227d4:	69bb      	ldr	r3, [r7, #24]
 80227d6:	4413      	add	r3, r2
 80227d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80227dc:	689b      	ldr	r3, [r3, #8]
 80227de:	f003 0301 	and.w	r3, r3, #1
 80227e2:	2b01      	cmp	r3, #1
 80227e4:	d150      	bne.n	8022888 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80227e6:	687a      	ldr	r2, [r7, #4]
 80227e8:	697b      	ldr	r3, [r7, #20]
 80227ea:	212c      	movs	r1, #44	; 0x2c
 80227ec:	fb01 f303 	mul.w	r3, r1, r3
 80227f0:	4413      	add	r3, r2
 80227f2:	335c      	adds	r3, #92	; 0x5c
 80227f4:	2200      	movs	r2, #0
 80227f6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80227f8:	697b      	ldr	r3, [r7, #20]
 80227fa:	015a      	lsls	r2, r3, #5
 80227fc:	69bb      	ldr	r3, [r7, #24]
 80227fe:	4413      	add	r3, r2
 8022800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022804:	689b      	ldr	r3, [r3, #8]
 8022806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802280a:	2b40      	cmp	r3, #64	; 0x40
 802280c:	d111      	bne.n	8022832 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 802280e:	687a      	ldr	r2, [r7, #4]
 8022810:	697b      	ldr	r3, [r7, #20]
 8022812:	212c      	movs	r1, #44	; 0x2c
 8022814:	fb01 f303 	mul.w	r3, r1, r3
 8022818:	4413      	add	r3, r2
 802281a:	333d      	adds	r3, #61	; 0x3d
 802281c:	2201      	movs	r2, #1
 802281e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8022820:	697b      	ldr	r3, [r7, #20]
 8022822:	015a      	lsls	r2, r3, #5
 8022824:	69bb      	ldr	r3, [r7, #24]
 8022826:	4413      	add	r3, r2
 8022828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802282c:	461a      	mov	r2, r3
 802282e:	2340      	movs	r3, #64	; 0x40
 8022830:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8022832:	697b      	ldr	r3, [r7, #20]
 8022834:	015a      	lsls	r2, r3, #5
 8022836:	69bb      	ldr	r3, [r7, #24]
 8022838:	4413      	add	r3, r2
 802283a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802283e:	68db      	ldr	r3, [r3, #12]
 8022840:	697a      	ldr	r2, [r7, #20]
 8022842:	0151      	lsls	r1, r2, #5
 8022844:	69ba      	ldr	r2, [r7, #24]
 8022846:	440a      	add	r2, r1
 8022848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802284c:	f043 0302 	orr.w	r3, r3, #2
 8022850:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8022852:	687b      	ldr	r3, [r7, #4]
 8022854:	681b      	ldr	r3, [r3, #0]
 8022856:	697a      	ldr	r2, [r7, #20]
 8022858:	b2d2      	uxtb	r2, r2
 802285a:	4611      	mov	r1, r2
 802285c:	4618      	mov	r0, r3
 802285e:	f003 f962 	bl	8025b26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8022862:	697b      	ldr	r3, [r7, #20]
 8022864:	015a      	lsls	r2, r3, #5
 8022866:	69bb      	ldr	r3, [r7, #24]
 8022868:	4413      	add	r3, r2
 802286a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802286e:	461a      	mov	r2, r3
 8022870:	2301      	movs	r3, #1
 8022872:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8022874:	687a      	ldr	r2, [r7, #4]
 8022876:	697b      	ldr	r3, [r7, #20]
 8022878:	212c      	movs	r1, #44	; 0x2c
 802287a:	fb01 f303 	mul.w	r3, r1, r3
 802287e:	4413      	add	r3, r2
 8022880:	3361      	adds	r3, #97	; 0x61
 8022882:	2201      	movs	r2, #1
 8022884:	701a      	strb	r2, [r3, #0]
}
 8022886:	e2f5      	b.n	8022e74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8022888:	697b      	ldr	r3, [r7, #20]
 802288a:	015a      	lsls	r2, r3, #5
 802288c:	69bb      	ldr	r3, [r7, #24]
 802288e:	4413      	add	r3, r2
 8022890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022894:	689b      	ldr	r3, [r3, #8]
 8022896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802289a:	2b40      	cmp	r3, #64	; 0x40
 802289c:	d13c      	bne.n	8022918 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 802289e:	687a      	ldr	r2, [r7, #4]
 80228a0:	697b      	ldr	r3, [r7, #20]
 80228a2:	212c      	movs	r1, #44	; 0x2c
 80228a4:	fb01 f303 	mul.w	r3, r1, r3
 80228a8:	4413      	add	r3, r2
 80228aa:	3361      	adds	r3, #97	; 0x61
 80228ac:	2204      	movs	r2, #4
 80228ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80228b0:	687a      	ldr	r2, [r7, #4]
 80228b2:	697b      	ldr	r3, [r7, #20]
 80228b4:	212c      	movs	r1, #44	; 0x2c
 80228b6:	fb01 f303 	mul.w	r3, r1, r3
 80228ba:	4413      	add	r3, r2
 80228bc:	333d      	adds	r3, #61	; 0x3d
 80228be:	2201      	movs	r2, #1
 80228c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80228c2:	687a      	ldr	r2, [r7, #4]
 80228c4:	697b      	ldr	r3, [r7, #20]
 80228c6:	212c      	movs	r1, #44	; 0x2c
 80228c8:	fb01 f303 	mul.w	r3, r1, r3
 80228cc:	4413      	add	r3, r2
 80228ce:	335c      	adds	r3, #92	; 0x5c
 80228d0:	2200      	movs	r2, #0
 80228d2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80228d4:	697b      	ldr	r3, [r7, #20]
 80228d6:	015a      	lsls	r2, r3, #5
 80228d8:	69bb      	ldr	r3, [r7, #24]
 80228da:	4413      	add	r3, r2
 80228dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80228e0:	68db      	ldr	r3, [r3, #12]
 80228e2:	697a      	ldr	r2, [r7, #20]
 80228e4:	0151      	lsls	r1, r2, #5
 80228e6:	69ba      	ldr	r2, [r7, #24]
 80228e8:	440a      	add	r2, r1
 80228ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80228ee:	f043 0302 	orr.w	r3, r3, #2
 80228f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80228f4:	687b      	ldr	r3, [r7, #4]
 80228f6:	681b      	ldr	r3, [r3, #0]
 80228f8:	697a      	ldr	r2, [r7, #20]
 80228fa:	b2d2      	uxtb	r2, r2
 80228fc:	4611      	mov	r1, r2
 80228fe:	4618      	mov	r0, r3
 8022900:	f003 f911 	bl	8025b26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8022904:	697b      	ldr	r3, [r7, #20]
 8022906:	015a      	lsls	r2, r3, #5
 8022908:	69bb      	ldr	r3, [r7, #24]
 802290a:	4413      	add	r3, r2
 802290c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022910:	461a      	mov	r2, r3
 8022912:	2340      	movs	r3, #64	; 0x40
 8022914:	6093      	str	r3, [r2, #8]
}
 8022916:	e2ad      	b.n	8022e74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8022918:	697b      	ldr	r3, [r7, #20]
 802291a:	015a      	lsls	r2, r3, #5
 802291c:	69bb      	ldr	r3, [r7, #24]
 802291e:	4413      	add	r3, r2
 8022920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022924:	689b      	ldr	r3, [r3, #8]
 8022926:	f003 0308 	and.w	r3, r3, #8
 802292a:	2b08      	cmp	r3, #8
 802292c:	d12a      	bne.n	8022984 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 802292e:	697b      	ldr	r3, [r7, #20]
 8022930:	015a      	lsls	r2, r3, #5
 8022932:	69bb      	ldr	r3, [r7, #24]
 8022934:	4413      	add	r3, r2
 8022936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802293a:	461a      	mov	r2, r3
 802293c:	2308      	movs	r3, #8
 802293e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8022940:	697b      	ldr	r3, [r7, #20]
 8022942:	015a      	lsls	r2, r3, #5
 8022944:	69bb      	ldr	r3, [r7, #24]
 8022946:	4413      	add	r3, r2
 8022948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802294c:	68db      	ldr	r3, [r3, #12]
 802294e:	697a      	ldr	r2, [r7, #20]
 8022950:	0151      	lsls	r1, r2, #5
 8022952:	69ba      	ldr	r2, [r7, #24]
 8022954:	440a      	add	r2, r1
 8022956:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802295a:	f043 0302 	orr.w	r3, r3, #2
 802295e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8022960:	687b      	ldr	r3, [r7, #4]
 8022962:	681b      	ldr	r3, [r3, #0]
 8022964:	697a      	ldr	r2, [r7, #20]
 8022966:	b2d2      	uxtb	r2, r2
 8022968:	4611      	mov	r1, r2
 802296a:	4618      	mov	r0, r3
 802296c:	f003 f8db 	bl	8025b26 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8022970:	687a      	ldr	r2, [r7, #4]
 8022972:	697b      	ldr	r3, [r7, #20]
 8022974:	212c      	movs	r1, #44	; 0x2c
 8022976:	fb01 f303 	mul.w	r3, r1, r3
 802297a:	4413      	add	r3, r2
 802297c:	3361      	adds	r3, #97	; 0x61
 802297e:	2205      	movs	r2, #5
 8022980:	701a      	strb	r2, [r3, #0]
}
 8022982:	e277      	b.n	8022e74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8022984:	697b      	ldr	r3, [r7, #20]
 8022986:	015a      	lsls	r2, r3, #5
 8022988:	69bb      	ldr	r3, [r7, #24]
 802298a:	4413      	add	r3, r2
 802298c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022990:	689b      	ldr	r3, [r3, #8]
 8022992:	f003 0310 	and.w	r3, r3, #16
 8022996:	2b10      	cmp	r3, #16
 8022998:	d150      	bne.n	8022a3c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 802299a:	687a      	ldr	r2, [r7, #4]
 802299c:	697b      	ldr	r3, [r7, #20]
 802299e:	212c      	movs	r1, #44	; 0x2c
 80229a0:	fb01 f303 	mul.w	r3, r1, r3
 80229a4:	4413      	add	r3, r2
 80229a6:	335c      	adds	r3, #92	; 0x5c
 80229a8:	2200      	movs	r2, #0
 80229aa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80229ac:	687a      	ldr	r2, [r7, #4]
 80229ae:	697b      	ldr	r3, [r7, #20]
 80229b0:	212c      	movs	r1, #44	; 0x2c
 80229b2:	fb01 f303 	mul.w	r3, r1, r3
 80229b6:	4413      	add	r3, r2
 80229b8:	3361      	adds	r3, #97	; 0x61
 80229ba:	2203      	movs	r2, #3
 80229bc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80229be:	687a      	ldr	r2, [r7, #4]
 80229c0:	697b      	ldr	r3, [r7, #20]
 80229c2:	212c      	movs	r1, #44	; 0x2c
 80229c4:	fb01 f303 	mul.w	r3, r1, r3
 80229c8:	4413      	add	r3, r2
 80229ca:	333d      	adds	r3, #61	; 0x3d
 80229cc:	781b      	ldrb	r3, [r3, #0]
 80229ce:	2b00      	cmp	r3, #0
 80229d0:	d112      	bne.n	80229f8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80229d2:	687a      	ldr	r2, [r7, #4]
 80229d4:	697b      	ldr	r3, [r7, #20]
 80229d6:	212c      	movs	r1, #44	; 0x2c
 80229d8:	fb01 f303 	mul.w	r3, r1, r3
 80229dc:	4413      	add	r3, r2
 80229de:	333c      	adds	r3, #60	; 0x3c
 80229e0:	781b      	ldrb	r3, [r3, #0]
 80229e2:	2b00      	cmp	r3, #0
 80229e4:	d108      	bne.n	80229f8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80229e6:	687a      	ldr	r2, [r7, #4]
 80229e8:	697b      	ldr	r3, [r7, #20]
 80229ea:	212c      	movs	r1, #44	; 0x2c
 80229ec:	fb01 f303 	mul.w	r3, r1, r3
 80229f0:	4413      	add	r3, r2
 80229f2:	333d      	adds	r3, #61	; 0x3d
 80229f4:	2201      	movs	r2, #1
 80229f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80229f8:	697b      	ldr	r3, [r7, #20]
 80229fa:	015a      	lsls	r2, r3, #5
 80229fc:	69bb      	ldr	r3, [r7, #24]
 80229fe:	4413      	add	r3, r2
 8022a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022a04:	68db      	ldr	r3, [r3, #12]
 8022a06:	697a      	ldr	r2, [r7, #20]
 8022a08:	0151      	lsls	r1, r2, #5
 8022a0a:	69ba      	ldr	r2, [r7, #24]
 8022a0c:	440a      	add	r2, r1
 8022a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8022a12:	f043 0302 	orr.w	r3, r3, #2
 8022a16:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8022a18:	687b      	ldr	r3, [r7, #4]
 8022a1a:	681b      	ldr	r3, [r3, #0]
 8022a1c:	697a      	ldr	r2, [r7, #20]
 8022a1e:	b2d2      	uxtb	r2, r2
 8022a20:	4611      	mov	r1, r2
 8022a22:	4618      	mov	r0, r3
 8022a24:	f003 f87f 	bl	8025b26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8022a28:	697b      	ldr	r3, [r7, #20]
 8022a2a:	015a      	lsls	r2, r3, #5
 8022a2c:	69bb      	ldr	r3, [r7, #24]
 8022a2e:	4413      	add	r3, r2
 8022a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022a34:	461a      	mov	r2, r3
 8022a36:	2310      	movs	r3, #16
 8022a38:	6093      	str	r3, [r2, #8]
}
 8022a3a:	e21b      	b.n	8022e74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8022a3c:	697b      	ldr	r3, [r7, #20]
 8022a3e:	015a      	lsls	r2, r3, #5
 8022a40:	69bb      	ldr	r3, [r7, #24]
 8022a42:	4413      	add	r3, r2
 8022a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022a48:	689b      	ldr	r3, [r3, #8]
 8022a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022a4e:	2b80      	cmp	r3, #128	; 0x80
 8022a50:	d174      	bne.n	8022b3c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8022a52:	687b      	ldr	r3, [r7, #4]
 8022a54:	691b      	ldr	r3, [r3, #16]
 8022a56:	2b00      	cmp	r3, #0
 8022a58:	d121      	bne.n	8022a9e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8022a5a:	687a      	ldr	r2, [r7, #4]
 8022a5c:	697b      	ldr	r3, [r7, #20]
 8022a5e:	212c      	movs	r1, #44	; 0x2c
 8022a60:	fb01 f303 	mul.w	r3, r1, r3
 8022a64:	4413      	add	r3, r2
 8022a66:	3361      	adds	r3, #97	; 0x61
 8022a68:	2206      	movs	r2, #6
 8022a6a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8022a6c:	697b      	ldr	r3, [r7, #20]
 8022a6e:	015a      	lsls	r2, r3, #5
 8022a70:	69bb      	ldr	r3, [r7, #24]
 8022a72:	4413      	add	r3, r2
 8022a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022a78:	68db      	ldr	r3, [r3, #12]
 8022a7a:	697a      	ldr	r2, [r7, #20]
 8022a7c:	0151      	lsls	r1, r2, #5
 8022a7e:	69ba      	ldr	r2, [r7, #24]
 8022a80:	440a      	add	r2, r1
 8022a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8022a86:	f043 0302 	orr.w	r3, r3, #2
 8022a8a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8022a8c:	687b      	ldr	r3, [r7, #4]
 8022a8e:	681b      	ldr	r3, [r3, #0]
 8022a90:	697a      	ldr	r2, [r7, #20]
 8022a92:	b2d2      	uxtb	r2, r2
 8022a94:	4611      	mov	r1, r2
 8022a96:	4618      	mov	r0, r3
 8022a98:	f003 f845 	bl	8025b26 <USB_HC_Halt>
 8022a9c:	e044      	b.n	8022b28 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8022a9e:	687a      	ldr	r2, [r7, #4]
 8022aa0:	697b      	ldr	r3, [r7, #20]
 8022aa2:	212c      	movs	r1, #44	; 0x2c
 8022aa4:	fb01 f303 	mul.w	r3, r1, r3
 8022aa8:	4413      	add	r3, r2
 8022aaa:	335c      	adds	r3, #92	; 0x5c
 8022aac:	681b      	ldr	r3, [r3, #0]
 8022aae:	1c5a      	adds	r2, r3, #1
 8022ab0:	6879      	ldr	r1, [r7, #4]
 8022ab2:	697b      	ldr	r3, [r7, #20]
 8022ab4:	202c      	movs	r0, #44	; 0x2c
 8022ab6:	fb00 f303 	mul.w	r3, r0, r3
 8022aba:	440b      	add	r3, r1
 8022abc:	335c      	adds	r3, #92	; 0x5c
 8022abe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8022ac0:	687a      	ldr	r2, [r7, #4]
 8022ac2:	697b      	ldr	r3, [r7, #20]
 8022ac4:	212c      	movs	r1, #44	; 0x2c
 8022ac6:	fb01 f303 	mul.w	r3, r1, r3
 8022aca:	4413      	add	r3, r2
 8022acc:	335c      	adds	r3, #92	; 0x5c
 8022ace:	681b      	ldr	r3, [r3, #0]
 8022ad0:	2b02      	cmp	r3, #2
 8022ad2:	d920      	bls.n	8022b16 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8022ad4:	687a      	ldr	r2, [r7, #4]
 8022ad6:	697b      	ldr	r3, [r7, #20]
 8022ad8:	212c      	movs	r1, #44	; 0x2c
 8022ada:	fb01 f303 	mul.w	r3, r1, r3
 8022ade:	4413      	add	r3, r2
 8022ae0:	335c      	adds	r3, #92	; 0x5c
 8022ae2:	2200      	movs	r2, #0
 8022ae4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8022ae6:	687a      	ldr	r2, [r7, #4]
 8022ae8:	697b      	ldr	r3, [r7, #20]
 8022aea:	212c      	movs	r1, #44	; 0x2c
 8022aec:	fb01 f303 	mul.w	r3, r1, r3
 8022af0:	4413      	add	r3, r2
 8022af2:	3360      	adds	r3, #96	; 0x60
 8022af4:	2204      	movs	r2, #4
 8022af6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8022af8:	697b      	ldr	r3, [r7, #20]
 8022afa:	b2d9      	uxtb	r1, r3
 8022afc:	687a      	ldr	r2, [r7, #4]
 8022afe:	697b      	ldr	r3, [r7, #20]
 8022b00:	202c      	movs	r0, #44	; 0x2c
 8022b02:	fb00 f303 	mul.w	r3, r0, r3
 8022b06:	4413      	add	r3, r2
 8022b08:	3360      	adds	r3, #96	; 0x60
 8022b0a:	781b      	ldrb	r3, [r3, #0]
 8022b0c:	461a      	mov	r2, r3
 8022b0e:	6878      	ldr	r0, [r7, #4]
 8022b10:	f005 f9c6 	bl	8027ea0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8022b14:	e008      	b.n	8022b28 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8022b16:	687a      	ldr	r2, [r7, #4]
 8022b18:	697b      	ldr	r3, [r7, #20]
 8022b1a:	212c      	movs	r1, #44	; 0x2c
 8022b1c:	fb01 f303 	mul.w	r3, r1, r3
 8022b20:	4413      	add	r3, r2
 8022b22:	3360      	adds	r3, #96	; 0x60
 8022b24:	2202      	movs	r2, #2
 8022b26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8022b28:	697b      	ldr	r3, [r7, #20]
 8022b2a:	015a      	lsls	r2, r3, #5
 8022b2c:	69bb      	ldr	r3, [r7, #24]
 8022b2e:	4413      	add	r3, r2
 8022b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022b34:	461a      	mov	r2, r3
 8022b36:	2380      	movs	r3, #128	; 0x80
 8022b38:	6093      	str	r3, [r2, #8]
}
 8022b3a:	e19b      	b.n	8022e74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8022b3c:	697b      	ldr	r3, [r7, #20]
 8022b3e:	015a      	lsls	r2, r3, #5
 8022b40:	69bb      	ldr	r3, [r7, #24]
 8022b42:	4413      	add	r3, r2
 8022b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022b48:	689b      	ldr	r3, [r3, #8]
 8022b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8022b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8022b52:	d134      	bne.n	8022bbe <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8022b54:	697b      	ldr	r3, [r7, #20]
 8022b56:	015a      	lsls	r2, r3, #5
 8022b58:	69bb      	ldr	r3, [r7, #24]
 8022b5a:	4413      	add	r3, r2
 8022b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022b60:	68db      	ldr	r3, [r3, #12]
 8022b62:	697a      	ldr	r2, [r7, #20]
 8022b64:	0151      	lsls	r1, r2, #5
 8022b66:	69ba      	ldr	r2, [r7, #24]
 8022b68:	440a      	add	r2, r1
 8022b6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8022b6e:	f043 0302 	orr.w	r3, r3, #2
 8022b72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8022b74:	687b      	ldr	r3, [r7, #4]
 8022b76:	681b      	ldr	r3, [r3, #0]
 8022b78:	697a      	ldr	r2, [r7, #20]
 8022b7a:	b2d2      	uxtb	r2, r2
 8022b7c:	4611      	mov	r1, r2
 8022b7e:	4618      	mov	r0, r3
 8022b80:	f002 ffd1 	bl	8025b26 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8022b84:	697b      	ldr	r3, [r7, #20]
 8022b86:	015a      	lsls	r2, r3, #5
 8022b88:	69bb      	ldr	r3, [r7, #24]
 8022b8a:	4413      	add	r3, r2
 8022b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022b90:	461a      	mov	r2, r3
 8022b92:	2310      	movs	r3, #16
 8022b94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8022b96:	697b      	ldr	r3, [r7, #20]
 8022b98:	015a      	lsls	r2, r3, #5
 8022b9a:	69bb      	ldr	r3, [r7, #24]
 8022b9c:	4413      	add	r3, r2
 8022b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022ba2:	461a      	mov	r2, r3
 8022ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022ba8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8022baa:	687a      	ldr	r2, [r7, #4]
 8022bac:	697b      	ldr	r3, [r7, #20]
 8022bae:	212c      	movs	r1, #44	; 0x2c
 8022bb0:	fb01 f303 	mul.w	r3, r1, r3
 8022bb4:	4413      	add	r3, r2
 8022bb6:	3361      	adds	r3, #97	; 0x61
 8022bb8:	2208      	movs	r2, #8
 8022bba:	701a      	strb	r2, [r3, #0]
}
 8022bbc:	e15a      	b.n	8022e74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8022bbe:	697b      	ldr	r3, [r7, #20]
 8022bc0:	015a      	lsls	r2, r3, #5
 8022bc2:	69bb      	ldr	r3, [r7, #24]
 8022bc4:	4413      	add	r3, r2
 8022bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022bca:	689b      	ldr	r3, [r3, #8]
 8022bcc:	f003 0302 	and.w	r3, r3, #2
 8022bd0:	2b02      	cmp	r3, #2
 8022bd2:	f040 814f 	bne.w	8022e74 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8022bd6:	697b      	ldr	r3, [r7, #20]
 8022bd8:	015a      	lsls	r2, r3, #5
 8022bda:	69bb      	ldr	r3, [r7, #24]
 8022bdc:	4413      	add	r3, r2
 8022bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022be2:	68db      	ldr	r3, [r3, #12]
 8022be4:	697a      	ldr	r2, [r7, #20]
 8022be6:	0151      	lsls	r1, r2, #5
 8022be8:	69ba      	ldr	r2, [r7, #24]
 8022bea:	440a      	add	r2, r1
 8022bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8022bf0:	f023 0302 	bic.w	r3, r3, #2
 8022bf4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8022bf6:	687a      	ldr	r2, [r7, #4]
 8022bf8:	697b      	ldr	r3, [r7, #20]
 8022bfa:	212c      	movs	r1, #44	; 0x2c
 8022bfc:	fb01 f303 	mul.w	r3, r1, r3
 8022c00:	4413      	add	r3, r2
 8022c02:	3361      	adds	r3, #97	; 0x61
 8022c04:	781b      	ldrb	r3, [r3, #0]
 8022c06:	2b01      	cmp	r3, #1
 8022c08:	d17d      	bne.n	8022d06 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8022c0a:	687a      	ldr	r2, [r7, #4]
 8022c0c:	697b      	ldr	r3, [r7, #20]
 8022c0e:	212c      	movs	r1, #44	; 0x2c
 8022c10:	fb01 f303 	mul.w	r3, r1, r3
 8022c14:	4413      	add	r3, r2
 8022c16:	3360      	adds	r3, #96	; 0x60
 8022c18:	2201      	movs	r2, #1
 8022c1a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8022c1c:	687a      	ldr	r2, [r7, #4]
 8022c1e:	697b      	ldr	r3, [r7, #20]
 8022c20:	212c      	movs	r1, #44	; 0x2c
 8022c22:	fb01 f303 	mul.w	r3, r1, r3
 8022c26:	4413      	add	r3, r2
 8022c28:	333f      	adds	r3, #63	; 0x3f
 8022c2a:	781b      	ldrb	r3, [r3, #0]
 8022c2c:	2b02      	cmp	r3, #2
 8022c2e:	d00a      	beq.n	8022c46 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8022c30:	687a      	ldr	r2, [r7, #4]
 8022c32:	697b      	ldr	r3, [r7, #20]
 8022c34:	212c      	movs	r1, #44	; 0x2c
 8022c36:	fb01 f303 	mul.w	r3, r1, r3
 8022c3a:	4413      	add	r3, r2
 8022c3c:	333f      	adds	r3, #63	; 0x3f
 8022c3e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8022c40:	2b03      	cmp	r3, #3
 8022c42:	f040 8100 	bne.w	8022e46 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8022c46:	687b      	ldr	r3, [r7, #4]
 8022c48:	691b      	ldr	r3, [r3, #16]
 8022c4a:	2b00      	cmp	r3, #0
 8022c4c:	d113      	bne.n	8022c76 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8022c4e:	687a      	ldr	r2, [r7, #4]
 8022c50:	697b      	ldr	r3, [r7, #20]
 8022c52:	212c      	movs	r1, #44	; 0x2c
 8022c54:	fb01 f303 	mul.w	r3, r1, r3
 8022c58:	4413      	add	r3, r2
 8022c5a:	3355      	adds	r3, #85	; 0x55
 8022c5c:	781b      	ldrb	r3, [r3, #0]
 8022c5e:	f083 0301 	eor.w	r3, r3, #1
 8022c62:	b2d8      	uxtb	r0, r3
 8022c64:	687a      	ldr	r2, [r7, #4]
 8022c66:	697b      	ldr	r3, [r7, #20]
 8022c68:	212c      	movs	r1, #44	; 0x2c
 8022c6a:	fb01 f303 	mul.w	r3, r1, r3
 8022c6e:	4413      	add	r3, r2
 8022c70:	3355      	adds	r3, #85	; 0x55
 8022c72:	4602      	mov	r2, r0
 8022c74:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8022c76:	687b      	ldr	r3, [r7, #4]
 8022c78:	691b      	ldr	r3, [r3, #16]
 8022c7a:	2b01      	cmp	r3, #1
 8022c7c:	f040 80e3 	bne.w	8022e46 <HCD_HC_OUT_IRQHandler+0x7cc>
 8022c80:	687a      	ldr	r2, [r7, #4]
 8022c82:	697b      	ldr	r3, [r7, #20]
 8022c84:	212c      	movs	r1, #44	; 0x2c
 8022c86:	fb01 f303 	mul.w	r3, r1, r3
 8022c8a:	4413      	add	r3, r2
 8022c8c:	334c      	adds	r3, #76	; 0x4c
 8022c8e:	681b      	ldr	r3, [r3, #0]
 8022c90:	2b00      	cmp	r3, #0
 8022c92:	f000 80d8 	beq.w	8022e46 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8022c96:	687a      	ldr	r2, [r7, #4]
 8022c98:	697b      	ldr	r3, [r7, #20]
 8022c9a:	212c      	movs	r1, #44	; 0x2c
 8022c9c:	fb01 f303 	mul.w	r3, r1, r3
 8022ca0:	4413      	add	r3, r2
 8022ca2:	334c      	adds	r3, #76	; 0x4c
 8022ca4:	681b      	ldr	r3, [r3, #0]
 8022ca6:	6879      	ldr	r1, [r7, #4]
 8022ca8:	697a      	ldr	r2, [r7, #20]
 8022caa:	202c      	movs	r0, #44	; 0x2c
 8022cac:	fb00 f202 	mul.w	r2, r0, r2
 8022cb0:	440a      	add	r2, r1
 8022cb2:	3240      	adds	r2, #64	; 0x40
 8022cb4:	8812      	ldrh	r2, [r2, #0]
 8022cb6:	4413      	add	r3, r2
 8022cb8:	3b01      	subs	r3, #1
 8022cba:	6879      	ldr	r1, [r7, #4]
 8022cbc:	697a      	ldr	r2, [r7, #20]
 8022cbe:	202c      	movs	r0, #44	; 0x2c
 8022cc0:	fb00 f202 	mul.w	r2, r0, r2
 8022cc4:	440a      	add	r2, r1
 8022cc6:	3240      	adds	r2, #64	; 0x40
 8022cc8:	8812      	ldrh	r2, [r2, #0]
 8022cca:	fbb3 f3f2 	udiv	r3, r3, r2
 8022cce:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8022cd0:	68fb      	ldr	r3, [r7, #12]
 8022cd2:	f003 0301 	and.w	r3, r3, #1
 8022cd6:	2b00      	cmp	r3, #0
 8022cd8:	f000 80b5 	beq.w	8022e46 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8022cdc:	687a      	ldr	r2, [r7, #4]
 8022cde:	697b      	ldr	r3, [r7, #20]
 8022ce0:	212c      	movs	r1, #44	; 0x2c
 8022ce2:	fb01 f303 	mul.w	r3, r1, r3
 8022ce6:	4413      	add	r3, r2
 8022ce8:	3355      	adds	r3, #85	; 0x55
 8022cea:	781b      	ldrb	r3, [r3, #0]
 8022cec:	f083 0301 	eor.w	r3, r3, #1
 8022cf0:	b2d8      	uxtb	r0, r3
 8022cf2:	687a      	ldr	r2, [r7, #4]
 8022cf4:	697b      	ldr	r3, [r7, #20]
 8022cf6:	212c      	movs	r1, #44	; 0x2c
 8022cf8:	fb01 f303 	mul.w	r3, r1, r3
 8022cfc:	4413      	add	r3, r2
 8022cfe:	3355      	adds	r3, #85	; 0x55
 8022d00:	4602      	mov	r2, r0
 8022d02:	701a      	strb	r2, [r3, #0]
 8022d04:	e09f      	b.n	8022e46 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8022d06:	687a      	ldr	r2, [r7, #4]
 8022d08:	697b      	ldr	r3, [r7, #20]
 8022d0a:	212c      	movs	r1, #44	; 0x2c
 8022d0c:	fb01 f303 	mul.w	r3, r1, r3
 8022d10:	4413      	add	r3, r2
 8022d12:	3361      	adds	r3, #97	; 0x61
 8022d14:	781b      	ldrb	r3, [r3, #0]
 8022d16:	2b03      	cmp	r3, #3
 8022d18:	d109      	bne.n	8022d2e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8022d1a:	687a      	ldr	r2, [r7, #4]
 8022d1c:	697b      	ldr	r3, [r7, #20]
 8022d1e:	212c      	movs	r1, #44	; 0x2c
 8022d20:	fb01 f303 	mul.w	r3, r1, r3
 8022d24:	4413      	add	r3, r2
 8022d26:	3360      	adds	r3, #96	; 0x60
 8022d28:	2202      	movs	r2, #2
 8022d2a:	701a      	strb	r2, [r3, #0]
 8022d2c:	e08b      	b.n	8022e46 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8022d2e:	687a      	ldr	r2, [r7, #4]
 8022d30:	697b      	ldr	r3, [r7, #20]
 8022d32:	212c      	movs	r1, #44	; 0x2c
 8022d34:	fb01 f303 	mul.w	r3, r1, r3
 8022d38:	4413      	add	r3, r2
 8022d3a:	3361      	adds	r3, #97	; 0x61
 8022d3c:	781b      	ldrb	r3, [r3, #0]
 8022d3e:	2b04      	cmp	r3, #4
 8022d40:	d109      	bne.n	8022d56 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8022d42:	687a      	ldr	r2, [r7, #4]
 8022d44:	697b      	ldr	r3, [r7, #20]
 8022d46:	212c      	movs	r1, #44	; 0x2c
 8022d48:	fb01 f303 	mul.w	r3, r1, r3
 8022d4c:	4413      	add	r3, r2
 8022d4e:	3360      	adds	r3, #96	; 0x60
 8022d50:	2202      	movs	r2, #2
 8022d52:	701a      	strb	r2, [r3, #0]
 8022d54:	e077      	b.n	8022e46 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8022d56:	687a      	ldr	r2, [r7, #4]
 8022d58:	697b      	ldr	r3, [r7, #20]
 8022d5a:	212c      	movs	r1, #44	; 0x2c
 8022d5c:	fb01 f303 	mul.w	r3, r1, r3
 8022d60:	4413      	add	r3, r2
 8022d62:	3361      	adds	r3, #97	; 0x61
 8022d64:	781b      	ldrb	r3, [r3, #0]
 8022d66:	2b05      	cmp	r3, #5
 8022d68:	d109      	bne.n	8022d7e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8022d6a:	687a      	ldr	r2, [r7, #4]
 8022d6c:	697b      	ldr	r3, [r7, #20]
 8022d6e:	212c      	movs	r1, #44	; 0x2c
 8022d70:	fb01 f303 	mul.w	r3, r1, r3
 8022d74:	4413      	add	r3, r2
 8022d76:	3360      	adds	r3, #96	; 0x60
 8022d78:	2205      	movs	r2, #5
 8022d7a:	701a      	strb	r2, [r3, #0]
 8022d7c:	e063      	b.n	8022e46 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8022d7e:	687a      	ldr	r2, [r7, #4]
 8022d80:	697b      	ldr	r3, [r7, #20]
 8022d82:	212c      	movs	r1, #44	; 0x2c
 8022d84:	fb01 f303 	mul.w	r3, r1, r3
 8022d88:	4413      	add	r3, r2
 8022d8a:	3361      	adds	r3, #97	; 0x61
 8022d8c:	781b      	ldrb	r3, [r3, #0]
 8022d8e:	2b06      	cmp	r3, #6
 8022d90:	d009      	beq.n	8022da6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8022d92:	687a      	ldr	r2, [r7, #4]
 8022d94:	697b      	ldr	r3, [r7, #20]
 8022d96:	212c      	movs	r1, #44	; 0x2c
 8022d98:	fb01 f303 	mul.w	r3, r1, r3
 8022d9c:	4413      	add	r3, r2
 8022d9e:	3361      	adds	r3, #97	; 0x61
 8022da0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8022da2:	2b08      	cmp	r3, #8
 8022da4:	d14f      	bne.n	8022e46 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8022da6:	687a      	ldr	r2, [r7, #4]
 8022da8:	697b      	ldr	r3, [r7, #20]
 8022daa:	212c      	movs	r1, #44	; 0x2c
 8022dac:	fb01 f303 	mul.w	r3, r1, r3
 8022db0:	4413      	add	r3, r2
 8022db2:	335c      	adds	r3, #92	; 0x5c
 8022db4:	681b      	ldr	r3, [r3, #0]
 8022db6:	1c5a      	adds	r2, r3, #1
 8022db8:	6879      	ldr	r1, [r7, #4]
 8022dba:	697b      	ldr	r3, [r7, #20]
 8022dbc:	202c      	movs	r0, #44	; 0x2c
 8022dbe:	fb00 f303 	mul.w	r3, r0, r3
 8022dc2:	440b      	add	r3, r1
 8022dc4:	335c      	adds	r3, #92	; 0x5c
 8022dc6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8022dc8:	687a      	ldr	r2, [r7, #4]
 8022dca:	697b      	ldr	r3, [r7, #20]
 8022dcc:	212c      	movs	r1, #44	; 0x2c
 8022dce:	fb01 f303 	mul.w	r3, r1, r3
 8022dd2:	4413      	add	r3, r2
 8022dd4:	335c      	adds	r3, #92	; 0x5c
 8022dd6:	681b      	ldr	r3, [r3, #0]
 8022dd8:	2b02      	cmp	r3, #2
 8022dda:	d912      	bls.n	8022e02 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8022ddc:	687a      	ldr	r2, [r7, #4]
 8022dde:	697b      	ldr	r3, [r7, #20]
 8022de0:	212c      	movs	r1, #44	; 0x2c
 8022de2:	fb01 f303 	mul.w	r3, r1, r3
 8022de6:	4413      	add	r3, r2
 8022de8:	335c      	adds	r3, #92	; 0x5c
 8022dea:	2200      	movs	r2, #0
 8022dec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8022dee:	687a      	ldr	r2, [r7, #4]
 8022df0:	697b      	ldr	r3, [r7, #20]
 8022df2:	212c      	movs	r1, #44	; 0x2c
 8022df4:	fb01 f303 	mul.w	r3, r1, r3
 8022df8:	4413      	add	r3, r2
 8022dfa:	3360      	adds	r3, #96	; 0x60
 8022dfc:	2204      	movs	r2, #4
 8022dfe:	701a      	strb	r2, [r3, #0]
 8022e00:	e021      	b.n	8022e46 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8022e02:	687a      	ldr	r2, [r7, #4]
 8022e04:	697b      	ldr	r3, [r7, #20]
 8022e06:	212c      	movs	r1, #44	; 0x2c
 8022e08:	fb01 f303 	mul.w	r3, r1, r3
 8022e0c:	4413      	add	r3, r2
 8022e0e:	3360      	adds	r3, #96	; 0x60
 8022e10:	2202      	movs	r2, #2
 8022e12:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8022e14:	697b      	ldr	r3, [r7, #20]
 8022e16:	015a      	lsls	r2, r3, #5
 8022e18:	69bb      	ldr	r3, [r7, #24]
 8022e1a:	4413      	add	r3, r2
 8022e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022e20:	681b      	ldr	r3, [r3, #0]
 8022e22:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8022e24:	693b      	ldr	r3, [r7, #16]
 8022e26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8022e2a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8022e2c:	693b      	ldr	r3, [r7, #16]
 8022e2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8022e32:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8022e34:	697b      	ldr	r3, [r7, #20]
 8022e36:	015a      	lsls	r2, r3, #5
 8022e38:	69bb      	ldr	r3, [r7, #24]
 8022e3a:	4413      	add	r3, r2
 8022e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022e40:	461a      	mov	r2, r3
 8022e42:	693b      	ldr	r3, [r7, #16]
 8022e44:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8022e46:	697b      	ldr	r3, [r7, #20]
 8022e48:	015a      	lsls	r2, r3, #5
 8022e4a:	69bb      	ldr	r3, [r7, #24]
 8022e4c:	4413      	add	r3, r2
 8022e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022e52:	461a      	mov	r2, r3
 8022e54:	2302      	movs	r3, #2
 8022e56:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8022e58:	697b      	ldr	r3, [r7, #20]
 8022e5a:	b2d9      	uxtb	r1, r3
 8022e5c:	687a      	ldr	r2, [r7, #4]
 8022e5e:	697b      	ldr	r3, [r7, #20]
 8022e60:	202c      	movs	r0, #44	; 0x2c
 8022e62:	fb00 f303 	mul.w	r3, r0, r3
 8022e66:	4413      	add	r3, r2
 8022e68:	3360      	adds	r3, #96	; 0x60
 8022e6a:	781b      	ldrb	r3, [r3, #0]
 8022e6c:	461a      	mov	r2, r3
 8022e6e:	6878      	ldr	r0, [r7, #4]
 8022e70:	f005 f816 	bl	8027ea0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8022e74:	bf00      	nop
 8022e76:	3720      	adds	r7, #32
 8022e78:	46bd      	mov	sp, r7
 8022e7a:	bd80      	pop	{r7, pc}

08022e7c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8022e7c:	b580      	push	{r7, lr}
 8022e7e:	b08a      	sub	sp, #40	; 0x28
 8022e80:	af00      	add	r7, sp, #0
 8022e82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8022e84:	687b      	ldr	r3, [r7, #4]
 8022e86:	681b      	ldr	r3, [r3, #0]
 8022e88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8022e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022e8c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8022e8e:	687b      	ldr	r3, [r7, #4]
 8022e90:	681b      	ldr	r3, [r3, #0]
 8022e92:	6a1b      	ldr	r3, [r3, #32]
 8022e94:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8022e96:	69fb      	ldr	r3, [r7, #28]
 8022e98:	f003 030f 	and.w	r3, r3, #15
 8022e9c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8022e9e:	69fb      	ldr	r3, [r7, #28]
 8022ea0:	0c5b      	lsrs	r3, r3, #17
 8022ea2:	f003 030f 	and.w	r3, r3, #15
 8022ea6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8022ea8:	69fb      	ldr	r3, [r7, #28]
 8022eaa:	091b      	lsrs	r3, r3, #4
 8022eac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8022eb0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8022eb2:	697b      	ldr	r3, [r7, #20]
 8022eb4:	2b02      	cmp	r3, #2
 8022eb6:	d004      	beq.n	8022ec2 <HCD_RXQLVL_IRQHandler+0x46>
 8022eb8:	697b      	ldr	r3, [r7, #20]
 8022eba:	2b05      	cmp	r3, #5
 8022ebc:	f000 80a9 	beq.w	8023012 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8022ec0:	e0aa      	b.n	8023018 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8022ec2:	693b      	ldr	r3, [r7, #16]
 8022ec4:	2b00      	cmp	r3, #0
 8022ec6:	f000 80a6 	beq.w	8023016 <HCD_RXQLVL_IRQHandler+0x19a>
 8022eca:	687a      	ldr	r2, [r7, #4]
 8022ecc:	69bb      	ldr	r3, [r7, #24]
 8022ece:	212c      	movs	r1, #44	; 0x2c
 8022ed0:	fb01 f303 	mul.w	r3, r1, r3
 8022ed4:	4413      	add	r3, r2
 8022ed6:	3344      	adds	r3, #68	; 0x44
 8022ed8:	681b      	ldr	r3, [r3, #0]
 8022eda:	2b00      	cmp	r3, #0
 8022edc:	f000 809b 	beq.w	8023016 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8022ee0:	687a      	ldr	r2, [r7, #4]
 8022ee2:	69bb      	ldr	r3, [r7, #24]
 8022ee4:	212c      	movs	r1, #44	; 0x2c
 8022ee6:	fb01 f303 	mul.w	r3, r1, r3
 8022eea:	4413      	add	r3, r2
 8022eec:	3350      	adds	r3, #80	; 0x50
 8022eee:	681a      	ldr	r2, [r3, #0]
 8022ef0:	693b      	ldr	r3, [r7, #16]
 8022ef2:	441a      	add	r2, r3
 8022ef4:	6879      	ldr	r1, [r7, #4]
 8022ef6:	69bb      	ldr	r3, [r7, #24]
 8022ef8:	202c      	movs	r0, #44	; 0x2c
 8022efa:	fb00 f303 	mul.w	r3, r0, r3
 8022efe:	440b      	add	r3, r1
 8022f00:	334c      	adds	r3, #76	; 0x4c
 8022f02:	681b      	ldr	r3, [r3, #0]
 8022f04:	429a      	cmp	r2, r3
 8022f06:	d87a      	bhi.n	8022ffe <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8022f08:	687b      	ldr	r3, [r7, #4]
 8022f0a:	6818      	ldr	r0, [r3, #0]
 8022f0c:	687a      	ldr	r2, [r7, #4]
 8022f0e:	69bb      	ldr	r3, [r7, #24]
 8022f10:	212c      	movs	r1, #44	; 0x2c
 8022f12:	fb01 f303 	mul.w	r3, r1, r3
 8022f16:	4413      	add	r3, r2
 8022f18:	3344      	adds	r3, #68	; 0x44
 8022f1a:	681b      	ldr	r3, [r3, #0]
 8022f1c:	693a      	ldr	r2, [r7, #16]
 8022f1e:	b292      	uxth	r2, r2
 8022f20:	4619      	mov	r1, r3
 8022f22:	f002 f979 	bl	8025218 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8022f26:	687a      	ldr	r2, [r7, #4]
 8022f28:	69bb      	ldr	r3, [r7, #24]
 8022f2a:	212c      	movs	r1, #44	; 0x2c
 8022f2c:	fb01 f303 	mul.w	r3, r1, r3
 8022f30:	4413      	add	r3, r2
 8022f32:	3344      	adds	r3, #68	; 0x44
 8022f34:	681a      	ldr	r2, [r3, #0]
 8022f36:	693b      	ldr	r3, [r7, #16]
 8022f38:	441a      	add	r2, r3
 8022f3a:	6879      	ldr	r1, [r7, #4]
 8022f3c:	69bb      	ldr	r3, [r7, #24]
 8022f3e:	202c      	movs	r0, #44	; 0x2c
 8022f40:	fb00 f303 	mul.w	r3, r0, r3
 8022f44:	440b      	add	r3, r1
 8022f46:	3344      	adds	r3, #68	; 0x44
 8022f48:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8022f4a:	687a      	ldr	r2, [r7, #4]
 8022f4c:	69bb      	ldr	r3, [r7, #24]
 8022f4e:	212c      	movs	r1, #44	; 0x2c
 8022f50:	fb01 f303 	mul.w	r3, r1, r3
 8022f54:	4413      	add	r3, r2
 8022f56:	3350      	adds	r3, #80	; 0x50
 8022f58:	681a      	ldr	r2, [r3, #0]
 8022f5a:	693b      	ldr	r3, [r7, #16]
 8022f5c:	441a      	add	r2, r3
 8022f5e:	6879      	ldr	r1, [r7, #4]
 8022f60:	69bb      	ldr	r3, [r7, #24]
 8022f62:	202c      	movs	r0, #44	; 0x2c
 8022f64:	fb00 f303 	mul.w	r3, r0, r3
 8022f68:	440b      	add	r3, r1
 8022f6a:	3350      	adds	r3, #80	; 0x50
 8022f6c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8022f6e:	69bb      	ldr	r3, [r7, #24]
 8022f70:	015a      	lsls	r2, r3, #5
 8022f72:	6a3b      	ldr	r3, [r7, #32]
 8022f74:	4413      	add	r3, r2
 8022f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022f7a:	691b      	ldr	r3, [r3, #16]
 8022f7c:	0cdb      	lsrs	r3, r3, #19
 8022f7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8022f82:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8022f84:	687a      	ldr	r2, [r7, #4]
 8022f86:	69bb      	ldr	r3, [r7, #24]
 8022f88:	212c      	movs	r1, #44	; 0x2c
 8022f8a:	fb01 f303 	mul.w	r3, r1, r3
 8022f8e:	4413      	add	r3, r2
 8022f90:	3340      	adds	r3, #64	; 0x40
 8022f92:	881b      	ldrh	r3, [r3, #0]
 8022f94:	461a      	mov	r2, r3
 8022f96:	693b      	ldr	r3, [r7, #16]
 8022f98:	4293      	cmp	r3, r2
 8022f9a:	d13c      	bne.n	8023016 <HCD_RXQLVL_IRQHandler+0x19a>
 8022f9c:	68fb      	ldr	r3, [r7, #12]
 8022f9e:	2b00      	cmp	r3, #0
 8022fa0:	d039      	beq.n	8023016 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8022fa2:	69bb      	ldr	r3, [r7, #24]
 8022fa4:	015a      	lsls	r2, r3, #5
 8022fa6:	6a3b      	ldr	r3, [r7, #32]
 8022fa8:	4413      	add	r3, r2
 8022faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022fae:	681b      	ldr	r3, [r3, #0]
 8022fb0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8022fb2:	68bb      	ldr	r3, [r7, #8]
 8022fb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8022fb8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8022fba:	68bb      	ldr	r3, [r7, #8]
 8022fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8022fc0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8022fc2:	69bb      	ldr	r3, [r7, #24]
 8022fc4:	015a      	lsls	r2, r3, #5
 8022fc6:	6a3b      	ldr	r3, [r7, #32]
 8022fc8:	4413      	add	r3, r2
 8022fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8022fce:	461a      	mov	r2, r3
 8022fd0:	68bb      	ldr	r3, [r7, #8]
 8022fd2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8022fd4:	687a      	ldr	r2, [r7, #4]
 8022fd6:	69bb      	ldr	r3, [r7, #24]
 8022fd8:	212c      	movs	r1, #44	; 0x2c
 8022fda:	fb01 f303 	mul.w	r3, r1, r3
 8022fde:	4413      	add	r3, r2
 8022fe0:	3354      	adds	r3, #84	; 0x54
 8022fe2:	781b      	ldrb	r3, [r3, #0]
 8022fe4:	f083 0301 	eor.w	r3, r3, #1
 8022fe8:	b2d8      	uxtb	r0, r3
 8022fea:	687a      	ldr	r2, [r7, #4]
 8022fec:	69bb      	ldr	r3, [r7, #24]
 8022fee:	212c      	movs	r1, #44	; 0x2c
 8022ff0:	fb01 f303 	mul.w	r3, r1, r3
 8022ff4:	4413      	add	r3, r2
 8022ff6:	3354      	adds	r3, #84	; 0x54
 8022ff8:	4602      	mov	r2, r0
 8022ffa:	701a      	strb	r2, [r3, #0]
      break;
 8022ffc:	e00b      	b.n	8023016 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8022ffe:	687a      	ldr	r2, [r7, #4]
 8023000:	69bb      	ldr	r3, [r7, #24]
 8023002:	212c      	movs	r1, #44	; 0x2c
 8023004:	fb01 f303 	mul.w	r3, r1, r3
 8023008:	4413      	add	r3, r2
 802300a:	3360      	adds	r3, #96	; 0x60
 802300c:	2204      	movs	r2, #4
 802300e:	701a      	strb	r2, [r3, #0]
      break;
 8023010:	e001      	b.n	8023016 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8023012:	bf00      	nop
 8023014:	e000      	b.n	8023018 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8023016:	bf00      	nop
  }
}
 8023018:	bf00      	nop
 802301a:	3728      	adds	r7, #40	; 0x28
 802301c:	46bd      	mov	sp, r7
 802301e:	bd80      	pop	{r7, pc}

08023020 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8023020:	b580      	push	{r7, lr}
 8023022:	b086      	sub	sp, #24
 8023024:	af00      	add	r7, sp, #0
 8023026:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8023028:	687b      	ldr	r3, [r7, #4]
 802302a:	681b      	ldr	r3, [r3, #0]
 802302c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802302e:	697b      	ldr	r3, [r7, #20]
 8023030:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8023032:	693b      	ldr	r3, [r7, #16]
 8023034:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8023038:	681b      	ldr	r3, [r3, #0]
 802303a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 802303c:	693b      	ldr	r3, [r7, #16]
 802303e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8023042:	681b      	ldr	r3, [r3, #0]
 8023044:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8023046:	68bb      	ldr	r3, [r7, #8]
 8023048:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802304c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 802304e:	68fb      	ldr	r3, [r7, #12]
 8023050:	f003 0302 	and.w	r3, r3, #2
 8023054:	2b02      	cmp	r3, #2
 8023056:	d10b      	bne.n	8023070 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8023058:	68fb      	ldr	r3, [r7, #12]
 802305a:	f003 0301 	and.w	r3, r3, #1
 802305e:	2b01      	cmp	r3, #1
 8023060:	d102      	bne.n	8023068 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8023062:	6878      	ldr	r0, [r7, #4]
 8023064:	f004 ff00 	bl	8027e68 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8023068:	68bb      	ldr	r3, [r7, #8]
 802306a:	f043 0302 	orr.w	r3, r3, #2
 802306e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8023070:	68fb      	ldr	r3, [r7, #12]
 8023072:	f003 0308 	and.w	r3, r3, #8
 8023076:	2b08      	cmp	r3, #8
 8023078:	d132      	bne.n	80230e0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 802307a:	68bb      	ldr	r3, [r7, #8]
 802307c:	f043 0308 	orr.w	r3, r3, #8
 8023080:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8023082:	68fb      	ldr	r3, [r7, #12]
 8023084:	f003 0304 	and.w	r3, r3, #4
 8023088:	2b04      	cmp	r3, #4
 802308a:	d126      	bne.n	80230da <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 802308c:	687b      	ldr	r3, [r7, #4]
 802308e:	699b      	ldr	r3, [r3, #24]
 8023090:	2b02      	cmp	r3, #2
 8023092:	d113      	bne.n	80230bc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8023094:	68fb      	ldr	r3, [r7, #12]
 8023096:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 802309a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802309e:	d106      	bne.n	80230ae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80230a0:	687b      	ldr	r3, [r7, #4]
 80230a2:	681b      	ldr	r3, [r3, #0]
 80230a4:	2102      	movs	r1, #2
 80230a6:	4618      	mov	r0, r3
 80230a8:	f002 fa16 	bl	80254d8 <USB_InitFSLSPClkSel>
 80230ac:	e011      	b.n	80230d2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80230ae:	687b      	ldr	r3, [r7, #4]
 80230b0:	681b      	ldr	r3, [r3, #0]
 80230b2:	2101      	movs	r1, #1
 80230b4:	4618      	mov	r0, r3
 80230b6:	f002 fa0f 	bl	80254d8 <USB_InitFSLSPClkSel>
 80230ba:	e00a      	b.n	80230d2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80230bc:	687b      	ldr	r3, [r7, #4]
 80230be:	68db      	ldr	r3, [r3, #12]
 80230c0:	2b01      	cmp	r3, #1
 80230c2:	d106      	bne.n	80230d2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80230c4:	693b      	ldr	r3, [r7, #16]
 80230c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80230ca:	461a      	mov	r2, r3
 80230cc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80230d0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80230d2:	6878      	ldr	r0, [r7, #4]
 80230d4:	f004 fef2 	bl	8027ebc <HAL_HCD_PortEnabled_Callback>
 80230d8:	e002      	b.n	80230e0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80230da:	6878      	ldr	r0, [r7, #4]
 80230dc:	f004 fefc 	bl	8027ed8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80230e0:	68fb      	ldr	r3, [r7, #12]
 80230e2:	f003 0320 	and.w	r3, r3, #32
 80230e6:	2b20      	cmp	r3, #32
 80230e8:	d103      	bne.n	80230f2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80230ea:	68bb      	ldr	r3, [r7, #8]
 80230ec:	f043 0320 	orr.w	r3, r3, #32
 80230f0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80230f2:	693b      	ldr	r3, [r7, #16]
 80230f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80230f8:	461a      	mov	r2, r3
 80230fa:	68bb      	ldr	r3, [r7, #8]
 80230fc:	6013      	str	r3, [r2, #0]
}
 80230fe:	bf00      	nop
 8023100:	3718      	adds	r7, #24
 8023102:	46bd      	mov	sp, r7
 8023104:	bd80      	pop	{r7, pc}
	...

08023108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8023108:	b580      	push	{r7, lr}
 802310a:	b084      	sub	sp, #16
 802310c:	af00      	add	r7, sp, #0
 802310e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8023110:	687b      	ldr	r3, [r7, #4]
 8023112:	2b00      	cmp	r3, #0
 8023114:	d101      	bne.n	802311a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8023116:	2301      	movs	r3, #1
 8023118:	e12b      	b.n	8023372 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 802311a:	687b      	ldr	r3, [r7, #4]
 802311c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023120:	b2db      	uxtb	r3, r3
 8023122:	2b00      	cmp	r3, #0
 8023124:	d106      	bne.n	8023134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8023126:	687b      	ldr	r3, [r7, #4]
 8023128:	2200      	movs	r2, #0
 802312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 802312e:	6878      	ldr	r0, [r7, #4]
 8023130:	f7fd fc7c 	bl	8020a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8023134:	687b      	ldr	r3, [r7, #4]
 8023136:	2224      	movs	r2, #36	; 0x24
 8023138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 802313c:	687b      	ldr	r3, [r7, #4]
 802313e:	681b      	ldr	r3, [r3, #0]
 8023140:	681a      	ldr	r2, [r3, #0]
 8023142:	687b      	ldr	r3, [r7, #4]
 8023144:	681b      	ldr	r3, [r3, #0]
 8023146:	f022 0201 	bic.w	r2, r2, #1
 802314a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 802314c:	687b      	ldr	r3, [r7, #4]
 802314e:	681b      	ldr	r3, [r3, #0]
 8023150:	681a      	ldr	r2, [r3, #0]
 8023152:	687b      	ldr	r3, [r7, #4]
 8023154:	681b      	ldr	r3, [r3, #0]
 8023156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802315a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 802315c:	687b      	ldr	r3, [r7, #4]
 802315e:	681b      	ldr	r3, [r3, #0]
 8023160:	681a      	ldr	r2, [r3, #0]
 8023162:	687b      	ldr	r3, [r7, #4]
 8023164:	681b      	ldr	r3, [r3, #0]
 8023166:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802316a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 802316c:	f001 f9fc 	bl	8024568 <HAL_RCC_GetPCLK1Freq>
 8023170:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8023172:	687b      	ldr	r3, [r7, #4]
 8023174:	685b      	ldr	r3, [r3, #4]
 8023176:	4a81      	ldr	r2, [pc, #516]	; (802337c <HAL_I2C_Init+0x274>)
 8023178:	4293      	cmp	r3, r2
 802317a:	d807      	bhi.n	802318c <HAL_I2C_Init+0x84>
 802317c:	68fb      	ldr	r3, [r7, #12]
 802317e:	4a80      	ldr	r2, [pc, #512]	; (8023380 <HAL_I2C_Init+0x278>)
 8023180:	4293      	cmp	r3, r2
 8023182:	bf94      	ite	ls
 8023184:	2301      	movls	r3, #1
 8023186:	2300      	movhi	r3, #0
 8023188:	b2db      	uxtb	r3, r3
 802318a:	e006      	b.n	802319a <HAL_I2C_Init+0x92>
 802318c:	68fb      	ldr	r3, [r7, #12]
 802318e:	4a7d      	ldr	r2, [pc, #500]	; (8023384 <HAL_I2C_Init+0x27c>)
 8023190:	4293      	cmp	r3, r2
 8023192:	bf94      	ite	ls
 8023194:	2301      	movls	r3, #1
 8023196:	2300      	movhi	r3, #0
 8023198:	b2db      	uxtb	r3, r3
 802319a:	2b00      	cmp	r3, #0
 802319c:	d001      	beq.n	80231a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 802319e:	2301      	movs	r3, #1
 80231a0:	e0e7      	b.n	8023372 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80231a2:	68fb      	ldr	r3, [r7, #12]
 80231a4:	4a78      	ldr	r2, [pc, #480]	; (8023388 <HAL_I2C_Init+0x280>)
 80231a6:	fba2 2303 	umull	r2, r3, r2, r3
 80231aa:	0c9b      	lsrs	r3, r3, #18
 80231ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80231ae:	687b      	ldr	r3, [r7, #4]
 80231b0:	681b      	ldr	r3, [r3, #0]
 80231b2:	685b      	ldr	r3, [r3, #4]
 80231b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80231b8:	687b      	ldr	r3, [r7, #4]
 80231ba:	681b      	ldr	r3, [r3, #0]
 80231bc:	68ba      	ldr	r2, [r7, #8]
 80231be:	430a      	orrs	r2, r1
 80231c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80231c2:	687b      	ldr	r3, [r7, #4]
 80231c4:	681b      	ldr	r3, [r3, #0]
 80231c6:	6a1b      	ldr	r3, [r3, #32]
 80231c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80231cc:	687b      	ldr	r3, [r7, #4]
 80231ce:	685b      	ldr	r3, [r3, #4]
 80231d0:	4a6a      	ldr	r2, [pc, #424]	; (802337c <HAL_I2C_Init+0x274>)
 80231d2:	4293      	cmp	r3, r2
 80231d4:	d802      	bhi.n	80231dc <HAL_I2C_Init+0xd4>
 80231d6:	68bb      	ldr	r3, [r7, #8]
 80231d8:	3301      	adds	r3, #1
 80231da:	e009      	b.n	80231f0 <HAL_I2C_Init+0xe8>
 80231dc:	68bb      	ldr	r3, [r7, #8]
 80231de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80231e2:	fb02 f303 	mul.w	r3, r2, r3
 80231e6:	4a69      	ldr	r2, [pc, #420]	; (802338c <HAL_I2C_Init+0x284>)
 80231e8:	fba2 2303 	umull	r2, r3, r2, r3
 80231ec:	099b      	lsrs	r3, r3, #6
 80231ee:	3301      	adds	r3, #1
 80231f0:	687a      	ldr	r2, [r7, #4]
 80231f2:	6812      	ldr	r2, [r2, #0]
 80231f4:	430b      	orrs	r3, r1
 80231f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80231f8:	687b      	ldr	r3, [r7, #4]
 80231fa:	681b      	ldr	r3, [r3, #0]
 80231fc:	69db      	ldr	r3, [r3, #28]
 80231fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8023202:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8023206:	687b      	ldr	r3, [r7, #4]
 8023208:	685b      	ldr	r3, [r3, #4]
 802320a:	495c      	ldr	r1, [pc, #368]	; (802337c <HAL_I2C_Init+0x274>)
 802320c:	428b      	cmp	r3, r1
 802320e:	d819      	bhi.n	8023244 <HAL_I2C_Init+0x13c>
 8023210:	68fb      	ldr	r3, [r7, #12]
 8023212:	1e59      	subs	r1, r3, #1
 8023214:	687b      	ldr	r3, [r7, #4]
 8023216:	685b      	ldr	r3, [r3, #4]
 8023218:	005b      	lsls	r3, r3, #1
 802321a:	fbb1 f3f3 	udiv	r3, r1, r3
 802321e:	1c59      	adds	r1, r3, #1
 8023220:	f640 73fc 	movw	r3, #4092	; 0xffc
 8023224:	400b      	ands	r3, r1
 8023226:	2b00      	cmp	r3, #0
 8023228:	d00a      	beq.n	8023240 <HAL_I2C_Init+0x138>
 802322a:	68fb      	ldr	r3, [r7, #12]
 802322c:	1e59      	subs	r1, r3, #1
 802322e:	687b      	ldr	r3, [r7, #4]
 8023230:	685b      	ldr	r3, [r3, #4]
 8023232:	005b      	lsls	r3, r3, #1
 8023234:	fbb1 f3f3 	udiv	r3, r1, r3
 8023238:	3301      	adds	r3, #1
 802323a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802323e:	e051      	b.n	80232e4 <HAL_I2C_Init+0x1dc>
 8023240:	2304      	movs	r3, #4
 8023242:	e04f      	b.n	80232e4 <HAL_I2C_Init+0x1dc>
 8023244:	687b      	ldr	r3, [r7, #4]
 8023246:	689b      	ldr	r3, [r3, #8]
 8023248:	2b00      	cmp	r3, #0
 802324a:	d111      	bne.n	8023270 <HAL_I2C_Init+0x168>
 802324c:	68fb      	ldr	r3, [r7, #12]
 802324e:	1e58      	subs	r0, r3, #1
 8023250:	687b      	ldr	r3, [r7, #4]
 8023252:	6859      	ldr	r1, [r3, #4]
 8023254:	460b      	mov	r3, r1
 8023256:	005b      	lsls	r3, r3, #1
 8023258:	440b      	add	r3, r1
 802325a:	fbb0 f3f3 	udiv	r3, r0, r3
 802325e:	3301      	adds	r3, #1
 8023260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023264:	2b00      	cmp	r3, #0
 8023266:	bf0c      	ite	eq
 8023268:	2301      	moveq	r3, #1
 802326a:	2300      	movne	r3, #0
 802326c:	b2db      	uxtb	r3, r3
 802326e:	e012      	b.n	8023296 <HAL_I2C_Init+0x18e>
 8023270:	68fb      	ldr	r3, [r7, #12]
 8023272:	1e58      	subs	r0, r3, #1
 8023274:	687b      	ldr	r3, [r7, #4]
 8023276:	6859      	ldr	r1, [r3, #4]
 8023278:	460b      	mov	r3, r1
 802327a:	009b      	lsls	r3, r3, #2
 802327c:	440b      	add	r3, r1
 802327e:	0099      	lsls	r1, r3, #2
 8023280:	440b      	add	r3, r1
 8023282:	fbb0 f3f3 	udiv	r3, r0, r3
 8023286:	3301      	adds	r3, #1
 8023288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802328c:	2b00      	cmp	r3, #0
 802328e:	bf0c      	ite	eq
 8023290:	2301      	moveq	r3, #1
 8023292:	2300      	movne	r3, #0
 8023294:	b2db      	uxtb	r3, r3
 8023296:	2b00      	cmp	r3, #0
 8023298:	d001      	beq.n	802329e <HAL_I2C_Init+0x196>
 802329a:	2301      	movs	r3, #1
 802329c:	e022      	b.n	80232e4 <HAL_I2C_Init+0x1dc>
 802329e:	687b      	ldr	r3, [r7, #4]
 80232a0:	689b      	ldr	r3, [r3, #8]
 80232a2:	2b00      	cmp	r3, #0
 80232a4:	d10e      	bne.n	80232c4 <HAL_I2C_Init+0x1bc>
 80232a6:	68fb      	ldr	r3, [r7, #12]
 80232a8:	1e58      	subs	r0, r3, #1
 80232aa:	687b      	ldr	r3, [r7, #4]
 80232ac:	6859      	ldr	r1, [r3, #4]
 80232ae:	460b      	mov	r3, r1
 80232b0:	005b      	lsls	r3, r3, #1
 80232b2:	440b      	add	r3, r1
 80232b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80232b8:	3301      	adds	r3, #1
 80232ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80232be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80232c2:	e00f      	b.n	80232e4 <HAL_I2C_Init+0x1dc>
 80232c4:	68fb      	ldr	r3, [r7, #12]
 80232c6:	1e58      	subs	r0, r3, #1
 80232c8:	687b      	ldr	r3, [r7, #4]
 80232ca:	6859      	ldr	r1, [r3, #4]
 80232cc:	460b      	mov	r3, r1
 80232ce:	009b      	lsls	r3, r3, #2
 80232d0:	440b      	add	r3, r1
 80232d2:	0099      	lsls	r1, r3, #2
 80232d4:	440b      	add	r3, r1
 80232d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80232da:	3301      	adds	r3, #1
 80232dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80232e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80232e4:	6879      	ldr	r1, [r7, #4]
 80232e6:	6809      	ldr	r1, [r1, #0]
 80232e8:	4313      	orrs	r3, r2
 80232ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80232ec:	687b      	ldr	r3, [r7, #4]
 80232ee:	681b      	ldr	r3, [r3, #0]
 80232f0:	681b      	ldr	r3, [r3, #0]
 80232f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80232f6:	687b      	ldr	r3, [r7, #4]
 80232f8:	69da      	ldr	r2, [r3, #28]
 80232fa:	687b      	ldr	r3, [r7, #4]
 80232fc:	6a1b      	ldr	r3, [r3, #32]
 80232fe:	431a      	orrs	r2, r3
 8023300:	687b      	ldr	r3, [r7, #4]
 8023302:	681b      	ldr	r3, [r3, #0]
 8023304:	430a      	orrs	r2, r1
 8023306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8023308:	687b      	ldr	r3, [r7, #4]
 802330a:	681b      	ldr	r3, [r3, #0]
 802330c:	689b      	ldr	r3, [r3, #8]
 802330e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8023312:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8023316:	687a      	ldr	r2, [r7, #4]
 8023318:	6911      	ldr	r1, [r2, #16]
 802331a:	687a      	ldr	r2, [r7, #4]
 802331c:	68d2      	ldr	r2, [r2, #12]
 802331e:	4311      	orrs	r1, r2
 8023320:	687a      	ldr	r2, [r7, #4]
 8023322:	6812      	ldr	r2, [r2, #0]
 8023324:	430b      	orrs	r3, r1
 8023326:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8023328:	687b      	ldr	r3, [r7, #4]
 802332a:	681b      	ldr	r3, [r3, #0]
 802332c:	68db      	ldr	r3, [r3, #12]
 802332e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8023332:	687b      	ldr	r3, [r7, #4]
 8023334:	695a      	ldr	r2, [r3, #20]
 8023336:	687b      	ldr	r3, [r7, #4]
 8023338:	699b      	ldr	r3, [r3, #24]
 802333a:	431a      	orrs	r2, r3
 802333c:	687b      	ldr	r3, [r7, #4]
 802333e:	681b      	ldr	r3, [r3, #0]
 8023340:	430a      	orrs	r2, r1
 8023342:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8023344:	687b      	ldr	r3, [r7, #4]
 8023346:	681b      	ldr	r3, [r3, #0]
 8023348:	681a      	ldr	r2, [r3, #0]
 802334a:	687b      	ldr	r3, [r7, #4]
 802334c:	681b      	ldr	r3, [r3, #0]
 802334e:	f042 0201 	orr.w	r2, r2, #1
 8023352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8023354:	687b      	ldr	r3, [r7, #4]
 8023356:	2200      	movs	r2, #0
 8023358:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 802335a:	687b      	ldr	r3, [r7, #4]
 802335c:	2220      	movs	r2, #32
 802335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8023362:	687b      	ldr	r3, [r7, #4]
 8023364:	2200      	movs	r2, #0
 8023366:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8023368:	687b      	ldr	r3, [r7, #4]
 802336a:	2200      	movs	r2, #0
 802336c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8023370:	2300      	movs	r3, #0
}
 8023372:	4618      	mov	r0, r3
 8023374:	3710      	adds	r7, #16
 8023376:	46bd      	mov	sp, r7
 8023378:	bd80      	pop	{r7, pc}
 802337a:	bf00      	nop
 802337c:	000186a0 	.word	0x000186a0
 8023380:	001e847f 	.word	0x001e847f
 8023384:	003d08ff 	.word	0x003d08ff
 8023388:	431bde83 	.word	0x431bde83
 802338c:	10624dd3 	.word	0x10624dd3

08023390 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8023390:	b580      	push	{r7, lr}
 8023392:	b088      	sub	sp, #32
 8023394:	af00      	add	r7, sp, #0
 8023396:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8023398:	687b      	ldr	r3, [r7, #4]
 802339a:	2b00      	cmp	r3, #0
 802339c:	d101      	bne.n	80233a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 802339e:	2301      	movs	r3, #1
 80233a0:	e128      	b.n	80235f4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80233a2:	687b      	ldr	r3, [r7, #4]
 80233a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80233a8:	b2db      	uxtb	r3, r3
 80233aa:	2b00      	cmp	r3, #0
 80233ac:	d109      	bne.n	80233c2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80233ae:	687b      	ldr	r3, [r7, #4]
 80233b0:	2200      	movs	r2, #0
 80233b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80233b6:	687b      	ldr	r3, [r7, #4]
 80233b8:	4a90      	ldr	r2, [pc, #576]	; (80235fc <HAL_I2S_Init+0x26c>)
 80233ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80233bc:	6878      	ldr	r0, [r7, #4]
 80233be:	f7fd fb7d 	bl	8020abc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80233c2:	687b      	ldr	r3, [r7, #4]
 80233c4:	2202      	movs	r2, #2
 80233c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80233ca:	687b      	ldr	r3, [r7, #4]
 80233cc:	681b      	ldr	r3, [r3, #0]
 80233ce:	69db      	ldr	r3, [r3, #28]
 80233d0:	687a      	ldr	r2, [r7, #4]
 80233d2:	6812      	ldr	r2, [r2, #0]
 80233d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80233d8:	f023 030f 	bic.w	r3, r3, #15
 80233dc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80233de:	687b      	ldr	r3, [r7, #4]
 80233e0:	681b      	ldr	r3, [r3, #0]
 80233e2:	2202      	movs	r2, #2
 80233e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80233e6:	687b      	ldr	r3, [r7, #4]
 80233e8:	695b      	ldr	r3, [r3, #20]
 80233ea:	2b02      	cmp	r3, #2
 80233ec:	d060      	beq.n	80234b0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80233ee:	687b      	ldr	r3, [r7, #4]
 80233f0:	68db      	ldr	r3, [r3, #12]
 80233f2:	2b00      	cmp	r3, #0
 80233f4:	d102      	bne.n	80233fc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80233f6:	2310      	movs	r3, #16
 80233f8:	617b      	str	r3, [r7, #20]
 80233fa:	e001      	b.n	8023400 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80233fc:	2320      	movs	r3, #32
 80233fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8023400:	687b      	ldr	r3, [r7, #4]
 8023402:	689b      	ldr	r3, [r3, #8]
 8023404:	2b20      	cmp	r3, #32
 8023406:	d802      	bhi.n	802340e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8023408:	697b      	ldr	r3, [r7, #20]
 802340a:	005b      	lsls	r3, r3, #1
 802340c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 802340e:	2001      	movs	r0, #1
 8023410:	f001 f9b4 	bl	802477c <HAL_RCCEx_GetPeriphCLKFreq>
 8023414:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8023416:	687b      	ldr	r3, [r7, #4]
 8023418:	691b      	ldr	r3, [r3, #16]
 802341a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802341e:	d125      	bne.n	802346c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8023420:	687b      	ldr	r3, [r7, #4]
 8023422:	68db      	ldr	r3, [r3, #12]
 8023424:	2b00      	cmp	r3, #0
 8023426:	d010      	beq.n	802344a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8023428:	697b      	ldr	r3, [r7, #20]
 802342a:	009b      	lsls	r3, r3, #2
 802342c:	68fa      	ldr	r2, [r7, #12]
 802342e:	fbb2 f2f3 	udiv	r2, r2, r3
 8023432:	4613      	mov	r3, r2
 8023434:	009b      	lsls	r3, r3, #2
 8023436:	4413      	add	r3, r2
 8023438:	005b      	lsls	r3, r3, #1
 802343a:	461a      	mov	r2, r3
 802343c:	687b      	ldr	r3, [r7, #4]
 802343e:	695b      	ldr	r3, [r3, #20]
 8023440:	fbb2 f3f3 	udiv	r3, r2, r3
 8023444:	3305      	adds	r3, #5
 8023446:	613b      	str	r3, [r7, #16]
 8023448:	e01f      	b.n	802348a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 802344a:	697b      	ldr	r3, [r7, #20]
 802344c:	00db      	lsls	r3, r3, #3
 802344e:	68fa      	ldr	r2, [r7, #12]
 8023450:	fbb2 f2f3 	udiv	r2, r2, r3
 8023454:	4613      	mov	r3, r2
 8023456:	009b      	lsls	r3, r3, #2
 8023458:	4413      	add	r3, r2
 802345a:	005b      	lsls	r3, r3, #1
 802345c:	461a      	mov	r2, r3
 802345e:	687b      	ldr	r3, [r7, #4]
 8023460:	695b      	ldr	r3, [r3, #20]
 8023462:	fbb2 f3f3 	udiv	r3, r2, r3
 8023466:	3305      	adds	r3, #5
 8023468:	613b      	str	r3, [r7, #16]
 802346a:	e00e      	b.n	802348a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 802346c:	68fa      	ldr	r2, [r7, #12]
 802346e:	697b      	ldr	r3, [r7, #20]
 8023470:	fbb2 f2f3 	udiv	r2, r2, r3
 8023474:	4613      	mov	r3, r2
 8023476:	009b      	lsls	r3, r3, #2
 8023478:	4413      	add	r3, r2
 802347a:	005b      	lsls	r3, r3, #1
 802347c:	461a      	mov	r2, r3
 802347e:	687b      	ldr	r3, [r7, #4]
 8023480:	695b      	ldr	r3, [r3, #20]
 8023482:	fbb2 f3f3 	udiv	r3, r2, r3
 8023486:	3305      	adds	r3, #5
 8023488:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 802348a:	693b      	ldr	r3, [r7, #16]
 802348c:	4a5c      	ldr	r2, [pc, #368]	; (8023600 <HAL_I2S_Init+0x270>)
 802348e:	fba2 2303 	umull	r2, r3, r2, r3
 8023492:	08db      	lsrs	r3, r3, #3
 8023494:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8023496:	693b      	ldr	r3, [r7, #16]
 8023498:	f003 0301 	and.w	r3, r3, #1
 802349c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 802349e:	693a      	ldr	r2, [r7, #16]
 80234a0:	69bb      	ldr	r3, [r7, #24]
 80234a2:	1ad3      	subs	r3, r2, r3
 80234a4:	085b      	lsrs	r3, r3, #1
 80234a6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80234a8:	69bb      	ldr	r3, [r7, #24]
 80234aa:	021b      	lsls	r3, r3, #8
 80234ac:	61bb      	str	r3, [r7, #24]
 80234ae:	e003      	b.n	80234b8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80234b0:	2302      	movs	r3, #2
 80234b2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80234b4:	2300      	movs	r3, #0
 80234b6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80234b8:	69fb      	ldr	r3, [r7, #28]
 80234ba:	2b01      	cmp	r3, #1
 80234bc:	d902      	bls.n	80234c4 <HAL_I2S_Init+0x134>
 80234be:	69fb      	ldr	r3, [r7, #28]
 80234c0:	2bff      	cmp	r3, #255	; 0xff
 80234c2:	d907      	bls.n	80234d4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80234c4:	687b      	ldr	r3, [r7, #4]
 80234c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80234c8:	f043 0210 	orr.w	r2, r3, #16
 80234cc:	687b      	ldr	r3, [r7, #4]
 80234ce:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80234d0:	2301      	movs	r3, #1
 80234d2:	e08f      	b.n	80235f4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80234d4:	687b      	ldr	r3, [r7, #4]
 80234d6:	691a      	ldr	r2, [r3, #16]
 80234d8:	69bb      	ldr	r3, [r7, #24]
 80234da:	ea42 0103 	orr.w	r1, r2, r3
 80234de:	687b      	ldr	r3, [r7, #4]
 80234e0:	681b      	ldr	r3, [r3, #0]
 80234e2:	69fa      	ldr	r2, [r7, #28]
 80234e4:	430a      	orrs	r2, r1
 80234e6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80234e8:	687b      	ldr	r3, [r7, #4]
 80234ea:	681b      	ldr	r3, [r3, #0]
 80234ec:	69db      	ldr	r3, [r3, #28]
 80234ee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80234f2:	f023 030f 	bic.w	r3, r3, #15
 80234f6:	687a      	ldr	r2, [r7, #4]
 80234f8:	6851      	ldr	r1, [r2, #4]
 80234fa:	687a      	ldr	r2, [r7, #4]
 80234fc:	6892      	ldr	r2, [r2, #8]
 80234fe:	4311      	orrs	r1, r2
 8023500:	687a      	ldr	r2, [r7, #4]
 8023502:	68d2      	ldr	r2, [r2, #12]
 8023504:	4311      	orrs	r1, r2
 8023506:	687a      	ldr	r2, [r7, #4]
 8023508:	6992      	ldr	r2, [r2, #24]
 802350a:	430a      	orrs	r2, r1
 802350c:	431a      	orrs	r2, r3
 802350e:	687b      	ldr	r3, [r7, #4]
 8023510:	681b      	ldr	r3, [r3, #0]
 8023512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8023516:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8023518:	687b      	ldr	r3, [r7, #4]
 802351a:	6a1b      	ldr	r3, [r3, #32]
 802351c:	2b01      	cmp	r3, #1
 802351e:	d161      	bne.n	80235e4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8023520:	687b      	ldr	r3, [r7, #4]
 8023522:	4a38      	ldr	r2, [pc, #224]	; (8023604 <HAL_I2S_Init+0x274>)
 8023524:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8023526:	687b      	ldr	r3, [r7, #4]
 8023528:	681b      	ldr	r3, [r3, #0]
 802352a:	4a37      	ldr	r2, [pc, #220]	; (8023608 <HAL_I2S_Init+0x278>)
 802352c:	4293      	cmp	r3, r2
 802352e:	d101      	bne.n	8023534 <HAL_I2S_Init+0x1a4>
 8023530:	4b36      	ldr	r3, [pc, #216]	; (802360c <HAL_I2S_Init+0x27c>)
 8023532:	e001      	b.n	8023538 <HAL_I2S_Init+0x1a8>
 8023534:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8023538:	69db      	ldr	r3, [r3, #28]
 802353a:	687a      	ldr	r2, [r7, #4]
 802353c:	6812      	ldr	r2, [r2, #0]
 802353e:	4932      	ldr	r1, [pc, #200]	; (8023608 <HAL_I2S_Init+0x278>)
 8023540:	428a      	cmp	r2, r1
 8023542:	d101      	bne.n	8023548 <HAL_I2S_Init+0x1b8>
 8023544:	4a31      	ldr	r2, [pc, #196]	; (802360c <HAL_I2S_Init+0x27c>)
 8023546:	e001      	b.n	802354c <HAL_I2S_Init+0x1bc>
 8023548:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 802354c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8023550:	f023 030f 	bic.w	r3, r3, #15
 8023554:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8023556:	687b      	ldr	r3, [r7, #4]
 8023558:	681b      	ldr	r3, [r3, #0]
 802355a:	4a2b      	ldr	r2, [pc, #172]	; (8023608 <HAL_I2S_Init+0x278>)
 802355c:	4293      	cmp	r3, r2
 802355e:	d101      	bne.n	8023564 <HAL_I2S_Init+0x1d4>
 8023560:	4b2a      	ldr	r3, [pc, #168]	; (802360c <HAL_I2S_Init+0x27c>)
 8023562:	e001      	b.n	8023568 <HAL_I2S_Init+0x1d8>
 8023564:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8023568:	2202      	movs	r2, #2
 802356a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 802356c:	687b      	ldr	r3, [r7, #4]
 802356e:	681b      	ldr	r3, [r3, #0]
 8023570:	4a25      	ldr	r2, [pc, #148]	; (8023608 <HAL_I2S_Init+0x278>)
 8023572:	4293      	cmp	r3, r2
 8023574:	d101      	bne.n	802357a <HAL_I2S_Init+0x1ea>
 8023576:	4b25      	ldr	r3, [pc, #148]	; (802360c <HAL_I2S_Init+0x27c>)
 8023578:	e001      	b.n	802357e <HAL_I2S_Init+0x1ee>
 802357a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802357e:	69db      	ldr	r3, [r3, #28]
 8023580:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8023582:	687b      	ldr	r3, [r7, #4]
 8023584:	685b      	ldr	r3, [r3, #4]
 8023586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802358a:	d003      	beq.n	8023594 <HAL_I2S_Init+0x204>
 802358c:	687b      	ldr	r3, [r7, #4]
 802358e:	685b      	ldr	r3, [r3, #4]
 8023590:	2b00      	cmp	r3, #0
 8023592:	d103      	bne.n	802359c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8023594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023598:	613b      	str	r3, [r7, #16]
 802359a:	e001      	b.n	80235a0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 802359c:	2300      	movs	r3, #0
 802359e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80235a0:	693b      	ldr	r3, [r7, #16]
 80235a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80235a4:	687b      	ldr	r3, [r7, #4]
 80235a6:	689b      	ldr	r3, [r3, #8]
 80235a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80235aa:	4313      	orrs	r3, r2
 80235ac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80235ae:	687b      	ldr	r3, [r7, #4]
 80235b0:	68db      	ldr	r3, [r3, #12]
 80235b2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80235b4:	4313      	orrs	r3, r2
 80235b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80235b8:	687b      	ldr	r3, [r7, #4]
 80235ba:	699b      	ldr	r3, [r3, #24]
 80235bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80235be:	4313      	orrs	r3, r2
 80235c0:	b29a      	uxth	r2, r3
 80235c2:	897b      	ldrh	r3, [r7, #10]
 80235c4:	4313      	orrs	r3, r2
 80235c6:	b29b      	uxth	r3, r3
 80235c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80235cc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80235ce:	687b      	ldr	r3, [r7, #4]
 80235d0:	681b      	ldr	r3, [r3, #0]
 80235d2:	4a0d      	ldr	r2, [pc, #52]	; (8023608 <HAL_I2S_Init+0x278>)
 80235d4:	4293      	cmp	r3, r2
 80235d6:	d101      	bne.n	80235dc <HAL_I2S_Init+0x24c>
 80235d8:	4b0c      	ldr	r3, [pc, #48]	; (802360c <HAL_I2S_Init+0x27c>)
 80235da:	e001      	b.n	80235e0 <HAL_I2S_Init+0x250>
 80235dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80235e0:	897a      	ldrh	r2, [r7, #10]
 80235e2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80235e4:	687b      	ldr	r3, [r7, #4]
 80235e6:	2200      	movs	r2, #0
 80235e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80235ea:	687b      	ldr	r3, [r7, #4]
 80235ec:	2201      	movs	r2, #1
 80235ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80235f2:	2300      	movs	r3, #0
}
 80235f4:	4618      	mov	r0, r3
 80235f6:	3720      	adds	r7, #32
 80235f8:	46bd      	mov	sp, r7
 80235fa:	bd80      	pop	{r7, pc}
 80235fc:	08023707 	.word	0x08023707
 8023600:	cccccccd 	.word	0xcccccccd
 8023604:	0802381d 	.word	0x0802381d
 8023608:	40003800 	.word	0x40003800
 802360c:	40003400 	.word	0x40003400

08023610 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8023610:	b480      	push	{r7}
 8023612:	b083      	sub	sp, #12
 8023614:	af00      	add	r7, sp, #0
 8023616:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8023618:	bf00      	nop
 802361a:	370c      	adds	r7, #12
 802361c:	46bd      	mov	sp, r7
 802361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023622:	4770      	bx	lr

08023624 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8023624:	b480      	push	{r7}
 8023626:	b083      	sub	sp, #12
 8023628:	af00      	add	r7, sp, #0
 802362a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 802362c:	bf00      	nop
 802362e:	370c      	adds	r7, #12
 8023630:	46bd      	mov	sp, r7
 8023632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023636:	4770      	bx	lr

08023638 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8023638:	b480      	push	{r7}
 802363a:	b083      	sub	sp, #12
 802363c:	af00      	add	r7, sp, #0
 802363e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8023640:	bf00      	nop
 8023642:	370c      	adds	r7, #12
 8023644:	46bd      	mov	sp, r7
 8023646:	f85d 7b04 	ldr.w	r7, [sp], #4
 802364a:	4770      	bx	lr

0802364c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 802364c:	b580      	push	{r7, lr}
 802364e:	b082      	sub	sp, #8
 8023650:	af00      	add	r7, sp, #0
 8023652:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8023654:	687b      	ldr	r3, [r7, #4]
 8023656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023658:	881a      	ldrh	r2, [r3, #0]
 802365a:	687b      	ldr	r3, [r7, #4]
 802365c:	681b      	ldr	r3, [r3, #0]
 802365e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8023660:	687b      	ldr	r3, [r7, #4]
 8023662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023664:	1c9a      	adds	r2, r3, #2
 8023666:	687b      	ldr	r3, [r7, #4]
 8023668:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 802366a:	687b      	ldr	r3, [r7, #4]
 802366c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802366e:	b29b      	uxth	r3, r3
 8023670:	3b01      	subs	r3, #1
 8023672:	b29a      	uxth	r2, r3
 8023674:	687b      	ldr	r3, [r7, #4]
 8023676:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8023678:	687b      	ldr	r3, [r7, #4]
 802367a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802367c:	b29b      	uxth	r3, r3
 802367e:	2b00      	cmp	r3, #0
 8023680:	d10e      	bne.n	80236a0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8023682:	687b      	ldr	r3, [r7, #4]
 8023684:	681b      	ldr	r3, [r3, #0]
 8023686:	685a      	ldr	r2, [r3, #4]
 8023688:	687b      	ldr	r3, [r7, #4]
 802368a:	681b      	ldr	r3, [r3, #0]
 802368c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8023690:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8023692:	687b      	ldr	r3, [r7, #4]
 8023694:	2201      	movs	r2, #1
 8023696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 802369a:	6878      	ldr	r0, [r7, #4]
 802369c:	f7ff ffb8 	bl	8023610 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80236a0:	bf00      	nop
 80236a2:	3708      	adds	r7, #8
 80236a4:	46bd      	mov	sp, r7
 80236a6:	bd80      	pop	{r7, pc}

080236a8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80236a8:	b580      	push	{r7, lr}
 80236aa:	b082      	sub	sp, #8
 80236ac:	af00      	add	r7, sp, #0
 80236ae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80236b0:	687b      	ldr	r3, [r7, #4]
 80236b2:	681b      	ldr	r3, [r3, #0]
 80236b4:	68da      	ldr	r2, [r3, #12]
 80236b6:	687b      	ldr	r3, [r7, #4]
 80236b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80236ba:	b292      	uxth	r2, r2
 80236bc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80236be:	687b      	ldr	r3, [r7, #4]
 80236c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80236c2:	1c9a      	adds	r2, r3, #2
 80236c4:	687b      	ldr	r3, [r7, #4]
 80236c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80236c8:	687b      	ldr	r3, [r7, #4]
 80236ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80236cc:	b29b      	uxth	r3, r3
 80236ce:	3b01      	subs	r3, #1
 80236d0:	b29a      	uxth	r2, r3
 80236d2:	687b      	ldr	r3, [r7, #4]
 80236d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80236d6:	687b      	ldr	r3, [r7, #4]
 80236d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80236da:	b29b      	uxth	r3, r3
 80236dc:	2b00      	cmp	r3, #0
 80236de:	d10e      	bne.n	80236fe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80236e0:	687b      	ldr	r3, [r7, #4]
 80236e2:	681b      	ldr	r3, [r3, #0]
 80236e4:	685a      	ldr	r2, [r3, #4]
 80236e6:	687b      	ldr	r3, [r7, #4]
 80236e8:	681b      	ldr	r3, [r3, #0]
 80236ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80236ee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80236f0:	687b      	ldr	r3, [r7, #4]
 80236f2:	2201      	movs	r2, #1
 80236f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80236f8:	6878      	ldr	r0, [r7, #4]
 80236fa:	f7ff ff93 	bl	8023624 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80236fe:	bf00      	nop
 8023700:	3708      	adds	r7, #8
 8023702:	46bd      	mov	sp, r7
 8023704:	bd80      	pop	{r7, pc}

08023706 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8023706:	b580      	push	{r7, lr}
 8023708:	b086      	sub	sp, #24
 802370a:	af00      	add	r7, sp, #0
 802370c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 802370e:	687b      	ldr	r3, [r7, #4]
 8023710:	681b      	ldr	r3, [r3, #0]
 8023712:	689b      	ldr	r3, [r3, #8]
 8023714:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8023716:	687b      	ldr	r3, [r7, #4]
 8023718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802371c:	b2db      	uxtb	r3, r3
 802371e:	2b04      	cmp	r3, #4
 8023720:	d13a      	bne.n	8023798 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8023722:	697b      	ldr	r3, [r7, #20]
 8023724:	f003 0301 	and.w	r3, r3, #1
 8023728:	2b01      	cmp	r3, #1
 802372a:	d109      	bne.n	8023740 <I2S_IRQHandler+0x3a>
 802372c:	687b      	ldr	r3, [r7, #4]
 802372e:	681b      	ldr	r3, [r3, #0]
 8023730:	685b      	ldr	r3, [r3, #4]
 8023732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023736:	2b40      	cmp	r3, #64	; 0x40
 8023738:	d102      	bne.n	8023740 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 802373a:	6878      	ldr	r0, [r7, #4]
 802373c:	f7ff ffb4 	bl	80236a8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8023740:	697b      	ldr	r3, [r7, #20]
 8023742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023746:	2b40      	cmp	r3, #64	; 0x40
 8023748:	d126      	bne.n	8023798 <I2S_IRQHandler+0x92>
 802374a:	687b      	ldr	r3, [r7, #4]
 802374c:	681b      	ldr	r3, [r3, #0]
 802374e:	685b      	ldr	r3, [r3, #4]
 8023750:	f003 0320 	and.w	r3, r3, #32
 8023754:	2b20      	cmp	r3, #32
 8023756:	d11f      	bne.n	8023798 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8023758:	687b      	ldr	r3, [r7, #4]
 802375a:	681b      	ldr	r3, [r3, #0]
 802375c:	685a      	ldr	r2, [r3, #4]
 802375e:	687b      	ldr	r3, [r7, #4]
 8023760:	681b      	ldr	r3, [r3, #0]
 8023762:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8023766:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8023768:	2300      	movs	r3, #0
 802376a:	613b      	str	r3, [r7, #16]
 802376c:	687b      	ldr	r3, [r7, #4]
 802376e:	681b      	ldr	r3, [r3, #0]
 8023770:	68db      	ldr	r3, [r3, #12]
 8023772:	613b      	str	r3, [r7, #16]
 8023774:	687b      	ldr	r3, [r7, #4]
 8023776:	681b      	ldr	r3, [r3, #0]
 8023778:	689b      	ldr	r3, [r3, #8]
 802377a:	613b      	str	r3, [r7, #16]
 802377c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 802377e:	687b      	ldr	r3, [r7, #4]
 8023780:	2201      	movs	r2, #1
 8023782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8023786:	687b      	ldr	r3, [r7, #4]
 8023788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802378a:	f043 0202 	orr.w	r2, r3, #2
 802378e:	687b      	ldr	r3, [r7, #4]
 8023790:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8023792:	6878      	ldr	r0, [r7, #4]
 8023794:	f7ff ff50 	bl	8023638 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8023798:	687b      	ldr	r3, [r7, #4]
 802379a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802379e:	b2db      	uxtb	r3, r3
 80237a0:	2b03      	cmp	r3, #3
 80237a2:	d136      	bne.n	8023812 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80237a4:	697b      	ldr	r3, [r7, #20]
 80237a6:	f003 0302 	and.w	r3, r3, #2
 80237aa:	2b02      	cmp	r3, #2
 80237ac:	d109      	bne.n	80237c2 <I2S_IRQHandler+0xbc>
 80237ae:	687b      	ldr	r3, [r7, #4]
 80237b0:	681b      	ldr	r3, [r3, #0]
 80237b2:	685b      	ldr	r3, [r3, #4]
 80237b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80237b8:	2b80      	cmp	r3, #128	; 0x80
 80237ba:	d102      	bne.n	80237c2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80237bc:	6878      	ldr	r0, [r7, #4]
 80237be:	f7ff ff45 	bl	802364c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80237c2:	697b      	ldr	r3, [r7, #20]
 80237c4:	f003 0308 	and.w	r3, r3, #8
 80237c8:	2b08      	cmp	r3, #8
 80237ca:	d122      	bne.n	8023812 <I2S_IRQHandler+0x10c>
 80237cc:	687b      	ldr	r3, [r7, #4]
 80237ce:	681b      	ldr	r3, [r3, #0]
 80237d0:	685b      	ldr	r3, [r3, #4]
 80237d2:	f003 0320 	and.w	r3, r3, #32
 80237d6:	2b20      	cmp	r3, #32
 80237d8:	d11b      	bne.n	8023812 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80237da:	687b      	ldr	r3, [r7, #4]
 80237dc:	681b      	ldr	r3, [r3, #0]
 80237de:	685a      	ldr	r2, [r3, #4]
 80237e0:	687b      	ldr	r3, [r7, #4]
 80237e2:	681b      	ldr	r3, [r3, #0]
 80237e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80237e8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80237ea:	2300      	movs	r3, #0
 80237ec:	60fb      	str	r3, [r7, #12]
 80237ee:	687b      	ldr	r3, [r7, #4]
 80237f0:	681b      	ldr	r3, [r3, #0]
 80237f2:	689b      	ldr	r3, [r3, #8]
 80237f4:	60fb      	str	r3, [r7, #12]
 80237f6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80237f8:	687b      	ldr	r3, [r7, #4]
 80237fa:	2201      	movs	r2, #1
 80237fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8023800:	687b      	ldr	r3, [r7, #4]
 8023802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023804:	f043 0204 	orr.w	r2, r3, #4
 8023808:	687b      	ldr	r3, [r7, #4]
 802380a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 802380c:	6878      	ldr	r0, [r7, #4]
 802380e:	f7ff ff13 	bl	8023638 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8023812:	bf00      	nop
 8023814:	3718      	adds	r7, #24
 8023816:	46bd      	mov	sp, r7
 8023818:	bd80      	pop	{r7, pc}
	...

0802381c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 802381c:	b580      	push	{r7, lr}
 802381e:	b088      	sub	sp, #32
 8023820:	af00      	add	r7, sp, #0
 8023822:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8023824:	687b      	ldr	r3, [r7, #4]
 8023826:	681b      	ldr	r3, [r3, #0]
 8023828:	689b      	ldr	r3, [r3, #8]
 802382a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 802382c:	687b      	ldr	r3, [r7, #4]
 802382e:	681b      	ldr	r3, [r3, #0]
 8023830:	4aa2      	ldr	r2, [pc, #648]	; (8023abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8023832:	4293      	cmp	r3, r2
 8023834:	d101      	bne.n	802383a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8023836:	4ba2      	ldr	r3, [pc, #648]	; (8023ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8023838:	e001      	b.n	802383e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 802383a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802383e:	689b      	ldr	r3, [r3, #8]
 8023840:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8023842:	687b      	ldr	r3, [r7, #4]
 8023844:	681b      	ldr	r3, [r3, #0]
 8023846:	685b      	ldr	r3, [r3, #4]
 8023848:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 802384a:	687b      	ldr	r3, [r7, #4]
 802384c:	681b      	ldr	r3, [r3, #0]
 802384e:	4a9b      	ldr	r2, [pc, #620]	; (8023abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8023850:	4293      	cmp	r3, r2
 8023852:	d101      	bne.n	8023858 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8023854:	4b9a      	ldr	r3, [pc, #616]	; (8023ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8023856:	e001      	b.n	802385c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8023858:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802385c:	685b      	ldr	r3, [r3, #4]
 802385e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8023860:	687b      	ldr	r3, [r7, #4]
 8023862:	685b      	ldr	r3, [r3, #4]
 8023864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023868:	d004      	beq.n	8023874 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 802386a:	687b      	ldr	r3, [r7, #4]
 802386c:	685b      	ldr	r3, [r3, #4]
 802386e:	2b00      	cmp	r3, #0
 8023870:	f040 8099 	bne.w	80239a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8023874:	69fb      	ldr	r3, [r7, #28]
 8023876:	f003 0302 	and.w	r3, r3, #2
 802387a:	2b02      	cmp	r3, #2
 802387c:	d107      	bne.n	802388e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 802387e:	697b      	ldr	r3, [r7, #20]
 8023880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023884:	2b00      	cmp	r3, #0
 8023886:	d002      	beq.n	802388e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8023888:	6878      	ldr	r0, [r7, #4]
 802388a:	f000 f925 	bl	8023ad8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 802388e:	69bb      	ldr	r3, [r7, #24]
 8023890:	f003 0301 	and.w	r3, r3, #1
 8023894:	2b01      	cmp	r3, #1
 8023896:	d107      	bne.n	80238a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8023898:	693b      	ldr	r3, [r7, #16]
 802389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802389e:	2b00      	cmp	r3, #0
 80238a0:	d002      	beq.n	80238a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80238a2:	6878      	ldr	r0, [r7, #4]
 80238a4:	f000 f9c8 	bl	8023c38 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80238a8:	69bb      	ldr	r3, [r7, #24]
 80238aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80238ae:	2b40      	cmp	r3, #64	; 0x40
 80238b0:	d13a      	bne.n	8023928 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80238b2:	693b      	ldr	r3, [r7, #16]
 80238b4:	f003 0320 	and.w	r3, r3, #32
 80238b8:	2b00      	cmp	r3, #0
 80238ba:	d035      	beq.n	8023928 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80238bc:	687b      	ldr	r3, [r7, #4]
 80238be:	681b      	ldr	r3, [r3, #0]
 80238c0:	4a7e      	ldr	r2, [pc, #504]	; (8023abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80238c2:	4293      	cmp	r3, r2
 80238c4:	d101      	bne.n	80238ca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80238c6:	4b7e      	ldr	r3, [pc, #504]	; (8023ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80238c8:	e001      	b.n	80238ce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80238ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80238ce:	685a      	ldr	r2, [r3, #4]
 80238d0:	687b      	ldr	r3, [r7, #4]
 80238d2:	681b      	ldr	r3, [r3, #0]
 80238d4:	4979      	ldr	r1, [pc, #484]	; (8023abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80238d6:	428b      	cmp	r3, r1
 80238d8:	d101      	bne.n	80238de <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80238da:	4b79      	ldr	r3, [pc, #484]	; (8023ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80238dc:	e001      	b.n	80238e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80238de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80238e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80238e6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80238e8:	687b      	ldr	r3, [r7, #4]
 80238ea:	681b      	ldr	r3, [r3, #0]
 80238ec:	685a      	ldr	r2, [r3, #4]
 80238ee:	687b      	ldr	r3, [r7, #4]
 80238f0:	681b      	ldr	r3, [r3, #0]
 80238f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80238f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80238f8:	2300      	movs	r3, #0
 80238fa:	60fb      	str	r3, [r7, #12]
 80238fc:	687b      	ldr	r3, [r7, #4]
 80238fe:	681b      	ldr	r3, [r3, #0]
 8023900:	68db      	ldr	r3, [r3, #12]
 8023902:	60fb      	str	r3, [r7, #12]
 8023904:	687b      	ldr	r3, [r7, #4]
 8023906:	681b      	ldr	r3, [r3, #0]
 8023908:	689b      	ldr	r3, [r3, #8]
 802390a:	60fb      	str	r3, [r7, #12]
 802390c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 802390e:	687b      	ldr	r3, [r7, #4]
 8023910:	2201      	movs	r2, #1
 8023912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8023916:	687b      	ldr	r3, [r7, #4]
 8023918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802391a:	f043 0202 	orr.w	r2, r3, #2
 802391e:	687b      	ldr	r3, [r7, #4]
 8023920:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8023922:	6878      	ldr	r0, [r7, #4]
 8023924:	f7ff fe88 	bl	8023638 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8023928:	69fb      	ldr	r3, [r7, #28]
 802392a:	f003 0308 	and.w	r3, r3, #8
 802392e:	2b08      	cmp	r3, #8
 8023930:	f040 80be 	bne.w	8023ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8023934:	697b      	ldr	r3, [r7, #20]
 8023936:	f003 0320 	and.w	r3, r3, #32
 802393a:	2b00      	cmp	r3, #0
 802393c:	f000 80b8 	beq.w	8023ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8023940:	687b      	ldr	r3, [r7, #4]
 8023942:	681b      	ldr	r3, [r3, #0]
 8023944:	685a      	ldr	r2, [r3, #4]
 8023946:	687b      	ldr	r3, [r7, #4]
 8023948:	681b      	ldr	r3, [r3, #0]
 802394a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 802394e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8023950:	687b      	ldr	r3, [r7, #4]
 8023952:	681b      	ldr	r3, [r3, #0]
 8023954:	4a59      	ldr	r2, [pc, #356]	; (8023abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8023956:	4293      	cmp	r3, r2
 8023958:	d101      	bne.n	802395e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 802395a:	4b59      	ldr	r3, [pc, #356]	; (8023ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 802395c:	e001      	b.n	8023962 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 802395e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8023962:	685a      	ldr	r2, [r3, #4]
 8023964:	687b      	ldr	r3, [r7, #4]
 8023966:	681b      	ldr	r3, [r3, #0]
 8023968:	4954      	ldr	r1, [pc, #336]	; (8023abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 802396a:	428b      	cmp	r3, r1
 802396c:	d101      	bne.n	8023972 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 802396e:	4b54      	ldr	r3, [pc, #336]	; (8023ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8023970:	e001      	b.n	8023976 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8023972:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8023976:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 802397a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 802397c:	2300      	movs	r3, #0
 802397e:	60bb      	str	r3, [r7, #8]
 8023980:	687b      	ldr	r3, [r7, #4]
 8023982:	681b      	ldr	r3, [r3, #0]
 8023984:	689b      	ldr	r3, [r3, #8]
 8023986:	60bb      	str	r3, [r7, #8]
 8023988:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 802398a:	687b      	ldr	r3, [r7, #4]
 802398c:	2201      	movs	r2, #1
 802398e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8023992:	687b      	ldr	r3, [r7, #4]
 8023994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023996:	f043 0204 	orr.w	r2, r3, #4
 802399a:	687b      	ldr	r3, [r7, #4]
 802399c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 802399e:	6878      	ldr	r0, [r7, #4]
 80239a0:	f7ff fe4a 	bl	8023638 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80239a4:	e084      	b.n	8023ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80239a6:	69bb      	ldr	r3, [r7, #24]
 80239a8:	f003 0302 	and.w	r3, r3, #2
 80239ac:	2b02      	cmp	r3, #2
 80239ae:	d107      	bne.n	80239c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80239b0:	693b      	ldr	r3, [r7, #16]
 80239b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80239b6:	2b00      	cmp	r3, #0
 80239b8:	d002      	beq.n	80239c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80239ba:	6878      	ldr	r0, [r7, #4]
 80239bc:	f000 f8be 	bl	8023b3c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80239c0:	69fb      	ldr	r3, [r7, #28]
 80239c2:	f003 0301 	and.w	r3, r3, #1
 80239c6:	2b01      	cmp	r3, #1
 80239c8:	d107      	bne.n	80239da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80239ca:	697b      	ldr	r3, [r7, #20]
 80239cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80239d0:	2b00      	cmp	r3, #0
 80239d2:	d002      	beq.n	80239da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80239d4:	6878      	ldr	r0, [r7, #4]
 80239d6:	f000 f8fd 	bl	8023bd4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80239da:	69fb      	ldr	r3, [r7, #28]
 80239dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80239e0:	2b40      	cmp	r3, #64	; 0x40
 80239e2:	d12f      	bne.n	8023a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80239e4:	697b      	ldr	r3, [r7, #20]
 80239e6:	f003 0320 	and.w	r3, r3, #32
 80239ea:	2b00      	cmp	r3, #0
 80239ec:	d02a      	beq.n	8023a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80239ee:	687b      	ldr	r3, [r7, #4]
 80239f0:	681b      	ldr	r3, [r3, #0]
 80239f2:	685a      	ldr	r2, [r3, #4]
 80239f4:	687b      	ldr	r3, [r7, #4]
 80239f6:	681b      	ldr	r3, [r3, #0]
 80239f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80239fc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80239fe:	687b      	ldr	r3, [r7, #4]
 8023a00:	681b      	ldr	r3, [r3, #0]
 8023a02:	4a2e      	ldr	r2, [pc, #184]	; (8023abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8023a04:	4293      	cmp	r3, r2
 8023a06:	d101      	bne.n	8023a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8023a08:	4b2d      	ldr	r3, [pc, #180]	; (8023ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8023a0a:	e001      	b.n	8023a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8023a0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8023a10:	685a      	ldr	r2, [r3, #4]
 8023a12:	687b      	ldr	r3, [r7, #4]
 8023a14:	681b      	ldr	r3, [r3, #0]
 8023a16:	4929      	ldr	r1, [pc, #164]	; (8023abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8023a18:	428b      	cmp	r3, r1
 8023a1a:	d101      	bne.n	8023a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8023a1c:	4b28      	ldr	r3, [pc, #160]	; (8023ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8023a1e:	e001      	b.n	8023a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8023a20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8023a24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8023a28:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8023a2a:	687b      	ldr	r3, [r7, #4]
 8023a2c:	2201      	movs	r2, #1
 8023a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8023a32:	687b      	ldr	r3, [r7, #4]
 8023a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023a36:	f043 0202 	orr.w	r2, r3, #2
 8023a3a:	687b      	ldr	r3, [r7, #4]
 8023a3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8023a3e:	6878      	ldr	r0, [r7, #4]
 8023a40:	f7ff fdfa 	bl	8023638 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8023a44:	69bb      	ldr	r3, [r7, #24]
 8023a46:	f003 0308 	and.w	r3, r3, #8
 8023a4a:	2b08      	cmp	r3, #8
 8023a4c:	d131      	bne.n	8023ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8023a4e:	693b      	ldr	r3, [r7, #16]
 8023a50:	f003 0320 	and.w	r3, r3, #32
 8023a54:	2b00      	cmp	r3, #0
 8023a56:	d02c      	beq.n	8023ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8023a58:	687b      	ldr	r3, [r7, #4]
 8023a5a:	681b      	ldr	r3, [r3, #0]
 8023a5c:	4a17      	ldr	r2, [pc, #92]	; (8023abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8023a5e:	4293      	cmp	r3, r2
 8023a60:	d101      	bne.n	8023a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8023a62:	4b17      	ldr	r3, [pc, #92]	; (8023ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8023a64:	e001      	b.n	8023a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8023a66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8023a6a:	685a      	ldr	r2, [r3, #4]
 8023a6c:	687b      	ldr	r3, [r7, #4]
 8023a6e:	681b      	ldr	r3, [r3, #0]
 8023a70:	4912      	ldr	r1, [pc, #72]	; (8023abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8023a72:	428b      	cmp	r3, r1
 8023a74:	d101      	bne.n	8023a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8023a76:	4b12      	ldr	r3, [pc, #72]	; (8023ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8023a78:	e001      	b.n	8023a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8023a7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8023a7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8023a82:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8023a84:	687b      	ldr	r3, [r7, #4]
 8023a86:	681b      	ldr	r3, [r3, #0]
 8023a88:	685a      	ldr	r2, [r3, #4]
 8023a8a:	687b      	ldr	r3, [r7, #4]
 8023a8c:	681b      	ldr	r3, [r3, #0]
 8023a8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8023a92:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8023a94:	687b      	ldr	r3, [r7, #4]
 8023a96:	2201      	movs	r2, #1
 8023a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8023a9c:	687b      	ldr	r3, [r7, #4]
 8023a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023aa0:	f043 0204 	orr.w	r2, r3, #4
 8023aa4:	687b      	ldr	r3, [r7, #4]
 8023aa6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8023aa8:	6878      	ldr	r0, [r7, #4]
 8023aaa:	f7ff fdc5 	bl	8023638 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8023aae:	e000      	b.n	8023ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8023ab0:	bf00      	nop
}
 8023ab2:	bf00      	nop
 8023ab4:	3720      	adds	r7, #32
 8023ab6:	46bd      	mov	sp, r7
 8023ab8:	bd80      	pop	{r7, pc}
 8023aba:	bf00      	nop
 8023abc:	40003800 	.word	0x40003800
 8023ac0:	40003400 	.word	0x40003400

08023ac4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8023ac4:	b480      	push	{r7}
 8023ac6:	b083      	sub	sp, #12
 8023ac8:	af00      	add	r7, sp, #0
 8023aca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8023acc:	bf00      	nop
 8023ace:	370c      	adds	r7, #12
 8023ad0:	46bd      	mov	sp, r7
 8023ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ad6:	4770      	bx	lr

08023ad8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8023ad8:	b580      	push	{r7, lr}
 8023ada:	b082      	sub	sp, #8
 8023adc:	af00      	add	r7, sp, #0
 8023ade:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8023ae0:	687b      	ldr	r3, [r7, #4]
 8023ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023ae4:	1c99      	adds	r1, r3, #2
 8023ae6:	687a      	ldr	r2, [r7, #4]
 8023ae8:	6251      	str	r1, [r2, #36]	; 0x24
 8023aea:	881a      	ldrh	r2, [r3, #0]
 8023aec:	687b      	ldr	r3, [r7, #4]
 8023aee:	681b      	ldr	r3, [r3, #0]
 8023af0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8023af2:	687b      	ldr	r3, [r7, #4]
 8023af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023af6:	b29b      	uxth	r3, r3
 8023af8:	3b01      	subs	r3, #1
 8023afa:	b29a      	uxth	r2, r3
 8023afc:	687b      	ldr	r3, [r7, #4]
 8023afe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8023b00:	687b      	ldr	r3, [r7, #4]
 8023b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023b04:	b29b      	uxth	r3, r3
 8023b06:	2b00      	cmp	r3, #0
 8023b08:	d113      	bne.n	8023b32 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8023b0a:	687b      	ldr	r3, [r7, #4]
 8023b0c:	681b      	ldr	r3, [r3, #0]
 8023b0e:	685a      	ldr	r2, [r3, #4]
 8023b10:	687b      	ldr	r3, [r7, #4]
 8023b12:	681b      	ldr	r3, [r3, #0]
 8023b14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8023b18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8023b1a:	687b      	ldr	r3, [r7, #4]
 8023b1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8023b1e:	b29b      	uxth	r3, r3
 8023b20:	2b00      	cmp	r3, #0
 8023b22:	d106      	bne.n	8023b32 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8023b24:	687b      	ldr	r3, [r7, #4]
 8023b26:	2201      	movs	r2, #1
 8023b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8023b2c:	6878      	ldr	r0, [r7, #4]
 8023b2e:	f7ff ffc9 	bl	8023ac4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8023b32:	bf00      	nop
 8023b34:	3708      	adds	r7, #8
 8023b36:	46bd      	mov	sp, r7
 8023b38:	bd80      	pop	{r7, pc}
	...

08023b3c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8023b3c:	b580      	push	{r7, lr}
 8023b3e:	b082      	sub	sp, #8
 8023b40:	af00      	add	r7, sp, #0
 8023b42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8023b44:	687b      	ldr	r3, [r7, #4]
 8023b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b48:	1c99      	adds	r1, r3, #2
 8023b4a:	687a      	ldr	r2, [r7, #4]
 8023b4c:	6251      	str	r1, [r2, #36]	; 0x24
 8023b4e:	8819      	ldrh	r1, [r3, #0]
 8023b50:	687b      	ldr	r3, [r7, #4]
 8023b52:	681b      	ldr	r3, [r3, #0]
 8023b54:	4a1d      	ldr	r2, [pc, #116]	; (8023bcc <I2SEx_TxISR_I2SExt+0x90>)
 8023b56:	4293      	cmp	r3, r2
 8023b58:	d101      	bne.n	8023b5e <I2SEx_TxISR_I2SExt+0x22>
 8023b5a:	4b1d      	ldr	r3, [pc, #116]	; (8023bd0 <I2SEx_TxISR_I2SExt+0x94>)
 8023b5c:	e001      	b.n	8023b62 <I2SEx_TxISR_I2SExt+0x26>
 8023b5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8023b62:	460a      	mov	r2, r1
 8023b64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8023b66:	687b      	ldr	r3, [r7, #4]
 8023b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023b6a:	b29b      	uxth	r3, r3
 8023b6c:	3b01      	subs	r3, #1
 8023b6e:	b29a      	uxth	r2, r3
 8023b70:	687b      	ldr	r3, [r7, #4]
 8023b72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8023b74:	687b      	ldr	r3, [r7, #4]
 8023b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023b78:	b29b      	uxth	r3, r3
 8023b7a:	2b00      	cmp	r3, #0
 8023b7c:	d121      	bne.n	8023bc2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8023b7e:	687b      	ldr	r3, [r7, #4]
 8023b80:	681b      	ldr	r3, [r3, #0]
 8023b82:	4a12      	ldr	r2, [pc, #72]	; (8023bcc <I2SEx_TxISR_I2SExt+0x90>)
 8023b84:	4293      	cmp	r3, r2
 8023b86:	d101      	bne.n	8023b8c <I2SEx_TxISR_I2SExt+0x50>
 8023b88:	4b11      	ldr	r3, [pc, #68]	; (8023bd0 <I2SEx_TxISR_I2SExt+0x94>)
 8023b8a:	e001      	b.n	8023b90 <I2SEx_TxISR_I2SExt+0x54>
 8023b8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8023b90:	685a      	ldr	r2, [r3, #4]
 8023b92:	687b      	ldr	r3, [r7, #4]
 8023b94:	681b      	ldr	r3, [r3, #0]
 8023b96:	490d      	ldr	r1, [pc, #52]	; (8023bcc <I2SEx_TxISR_I2SExt+0x90>)
 8023b98:	428b      	cmp	r3, r1
 8023b9a:	d101      	bne.n	8023ba0 <I2SEx_TxISR_I2SExt+0x64>
 8023b9c:	4b0c      	ldr	r3, [pc, #48]	; (8023bd0 <I2SEx_TxISR_I2SExt+0x94>)
 8023b9e:	e001      	b.n	8023ba4 <I2SEx_TxISR_I2SExt+0x68>
 8023ba0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8023ba4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8023ba8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8023baa:	687b      	ldr	r3, [r7, #4]
 8023bac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8023bae:	b29b      	uxth	r3, r3
 8023bb0:	2b00      	cmp	r3, #0
 8023bb2:	d106      	bne.n	8023bc2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8023bb4:	687b      	ldr	r3, [r7, #4]
 8023bb6:	2201      	movs	r2, #1
 8023bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8023bbc:	6878      	ldr	r0, [r7, #4]
 8023bbe:	f7ff ff81 	bl	8023ac4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8023bc2:	bf00      	nop
 8023bc4:	3708      	adds	r7, #8
 8023bc6:	46bd      	mov	sp, r7
 8023bc8:	bd80      	pop	{r7, pc}
 8023bca:	bf00      	nop
 8023bcc:	40003800 	.word	0x40003800
 8023bd0:	40003400 	.word	0x40003400

08023bd4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8023bd4:	b580      	push	{r7, lr}
 8023bd6:	b082      	sub	sp, #8
 8023bd8:	af00      	add	r7, sp, #0
 8023bda:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8023bdc:	687b      	ldr	r3, [r7, #4]
 8023bde:	681b      	ldr	r3, [r3, #0]
 8023be0:	68d8      	ldr	r0, [r3, #12]
 8023be2:	687b      	ldr	r3, [r7, #4]
 8023be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023be6:	1c99      	adds	r1, r3, #2
 8023be8:	687a      	ldr	r2, [r7, #4]
 8023bea:	62d1      	str	r1, [r2, #44]	; 0x2c
 8023bec:	b282      	uxth	r2, r0
 8023bee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8023bf0:	687b      	ldr	r3, [r7, #4]
 8023bf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8023bf4:	b29b      	uxth	r3, r3
 8023bf6:	3b01      	subs	r3, #1
 8023bf8:	b29a      	uxth	r2, r3
 8023bfa:	687b      	ldr	r3, [r7, #4]
 8023bfc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8023bfe:	687b      	ldr	r3, [r7, #4]
 8023c00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8023c02:	b29b      	uxth	r3, r3
 8023c04:	2b00      	cmp	r3, #0
 8023c06:	d113      	bne.n	8023c30 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8023c08:	687b      	ldr	r3, [r7, #4]
 8023c0a:	681b      	ldr	r3, [r3, #0]
 8023c0c:	685a      	ldr	r2, [r3, #4]
 8023c0e:	687b      	ldr	r3, [r7, #4]
 8023c10:	681b      	ldr	r3, [r3, #0]
 8023c12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8023c16:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8023c18:	687b      	ldr	r3, [r7, #4]
 8023c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023c1c:	b29b      	uxth	r3, r3
 8023c1e:	2b00      	cmp	r3, #0
 8023c20:	d106      	bne.n	8023c30 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8023c22:	687b      	ldr	r3, [r7, #4]
 8023c24:	2201      	movs	r2, #1
 8023c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8023c2a:	6878      	ldr	r0, [r7, #4]
 8023c2c:	f7ff ff4a 	bl	8023ac4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8023c30:	bf00      	nop
 8023c32:	3708      	adds	r7, #8
 8023c34:	46bd      	mov	sp, r7
 8023c36:	bd80      	pop	{r7, pc}

08023c38 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8023c38:	b580      	push	{r7, lr}
 8023c3a:	b082      	sub	sp, #8
 8023c3c:	af00      	add	r7, sp, #0
 8023c3e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8023c40:	687b      	ldr	r3, [r7, #4]
 8023c42:	681b      	ldr	r3, [r3, #0]
 8023c44:	4a20      	ldr	r2, [pc, #128]	; (8023cc8 <I2SEx_RxISR_I2SExt+0x90>)
 8023c46:	4293      	cmp	r3, r2
 8023c48:	d101      	bne.n	8023c4e <I2SEx_RxISR_I2SExt+0x16>
 8023c4a:	4b20      	ldr	r3, [pc, #128]	; (8023ccc <I2SEx_RxISR_I2SExt+0x94>)
 8023c4c:	e001      	b.n	8023c52 <I2SEx_RxISR_I2SExt+0x1a>
 8023c4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8023c52:	68d8      	ldr	r0, [r3, #12]
 8023c54:	687b      	ldr	r3, [r7, #4]
 8023c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023c58:	1c99      	adds	r1, r3, #2
 8023c5a:	687a      	ldr	r2, [r7, #4]
 8023c5c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8023c5e:	b282      	uxth	r2, r0
 8023c60:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8023c62:	687b      	ldr	r3, [r7, #4]
 8023c64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8023c66:	b29b      	uxth	r3, r3
 8023c68:	3b01      	subs	r3, #1
 8023c6a:	b29a      	uxth	r2, r3
 8023c6c:	687b      	ldr	r3, [r7, #4]
 8023c6e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8023c70:	687b      	ldr	r3, [r7, #4]
 8023c72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8023c74:	b29b      	uxth	r3, r3
 8023c76:	2b00      	cmp	r3, #0
 8023c78:	d121      	bne.n	8023cbe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8023c7a:	687b      	ldr	r3, [r7, #4]
 8023c7c:	681b      	ldr	r3, [r3, #0]
 8023c7e:	4a12      	ldr	r2, [pc, #72]	; (8023cc8 <I2SEx_RxISR_I2SExt+0x90>)
 8023c80:	4293      	cmp	r3, r2
 8023c82:	d101      	bne.n	8023c88 <I2SEx_RxISR_I2SExt+0x50>
 8023c84:	4b11      	ldr	r3, [pc, #68]	; (8023ccc <I2SEx_RxISR_I2SExt+0x94>)
 8023c86:	e001      	b.n	8023c8c <I2SEx_RxISR_I2SExt+0x54>
 8023c88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8023c8c:	685a      	ldr	r2, [r3, #4]
 8023c8e:	687b      	ldr	r3, [r7, #4]
 8023c90:	681b      	ldr	r3, [r3, #0]
 8023c92:	490d      	ldr	r1, [pc, #52]	; (8023cc8 <I2SEx_RxISR_I2SExt+0x90>)
 8023c94:	428b      	cmp	r3, r1
 8023c96:	d101      	bne.n	8023c9c <I2SEx_RxISR_I2SExt+0x64>
 8023c98:	4b0c      	ldr	r3, [pc, #48]	; (8023ccc <I2SEx_RxISR_I2SExt+0x94>)
 8023c9a:	e001      	b.n	8023ca0 <I2SEx_RxISR_I2SExt+0x68>
 8023c9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8023ca0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8023ca4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8023ca6:	687b      	ldr	r3, [r7, #4]
 8023ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023caa:	b29b      	uxth	r3, r3
 8023cac:	2b00      	cmp	r3, #0
 8023cae:	d106      	bne.n	8023cbe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8023cb0:	687b      	ldr	r3, [r7, #4]
 8023cb2:	2201      	movs	r2, #1
 8023cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8023cb8:	6878      	ldr	r0, [r7, #4]
 8023cba:	f7ff ff03 	bl	8023ac4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8023cbe:	bf00      	nop
 8023cc0:	3708      	adds	r7, #8
 8023cc2:	46bd      	mov	sp, r7
 8023cc4:	bd80      	pop	{r7, pc}
 8023cc6:	bf00      	nop
 8023cc8:	40003800 	.word	0x40003800
 8023ccc:	40003400 	.word	0x40003400

08023cd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8023cd0:	b580      	push	{r7, lr}
 8023cd2:	b086      	sub	sp, #24
 8023cd4:	af00      	add	r7, sp, #0
 8023cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8023cd8:	687b      	ldr	r3, [r7, #4]
 8023cda:	2b00      	cmp	r3, #0
 8023cdc:	d101      	bne.n	8023ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8023cde:	2301      	movs	r3, #1
 8023ce0:	e264      	b.n	80241ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8023ce2:	687b      	ldr	r3, [r7, #4]
 8023ce4:	681b      	ldr	r3, [r3, #0]
 8023ce6:	f003 0301 	and.w	r3, r3, #1
 8023cea:	2b00      	cmp	r3, #0
 8023cec:	d075      	beq.n	8023dda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8023cee:	4ba3      	ldr	r3, [pc, #652]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023cf0:	689b      	ldr	r3, [r3, #8]
 8023cf2:	f003 030c 	and.w	r3, r3, #12
 8023cf6:	2b04      	cmp	r3, #4
 8023cf8:	d00c      	beq.n	8023d14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8023cfa:	4ba0      	ldr	r3, [pc, #640]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023cfc:	689b      	ldr	r3, [r3, #8]
 8023cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8023d02:	2b08      	cmp	r3, #8
 8023d04:	d112      	bne.n	8023d2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8023d06:	4b9d      	ldr	r3, [pc, #628]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023d08:	685b      	ldr	r3, [r3, #4]
 8023d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8023d12:	d10b      	bne.n	8023d2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8023d14:	4b99      	ldr	r3, [pc, #612]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023d16:	681b      	ldr	r3, [r3, #0]
 8023d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023d1c:	2b00      	cmp	r3, #0
 8023d1e:	d05b      	beq.n	8023dd8 <HAL_RCC_OscConfig+0x108>
 8023d20:	687b      	ldr	r3, [r7, #4]
 8023d22:	685b      	ldr	r3, [r3, #4]
 8023d24:	2b00      	cmp	r3, #0
 8023d26:	d157      	bne.n	8023dd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8023d28:	2301      	movs	r3, #1
 8023d2a:	e23f      	b.n	80241ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8023d2c:	687b      	ldr	r3, [r7, #4]
 8023d2e:	685b      	ldr	r3, [r3, #4]
 8023d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8023d34:	d106      	bne.n	8023d44 <HAL_RCC_OscConfig+0x74>
 8023d36:	4b91      	ldr	r3, [pc, #580]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023d38:	681b      	ldr	r3, [r3, #0]
 8023d3a:	4a90      	ldr	r2, [pc, #576]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023d40:	6013      	str	r3, [r2, #0]
 8023d42:	e01d      	b.n	8023d80 <HAL_RCC_OscConfig+0xb0>
 8023d44:	687b      	ldr	r3, [r7, #4]
 8023d46:	685b      	ldr	r3, [r3, #4]
 8023d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8023d4c:	d10c      	bne.n	8023d68 <HAL_RCC_OscConfig+0x98>
 8023d4e:	4b8b      	ldr	r3, [pc, #556]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023d50:	681b      	ldr	r3, [r3, #0]
 8023d52:	4a8a      	ldr	r2, [pc, #552]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8023d58:	6013      	str	r3, [r2, #0]
 8023d5a:	4b88      	ldr	r3, [pc, #544]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023d5c:	681b      	ldr	r3, [r3, #0]
 8023d5e:	4a87      	ldr	r2, [pc, #540]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023d64:	6013      	str	r3, [r2, #0]
 8023d66:	e00b      	b.n	8023d80 <HAL_RCC_OscConfig+0xb0>
 8023d68:	4b84      	ldr	r3, [pc, #528]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023d6a:	681b      	ldr	r3, [r3, #0]
 8023d6c:	4a83      	ldr	r2, [pc, #524]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8023d72:	6013      	str	r3, [r2, #0]
 8023d74:	4b81      	ldr	r3, [pc, #516]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023d76:	681b      	ldr	r3, [r3, #0]
 8023d78:	4a80      	ldr	r2, [pc, #512]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8023d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8023d80:	687b      	ldr	r3, [r7, #4]
 8023d82:	685b      	ldr	r3, [r3, #4]
 8023d84:	2b00      	cmp	r3, #0
 8023d86:	d013      	beq.n	8023db0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023d88:	f7fd f932 	bl	8020ff0 <HAL_GetTick>
 8023d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8023d8e:	e008      	b.n	8023da2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8023d90:	f7fd f92e 	bl	8020ff0 <HAL_GetTick>
 8023d94:	4602      	mov	r2, r0
 8023d96:	693b      	ldr	r3, [r7, #16]
 8023d98:	1ad3      	subs	r3, r2, r3
 8023d9a:	2b64      	cmp	r3, #100	; 0x64
 8023d9c:	d901      	bls.n	8023da2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8023d9e:	2303      	movs	r3, #3
 8023da0:	e204      	b.n	80241ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8023da2:	4b76      	ldr	r3, [pc, #472]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023da4:	681b      	ldr	r3, [r3, #0]
 8023da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023daa:	2b00      	cmp	r3, #0
 8023dac:	d0f0      	beq.n	8023d90 <HAL_RCC_OscConfig+0xc0>
 8023dae:	e014      	b.n	8023dda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023db0:	f7fd f91e 	bl	8020ff0 <HAL_GetTick>
 8023db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8023db6:	e008      	b.n	8023dca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8023db8:	f7fd f91a 	bl	8020ff0 <HAL_GetTick>
 8023dbc:	4602      	mov	r2, r0
 8023dbe:	693b      	ldr	r3, [r7, #16]
 8023dc0:	1ad3      	subs	r3, r2, r3
 8023dc2:	2b64      	cmp	r3, #100	; 0x64
 8023dc4:	d901      	bls.n	8023dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8023dc6:	2303      	movs	r3, #3
 8023dc8:	e1f0      	b.n	80241ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8023dca:	4b6c      	ldr	r3, [pc, #432]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023dcc:	681b      	ldr	r3, [r3, #0]
 8023dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023dd2:	2b00      	cmp	r3, #0
 8023dd4:	d1f0      	bne.n	8023db8 <HAL_RCC_OscConfig+0xe8>
 8023dd6:	e000      	b.n	8023dda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8023dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8023dda:	687b      	ldr	r3, [r7, #4]
 8023ddc:	681b      	ldr	r3, [r3, #0]
 8023dde:	f003 0302 	and.w	r3, r3, #2
 8023de2:	2b00      	cmp	r3, #0
 8023de4:	d063      	beq.n	8023eae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8023de6:	4b65      	ldr	r3, [pc, #404]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023de8:	689b      	ldr	r3, [r3, #8]
 8023dea:	f003 030c 	and.w	r3, r3, #12
 8023dee:	2b00      	cmp	r3, #0
 8023df0:	d00b      	beq.n	8023e0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8023df2:	4b62      	ldr	r3, [pc, #392]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023df4:	689b      	ldr	r3, [r3, #8]
 8023df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8023dfa:	2b08      	cmp	r3, #8
 8023dfc:	d11c      	bne.n	8023e38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8023dfe:	4b5f      	ldr	r3, [pc, #380]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023e00:	685b      	ldr	r3, [r3, #4]
 8023e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023e06:	2b00      	cmp	r3, #0
 8023e08:	d116      	bne.n	8023e38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8023e0a:	4b5c      	ldr	r3, [pc, #368]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023e0c:	681b      	ldr	r3, [r3, #0]
 8023e0e:	f003 0302 	and.w	r3, r3, #2
 8023e12:	2b00      	cmp	r3, #0
 8023e14:	d005      	beq.n	8023e22 <HAL_RCC_OscConfig+0x152>
 8023e16:	687b      	ldr	r3, [r7, #4]
 8023e18:	68db      	ldr	r3, [r3, #12]
 8023e1a:	2b01      	cmp	r3, #1
 8023e1c:	d001      	beq.n	8023e22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8023e1e:	2301      	movs	r3, #1
 8023e20:	e1c4      	b.n	80241ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8023e22:	4b56      	ldr	r3, [pc, #344]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023e24:	681b      	ldr	r3, [r3, #0]
 8023e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8023e2a:	687b      	ldr	r3, [r7, #4]
 8023e2c:	691b      	ldr	r3, [r3, #16]
 8023e2e:	00db      	lsls	r3, r3, #3
 8023e30:	4952      	ldr	r1, [pc, #328]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023e32:	4313      	orrs	r3, r2
 8023e34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8023e36:	e03a      	b.n	8023eae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8023e38:	687b      	ldr	r3, [r7, #4]
 8023e3a:	68db      	ldr	r3, [r3, #12]
 8023e3c:	2b00      	cmp	r3, #0
 8023e3e:	d020      	beq.n	8023e82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8023e40:	4b4f      	ldr	r3, [pc, #316]	; (8023f80 <HAL_RCC_OscConfig+0x2b0>)
 8023e42:	2201      	movs	r2, #1
 8023e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8023e46:	f7fd f8d3 	bl	8020ff0 <HAL_GetTick>
 8023e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8023e4c:	e008      	b.n	8023e60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8023e4e:	f7fd f8cf 	bl	8020ff0 <HAL_GetTick>
 8023e52:	4602      	mov	r2, r0
 8023e54:	693b      	ldr	r3, [r7, #16]
 8023e56:	1ad3      	subs	r3, r2, r3
 8023e58:	2b02      	cmp	r3, #2
 8023e5a:	d901      	bls.n	8023e60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8023e5c:	2303      	movs	r3, #3
 8023e5e:	e1a5      	b.n	80241ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8023e60:	4b46      	ldr	r3, [pc, #280]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023e62:	681b      	ldr	r3, [r3, #0]
 8023e64:	f003 0302 	and.w	r3, r3, #2
 8023e68:	2b00      	cmp	r3, #0
 8023e6a:	d0f0      	beq.n	8023e4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8023e6c:	4b43      	ldr	r3, [pc, #268]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023e6e:	681b      	ldr	r3, [r3, #0]
 8023e70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8023e74:	687b      	ldr	r3, [r7, #4]
 8023e76:	691b      	ldr	r3, [r3, #16]
 8023e78:	00db      	lsls	r3, r3, #3
 8023e7a:	4940      	ldr	r1, [pc, #256]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023e7c:	4313      	orrs	r3, r2
 8023e7e:	600b      	str	r3, [r1, #0]
 8023e80:	e015      	b.n	8023eae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8023e82:	4b3f      	ldr	r3, [pc, #252]	; (8023f80 <HAL_RCC_OscConfig+0x2b0>)
 8023e84:	2200      	movs	r2, #0
 8023e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8023e88:	f7fd f8b2 	bl	8020ff0 <HAL_GetTick>
 8023e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8023e8e:	e008      	b.n	8023ea2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8023e90:	f7fd f8ae 	bl	8020ff0 <HAL_GetTick>
 8023e94:	4602      	mov	r2, r0
 8023e96:	693b      	ldr	r3, [r7, #16]
 8023e98:	1ad3      	subs	r3, r2, r3
 8023e9a:	2b02      	cmp	r3, #2
 8023e9c:	d901      	bls.n	8023ea2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8023e9e:	2303      	movs	r3, #3
 8023ea0:	e184      	b.n	80241ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8023ea2:	4b36      	ldr	r3, [pc, #216]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023ea4:	681b      	ldr	r3, [r3, #0]
 8023ea6:	f003 0302 	and.w	r3, r3, #2
 8023eaa:	2b00      	cmp	r3, #0
 8023eac:	d1f0      	bne.n	8023e90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8023eae:	687b      	ldr	r3, [r7, #4]
 8023eb0:	681b      	ldr	r3, [r3, #0]
 8023eb2:	f003 0308 	and.w	r3, r3, #8
 8023eb6:	2b00      	cmp	r3, #0
 8023eb8:	d030      	beq.n	8023f1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8023eba:	687b      	ldr	r3, [r7, #4]
 8023ebc:	695b      	ldr	r3, [r3, #20]
 8023ebe:	2b00      	cmp	r3, #0
 8023ec0:	d016      	beq.n	8023ef0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8023ec2:	4b30      	ldr	r3, [pc, #192]	; (8023f84 <HAL_RCC_OscConfig+0x2b4>)
 8023ec4:	2201      	movs	r2, #1
 8023ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8023ec8:	f7fd f892 	bl	8020ff0 <HAL_GetTick>
 8023ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8023ece:	e008      	b.n	8023ee2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8023ed0:	f7fd f88e 	bl	8020ff0 <HAL_GetTick>
 8023ed4:	4602      	mov	r2, r0
 8023ed6:	693b      	ldr	r3, [r7, #16]
 8023ed8:	1ad3      	subs	r3, r2, r3
 8023eda:	2b02      	cmp	r3, #2
 8023edc:	d901      	bls.n	8023ee2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8023ede:	2303      	movs	r3, #3
 8023ee0:	e164      	b.n	80241ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8023ee2:	4b26      	ldr	r3, [pc, #152]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8023ee6:	f003 0302 	and.w	r3, r3, #2
 8023eea:	2b00      	cmp	r3, #0
 8023eec:	d0f0      	beq.n	8023ed0 <HAL_RCC_OscConfig+0x200>
 8023eee:	e015      	b.n	8023f1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8023ef0:	4b24      	ldr	r3, [pc, #144]	; (8023f84 <HAL_RCC_OscConfig+0x2b4>)
 8023ef2:	2200      	movs	r2, #0
 8023ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8023ef6:	f7fd f87b 	bl	8020ff0 <HAL_GetTick>
 8023efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8023efc:	e008      	b.n	8023f10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8023efe:	f7fd f877 	bl	8020ff0 <HAL_GetTick>
 8023f02:	4602      	mov	r2, r0
 8023f04:	693b      	ldr	r3, [r7, #16]
 8023f06:	1ad3      	subs	r3, r2, r3
 8023f08:	2b02      	cmp	r3, #2
 8023f0a:	d901      	bls.n	8023f10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8023f0c:	2303      	movs	r3, #3
 8023f0e:	e14d      	b.n	80241ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8023f10:	4b1a      	ldr	r3, [pc, #104]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8023f14:	f003 0302 	and.w	r3, r3, #2
 8023f18:	2b00      	cmp	r3, #0
 8023f1a:	d1f0      	bne.n	8023efe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8023f1c:	687b      	ldr	r3, [r7, #4]
 8023f1e:	681b      	ldr	r3, [r3, #0]
 8023f20:	f003 0304 	and.w	r3, r3, #4
 8023f24:	2b00      	cmp	r3, #0
 8023f26:	f000 80a0 	beq.w	802406a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8023f2a:	2300      	movs	r3, #0
 8023f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8023f2e:	4b13      	ldr	r3, [pc, #76]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023f36:	2b00      	cmp	r3, #0
 8023f38:	d10f      	bne.n	8023f5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8023f3a:	2300      	movs	r3, #0
 8023f3c:	60bb      	str	r3, [r7, #8]
 8023f3e:	4b0f      	ldr	r3, [pc, #60]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023f42:	4a0e      	ldr	r2, [pc, #56]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8023f48:	6413      	str	r3, [r2, #64]	; 0x40
 8023f4a:	4b0c      	ldr	r3, [pc, #48]	; (8023f7c <HAL_RCC_OscConfig+0x2ac>)
 8023f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023f52:	60bb      	str	r3, [r7, #8]
 8023f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8023f56:	2301      	movs	r3, #1
 8023f58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8023f5a:	4b0b      	ldr	r3, [pc, #44]	; (8023f88 <HAL_RCC_OscConfig+0x2b8>)
 8023f5c:	681b      	ldr	r3, [r3, #0]
 8023f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023f62:	2b00      	cmp	r3, #0
 8023f64:	d121      	bne.n	8023faa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8023f66:	4b08      	ldr	r3, [pc, #32]	; (8023f88 <HAL_RCC_OscConfig+0x2b8>)
 8023f68:	681b      	ldr	r3, [r3, #0]
 8023f6a:	4a07      	ldr	r2, [pc, #28]	; (8023f88 <HAL_RCC_OscConfig+0x2b8>)
 8023f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8023f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8023f72:	f7fd f83d 	bl	8020ff0 <HAL_GetTick>
 8023f76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8023f78:	e011      	b.n	8023f9e <HAL_RCC_OscConfig+0x2ce>
 8023f7a:	bf00      	nop
 8023f7c:	40023800 	.word	0x40023800
 8023f80:	42470000 	.word	0x42470000
 8023f84:	42470e80 	.word	0x42470e80
 8023f88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8023f8c:	f7fd f830 	bl	8020ff0 <HAL_GetTick>
 8023f90:	4602      	mov	r2, r0
 8023f92:	693b      	ldr	r3, [r7, #16]
 8023f94:	1ad3      	subs	r3, r2, r3
 8023f96:	2b02      	cmp	r3, #2
 8023f98:	d901      	bls.n	8023f9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8023f9a:	2303      	movs	r3, #3
 8023f9c:	e106      	b.n	80241ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8023f9e:	4b85      	ldr	r3, [pc, #532]	; (80241b4 <HAL_RCC_OscConfig+0x4e4>)
 8023fa0:	681b      	ldr	r3, [r3, #0]
 8023fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023fa6:	2b00      	cmp	r3, #0
 8023fa8:	d0f0      	beq.n	8023f8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8023faa:	687b      	ldr	r3, [r7, #4]
 8023fac:	689b      	ldr	r3, [r3, #8]
 8023fae:	2b01      	cmp	r3, #1
 8023fb0:	d106      	bne.n	8023fc0 <HAL_RCC_OscConfig+0x2f0>
 8023fb2:	4b81      	ldr	r3, [pc, #516]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 8023fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023fb6:	4a80      	ldr	r2, [pc, #512]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 8023fb8:	f043 0301 	orr.w	r3, r3, #1
 8023fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8023fbe:	e01c      	b.n	8023ffa <HAL_RCC_OscConfig+0x32a>
 8023fc0:	687b      	ldr	r3, [r7, #4]
 8023fc2:	689b      	ldr	r3, [r3, #8]
 8023fc4:	2b05      	cmp	r3, #5
 8023fc6:	d10c      	bne.n	8023fe2 <HAL_RCC_OscConfig+0x312>
 8023fc8:	4b7b      	ldr	r3, [pc, #492]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 8023fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023fcc:	4a7a      	ldr	r2, [pc, #488]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 8023fce:	f043 0304 	orr.w	r3, r3, #4
 8023fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8023fd4:	4b78      	ldr	r3, [pc, #480]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 8023fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023fd8:	4a77      	ldr	r2, [pc, #476]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 8023fda:	f043 0301 	orr.w	r3, r3, #1
 8023fde:	6713      	str	r3, [r2, #112]	; 0x70
 8023fe0:	e00b      	b.n	8023ffa <HAL_RCC_OscConfig+0x32a>
 8023fe2:	4b75      	ldr	r3, [pc, #468]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 8023fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023fe6:	4a74      	ldr	r2, [pc, #464]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 8023fe8:	f023 0301 	bic.w	r3, r3, #1
 8023fec:	6713      	str	r3, [r2, #112]	; 0x70
 8023fee:	4b72      	ldr	r3, [pc, #456]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 8023ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023ff2:	4a71      	ldr	r2, [pc, #452]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 8023ff4:	f023 0304 	bic.w	r3, r3, #4
 8023ff8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8023ffa:	687b      	ldr	r3, [r7, #4]
 8023ffc:	689b      	ldr	r3, [r3, #8]
 8023ffe:	2b00      	cmp	r3, #0
 8024000:	d015      	beq.n	802402e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8024002:	f7fc fff5 	bl	8020ff0 <HAL_GetTick>
 8024006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8024008:	e00a      	b.n	8024020 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802400a:	f7fc fff1 	bl	8020ff0 <HAL_GetTick>
 802400e:	4602      	mov	r2, r0
 8024010:	693b      	ldr	r3, [r7, #16]
 8024012:	1ad3      	subs	r3, r2, r3
 8024014:	f241 3288 	movw	r2, #5000	; 0x1388
 8024018:	4293      	cmp	r3, r2
 802401a:	d901      	bls.n	8024020 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 802401c:	2303      	movs	r3, #3
 802401e:	e0c5      	b.n	80241ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8024020:	4b65      	ldr	r3, [pc, #404]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 8024022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024024:	f003 0302 	and.w	r3, r3, #2
 8024028:	2b00      	cmp	r3, #0
 802402a:	d0ee      	beq.n	802400a <HAL_RCC_OscConfig+0x33a>
 802402c:	e014      	b.n	8024058 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802402e:	f7fc ffdf 	bl	8020ff0 <HAL_GetTick>
 8024032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8024034:	e00a      	b.n	802404c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8024036:	f7fc ffdb 	bl	8020ff0 <HAL_GetTick>
 802403a:	4602      	mov	r2, r0
 802403c:	693b      	ldr	r3, [r7, #16]
 802403e:	1ad3      	subs	r3, r2, r3
 8024040:	f241 3288 	movw	r2, #5000	; 0x1388
 8024044:	4293      	cmp	r3, r2
 8024046:	d901      	bls.n	802404c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8024048:	2303      	movs	r3, #3
 802404a:	e0af      	b.n	80241ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802404c:	4b5a      	ldr	r3, [pc, #360]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 802404e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024050:	f003 0302 	and.w	r3, r3, #2
 8024054:	2b00      	cmp	r3, #0
 8024056:	d1ee      	bne.n	8024036 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8024058:	7dfb      	ldrb	r3, [r7, #23]
 802405a:	2b01      	cmp	r3, #1
 802405c:	d105      	bne.n	802406a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802405e:	4b56      	ldr	r3, [pc, #344]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 8024060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024062:	4a55      	ldr	r2, [pc, #340]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 8024064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8024068:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802406a:	687b      	ldr	r3, [r7, #4]
 802406c:	699b      	ldr	r3, [r3, #24]
 802406e:	2b00      	cmp	r3, #0
 8024070:	f000 809b 	beq.w	80241aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8024074:	4b50      	ldr	r3, [pc, #320]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 8024076:	689b      	ldr	r3, [r3, #8]
 8024078:	f003 030c 	and.w	r3, r3, #12
 802407c:	2b08      	cmp	r3, #8
 802407e:	d05c      	beq.n	802413a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8024080:	687b      	ldr	r3, [r7, #4]
 8024082:	699b      	ldr	r3, [r3, #24]
 8024084:	2b02      	cmp	r3, #2
 8024086:	d141      	bne.n	802410c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8024088:	4b4c      	ldr	r3, [pc, #304]	; (80241bc <HAL_RCC_OscConfig+0x4ec>)
 802408a:	2200      	movs	r2, #0
 802408c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802408e:	f7fc ffaf 	bl	8020ff0 <HAL_GetTick>
 8024092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024094:	e008      	b.n	80240a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8024096:	f7fc ffab 	bl	8020ff0 <HAL_GetTick>
 802409a:	4602      	mov	r2, r0
 802409c:	693b      	ldr	r3, [r7, #16]
 802409e:	1ad3      	subs	r3, r2, r3
 80240a0:	2b02      	cmp	r3, #2
 80240a2:	d901      	bls.n	80240a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80240a4:	2303      	movs	r3, #3
 80240a6:	e081      	b.n	80241ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80240a8:	4b43      	ldr	r3, [pc, #268]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 80240aa:	681b      	ldr	r3, [r3, #0]
 80240ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80240b0:	2b00      	cmp	r3, #0
 80240b2:	d1f0      	bne.n	8024096 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80240b4:	687b      	ldr	r3, [r7, #4]
 80240b6:	69da      	ldr	r2, [r3, #28]
 80240b8:	687b      	ldr	r3, [r7, #4]
 80240ba:	6a1b      	ldr	r3, [r3, #32]
 80240bc:	431a      	orrs	r2, r3
 80240be:	687b      	ldr	r3, [r7, #4]
 80240c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80240c2:	019b      	lsls	r3, r3, #6
 80240c4:	431a      	orrs	r2, r3
 80240c6:	687b      	ldr	r3, [r7, #4]
 80240c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80240ca:	085b      	lsrs	r3, r3, #1
 80240cc:	3b01      	subs	r3, #1
 80240ce:	041b      	lsls	r3, r3, #16
 80240d0:	431a      	orrs	r2, r3
 80240d2:	687b      	ldr	r3, [r7, #4]
 80240d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80240d6:	061b      	lsls	r3, r3, #24
 80240d8:	4937      	ldr	r1, [pc, #220]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 80240da:	4313      	orrs	r3, r2
 80240dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80240de:	4b37      	ldr	r3, [pc, #220]	; (80241bc <HAL_RCC_OscConfig+0x4ec>)
 80240e0:	2201      	movs	r2, #1
 80240e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80240e4:	f7fc ff84 	bl	8020ff0 <HAL_GetTick>
 80240e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80240ea:	e008      	b.n	80240fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80240ec:	f7fc ff80 	bl	8020ff0 <HAL_GetTick>
 80240f0:	4602      	mov	r2, r0
 80240f2:	693b      	ldr	r3, [r7, #16]
 80240f4:	1ad3      	subs	r3, r2, r3
 80240f6:	2b02      	cmp	r3, #2
 80240f8:	d901      	bls.n	80240fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80240fa:	2303      	movs	r3, #3
 80240fc:	e056      	b.n	80241ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80240fe:	4b2e      	ldr	r3, [pc, #184]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 8024100:	681b      	ldr	r3, [r3, #0]
 8024102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024106:	2b00      	cmp	r3, #0
 8024108:	d0f0      	beq.n	80240ec <HAL_RCC_OscConfig+0x41c>
 802410a:	e04e      	b.n	80241aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802410c:	4b2b      	ldr	r3, [pc, #172]	; (80241bc <HAL_RCC_OscConfig+0x4ec>)
 802410e:	2200      	movs	r2, #0
 8024110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8024112:	f7fc ff6d 	bl	8020ff0 <HAL_GetTick>
 8024116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024118:	e008      	b.n	802412c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802411a:	f7fc ff69 	bl	8020ff0 <HAL_GetTick>
 802411e:	4602      	mov	r2, r0
 8024120:	693b      	ldr	r3, [r7, #16]
 8024122:	1ad3      	subs	r3, r2, r3
 8024124:	2b02      	cmp	r3, #2
 8024126:	d901      	bls.n	802412c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8024128:	2303      	movs	r3, #3
 802412a:	e03f      	b.n	80241ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802412c:	4b22      	ldr	r3, [pc, #136]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 802412e:	681b      	ldr	r3, [r3, #0]
 8024130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024134:	2b00      	cmp	r3, #0
 8024136:	d1f0      	bne.n	802411a <HAL_RCC_OscConfig+0x44a>
 8024138:	e037      	b.n	80241aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802413a:	687b      	ldr	r3, [r7, #4]
 802413c:	699b      	ldr	r3, [r3, #24]
 802413e:	2b01      	cmp	r3, #1
 8024140:	d101      	bne.n	8024146 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8024142:	2301      	movs	r3, #1
 8024144:	e032      	b.n	80241ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8024146:	4b1c      	ldr	r3, [pc, #112]	; (80241b8 <HAL_RCC_OscConfig+0x4e8>)
 8024148:	685b      	ldr	r3, [r3, #4]
 802414a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802414c:	687b      	ldr	r3, [r7, #4]
 802414e:	699b      	ldr	r3, [r3, #24]
 8024150:	2b01      	cmp	r3, #1
 8024152:	d028      	beq.n	80241a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8024154:	68fb      	ldr	r3, [r7, #12]
 8024156:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 802415a:	687b      	ldr	r3, [r7, #4]
 802415c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802415e:	429a      	cmp	r2, r3
 8024160:	d121      	bne.n	80241a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8024162:	68fb      	ldr	r3, [r7, #12]
 8024164:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8024168:	687b      	ldr	r3, [r7, #4]
 802416a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802416c:	429a      	cmp	r2, r3
 802416e:	d11a      	bne.n	80241a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8024170:	68fa      	ldr	r2, [r7, #12]
 8024172:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8024176:	4013      	ands	r3, r2
 8024178:	687a      	ldr	r2, [r7, #4]
 802417a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802417c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802417e:	4293      	cmp	r3, r2
 8024180:	d111      	bne.n	80241a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8024182:	68fb      	ldr	r3, [r7, #12]
 8024184:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8024188:	687b      	ldr	r3, [r7, #4]
 802418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802418c:	085b      	lsrs	r3, r3, #1
 802418e:	3b01      	subs	r3, #1
 8024190:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8024192:	429a      	cmp	r2, r3
 8024194:	d107      	bne.n	80241a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8024196:	68fb      	ldr	r3, [r7, #12]
 8024198:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 802419c:	687b      	ldr	r3, [r7, #4]
 802419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80241a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80241a2:	429a      	cmp	r2, r3
 80241a4:	d001      	beq.n	80241aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80241a6:	2301      	movs	r3, #1
 80241a8:	e000      	b.n	80241ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80241aa:	2300      	movs	r3, #0
}
 80241ac:	4618      	mov	r0, r3
 80241ae:	3718      	adds	r7, #24
 80241b0:	46bd      	mov	sp, r7
 80241b2:	bd80      	pop	{r7, pc}
 80241b4:	40007000 	.word	0x40007000
 80241b8:	40023800 	.word	0x40023800
 80241bc:	42470060 	.word	0x42470060

080241c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80241c0:	b580      	push	{r7, lr}
 80241c2:	b084      	sub	sp, #16
 80241c4:	af00      	add	r7, sp, #0
 80241c6:	6078      	str	r0, [r7, #4]
 80241c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80241ca:	687b      	ldr	r3, [r7, #4]
 80241cc:	2b00      	cmp	r3, #0
 80241ce:	d101      	bne.n	80241d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80241d0:	2301      	movs	r3, #1
 80241d2:	e0cc      	b.n	802436e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80241d4:	4b68      	ldr	r3, [pc, #416]	; (8024378 <HAL_RCC_ClockConfig+0x1b8>)
 80241d6:	681b      	ldr	r3, [r3, #0]
 80241d8:	f003 0307 	and.w	r3, r3, #7
 80241dc:	683a      	ldr	r2, [r7, #0]
 80241de:	429a      	cmp	r2, r3
 80241e0:	d90c      	bls.n	80241fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80241e2:	4b65      	ldr	r3, [pc, #404]	; (8024378 <HAL_RCC_ClockConfig+0x1b8>)
 80241e4:	683a      	ldr	r2, [r7, #0]
 80241e6:	b2d2      	uxtb	r2, r2
 80241e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80241ea:	4b63      	ldr	r3, [pc, #396]	; (8024378 <HAL_RCC_ClockConfig+0x1b8>)
 80241ec:	681b      	ldr	r3, [r3, #0]
 80241ee:	f003 0307 	and.w	r3, r3, #7
 80241f2:	683a      	ldr	r2, [r7, #0]
 80241f4:	429a      	cmp	r2, r3
 80241f6:	d001      	beq.n	80241fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80241f8:	2301      	movs	r3, #1
 80241fa:	e0b8      	b.n	802436e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80241fc:	687b      	ldr	r3, [r7, #4]
 80241fe:	681b      	ldr	r3, [r3, #0]
 8024200:	f003 0302 	and.w	r3, r3, #2
 8024204:	2b00      	cmp	r3, #0
 8024206:	d020      	beq.n	802424a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8024208:	687b      	ldr	r3, [r7, #4]
 802420a:	681b      	ldr	r3, [r3, #0]
 802420c:	f003 0304 	and.w	r3, r3, #4
 8024210:	2b00      	cmp	r3, #0
 8024212:	d005      	beq.n	8024220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8024214:	4b59      	ldr	r3, [pc, #356]	; (802437c <HAL_RCC_ClockConfig+0x1bc>)
 8024216:	689b      	ldr	r3, [r3, #8]
 8024218:	4a58      	ldr	r2, [pc, #352]	; (802437c <HAL_RCC_ClockConfig+0x1bc>)
 802421a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802421e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8024220:	687b      	ldr	r3, [r7, #4]
 8024222:	681b      	ldr	r3, [r3, #0]
 8024224:	f003 0308 	and.w	r3, r3, #8
 8024228:	2b00      	cmp	r3, #0
 802422a:	d005      	beq.n	8024238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802422c:	4b53      	ldr	r3, [pc, #332]	; (802437c <HAL_RCC_ClockConfig+0x1bc>)
 802422e:	689b      	ldr	r3, [r3, #8]
 8024230:	4a52      	ldr	r2, [pc, #328]	; (802437c <HAL_RCC_ClockConfig+0x1bc>)
 8024232:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8024236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8024238:	4b50      	ldr	r3, [pc, #320]	; (802437c <HAL_RCC_ClockConfig+0x1bc>)
 802423a:	689b      	ldr	r3, [r3, #8]
 802423c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8024240:	687b      	ldr	r3, [r7, #4]
 8024242:	689b      	ldr	r3, [r3, #8]
 8024244:	494d      	ldr	r1, [pc, #308]	; (802437c <HAL_RCC_ClockConfig+0x1bc>)
 8024246:	4313      	orrs	r3, r2
 8024248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802424a:	687b      	ldr	r3, [r7, #4]
 802424c:	681b      	ldr	r3, [r3, #0]
 802424e:	f003 0301 	and.w	r3, r3, #1
 8024252:	2b00      	cmp	r3, #0
 8024254:	d044      	beq.n	80242e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8024256:	687b      	ldr	r3, [r7, #4]
 8024258:	685b      	ldr	r3, [r3, #4]
 802425a:	2b01      	cmp	r3, #1
 802425c:	d107      	bne.n	802426e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802425e:	4b47      	ldr	r3, [pc, #284]	; (802437c <HAL_RCC_ClockConfig+0x1bc>)
 8024260:	681b      	ldr	r3, [r3, #0]
 8024262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024266:	2b00      	cmp	r3, #0
 8024268:	d119      	bne.n	802429e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802426a:	2301      	movs	r3, #1
 802426c:	e07f      	b.n	802436e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802426e:	687b      	ldr	r3, [r7, #4]
 8024270:	685b      	ldr	r3, [r3, #4]
 8024272:	2b02      	cmp	r3, #2
 8024274:	d003      	beq.n	802427e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8024276:	687b      	ldr	r3, [r7, #4]
 8024278:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802427a:	2b03      	cmp	r3, #3
 802427c:	d107      	bne.n	802428e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802427e:	4b3f      	ldr	r3, [pc, #252]	; (802437c <HAL_RCC_ClockConfig+0x1bc>)
 8024280:	681b      	ldr	r3, [r3, #0]
 8024282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024286:	2b00      	cmp	r3, #0
 8024288:	d109      	bne.n	802429e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802428a:	2301      	movs	r3, #1
 802428c:	e06f      	b.n	802436e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802428e:	4b3b      	ldr	r3, [pc, #236]	; (802437c <HAL_RCC_ClockConfig+0x1bc>)
 8024290:	681b      	ldr	r3, [r3, #0]
 8024292:	f003 0302 	and.w	r3, r3, #2
 8024296:	2b00      	cmp	r3, #0
 8024298:	d101      	bne.n	802429e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802429a:	2301      	movs	r3, #1
 802429c:	e067      	b.n	802436e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802429e:	4b37      	ldr	r3, [pc, #220]	; (802437c <HAL_RCC_ClockConfig+0x1bc>)
 80242a0:	689b      	ldr	r3, [r3, #8]
 80242a2:	f023 0203 	bic.w	r2, r3, #3
 80242a6:	687b      	ldr	r3, [r7, #4]
 80242a8:	685b      	ldr	r3, [r3, #4]
 80242aa:	4934      	ldr	r1, [pc, #208]	; (802437c <HAL_RCC_ClockConfig+0x1bc>)
 80242ac:	4313      	orrs	r3, r2
 80242ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80242b0:	f7fc fe9e 	bl	8020ff0 <HAL_GetTick>
 80242b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80242b6:	e00a      	b.n	80242ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80242b8:	f7fc fe9a 	bl	8020ff0 <HAL_GetTick>
 80242bc:	4602      	mov	r2, r0
 80242be:	68fb      	ldr	r3, [r7, #12]
 80242c0:	1ad3      	subs	r3, r2, r3
 80242c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80242c6:	4293      	cmp	r3, r2
 80242c8:	d901      	bls.n	80242ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80242ca:	2303      	movs	r3, #3
 80242cc:	e04f      	b.n	802436e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80242ce:	4b2b      	ldr	r3, [pc, #172]	; (802437c <HAL_RCC_ClockConfig+0x1bc>)
 80242d0:	689b      	ldr	r3, [r3, #8]
 80242d2:	f003 020c 	and.w	r2, r3, #12
 80242d6:	687b      	ldr	r3, [r7, #4]
 80242d8:	685b      	ldr	r3, [r3, #4]
 80242da:	009b      	lsls	r3, r3, #2
 80242dc:	429a      	cmp	r2, r3
 80242de:	d1eb      	bne.n	80242b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80242e0:	4b25      	ldr	r3, [pc, #148]	; (8024378 <HAL_RCC_ClockConfig+0x1b8>)
 80242e2:	681b      	ldr	r3, [r3, #0]
 80242e4:	f003 0307 	and.w	r3, r3, #7
 80242e8:	683a      	ldr	r2, [r7, #0]
 80242ea:	429a      	cmp	r2, r3
 80242ec:	d20c      	bcs.n	8024308 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80242ee:	4b22      	ldr	r3, [pc, #136]	; (8024378 <HAL_RCC_ClockConfig+0x1b8>)
 80242f0:	683a      	ldr	r2, [r7, #0]
 80242f2:	b2d2      	uxtb	r2, r2
 80242f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80242f6:	4b20      	ldr	r3, [pc, #128]	; (8024378 <HAL_RCC_ClockConfig+0x1b8>)
 80242f8:	681b      	ldr	r3, [r3, #0]
 80242fa:	f003 0307 	and.w	r3, r3, #7
 80242fe:	683a      	ldr	r2, [r7, #0]
 8024300:	429a      	cmp	r2, r3
 8024302:	d001      	beq.n	8024308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8024304:	2301      	movs	r3, #1
 8024306:	e032      	b.n	802436e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8024308:	687b      	ldr	r3, [r7, #4]
 802430a:	681b      	ldr	r3, [r3, #0]
 802430c:	f003 0304 	and.w	r3, r3, #4
 8024310:	2b00      	cmp	r3, #0
 8024312:	d008      	beq.n	8024326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8024314:	4b19      	ldr	r3, [pc, #100]	; (802437c <HAL_RCC_ClockConfig+0x1bc>)
 8024316:	689b      	ldr	r3, [r3, #8]
 8024318:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 802431c:	687b      	ldr	r3, [r7, #4]
 802431e:	68db      	ldr	r3, [r3, #12]
 8024320:	4916      	ldr	r1, [pc, #88]	; (802437c <HAL_RCC_ClockConfig+0x1bc>)
 8024322:	4313      	orrs	r3, r2
 8024324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8024326:	687b      	ldr	r3, [r7, #4]
 8024328:	681b      	ldr	r3, [r3, #0]
 802432a:	f003 0308 	and.w	r3, r3, #8
 802432e:	2b00      	cmp	r3, #0
 8024330:	d009      	beq.n	8024346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8024332:	4b12      	ldr	r3, [pc, #72]	; (802437c <HAL_RCC_ClockConfig+0x1bc>)
 8024334:	689b      	ldr	r3, [r3, #8]
 8024336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802433a:	687b      	ldr	r3, [r7, #4]
 802433c:	691b      	ldr	r3, [r3, #16]
 802433e:	00db      	lsls	r3, r3, #3
 8024340:	490e      	ldr	r1, [pc, #56]	; (802437c <HAL_RCC_ClockConfig+0x1bc>)
 8024342:	4313      	orrs	r3, r2
 8024344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8024346:	f000 f821 	bl	802438c <HAL_RCC_GetSysClockFreq>
 802434a:	4602      	mov	r2, r0
 802434c:	4b0b      	ldr	r3, [pc, #44]	; (802437c <HAL_RCC_ClockConfig+0x1bc>)
 802434e:	689b      	ldr	r3, [r3, #8]
 8024350:	091b      	lsrs	r3, r3, #4
 8024352:	f003 030f 	and.w	r3, r3, #15
 8024356:	490a      	ldr	r1, [pc, #40]	; (8024380 <HAL_RCC_ClockConfig+0x1c0>)
 8024358:	5ccb      	ldrb	r3, [r1, r3]
 802435a:	fa22 f303 	lsr.w	r3, r2, r3
 802435e:	4a09      	ldr	r2, [pc, #36]	; (8024384 <HAL_RCC_ClockConfig+0x1c4>)
 8024360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8024362:	4b09      	ldr	r3, [pc, #36]	; (8024388 <HAL_RCC_ClockConfig+0x1c8>)
 8024364:	681b      	ldr	r3, [r3, #0]
 8024366:	4618      	mov	r0, r3
 8024368:	f7fc fdfe 	bl	8020f68 <HAL_InitTick>

  return HAL_OK;
 802436c:	2300      	movs	r3, #0
}
 802436e:	4618      	mov	r0, r3
 8024370:	3710      	adds	r7, #16
 8024372:	46bd      	mov	sp, r7
 8024374:	bd80      	pop	{r7, pc}
 8024376:	bf00      	nop
 8024378:	40023c00 	.word	0x40023c00
 802437c:	40023800 	.word	0x40023800
 8024380:	0802850c 	.word	0x0802850c
 8024384:	20000028 	.word	0x20000028
 8024388:	2000002c 	.word	0x2000002c

0802438c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802438c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8024390:	b084      	sub	sp, #16
 8024392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8024394:	2300      	movs	r3, #0
 8024396:	607b      	str	r3, [r7, #4]
 8024398:	2300      	movs	r3, #0
 802439a:	60fb      	str	r3, [r7, #12]
 802439c:	2300      	movs	r3, #0
 802439e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80243a0:	2300      	movs	r3, #0
 80243a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80243a4:	4b67      	ldr	r3, [pc, #412]	; (8024544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80243a6:	689b      	ldr	r3, [r3, #8]
 80243a8:	f003 030c 	and.w	r3, r3, #12
 80243ac:	2b08      	cmp	r3, #8
 80243ae:	d00d      	beq.n	80243cc <HAL_RCC_GetSysClockFreq+0x40>
 80243b0:	2b08      	cmp	r3, #8
 80243b2:	f200 80bd 	bhi.w	8024530 <HAL_RCC_GetSysClockFreq+0x1a4>
 80243b6:	2b00      	cmp	r3, #0
 80243b8:	d002      	beq.n	80243c0 <HAL_RCC_GetSysClockFreq+0x34>
 80243ba:	2b04      	cmp	r3, #4
 80243bc:	d003      	beq.n	80243c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80243be:	e0b7      	b.n	8024530 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80243c0:	4b61      	ldr	r3, [pc, #388]	; (8024548 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80243c2:	60bb      	str	r3, [r7, #8]
       break;
 80243c4:	e0b7      	b.n	8024536 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80243c6:	4b61      	ldr	r3, [pc, #388]	; (802454c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80243c8:	60bb      	str	r3, [r7, #8]
      break;
 80243ca:	e0b4      	b.n	8024536 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80243cc:	4b5d      	ldr	r3, [pc, #372]	; (8024544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80243ce:	685b      	ldr	r3, [r3, #4]
 80243d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80243d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80243d6:	4b5b      	ldr	r3, [pc, #364]	; (8024544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80243d8:	685b      	ldr	r3, [r3, #4]
 80243da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80243de:	2b00      	cmp	r3, #0
 80243e0:	d04d      	beq.n	802447e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80243e2:	4b58      	ldr	r3, [pc, #352]	; (8024544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80243e4:	685b      	ldr	r3, [r3, #4]
 80243e6:	099b      	lsrs	r3, r3, #6
 80243e8:	461a      	mov	r2, r3
 80243ea:	f04f 0300 	mov.w	r3, #0
 80243ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80243f2:	f04f 0100 	mov.w	r1, #0
 80243f6:	ea02 0800 	and.w	r8, r2, r0
 80243fa:	ea03 0901 	and.w	r9, r3, r1
 80243fe:	4640      	mov	r0, r8
 8024400:	4649      	mov	r1, r9
 8024402:	f04f 0200 	mov.w	r2, #0
 8024406:	f04f 0300 	mov.w	r3, #0
 802440a:	014b      	lsls	r3, r1, #5
 802440c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8024410:	0142      	lsls	r2, r0, #5
 8024412:	4610      	mov	r0, r2
 8024414:	4619      	mov	r1, r3
 8024416:	ebb0 0008 	subs.w	r0, r0, r8
 802441a:	eb61 0109 	sbc.w	r1, r1, r9
 802441e:	f04f 0200 	mov.w	r2, #0
 8024422:	f04f 0300 	mov.w	r3, #0
 8024426:	018b      	lsls	r3, r1, #6
 8024428:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 802442c:	0182      	lsls	r2, r0, #6
 802442e:	1a12      	subs	r2, r2, r0
 8024430:	eb63 0301 	sbc.w	r3, r3, r1
 8024434:	f04f 0000 	mov.w	r0, #0
 8024438:	f04f 0100 	mov.w	r1, #0
 802443c:	00d9      	lsls	r1, r3, #3
 802443e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8024442:	00d0      	lsls	r0, r2, #3
 8024444:	4602      	mov	r2, r0
 8024446:	460b      	mov	r3, r1
 8024448:	eb12 0208 	adds.w	r2, r2, r8
 802444c:	eb43 0309 	adc.w	r3, r3, r9
 8024450:	f04f 0000 	mov.w	r0, #0
 8024454:	f04f 0100 	mov.w	r1, #0
 8024458:	0259      	lsls	r1, r3, #9
 802445a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 802445e:	0250      	lsls	r0, r2, #9
 8024460:	4602      	mov	r2, r0
 8024462:	460b      	mov	r3, r1
 8024464:	4610      	mov	r0, r2
 8024466:	4619      	mov	r1, r3
 8024468:	687b      	ldr	r3, [r7, #4]
 802446a:	461a      	mov	r2, r3
 802446c:	f04f 0300 	mov.w	r3, #0
 8024470:	f7fb feaa 	bl	80201c8 <__aeabi_uldivmod>
 8024474:	4602      	mov	r2, r0
 8024476:	460b      	mov	r3, r1
 8024478:	4613      	mov	r3, r2
 802447a:	60fb      	str	r3, [r7, #12]
 802447c:	e04a      	b.n	8024514 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802447e:	4b31      	ldr	r3, [pc, #196]	; (8024544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8024480:	685b      	ldr	r3, [r3, #4]
 8024482:	099b      	lsrs	r3, r3, #6
 8024484:	461a      	mov	r2, r3
 8024486:	f04f 0300 	mov.w	r3, #0
 802448a:	f240 10ff 	movw	r0, #511	; 0x1ff
 802448e:	f04f 0100 	mov.w	r1, #0
 8024492:	ea02 0400 	and.w	r4, r2, r0
 8024496:	ea03 0501 	and.w	r5, r3, r1
 802449a:	4620      	mov	r0, r4
 802449c:	4629      	mov	r1, r5
 802449e:	f04f 0200 	mov.w	r2, #0
 80244a2:	f04f 0300 	mov.w	r3, #0
 80244a6:	014b      	lsls	r3, r1, #5
 80244a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80244ac:	0142      	lsls	r2, r0, #5
 80244ae:	4610      	mov	r0, r2
 80244b0:	4619      	mov	r1, r3
 80244b2:	1b00      	subs	r0, r0, r4
 80244b4:	eb61 0105 	sbc.w	r1, r1, r5
 80244b8:	f04f 0200 	mov.w	r2, #0
 80244bc:	f04f 0300 	mov.w	r3, #0
 80244c0:	018b      	lsls	r3, r1, #6
 80244c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80244c6:	0182      	lsls	r2, r0, #6
 80244c8:	1a12      	subs	r2, r2, r0
 80244ca:	eb63 0301 	sbc.w	r3, r3, r1
 80244ce:	f04f 0000 	mov.w	r0, #0
 80244d2:	f04f 0100 	mov.w	r1, #0
 80244d6:	00d9      	lsls	r1, r3, #3
 80244d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80244dc:	00d0      	lsls	r0, r2, #3
 80244de:	4602      	mov	r2, r0
 80244e0:	460b      	mov	r3, r1
 80244e2:	1912      	adds	r2, r2, r4
 80244e4:	eb45 0303 	adc.w	r3, r5, r3
 80244e8:	f04f 0000 	mov.w	r0, #0
 80244ec:	f04f 0100 	mov.w	r1, #0
 80244f0:	0299      	lsls	r1, r3, #10
 80244f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80244f6:	0290      	lsls	r0, r2, #10
 80244f8:	4602      	mov	r2, r0
 80244fa:	460b      	mov	r3, r1
 80244fc:	4610      	mov	r0, r2
 80244fe:	4619      	mov	r1, r3
 8024500:	687b      	ldr	r3, [r7, #4]
 8024502:	461a      	mov	r2, r3
 8024504:	f04f 0300 	mov.w	r3, #0
 8024508:	f7fb fe5e 	bl	80201c8 <__aeabi_uldivmod>
 802450c:	4602      	mov	r2, r0
 802450e:	460b      	mov	r3, r1
 8024510:	4613      	mov	r3, r2
 8024512:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8024514:	4b0b      	ldr	r3, [pc, #44]	; (8024544 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8024516:	685b      	ldr	r3, [r3, #4]
 8024518:	0c1b      	lsrs	r3, r3, #16
 802451a:	f003 0303 	and.w	r3, r3, #3
 802451e:	3301      	adds	r3, #1
 8024520:	005b      	lsls	r3, r3, #1
 8024522:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8024524:	68fa      	ldr	r2, [r7, #12]
 8024526:	683b      	ldr	r3, [r7, #0]
 8024528:	fbb2 f3f3 	udiv	r3, r2, r3
 802452c:	60bb      	str	r3, [r7, #8]
      break;
 802452e:	e002      	b.n	8024536 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8024530:	4b05      	ldr	r3, [pc, #20]	; (8024548 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8024532:	60bb      	str	r3, [r7, #8]
      break;
 8024534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8024536:	68bb      	ldr	r3, [r7, #8]
}
 8024538:	4618      	mov	r0, r3
 802453a:	3710      	adds	r7, #16
 802453c:	46bd      	mov	sp, r7
 802453e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8024542:	bf00      	nop
 8024544:	40023800 	.word	0x40023800
 8024548:	00f42400 	.word	0x00f42400
 802454c:	007a1200 	.word	0x007a1200

08024550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8024550:	b480      	push	{r7}
 8024552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8024554:	4b03      	ldr	r3, [pc, #12]	; (8024564 <HAL_RCC_GetHCLKFreq+0x14>)
 8024556:	681b      	ldr	r3, [r3, #0]
}
 8024558:	4618      	mov	r0, r3
 802455a:	46bd      	mov	sp, r7
 802455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024560:	4770      	bx	lr
 8024562:	bf00      	nop
 8024564:	20000028 	.word	0x20000028

08024568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8024568:	b580      	push	{r7, lr}
 802456a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 802456c:	f7ff fff0 	bl	8024550 <HAL_RCC_GetHCLKFreq>
 8024570:	4602      	mov	r2, r0
 8024572:	4b05      	ldr	r3, [pc, #20]	; (8024588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8024574:	689b      	ldr	r3, [r3, #8]
 8024576:	0a9b      	lsrs	r3, r3, #10
 8024578:	f003 0307 	and.w	r3, r3, #7
 802457c:	4903      	ldr	r1, [pc, #12]	; (802458c <HAL_RCC_GetPCLK1Freq+0x24>)
 802457e:	5ccb      	ldrb	r3, [r1, r3]
 8024580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8024584:	4618      	mov	r0, r3
 8024586:	bd80      	pop	{r7, pc}
 8024588:	40023800 	.word	0x40023800
 802458c:	0802851c 	.word	0x0802851c

08024590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8024590:	b580      	push	{r7, lr}
 8024592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8024594:	f7ff ffdc 	bl	8024550 <HAL_RCC_GetHCLKFreq>
 8024598:	4602      	mov	r2, r0
 802459a:	4b05      	ldr	r3, [pc, #20]	; (80245b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 802459c:	689b      	ldr	r3, [r3, #8]
 802459e:	0b5b      	lsrs	r3, r3, #13
 80245a0:	f003 0307 	and.w	r3, r3, #7
 80245a4:	4903      	ldr	r1, [pc, #12]	; (80245b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80245a6:	5ccb      	ldrb	r3, [r1, r3]
 80245a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80245ac:	4618      	mov	r0, r3
 80245ae:	bd80      	pop	{r7, pc}
 80245b0:	40023800 	.word	0x40023800
 80245b4:	0802851c 	.word	0x0802851c

080245b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80245b8:	b580      	push	{r7, lr}
 80245ba:	b086      	sub	sp, #24
 80245bc:	af00      	add	r7, sp, #0
 80245be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80245c0:	2300      	movs	r3, #0
 80245c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80245c4:	2300      	movs	r3, #0
 80245c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80245c8:	687b      	ldr	r3, [r7, #4]
 80245ca:	681b      	ldr	r3, [r3, #0]
 80245cc:	f003 0301 	and.w	r3, r3, #1
 80245d0:	2b00      	cmp	r3, #0
 80245d2:	d105      	bne.n	80245e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80245d4:	687b      	ldr	r3, [r7, #4]
 80245d6:	681b      	ldr	r3, [r3, #0]
 80245d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80245dc:	2b00      	cmp	r3, #0
 80245de:	d035      	beq.n	802464c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80245e0:	4b62      	ldr	r3, [pc, #392]	; (802476c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80245e2:	2200      	movs	r2, #0
 80245e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80245e6:	f7fc fd03 	bl	8020ff0 <HAL_GetTick>
 80245ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80245ec:	e008      	b.n	8024600 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80245ee:	f7fc fcff 	bl	8020ff0 <HAL_GetTick>
 80245f2:	4602      	mov	r2, r0
 80245f4:	697b      	ldr	r3, [r7, #20]
 80245f6:	1ad3      	subs	r3, r2, r3
 80245f8:	2b02      	cmp	r3, #2
 80245fa:	d901      	bls.n	8024600 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80245fc:	2303      	movs	r3, #3
 80245fe:	e0b0      	b.n	8024762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8024600:	4b5b      	ldr	r3, [pc, #364]	; (8024770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8024602:	681b      	ldr	r3, [r3, #0]
 8024604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8024608:	2b00      	cmp	r3, #0
 802460a:	d1f0      	bne.n	80245ee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 802460c:	687b      	ldr	r3, [r7, #4]
 802460e:	685b      	ldr	r3, [r3, #4]
 8024610:	019a      	lsls	r2, r3, #6
 8024612:	687b      	ldr	r3, [r7, #4]
 8024614:	689b      	ldr	r3, [r3, #8]
 8024616:	071b      	lsls	r3, r3, #28
 8024618:	4955      	ldr	r1, [pc, #340]	; (8024770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802461a:	4313      	orrs	r3, r2
 802461c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8024620:	4b52      	ldr	r3, [pc, #328]	; (802476c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8024622:	2201      	movs	r2, #1
 8024624:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8024626:	f7fc fce3 	bl	8020ff0 <HAL_GetTick>
 802462a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802462c:	e008      	b.n	8024640 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802462e:	f7fc fcdf 	bl	8020ff0 <HAL_GetTick>
 8024632:	4602      	mov	r2, r0
 8024634:	697b      	ldr	r3, [r7, #20]
 8024636:	1ad3      	subs	r3, r2, r3
 8024638:	2b02      	cmp	r3, #2
 802463a:	d901      	bls.n	8024640 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802463c:	2303      	movs	r3, #3
 802463e:	e090      	b.n	8024762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8024640:	4b4b      	ldr	r3, [pc, #300]	; (8024770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8024642:	681b      	ldr	r3, [r3, #0]
 8024644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8024648:	2b00      	cmp	r3, #0
 802464a:	d0f0      	beq.n	802462e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 802464c:	687b      	ldr	r3, [r7, #4]
 802464e:	681b      	ldr	r3, [r3, #0]
 8024650:	f003 0302 	and.w	r3, r3, #2
 8024654:	2b00      	cmp	r3, #0
 8024656:	f000 8083 	beq.w	8024760 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 802465a:	2300      	movs	r3, #0
 802465c:	60fb      	str	r3, [r7, #12]
 802465e:	4b44      	ldr	r3, [pc, #272]	; (8024770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8024660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024662:	4a43      	ldr	r2, [pc, #268]	; (8024770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8024664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8024668:	6413      	str	r3, [r2, #64]	; 0x40
 802466a:	4b41      	ldr	r3, [pc, #260]	; (8024770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802466e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8024672:	60fb      	str	r3, [r7, #12]
 8024674:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8024676:	4b3f      	ldr	r3, [pc, #252]	; (8024774 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8024678:	681b      	ldr	r3, [r3, #0]
 802467a:	4a3e      	ldr	r2, [pc, #248]	; (8024774 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802467c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8024680:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8024682:	f7fc fcb5 	bl	8020ff0 <HAL_GetTick>
 8024686:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8024688:	e008      	b.n	802469c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 802468a:	f7fc fcb1 	bl	8020ff0 <HAL_GetTick>
 802468e:	4602      	mov	r2, r0
 8024690:	697b      	ldr	r3, [r7, #20]
 8024692:	1ad3      	subs	r3, r2, r3
 8024694:	2b02      	cmp	r3, #2
 8024696:	d901      	bls.n	802469c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8024698:	2303      	movs	r3, #3
 802469a:	e062      	b.n	8024762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 802469c:	4b35      	ldr	r3, [pc, #212]	; (8024774 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802469e:	681b      	ldr	r3, [r3, #0]
 80246a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80246a4:	2b00      	cmp	r3, #0
 80246a6:	d0f0      	beq.n	802468a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80246a8:	4b31      	ldr	r3, [pc, #196]	; (8024770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80246aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80246ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80246b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80246b2:	693b      	ldr	r3, [r7, #16]
 80246b4:	2b00      	cmp	r3, #0
 80246b6:	d02f      	beq.n	8024718 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80246b8:	687b      	ldr	r3, [r7, #4]
 80246ba:	68db      	ldr	r3, [r3, #12]
 80246bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80246c0:	693a      	ldr	r2, [r7, #16]
 80246c2:	429a      	cmp	r2, r3
 80246c4:	d028      	beq.n	8024718 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80246c6:	4b2a      	ldr	r3, [pc, #168]	; (8024770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80246c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80246ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80246ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80246d0:	4b29      	ldr	r3, [pc, #164]	; (8024778 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80246d2:	2201      	movs	r2, #1
 80246d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80246d6:	4b28      	ldr	r3, [pc, #160]	; (8024778 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80246d8:	2200      	movs	r2, #0
 80246da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80246dc:	4a24      	ldr	r2, [pc, #144]	; (8024770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80246de:	693b      	ldr	r3, [r7, #16]
 80246e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80246e2:	4b23      	ldr	r3, [pc, #140]	; (8024770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80246e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80246e6:	f003 0301 	and.w	r3, r3, #1
 80246ea:	2b01      	cmp	r3, #1
 80246ec:	d114      	bne.n	8024718 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80246ee:	f7fc fc7f 	bl	8020ff0 <HAL_GetTick>
 80246f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80246f4:	e00a      	b.n	802470c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80246f6:	f7fc fc7b 	bl	8020ff0 <HAL_GetTick>
 80246fa:	4602      	mov	r2, r0
 80246fc:	697b      	ldr	r3, [r7, #20]
 80246fe:	1ad3      	subs	r3, r2, r3
 8024700:	f241 3288 	movw	r2, #5000	; 0x1388
 8024704:	4293      	cmp	r3, r2
 8024706:	d901      	bls.n	802470c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8024708:	2303      	movs	r3, #3
 802470a:	e02a      	b.n	8024762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802470c:	4b18      	ldr	r3, [pc, #96]	; (8024770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802470e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024710:	f003 0302 	and.w	r3, r3, #2
 8024714:	2b00      	cmp	r3, #0
 8024716:	d0ee      	beq.n	80246f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8024718:	687b      	ldr	r3, [r7, #4]
 802471a:	68db      	ldr	r3, [r3, #12]
 802471c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8024720:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8024724:	d10d      	bne.n	8024742 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8024726:	4b12      	ldr	r3, [pc, #72]	; (8024770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8024728:	689b      	ldr	r3, [r3, #8]
 802472a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 802472e:	687b      	ldr	r3, [r7, #4]
 8024730:	68db      	ldr	r3, [r3, #12]
 8024732:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8024736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802473a:	490d      	ldr	r1, [pc, #52]	; (8024770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802473c:	4313      	orrs	r3, r2
 802473e:	608b      	str	r3, [r1, #8]
 8024740:	e005      	b.n	802474e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8024742:	4b0b      	ldr	r3, [pc, #44]	; (8024770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8024744:	689b      	ldr	r3, [r3, #8]
 8024746:	4a0a      	ldr	r2, [pc, #40]	; (8024770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8024748:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 802474c:	6093      	str	r3, [r2, #8]
 802474e:	4b08      	ldr	r3, [pc, #32]	; (8024770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8024750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8024752:	687b      	ldr	r3, [r7, #4]
 8024754:	68db      	ldr	r3, [r3, #12]
 8024756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802475a:	4905      	ldr	r1, [pc, #20]	; (8024770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802475c:	4313      	orrs	r3, r2
 802475e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8024760:	2300      	movs	r3, #0
}
 8024762:	4618      	mov	r0, r3
 8024764:	3718      	adds	r7, #24
 8024766:	46bd      	mov	sp, r7
 8024768:	bd80      	pop	{r7, pc}
 802476a:	bf00      	nop
 802476c:	42470068 	.word	0x42470068
 8024770:	40023800 	.word	0x40023800
 8024774:	40007000 	.word	0x40007000
 8024778:	42470e40 	.word	0x42470e40

0802477c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 802477c:	b480      	push	{r7}
 802477e:	b087      	sub	sp, #28
 8024780:	af00      	add	r7, sp, #0
 8024782:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8024784:	2300      	movs	r3, #0
 8024786:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8024788:	2300      	movs	r3, #0
 802478a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 802478c:	2300      	movs	r3, #0
 802478e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8024790:	2300      	movs	r3, #0
 8024792:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8024794:	687b      	ldr	r3, [r7, #4]
 8024796:	2b01      	cmp	r3, #1
 8024798:	d13e      	bne.n	8024818 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 802479a:	4b23      	ldr	r3, [pc, #140]	; (8024828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 802479c:	689b      	ldr	r3, [r3, #8]
 802479e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80247a2:	60fb      	str	r3, [r7, #12]
 80247a4:	68fb      	ldr	r3, [r7, #12]
 80247a6:	2b00      	cmp	r3, #0
 80247a8:	d005      	beq.n	80247b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80247aa:	68fb      	ldr	r3, [r7, #12]
 80247ac:	2b01      	cmp	r3, #1
 80247ae:	d12f      	bne.n	8024810 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80247b0:	4b1e      	ldr	r3, [pc, #120]	; (802482c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80247b2:	617b      	str	r3, [r7, #20]
          break;
 80247b4:	e02f      	b.n	8024816 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80247b6:	4b1c      	ldr	r3, [pc, #112]	; (8024828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80247b8:	685b      	ldr	r3, [r3, #4]
 80247ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80247be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80247c2:	d108      	bne.n	80247d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80247c4:	4b18      	ldr	r3, [pc, #96]	; (8024828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80247c6:	685b      	ldr	r3, [r3, #4]
 80247c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80247cc:	4a18      	ldr	r2, [pc, #96]	; (8024830 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80247ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80247d2:	613b      	str	r3, [r7, #16]
 80247d4:	e007      	b.n	80247e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80247d6:	4b14      	ldr	r3, [pc, #80]	; (8024828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80247d8:	685b      	ldr	r3, [r3, #4]
 80247da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80247de:	4a15      	ldr	r2, [pc, #84]	; (8024834 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80247e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80247e4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80247e6:	4b10      	ldr	r3, [pc, #64]	; (8024828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80247e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80247ec:	099b      	lsrs	r3, r3, #6
 80247ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80247f2:	693b      	ldr	r3, [r7, #16]
 80247f4:	fb02 f303 	mul.w	r3, r2, r3
 80247f8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80247fa:	4b0b      	ldr	r3, [pc, #44]	; (8024828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80247fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8024800:	0f1b      	lsrs	r3, r3, #28
 8024802:	f003 0307 	and.w	r3, r3, #7
 8024806:	68ba      	ldr	r2, [r7, #8]
 8024808:	fbb2 f3f3 	udiv	r3, r2, r3
 802480c:	617b      	str	r3, [r7, #20]
          break;
 802480e:	e002      	b.n	8024816 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8024810:	2300      	movs	r3, #0
 8024812:	617b      	str	r3, [r7, #20]
          break;
 8024814:	bf00      	nop
        }
      }
      break;
 8024816:	bf00      	nop
    }
  }
  return frequency;
 8024818:	697b      	ldr	r3, [r7, #20]
}
 802481a:	4618      	mov	r0, r3
 802481c:	371c      	adds	r7, #28
 802481e:	46bd      	mov	sp, r7
 8024820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024824:	4770      	bx	lr
 8024826:	bf00      	nop
 8024828:	40023800 	.word	0x40023800
 802482c:	00bb8000 	.word	0x00bb8000
 8024830:	007a1200 	.word	0x007a1200
 8024834:	00f42400 	.word	0x00f42400

08024838 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8024838:	b580      	push	{r7, lr}
 802483a:	b082      	sub	sp, #8
 802483c:	af00      	add	r7, sp, #0
 802483e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8024840:	687b      	ldr	r3, [r7, #4]
 8024842:	2b00      	cmp	r3, #0
 8024844:	d101      	bne.n	802484a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8024846:	2301      	movs	r3, #1
 8024848:	e07b      	b.n	8024942 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 802484a:	687b      	ldr	r3, [r7, #4]
 802484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802484e:	2b00      	cmp	r3, #0
 8024850:	d108      	bne.n	8024864 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8024852:	687b      	ldr	r3, [r7, #4]
 8024854:	685b      	ldr	r3, [r3, #4]
 8024856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802485a:	d009      	beq.n	8024870 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 802485c:	687b      	ldr	r3, [r7, #4]
 802485e:	2200      	movs	r2, #0
 8024860:	61da      	str	r2, [r3, #28]
 8024862:	e005      	b.n	8024870 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8024864:	687b      	ldr	r3, [r7, #4]
 8024866:	2200      	movs	r2, #0
 8024868:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 802486a:	687b      	ldr	r3, [r7, #4]
 802486c:	2200      	movs	r2, #0
 802486e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8024870:	687b      	ldr	r3, [r7, #4]
 8024872:	2200      	movs	r2, #0
 8024874:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8024876:	687b      	ldr	r3, [r7, #4]
 8024878:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802487c:	b2db      	uxtb	r3, r3
 802487e:	2b00      	cmp	r3, #0
 8024880:	d106      	bne.n	8024890 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8024882:	687b      	ldr	r3, [r7, #4]
 8024884:	2200      	movs	r2, #0
 8024886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802488a:	6878      	ldr	r0, [r7, #4]
 802488c:	f7fc f996 	bl	8020bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8024890:	687b      	ldr	r3, [r7, #4]
 8024892:	2202      	movs	r2, #2
 8024894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8024898:	687b      	ldr	r3, [r7, #4]
 802489a:	681b      	ldr	r3, [r3, #0]
 802489c:	681a      	ldr	r2, [r3, #0]
 802489e:	687b      	ldr	r3, [r7, #4]
 80248a0:	681b      	ldr	r3, [r3, #0]
 80248a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80248a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80248a8:	687b      	ldr	r3, [r7, #4]
 80248aa:	685b      	ldr	r3, [r3, #4]
 80248ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80248b0:	687b      	ldr	r3, [r7, #4]
 80248b2:	689b      	ldr	r3, [r3, #8]
 80248b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80248b8:	431a      	orrs	r2, r3
 80248ba:	687b      	ldr	r3, [r7, #4]
 80248bc:	68db      	ldr	r3, [r3, #12]
 80248be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80248c2:	431a      	orrs	r2, r3
 80248c4:	687b      	ldr	r3, [r7, #4]
 80248c6:	691b      	ldr	r3, [r3, #16]
 80248c8:	f003 0302 	and.w	r3, r3, #2
 80248cc:	431a      	orrs	r2, r3
 80248ce:	687b      	ldr	r3, [r7, #4]
 80248d0:	695b      	ldr	r3, [r3, #20]
 80248d2:	f003 0301 	and.w	r3, r3, #1
 80248d6:	431a      	orrs	r2, r3
 80248d8:	687b      	ldr	r3, [r7, #4]
 80248da:	699b      	ldr	r3, [r3, #24]
 80248dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80248e0:	431a      	orrs	r2, r3
 80248e2:	687b      	ldr	r3, [r7, #4]
 80248e4:	69db      	ldr	r3, [r3, #28]
 80248e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80248ea:	431a      	orrs	r2, r3
 80248ec:	687b      	ldr	r3, [r7, #4]
 80248ee:	6a1b      	ldr	r3, [r3, #32]
 80248f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80248f4:	ea42 0103 	orr.w	r1, r2, r3
 80248f8:	687b      	ldr	r3, [r7, #4]
 80248fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80248fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8024900:	687b      	ldr	r3, [r7, #4]
 8024902:	681b      	ldr	r3, [r3, #0]
 8024904:	430a      	orrs	r2, r1
 8024906:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8024908:	687b      	ldr	r3, [r7, #4]
 802490a:	699b      	ldr	r3, [r3, #24]
 802490c:	0c1b      	lsrs	r3, r3, #16
 802490e:	f003 0104 	and.w	r1, r3, #4
 8024912:	687b      	ldr	r3, [r7, #4]
 8024914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024916:	f003 0210 	and.w	r2, r3, #16
 802491a:	687b      	ldr	r3, [r7, #4]
 802491c:	681b      	ldr	r3, [r3, #0]
 802491e:	430a      	orrs	r2, r1
 8024920:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8024922:	687b      	ldr	r3, [r7, #4]
 8024924:	681b      	ldr	r3, [r3, #0]
 8024926:	69da      	ldr	r2, [r3, #28]
 8024928:	687b      	ldr	r3, [r7, #4]
 802492a:	681b      	ldr	r3, [r3, #0]
 802492c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8024930:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8024932:	687b      	ldr	r3, [r7, #4]
 8024934:	2200      	movs	r2, #0
 8024936:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8024938:	687b      	ldr	r3, [r7, #4]
 802493a:	2201      	movs	r2, #1
 802493c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8024940:	2300      	movs	r3, #0
}
 8024942:	4618      	mov	r0, r3
 8024944:	3708      	adds	r7, #8
 8024946:	46bd      	mov	sp, r7
 8024948:	bd80      	pop	{r7, pc}

0802494a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802494a:	b580      	push	{r7, lr}
 802494c:	b082      	sub	sp, #8
 802494e:	af00      	add	r7, sp, #0
 8024950:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8024952:	687b      	ldr	r3, [r7, #4]
 8024954:	2b00      	cmp	r3, #0
 8024956:	d101      	bne.n	802495c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8024958:	2301      	movs	r3, #1
 802495a:	e03f      	b.n	80249dc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802495c:	687b      	ldr	r3, [r7, #4]
 802495e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8024962:	b2db      	uxtb	r3, r3
 8024964:	2b00      	cmp	r3, #0
 8024966:	d106      	bne.n	8024976 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8024968:	687b      	ldr	r3, [r7, #4]
 802496a:	2200      	movs	r2, #0
 802496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8024970:	6878      	ldr	r0, [r7, #4]
 8024972:	f7fc f96b 	bl	8020c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8024976:	687b      	ldr	r3, [r7, #4]
 8024978:	2224      	movs	r2, #36	; 0x24
 802497a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 802497e:	687b      	ldr	r3, [r7, #4]
 8024980:	681b      	ldr	r3, [r3, #0]
 8024982:	68da      	ldr	r2, [r3, #12]
 8024984:	687b      	ldr	r3, [r7, #4]
 8024986:	681b      	ldr	r3, [r3, #0]
 8024988:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802498c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 802498e:	6878      	ldr	r0, [r7, #4]
 8024990:	f000 f928 	bl	8024be4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8024994:	687b      	ldr	r3, [r7, #4]
 8024996:	681b      	ldr	r3, [r3, #0]
 8024998:	691a      	ldr	r2, [r3, #16]
 802499a:	687b      	ldr	r3, [r7, #4]
 802499c:	681b      	ldr	r3, [r3, #0]
 802499e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80249a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80249a4:	687b      	ldr	r3, [r7, #4]
 80249a6:	681b      	ldr	r3, [r3, #0]
 80249a8:	695a      	ldr	r2, [r3, #20]
 80249aa:	687b      	ldr	r3, [r7, #4]
 80249ac:	681b      	ldr	r3, [r3, #0]
 80249ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80249b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80249b4:	687b      	ldr	r3, [r7, #4]
 80249b6:	681b      	ldr	r3, [r3, #0]
 80249b8:	68da      	ldr	r2, [r3, #12]
 80249ba:	687b      	ldr	r3, [r7, #4]
 80249bc:	681b      	ldr	r3, [r3, #0]
 80249be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80249c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80249c4:	687b      	ldr	r3, [r7, #4]
 80249c6:	2200      	movs	r2, #0
 80249c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80249ca:	687b      	ldr	r3, [r7, #4]
 80249cc:	2220      	movs	r2, #32
 80249ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80249d2:	687b      	ldr	r3, [r7, #4]
 80249d4:	2220      	movs	r2, #32
 80249d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80249da:	2300      	movs	r3, #0
}
 80249dc:	4618      	mov	r0, r3
 80249de:	3708      	adds	r7, #8
 80249e0:	46bd      	mov	sp, r7
 80249e2:	bd80      	pop	{r7, pc}

080249e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80249e4:	b580      	push	{r7, lr}
 80249e6:	b08a      	sub	sp, #40	; 0x28
 80249e8:	af02      	add	r7, sp, #8
 80249ea:	60f8      	str	r0, [r7, #12]
 80249ec:	60b9      	str	r1, [r7, #8]
 80249ee:	603b      	str	r3, [r7, #0]
 80249f0:	4613      	mov	r3, r2
 80249f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80249f4:	2300      	movs	r3, #0
 80249f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80249f8:	68fb      	ldr	r3, [r7, #12]
 80249fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80249fe:	b2db      	uxtb	r3, r3
 8024a00:	2b20      	cmp	r3, #32
 8024a02:	d17c      	bne.n	8024afe <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8024a04:	68bb      	ldr	r3, [r7, #8]
 8024a06:	2b00      	cmp	r3, #0
 8024a08:	d002      	beq.n	8024a10 <HAL_UART_Transmit+0x2c>
 8024a0a:	88fb      	ldrh	r3, [r7, #6]
 8024a0c:	2b00      	cmp	r3, #0
 8024a0e:	d101      	bne.n	8024a14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8024a10:	2301      	movs	r3, #1
 8024a12:	e075      	b.n	8024b00 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8024a14:	68fb      	ldr	r3, [r7, #12]
 8024a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8024a1a:	2b01      	cmp	r3, #1
 8024a1c:	d101      	bne.n	8024a22 <HAL_UART_Transmit+0x3e>
 8024a1e:	2302      	movs	r3, #2
 8024a20:	e06e      	b.n	8024b00 <HAL_UART_Transmit+0x11c>
 8024a22:	68fb      	ldr	r3, [r7, #12]
 8024a24:	2201      	movs	r2, #1
 8024a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8024a2a:	68fb      	ldr	r3, [r7, #12]
 8024a2c:	2200      	movs	r2, #0
 8024a2e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8024a30:	68fb      	ldr	r3, [r7, #12]
 8024a32:	2221      	movs	r2, #33	; 0x21
 8024a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8024a38:	f7fc fada 	bl	8020ff0 <HAL_GetTick>
 8024a3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8024a3e:	68fb      	ldr	r3, [r7, #12]
 8024a40:	88fa      	ldrh	r2, [r7, #6]
 8024a42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8024a44:	68fb      	ldr	r3, [r7, #12]
 8024a46:	88fa      	ldrh	r2, [r7, #6]
 8024a48:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8024a4a:	68fb      	ldr	r3, [r7, #12]
 8024a4c:	689b      	ldr	r3, [r3, #8]
 8024a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024a52:	d108      	bne.n	8024a66 <HAL_UART_Transmit+0x82>
 8024a54:	68fb      	ldr	r3, [r7, #12]
 8024a56:	691b      	ldr	r3, [r3, #16]
 8024a58:	2b00      	cmp	r3, #0
 8024a5a:	d104      	bne.n	8024a66 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8024a5c:	2300      	movs	r3, #0
 8024a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8024a60:	68bb      	ldr	r3, [r7, #8]
 8024a62:	61bb      	str	r3, [r7, #24]
 8024a64:	e003      	b.n	8024a6e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8024a66:	68bb      	ldr	r3, [r7, #8]
 8024a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8024a6a:	2300      	movs	r3, #0
 8024a6c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8024a6e:	68fb      	ldr	r3, [r7, #12]
 8024a70:	2200      	movs	r2, #0
 8024a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8024a76:	e02a      	b.n	8024ace <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8024a78:	683b      	ldr	r3, [r7, #0]
 8024a7a:	9300      	str	r3, [sp, #0]
 8024a7c:	697b      	ldr	r3, [r7, #20]
 8024a7e:	2200      	movs	r2, #0
 8024a80:	2180      	movs	r1, #128	; 0x80
 8024a82:	68f8      	ldr	r0, [r7, #12]
 8024a84:	f000 f840 	bl	8024b08 <UART_WaitOnFlagUntilTimeout>
 8024a88:	4603      	mov	r3, r0
 8024a8a:	2b00      	cmp	r3, #0
 8024a8c:	d001      	beq.n	8024a92 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8024a8e:	2303      	movs	r3, #3
 8024a90:	e036      	b.n	8024b00 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8024a92:	69fb      	ldr	r3, [r7, #28]
 8024a94:	2b00      	cmp	r3, #0
 8024a96:	d10b      	bne.n	8024ab0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8024a98:	69bb      	ldr	r3, [r7, #24]
 8024a9a:	881b      	ldrh	r3, [r3, #0]
 8024a9c:	461a      	mov	r2, r3
 8024a9e:	68fb      	ldr	r3, [r7, #12]
 8024aa0:	681b      	ldr	r3, [r3, #0]
 8024aa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8024aa6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8024aa8:	69bb      	ldr	r3, [r7, #24]
 8024aaa:	3302      	adds	r3, #2
 8024aac:	61bb      	str	r3, [r7, #24]
 8024aae:	e007      	b.n	8024ac0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8024ab0:	69fb      	ldr	r3, [r7, #28]
 8024ab2:	781a      	ldrb	r2, [r3, #0]
 8024ab4:	68fb      	ldr	r3, [r7, #12]
 8024ab6:	681b      	ldr	r3, [r3, #0]
 8024ab8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8024aba:	69fb      	ldr	r3, [r7, #28]
 8024abc:	3301      	adds	r3, #1
 8024abe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8024ac0:	68fb      	ldr	r3, [r7, #12]
 8024ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8024ac4:	b29b      	uxth	r3, r3
 8024ac6:	3b01      	subs	r3, #1
 8024ac8:	b29a      	uxth	r2, r3
 8024aca:	68fb      	ldr	r3, [r7, #12]
 8024acc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8024ace:	68fb      	ldr	r3, [r7, #12]
 8024ad0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8024ad2:	b29b      	uxth	r3, r3
 8024ad4:	2b00      	cmp	r3, #0
 8024ad6:	d1cf      	bne.n	8024a78 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8024ad8:	683b      	ldr	r3, [r7, #0]
 8024ada:	9300      	str	r3, [sp, #0]
 8024adc:	697b      	ldr	r3, [r7, #20]
 8024ade:	2200      	movs	r2, #0
 8024ae0:	2140      	movs	r1, #64	; 0x40
 8024ae2:	68f8      	ldr	r0, [r7, #12]
 8024ae4:	f000 f810 	bl	8024b08 <UART_WaitOnFlagUntilTimeout>
 8024ae8:	4603      	mov	r3, r0
 8024aea:	2b00      	cmp	r3, #0
 8024aec:	d001      	beq.n	8024af2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8024aee:	2303      	movs	r3, #3
 8024af0:	e006      	b.n	8024b00 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8024af2:	68fb      	ldr	r3, [r7, #12]
 8024af4:	2220      	movs	r2, #32
 8024af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8024afa:	2300      	movs	r3, #0
 8024afc:	e000      	b.n	8024b00 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8024afe:	2302      	movs	r3, #2
  }
}
 8024b00:	4618      	mov	r0, r3
 8024b02:	3720      	adds	r7, #32
 8024b04:	46bd      	mov	sp, r7
 8024b06:	bd80      	pop	{r7, pc}

08024b08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8024b08:	b580      	push	{r7, lr}
 8024b0a:	b090      	sub	sp, #64	; 0x40
 8024b0c:	af00      	add	r7, sp, #0
 8024b0e:	60f8      	str	r0, [r7, #12]
 8024b10:	60b9      	str	r1, [r7, #8]
 8024b12:	603b      	str	r3, [r7, #0]
 8024b14:	4613      	mov	r3, r2
 8024b16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8024b18:	e050      	b.n	8024bbc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8024b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024b20:	d04c      	beq.n	8024bbc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8024b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024b24:	2b00      	cmp	r3, #0
 8024b26:	d007      	beq.n	8024b38 <UART_WaitOnFlagUntilTimeout+0x30>
 8024b28:	f7fc fa62 	bl	8020ff0 <HAL_GetTick>
 8024b2c:	4602      	mov	r2, r0
 8024b2e:	683b      	ldr	r3, [r7, #0]
 8024b30:	1ad3      	subs	r3, r2, r3
 8024b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024b34:	429a      	cmp	r2, r3
 8024b36:	d241      	bcs.n	8024bbc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8024b38:	68fb      	ldr	r3, [r7, #12]
 8024b3a:	681b      	ldr	r3, [r3, #0]
 8024b3c:	330c      	adds	r3, #12
 8024b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024b42:	e853 3f00 	ldrex	r3, [r3]
 8024b46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8024b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024b4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8024b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8024b50:	68fb      	ldr	r3, [r7, #12]
 8024b52:	681b      	ldr	r3, [r3, #0]
 8024b54:	330c      	adds	r3, #12
 8024b56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024b58:	637a      	str	r2, [r7, #52]	; 0x34
 8024b5a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024b5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024b60:	e841 2300 	strex	r3, r2, [r1]
 8024b64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8024b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b68:	2b00      	cmp	r3, #0
 8024b6a:	d1e5      	bne.n	8024b38 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8024b6c:	68fb      	ldr	r3, [r7, #12]
 8024b6e:	681b      	ldr	r3, [r3, #0]
 8024b70:	3314      	adds	r3, #20
 8024b72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024b74:	697b      	ldr	r3, [r7, #20]
 8024b76:	e853 3f00 	ldrex	r3, [r3]
 8024b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8024b7c:	693b      	ldr	r3, [r7, #16]
 8024b7e:	f023 0301 	bic.w	r3, r3, #1
 8024b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8024b84:	68fb      	ldr	r3, [r7, #12]
 8024b86:	681b      	ldr	r3, [r3, #0]
 8024b88:	3314      	adds	r3, #20
 8024b8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8024b8c:	623a      	str	r2, [r7, #32]
 8024b8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024b90:	69f9      	ldr	r1, [r7, #28]
 8024b92:	6a3a      	ldr	r2, [r7, #32]
 8024b94:	e841 2300 	strex	r3, r2, [r1]
 8024b98:	61bb      	str	r3, [r7, #24]
   return(result);
 8024b9a:	69bb      	ldr	r3, [r7, #24]
 8024b9c:	2b00      	cmp	r3, #0
 8024b9e:	d1e5      	bne.n	8024b6c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8024ba0:	68fb      	ldr	r3, [r7, #12]
 8024ba2:	2220      	movs	r2, #32
 8024ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8024ba8:	68fb      	ldr	r3, [r7, #12]
 8024baa:	2220      	movs	r2, #32
 8024bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8024bb0:	68fb      	ldr	r3, [r7, #12]
 8024bb2:	2200      	movs	r2, #0
 8024bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8024bb8:	2303      	movs	r3, #3
 8024bba:	e00f      	b.n	8024bdc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8024bbc:	68fb      	ldr	r3, [r7, #12]
 8024bbe:	681b      	ldr	r3, [r3, #0]
 8024bc0:	681a      	ldr	r2, [r3, #0]
 8024bc2:	68bb      	ldr	r3, [r7, #8]
 8024bc4:	4013      	ands	r3, r2
 8024bc6:	68ba      	ldr	r2, [r7, #8]
 8024bc8:	429a      	cmp	r2, r3
 8024bca:	bf0c      	ite	eq
 8024bcc:	2301      	moveq	r3, #1
 8024bce:	2300      	movne	r3, #0
 8024bd0:	b2db      	uxtb	r3, r3
 8024bd2:	461a      	mov	r2, r3
 8024bd4:	79fb      	ldrb	r3, [r7, #7]
 8024bd6:	429a      	cmp	r2, r3
 8024bd8:	d09f      	beq.n	8024b1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8024bda:	2300      	movs	r3, #0
}
 8024bdc:	4618      	mov	r0, r3
 8024bde:	3740      	adds	r7, #64	; 0x40
 8024be0:	46bd      	mov	sp, r7
 8024be2:	bd80      	pop	{r7, pc}

08024be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8024be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024be8:	b09f      	sub	sp, #124	; 0x7c
 8024bea:	af00      	add	r7, sp, #0
 8024bec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8024bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024bf0:	681b      	ldr	r3, [r3, #0]
 8024bf2:	691b      	ldr	r3, [r3, #16]
 8024bf4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8024bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024bfa:	68d9      	ldr	r1, [r3, #12]
 8024bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024bfe:	681a      	ldr	r2, [r3, #0]
 8024c00:	ea40 0301 	orr.w	r3, r0, r1
 8024c04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8024c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024c08:	689a      	ldr	r2, [r3, #8]
 8024c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024c0c:	691b      	ldr	r3, [r3, #16]
 8024c0e:	431a      	orrs	r2, r3
 8024c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024c12:	695b      	ldr	r3, [r3, #20]
 8024c14:	431a      	orrs	r2, r3
 8024c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024c18:	69db      	ldr	r3, [r3, #28]
 8024c1a:	4313      	orrs	r3, r2
 8024c1c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8024c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024c20:	681b      	ldr	r3, [r3, #0]
 8024c22:	68db      	ldr	r3, [r3, #12]
 8024c24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8024c28:	f021 010c 	bic.w	r1, r1, #12
 8024c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024c2e:	681a      	ldr	r2, [r3, #0]
 8024c30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024c32:	430b      	orrs	r3, r1
 8024c34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8024c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024c38:	681b      	ldr	r3, [r3, #0]
 8024c3a:	695b      	ldr	r3, [r3, #20]
 8024c3c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8024c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024c42:	6999      	ldr	r1, [r3, #24]
 8024c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024c46:	681a      	ldr	r2, [r3, #0]
 8024c48:	ea40 0301 	orr.w	r3, r0, r1
 8024c4c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8024c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024c50:	681a      	ldr	r2, [r3, #0]
 8024c52:	4bc5      	ldr	r3, [pc, #788]	; (8024f68 <UART_SetConfig+0x384>)
 8024c54:	429a      	cmp	r2, r3
 8024c56:	d004      	beq.n	8024c62 <UART_SetConfig+0x7e>
 8024c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024c5a:	681a      	ldr	r2, [r3, #0]
 8024c5c:	4bc3      	ldr	r3, [pc, #780]	; (8024f6c <UART_SetConfig+0x388>)
 8024c5e:	429a      	cmp	r2, r3
 8024c60:	d103      	bne.n	8024c6a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8024c62:	f7ff fc95 	bl	8024590 <HAL_RCC_GetPCLK2Freq>
 8024c66:	6778      	str	r0, [r7, #116]	; 0x74
 8024c68:	e002      	b.n	8024c70 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8024c6a:	f7ff fc7d 	bl	8024568 <HAL_RCC_GetPCLK1Freq>
 8024c6e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8024c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024c72:	69db      	ldr	r3, [r3, #28]
 8024c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8024c78:	f040 80b6 	bne.w	8024de8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8024c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024c7e:	461c      	mov	r4, r3
 8024c80:	f04f 0500 	mov.w	r5, #0
 8024c84:	4622      	mov	r2, r4
 8024c86:	462b      	mov	r3, r5
 8024c88:	1891      	adds	r1, r2, r2
 8024c8a:	6439      	str	r1, [r7, #64]	; 0x40
 8024c8c:	415b      	adcs	r3, r3
 8024c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8024c90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024c94:	1912      	adds	r2, r2, r4
 8024c96:	eb45 0303 	adc.w	r3, r5, r3
 8024c9a:	f04f 0000 	mov.w	r0, #0
 8024c9e:	f04f 0100 	mov.w	r1, #0
 8024ca2:	00d9      	lsls	r1, r3, #3
 8024ca4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8024ca8:	00d0      	lsls	r0, r2, #3
 8024caa:	4602      	mov	r2, r0
 8024cac:	460b      	mov	r3, r1
 8024cae:	1911      	adds	r1, r2, r4
 8024cb0:	6639      	str	r1, [r7, #96]	; 0x60
 8024cb2:	416b      	adcs	r3, r5
 8024cb4:	667b      	str	r3, [r7, #100]	; 0x64
 8024cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024cb8:	685b      	ldr	r3, [r3, #4]
 8024cba:	461a      	mov	r2, r3
 8024cbc:	f04f 0300 	mov.w	r3, #0
 8024cc0:	1891      	adds	r1, r2, r2
 8024cc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8024cc4:	415b      	adcs	r3, r3
 8024cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8024cc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8024ccc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8024cd0:	f7fb fa7a 	bl	80201c8 <__aeabi_uldivmod>
 8024cd4:	4602      	mov	r2, r0
 8024cd6:	460b      	mov	r3, r1
 8024cd8:	4ba5      	ldr	r3, [pc, #660]	; (8024f70 <UART_SetConfig+0x38c>)
 8024cda:	fba3 2302 	umull	r2, r3, r3, r2
 8024cde:	095b      	lsrs	r3, r3, #5
 8024ce0:	011e      	lsls	r6, r3, #4
 8024ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024ce4:	461c      	mov	r4, r3
 8024ce6:	f04f 0500 	mov.w	r5, #0
 8024cea:	4622      	mov	r2, r4
 8024cec:	462b      	mov	r3, r5
 8024cee:	1891      	adds	r1, r2, r2
 8024cf0:	6339      	str	r1, [r7, #48]	; 0x30
 8024cf2:	415b      	adcs	r3, r3
 8024cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8024cf6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8024cfa:	1912      	adds	r2, r2, r4
 8024cfc:	eb45 0303 	adc.w	r3, r5, r3
 8024d00:	f04f 0000 	mov.w	r0, #0
 8024d04:	f04f 0100 	mov.w	r1, #0
 8024d08:	00d9      	lsls	r1, r3, #3
 8024d0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8024d0e:	00d0      	lsls	r0, r2, #3
 8024d10:	4602      	mov	r2, r0
 8024d12:	460b      	mov	r3, r1
 8024d14:	1911      	adds	r1, r2, r4
 8024d16:	65b9      	str	r1, [r7, #88]	; 0x58
 8024d18:	416b      	adcs	r3, r5
 8024d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8024d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024d1e:	685b      	ldr	r3, [r3, #4]
 8024d20:	461a      	mov	r2, r3
 8024d22:	f04f 0300 	mov.w	r3, #0
 8024d26:	1891      	adds	r1, r2, r2
 8024d28:	62b9      	str	r1, [r7, #40]	; 0x28
 8024d2a:	415b      	adcs	r3, r3
 8024d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024d2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8024d32:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8024d36:	f7fb fa47 	bl	80201c8 <__aeabi_uldivmod>
 8024d3a:	4602      	mov	r2, r0
 8024d3c:	460b      	mov	r3, r1
 8024d3e:	4b8c      	ldr	r3, [pc, #560]	; (8024f70 <UART_SetConfig+0x38c>)
 8024d40:	fba3 1302 	umull	r1, r3, r3, r2
 8024d44:	095b      	lsrs	r3, r3, #5
 8024d46:	2164      	movs	r1, #100	; 0x64
 8024d48:	fb01 f303 	mul.w	r3, r1, r3
 8024d4c:	1ad3      	subs	r3, r2, r3
 8024d4e:	00db      	lsls	r3, r3, #3
 8024d50:	3332      	adds	r3, #50	; 0x32
 8024d52:	4a87      	ldr	r2, [pc, #540]	; (8024f70 <UART_SetConfig+0x38c>)
 8024d54:	fba2 2303 	umull	r2, r3, r2, r3
 8024d58:	095b      	lsrs	r3, r3, #5
 8024d5a:	005b      	lsls	r3, r3, #1
 8024d5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8024d60:	441e      	add	r6, r3
 8024d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024d64:	4618      	mov	r0, r3
 8024d66:	f04f 0100 	mov.w	r1, #0
 8024d6a:	4602      	mov	r2, r0
 8024d6c:	460b      	mov	r3, r1
 8024d6e:	1894      	adds	r4, r2, r2
 8024d70:	623c      	str	r4, [r7, #32]
 8024d72:	415b      	adcs	r3, r3
 8024d74:	627b      	str	r3, [r7, #36]	; 0x24
 8024d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8024d7a:	1812      	adds	r2, r2, r0
 8024d7c:	eb41 0303 	adc.w	r3, r1, r3
 8024d80:	f04f 0400 	mov.w	r4, #0
 8024d84:	f04f 0500 	mov.w	r5, #0
 8024d88:	00dd      	lsls	r5, r3, #3
 8024d8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8024d8e:	00d4      	lsls	r4, r2, #3
 8024d90:	4622      	mov	r2, r4
 8024d92:	462b      	mov	r3, r5
 8024d94:	1814      	adds	r4, r2, r0
 8024d96:	653c      	str	r4, [r7, #80]	; 0x50
 8024d98:	414b      	adcs	r3, r1
 8024d9a:	657b      	str	r3, [r7, #84]	; 0x54
 8024d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024d9e:	685b      	ldr	r3, [r3, #4]
 8024da0:	461a      	mov	r2, r3
 8024da2:	f04f 0300 	mov.w	r3, #0
 8024da6:	1891      	adds	r1, r2, r2
 8024da8:	61b9      	str	r1, [r7, #24]
 8024daa:	415b      	adcs	r3, r3
 8024dac:	61fb      	str	r3, [r7, #28]
 8024dae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8024db2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8024db6:	f7fb fa07 	bl	80201c8 <__aeabi_uldivmod>
 8024dba:	4602      	mov	r2, r0
 8024dbc:	460b      	mov	r3, r1
 8024dbe:	4b6c      	ldr	r3, [pc, #432]	; (8024f70 <UART_SetConfig+0x38c>)
 8024dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8024dc4:	095b      	lsrs	r3, r3, #5
 8024dc6:	2164      	movs	r1, #100	; 0x64
 8024dc8:	fb01 f303 	mul.w	r3, r1, r3
 8024dcc:	1ad3      	subs	r3, r2, r3
 8024dce:	00db      	lsls	r3, r3, #3
 8024dd0:	3332      	adds	r3, #50	; 0x32
 8024dd2:	4a67      	ldr	r2, [pc, #412]	; (8024f70 <UART_SetConfig+0x38c>)
 8024dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8024dd8:	095b      	lsrs	r3, r3, #5
 8024dda:	f003 0207 	and.w	r2, r3, #7
 8024dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024de0:	681b      	ldr	r3, [r3, #0]
 8024de2:	4432      	add	r2, r6
 8024de4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8024de6:	e0b9      	b.n	8024f5c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8024de8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024dea:	461c      	mov	r4, r3
 8024dec:	f04f 0500 	mov.w	r5, #0
 8024df0:	4622      	mov	r2, r4
 8024df2:	462b      	mov	r3, r5
 8024df4:	1891      	adds	r1, r2, r2
 8024df6:	6139      	str	r1, [r7, #16]
 8024df8:	415b      	adcs	r3, r3
 8024dfa:	617b      	str	r3, [r7, #20]
 8024dfc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8024e00:	1912      	adds	r2, r2, r4
 8024e02:	eb45 0303 	adc.w	r3, r5, r3
 8024e06:	f04f 0000 	mov.w	r0, #0
 8024e0a:	f04f 0100 	mov.w	r1, #0
 8024e0e:	00d9      	lsls	r1, r3, #3
 8024e10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8024e14:	00d0      	lsls	r0, r2, #3
 8024e16:	4602      	mov	r2, r0
 8024e18:	460b      	mov	r3, r1
 8024e1a:	eb12 0804 	adds.w	r8, r2, r4
 8024e1e:	eb43 0905 	adc.w	r9, r3, r5
 8024e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024e24:	685b      	ldr	r3, [r3, #4]
 8024e26:	4618      	mov	r0, r3
 8024e28:	f04f 0100 	mov.w	r1, #0
 8024e2c:	f04f 0200 	mov.w	r2, #0
 8024e30:	f04f 0300 	mov.w	r3, #0
 8024e34:	008b      	lsls	r3, r1, #2
 8024e36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8024e3a:	0082      	lsls	r2, r0, #2
 8024e3c:	4640      	mov	r0, r8
 8024e3e:	4649      	mov	r1, r9
 8024e40:	f7fb f9c2 	bl	80201c8 <__aeabi_uldivmod>
 8024e44:	4602      	mov	r2, r0
 8024e46:	460b      	mov	r3, r1
 8024e48:	4b49      	ldr	r3, [pc, #292]	; (8024f70 <UART_SetConfig+0x38c>)
 8024e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8024e4e:	095b      	lsrs	r3, r3, #5
 8024e50:	011e      	lsls	r6, r3, #4
 8024e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024e54:	4618      	mov	r0, r3
 8024e56:	f04f 0100 	mov.w	r1, #0
 8024e5a:	4602      	mov	r2, r0
 8024e5c:	460b      	mov	r3, r1
 8024e5e:	1894      	adds	r4, r2, r2
 8024e60:	60bc      	str	r4, [r7, #8]
 8024e62:	415b      	adcs	r3, r3
 8024e64:	60fb      	str	r3, [r7, #12]
 8024e66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8024e6a:	1812      	adds	r2, r2, r0
 8024e6c:	eb41 0303 	adc.w	r3, r1, r3
 8024e70:	f04f 0400 	mov.w	r4, #0
 8024e74:	f04f 0500 	mov.w	r5, #0
 8024e78:	00dd      	lsls	r5, r3, #3
 8024e7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8024e7e:	00d4      	lsls	r4, r2, #3
 8024e80:	4622      	mov	r2, r4
 8024e82:	462b      	mov	r3, r5
 8024e84:	1814      	adds	r4, r2, r0
 8024e86:	64bc      	str	r4, [r7, #72]	; 0x48
 8024e88:	414b      	adcs	r3, r1
 8024e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8024e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024e8e:	685b      	ldr	r3, [r3, #4]
 8024e90:	4618      	mov	r0, r3
 8024e92:	f04f 0100 	mov.w	r1, #0
 8024e96:	f04f 0200 	mov.w	r2, #0
 8024e9a:	f04f 0300 	mov.w	r3, #0
 8024e9e:	008b      	lsls	r3, r1, #2
 8024ea0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8024ea4:	0082      	lsls	r2, r0, #2
 8024ea6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8024eaa:	f7fb f98d 	bl	80201c8 <__aeabi_uldivmod>
 8024eae:	4602      	mov	r2, r0
 8024eb0:	460b      	mov	r3, r1
 8024eb2:	4b2f      	ldr	r3, [pc, #188]	; (8024f70 <UART_SetConfig+0x38c>)
 8024eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8024eb8:	095b      	lsrs	r3, r3, #5
 8024eba:	2164      	movs	r1, #100	; 0x64
 8024ebc:	fb01 f303 	mul.w	r3, r1, r3
 8024ec0:	1ad3      	subs	r3, r2, r3
 8024ec2:	011b      	lsls	r3, r3, #4
 8024ec4:	3332      	adds	r3, #50	; 0x32
 8024ec6:	4a2a      	ldr	r2, [pc, #168]	; (8024f70 <UART_SetConfig+0x38c>)
 8024ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8024ecc:	095b      	lsrs	r3, r3, #5
 8024ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024ed2:	441e      	add	r6, r3
 8024ed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024ed6:	4618      	mov	r0, r3
 8024ed8:	f04f 0100 	mov.w	r1, #0
 8024edc:	4602      	mov	r2, r0
 8024ede:	460b      	mov	r3, r1
 8024ee0:	1894      	adds	r4, r2, r2
 8024ee2:	603c      	str	r4, [r7, #0]
 8024ee4:	415b      	adcs	r3, r3
 8024ee6:	607b      	str	r3, [r7, #4]
 8024ee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024eec:	1812      	adds	r2, r2, r0
 8024eee:	eb41 0303 	adc.w	r3, r1, r3
 8024ef2:	f04f 0400 	mov.w	r4, #0
 8024ef6:	f04f 0500 	mov.w	r5, #0
 8024efa:	00dd      	lsls	r5, r3, #3
 8024efc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8024f00:	00d4      	lsls	r4, r2, #3
 8024f02:	4622      	mov	r2, r4
 8024f04:	462b      	mov	r3, r5
 8024f06:	eb12 0a00 	adds.w	sl, r2, r0
 8024f0a:	eb43 0b01 	adc.w	fp, r3, r1
 8024f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024f10:	685b      	ldr	r3, [r3, #4]
 8024f12:	4618      	mov	r0, r3
 8024f14:	f04f 0100 	mov.w	r1, #0
 8024f18:	f04f 0200 	mov.w	r2, #0
 8024f1c:	f04f 0300 	mov.w	r3, #0
 8024f20:	008b      	lsls	r3, r1, #2
 8024f22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8024f26:	0082      	lsls	r2, r0, #2
 8024f28:	4650      	mov	r0, sl
 8024f2a:	4659      	mov	r1, fp
 8024f2c:	f7fb f94c 	bl	80201c8 <__aeabi_uldivmod>
 8024f30:	4602      	mov	r2, r0
 8024f32:	460b      	mov	r3, r1
 8024f34:	4b0e      	ldr	r3, [pc, #56]	; (8024f70 <UART_SetConfig+0x38c>)
 8024f36:	fba3 1302 	umull	r1, r3, r3, r2
 8024f3a:	095b      	lsrs	r3, r3, #5
 8024f3c:	2164      	movs	r1, #100	; 0x64
 8024f3e:	fb01 f303 	mul.w	r3, r1, r3
 8024f42:	1ad3      	subs	r3, r2, r3
 8024f44:	011b      	lsls	r3, r3, #4
 8024f46:	3332      	adds	r3, #50	; 0x32
 8024f48:	4a09      	ldr	r2, [pc, #36]	; (8024f70 <UART_SetConfig+0x38c>)
 8024f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8024f4e:	095b      	lsrs	r3, r3, #5
 8024f50:	f003 020f 	and.w	r2, r3, #15
 8024f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024f56:	681b      	ldr	r3, [r3, #0]
 8024f58:	4432      	add	r2, r6
 8024f5a:	609a      	str	r2, [r3, #8]
}
 8024f5c:	bf00      	nop
 8024f5e:	377c      	adds	r7, #124	; 0x7c
 8024f60:	46bd      	mov	sp, r7
 8024f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f66:	bf00      	nop
 8024f68:	40011000 	.word	0x40011000
 8024f6c:	40011400 	.word	0x40011400
 8024f70:	51eb851f 	.word	0x51eb851f

08024f74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8024f74:	b084      	sub	sp, #16
 8024f76:	b580      	push	{r7, lr}
 8024f78:	b084      	sub	sp, #16
 8024f7a:	af00      	add	r7, sp, #0
 8024f7c:	6078      	str	r0, [r7, #4]
 8024f7e:	f107 001c 	add.w	r0, r7, #28
 8024f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8024f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024f88:	2b01      	cmp	r3, #1
 8024f8a:	d122      	bne.n	8024fd2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8024f8c:	687b      	ldr	r3, [r7, #4]
 8024f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024f90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8024f94:	687b      	ldr	r3, [r7, #4]
 8024f96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8024f98:	687b      	ldr	r3, [r7, #4]
 8024f9a:	68db      	ldr	r3, [r3, #12]
 8024f9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8024fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8024fa4:	687a      	ldr	r2, [r7, #4]
 8024fa6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8024fa8:	687b      	ldr	r3, [r7, #4]
 8024faa:	68db      	ldr	r3, [r3, #12]
 8024fac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8024fb0:	687b      	ldr	r3, [r7, #4]
 8024fb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8024fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8024fb6:	2b01      	cmp	r3, #1
 8024fb8:	d105      	bne.n	8024fc6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8024fba:	687b      	ldr	r3, [r7, #4]
 8024fbc:	68db      	ldr	r3, [r3, #12]
 8024fbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8024fc2:	687b      	ldr	r3, [r7, #4]
 8024fc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8024fc6:	6878      	ldr	r0, [r7, #4]
 8024fc8:	f000 f9a0 	bl	802530c <USB_CoreReset>
 8024fcc:	4603      	mov	r3, r0
 8024fce:	73fb      	strb	r3, [r7, #15]
 8024fd0:	e01a      	b.n	8025008 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8024fd2:	687b      	ldr	r3, [r7, #4]
 8024fd4:	68db      	ldr	r3, [r3, #12]
 8024fd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8024fda:	687b      	ldr	r3, [r7, #4]
 8024fdc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8024fde:	6878      	ldr	r0, [r7, #4]
 8024fe0:	f000 f994 	bl	802530c <USB_CoreReset>
 8024fe4:	4603      	mov	r3, r0
 8024fe6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8024fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024fea:	2b00      	cmp	r3, #0
 8024fec:	d106      	bne.n	8024ffc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8024fee:	687b      	ldr	r3, [r7, #4]
 8024ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024ff2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8024ff6:	687b      	ldr	r3, [r7, #4]
 8024ff8:	639a      	str	r2, [r3, #56]	; 0x38
 8024ffa:	e005      	b.n	8025008 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8024ffc:	687b      	ldr	r3, [r7, #4]
 8024ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025000:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8025004:	687b      	ldr	r3, [r7, #4]
 8025006:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8025008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802500a:	2b01      	cmp	r3, #1
 802500c:	d10b      	bne.n	8025026 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 802500e:	687b      	ldr	r3, [r7, #4]
 8025010:	689b      	ldr	r3, [r3, #8]
 8025012:	f043 0206 	orr.w	r2, r3, #6
 8025016:	687b      	ldr	r3, [r7, #4]
 8025018:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 802501a:	687b      	ldr	r3, [r7, #4]
 802501c:	689b      	ldr	r3, [r3, #8]
 802501e:	f043 0220 	orr.w	r2, r3, #32
 8025022:	687b      	ldr	r3, [r7, #4]
 8025024:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8025026:	7bfb      	ldrb	r3, [r7, #15]
}
 8025028:	4618      	mov	r0, r3
 802502a:	3710      	adds	r7, #16
 802502c:	46bd      	mov	sp, r7
 802502e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8025032:	b004      	add	sp, #16
 8025034:	4770      	bx	lr

08025036 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8025036:	b480      	push	{r7}
 8025038:	b083      	sub	sp, #12
 802503a:	af00      	add	r7, sp, #0
 802503c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 802503e:	687b      	ldr	r3, [r7, #4]
 8025040:	689b      	ldr	r3, [r3, #8]
 8025042:	f043 0201 	orr.w	r2, r3, #1
 8025046:	687b      	ldr	r3, [r7, #4]
 8025048:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802504a:	2300      	movs	r3, #0
}
 802504c:	4618      	mov	r0, r3
 802504e:	370c      	adds	r7, #12
 8025050:	46bd      	mov	sp, r7
 8025052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025056:	4770      	bx	lr

08025058 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8025058:	b480      	push	{r7}
 802505a:	b083      	sub	sp, #12
 802505c:	af00      	add	r7, sp, #0
 802505e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8025060:	687b      	ldr	r3, [r7, #4]
 8025062:	689b      	ldr	r3, [r3, #8]
 8025064:	f023 0201 	bic.w	r2, r3, #1
 8025068:	687b      	ldr	r3, [r7, #4]
 802506a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802506c:	2300      	movs	r3, #0
}
 802506e:	4618      	mov	r0, r3
 8025070:	370c      	adds	r7, #12
 8025072:	46bd      	mov	sp, r7
 8025074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025078:	4770      	bx	lr

0802507a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 802507a:	b580      	push	{r7, lr}
 802507c:	b084      	sub	sp, #16
 802507e:	af00      	add	r7, sp, #0
 8025080:	6078      	str	r0, [r7, #4]
 8025082:	460b      	mov	r3, r1
 8025084:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8025086:	2300      	movs	r3, #0
 8025088:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 802508a:	687b      	ldr	r3, [r7, #4]
 802508c:	68db      	ldr	r3, [r3, #12]
 802508e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8025092:	687b      	ldr	r3, [r7, #4]
 8025094:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8025096:	78fb      	ldrb	r3, [r7, #3]
 8025098:	2b01      	cmp	r3, #1
 802509a:	d115      	bne.n	80250c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 802509c:	687b      	ldr	r3, [r7, #4]
 802509e:	68db      	ldr	r3, [r3, #12]
 80250a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80250a4:	687b      	ldr	r3, [r7, #4]
 80250a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80250a8:	2001      	movs	r0, #1
 80250aa:	f7fb ffad 	bl	8021008 <HAL_Delay>
      ms++;
 80250ae:	68fb      	ldr	r3, [r7, #12]
 80250b0:	3301      	adds	r3, #1
 80250b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80250b4:	6878      	ldr	r0, [r7, #4]
 80250b6:	f000 f91a 	bl	80252ee <USB_GetMode>
 80250ba:	4603      	mov	r3, r0
 80250bc:	2b01      	cmp	r3, #1
 80250be:	d01e      	beq.n	80250fe <USB_SetCurrentMode+0x84>
 80250c0:	68fb      	ldr	r3, [r7, #12]
 80250c2:	2b31      	cmp	r3, #49	; 0x31
 80250c4:	d9f0      	bls.n	80250a8 <USB_SetCurrentMode+0x2e>
 80250c6:	e01a      	b.n	80250fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80250c8:	78fb      	ldrb	r3, [r7, #3]
 80250ca:	2b00      	cmp	r3, #0
 80250cc:	d115      	bne.n	80250fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80250ce:	687b      	ldr	r3, [r7, #4]
 80250d0:	68db      	ldr	r3, [r3, #12]
 80250d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80250d6:	687b      	ldr	r3, [r7, #4]
 80250d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80250da:	2001      	movs	r0, #1
 80250dc:	f7fb ff94 	bl	8021008 <HAL_Delay>
      ms++;
 80250e0:	68fb      	ldr	r3, [r7, #12]
 80250e2:	3301      	adds	r3, #1
 80250e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80250e6:	6878      	ldr	r0, [r7, #4]
 80250e8:	f000 f901 	bl	80252ee <USB_GetMode>
 80250ec:	4603      	mov	r3, r0
 80250ee:	2b00      	cmp	r3, #0
 80250f0:	d005      	beq.n	80250fe <USB_SetCurrentMode+0x84>
 80250f2:	68fb      	ldr	r3, [r7, #12]
 80250f4:	2b31      	cmp	r3, #49	; 0x31
 80250f6:	d9f0      	bls.n	80250da <USB_SetCurrentMode+0x60>
 80250f8:	e001      	b.n	80250fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80250fa:	2301      	movs	r3, #1
 80250fc:	e005      	b.n	802510a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80250fe:	68fb      	ldr	r3, [r7, #12]
 8025100:	2b32      	cmp	r3, #50	; 0x32
 8025102:	d101      	bne.n	8025108 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8025104:	2301      	movs	r3, #1
 8025106:	e000      	b.n	802510a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8025108:	2300      	movs	r3, #0
}
 802510a:	4618      	mov	r0, r3
 802510c:	3710      	adds	r7, #16
 802510e:	46bd      	mov	sp, r7
 8025110:	bd80      	pop	{r7, pc}
	...

08025114 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8025114:	b480      	push	{r7}
 8025116:	b085      	sub	sp, #20
 8025118:	af00      	add	r7, sp, #0
 802511a:	6078      	str	r0, [r7, #4]
 802511c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802511e:	2300      	movs	r3, #0
 8025120:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8025122:	683b      	ldr	r3, [r7, #0]
 8025124:	019b      	lsls	r3, r3, #6
 8025126:	f043 0220 	orr.w	r2, r3, #32
 802512a:	687b      	ldr	r3, [r7, #4]
 802512c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 802512e:	68fb      	ldr	r3, [r7, #12]
 8025130:	3301      	adds	r3, #1
 8025132:	60fb      	str	r3, [r7, #12]
 8025134:	4a08      	ldr	r2, [pc, #32]	; (8025158 <USB_FlushTxFifo+0x44>)
 8025136:	4293      	cmp	r3, r2
 8025138:	d901      	bls.n	802513e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 802513a:	2303      	movs	r3, #3
 802513c:	e006      	b.n	802514c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802513e:	687b      	ldr	r3, [r7, #4]
 8025140:	691b      	ldr	r3, [r3, #16]
 8025142:	f003 0320 	and.w	r3, r3, #32
 8025146:	2b20      	cmp	r3, #32
 8025148:	d0f1      	beq.n	802512e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 802514a:	2300      	movs	r3, #0
}
 802514c:	4618      	mov	r0, r3
 802514e:	3714      	adds	r7, #20
 8025150:	46bd      	mov	sp, r7
 8025152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025156:	4770      	bx	lr
 8025158:	00030d40 	.word	0x00030d40

0802515c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802515c:	b480      	push	{r7}
 802515e:	b085      	sub	sp, #20
 8025160:	af00      	add	r7, sp, #0
 8025162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8025164:	2300      	movs	r3, #0
 8025166:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8025168:	687b      	ldr	r3, [r7, #4]
 802516a:	2210      	movs	r2, #16
 802516c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 802516e:	68fb      	ldr	r3, [r7, #12]
 8025170:	3301      	adds	r3, #1
 8025172:	60fb      	str	r3, [r7, #12]
 8025174:	4a08      	ldr	r2, [pc, #32]	; (8025198 <USB_FlushRxFifo+0x3c>)
 8025176:	4293      	cmp	r3, r2
 8025178:	d901      	bls.n	802517e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 802517a:	2303      	movs	r3, #3
 802517c:	e006      	b.n	802518c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802517e:	687b      	ldr	r3, [r7, #4]
 8025180:	691b      	ldr	r3, [r3, #16]
 8025182:	f003 0310 	and.w	r3, r3, #16
 8025186:	2b10      	cmp	r3, #16
 8025188:	d0f1      	beq.n	802516e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 802518a:	2300      	movs	r3, #0
}
 802518c:	4618      	mov	r0, r3
 802518e:	3714      	adds	r7, #20
 8025190:	46bd      	mov	sp, r7
 8025192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025196:	4770      	bx	lr
 8025198:	00030d40 	.word	0x00030d40

0802519c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802519c:	b480      	push	{r7}
 802519e:	b089      	sub	sp, #36	; 0x24
 80251a0:	af00      	add	r7, sp, #0
 80251a2:	60f8      	str	r0, [r7, #12]
 80251a4:	60b9      	str	r1, [r7, #8]
 80251a6:	4611      	mov	r1, r2
 80251a8:	461a      	mov	r2, r3
 80251aa:	460b      	mov	r3, r1
 80251ac:	71fb      	strb	r3, [r7, #7]
 80251ae:	4613      	mov	r3, r2
 80251b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80251b2:	68fb      	ldr	r3, [r7, #12]
 80251b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80251b6:	68bb      	ldr	r3, [r7, #8]
 80251b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80251ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80251be:	2b00      	cmp	r3, #0
 80251c0:	d123      	bne.n	802520a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80251c2:	88bb      	ldrh	r3, [r7, #4]
 80251c4:	3303      	adds	r3, #3
 80251c6:	089b      	lsrs	r3, r3, #2
 80251c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80251ca:	2300      	movs	r3, #0
 80251cc:	61bb      	str	r3, [r7, #24]
 80251ce:	e018      	b.n	8025202 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80251d0:	79fb      	ldrb	r3, [r7, #7]
 80251d2:	031a      	lsls	r2, r3, #12
 80251d4:	697b      	ldr	r3, [r7, #20]
 80251d6:	4413      	add	r3, r2
 80251d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80251dc:	461a      	mov	r2, r3
 80251de:	69fb      	ldr	r3, [r7, #28]
 80251e0:	681b      	ldr	r3, [r3, #0]
 80251e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80251e4:	69fb      	ldr	r3, [r7, #28]
 80251e6:	3301      	adds	r3, #1
 80251e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80251ea:	69fb      	ldr	r3, [r7, #28]
 80251ec:	3301      	adds	r3, #1
 80251ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80251f0:	69fb      	ldr	r3, [r7, #28]
 80251f2:	3301      	adds	r3, #1
 80251f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80251f6:	69fb      	ldr	r3, [r7, #28]
 80251f8:	3301      	adds	r3, #1
 80251fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80251fc:	69bb      	ldr	r3, [r7, #24]
 80251fe:	3301      	adds	r3, #1
 8025200:	61bb      	str	r3, [r7, #24]
 8025202:	69ba      	ldr	r2, [r7, #24]
 8025204:	693b      	ldr	r3, [r7, #16]
 8025206:	429a      	cmp	r2, r3
 8025208:	d3e2      	bcc.n	80251d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802520a:	2300      	movs	r3, #0
}
 802520c:	4618      	mov	r0, r3
 802520e:	3724      	adds	r7, #36	; 0x24
 8025210:	46bd      	mov	sp, r7
 8025212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025216:	4770      	bx	lr

08025218 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8025218:	b480      	push	{r7}
 802521a:	b08b      	sub	sp, #44	; 0x2c
 802521c:	af00      	add	r7, sp, #0
 802521e:	60f8      	str	r0, [r7, #12]
 8025220:	60b9      	str	r1, [r7, #8]
 8025222:	4613      	mov	r3, r2
 8025224:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025226:	68fb      	ldr	r3, [r7, #12]
 8025228:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 802522a:	68bb      	ldr	r3, [r7, #8]
 802522c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 802522e:	88fb      	ldrh	r3, [r7, #6]
 8025230:	089b      	lsrs	r3, r3, #2
 8025232:	b29b      	uxth	r3, r3
 8025234:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8025236:	88fb      	ldrh	r3, [r7, #6]
 8025238:	f003 0303 	and.w	r3, r3, #3
 802523c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 802523e:	2300      	movs	r3, #0
 8025240:	623b      	str	r3, [r7, #32]
 8025242:	e014      	b.n	802526e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8025244:	69bb      	ldr	r3, [r7, #24]
 8025246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802524a:	681a      	ldr	r2, [r3, #0]
 802524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802524e:	601a      	str	r2, [r3, #0]
    pDest++;
 8025250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025252:	3301      	adds	r3, #1
 8025254:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8025256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025258:	3301      	adds	r3, #1
 802525a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802525e:	3301      	adds	r3, #1
 8025260:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8025262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025264:	3301      	adds	r3, #1
 8025266:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8025268:	6a3b      	ldr	r3, [r7, #32]
 802526a:	3301      	adds	r3, #1
 802526c:	623b      	str	r3, [r7, #32]
 802526e:	6a3a      	ldr	r2, [r7, #32]
 8025270:	697b      	ldr	r3, [r7, #20]
 8025272:	429a      	cmp	r2, r3
 8025274:	d3e6      	bcc.n	8025244 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8025276:	8bfb      	ldrh	r3, [r7, #30]
 8025278:	2b00      	cmp	r3, #0
 802527a:	d01e      	beq.n	80252ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 802527c:	2300      	movs	r3, #0
 802527e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8025280:	69bb      	ldr	r3, [r7, #24]
 8025282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8025286:	461a      	mov	r2, r3
 8025288:	f107 0310 	add.w	r3, r7, #16
 802528c:	6812      	ldr	r2, [r2, #0]
 802528e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8025290:	693a      	ldr	r2, [r7, #16]
 8025292:	6a3b      	ldr	r3, [r7, #32]
 8025294:	b2db      	uxtb	r3, r3
 8025296:	00db      	lsls	r3, r3, #3
 8025298:	fa22 f303 	lsr.w	r3, r2, r3
 802529c:	b2da      	uxtb	r2, r3
 802529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252a0:	701a      	strb	r2, [r3, #0]
      i++;
 80252a2:	6a3b      	ldr	r3, [r7, #32]
 80252a4:	3301      	adds	r3, #1
 80252a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80252a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252aa:	3301      	adds	r3, #1
 80252ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80252ae:	8bfb      	ldrh	r3, [r7, #30]
 80252b0:	3b01      	subs	r3, #1
 80252b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80252b4:	8bfb      	ldrh	r3, [r7, #30]
 80252b6:	2b00      	cmp	r3, #0
 80252b8:	d1ea      	bne.n	8025290 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80252ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80252bc:	4618      	mov	r0, r3
 80252be:	372c      	adds	r7, #44	; 0x2c
 80252c0:	46bd      	mov	sp, r7
 80252c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252c6:	4770      	bx	lr

080252c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80252c8:	b480      	push	{r7}
 80252ca:	b085      	sub	sp, #20
 80252cc:	af00      	add	r7, sp, #0
 80252ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80252d0:	687b      	ldr	r3, [r7, #4]
 80252d2:	695b      	ldr	r3, [r3, #20]
 80252d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80252d6:	687b      	ldr	r3, [r7, #4]
 80252d8:	699b      	ldr	r3, [r3, #24]
 80252da:	68fa      	ldr	r2, [r7, #12]
 80252dc:	4013      	ands	r3, r2
 80252de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80252e0:	68fb      	ldr	r3, [r7, #12]
}
 80252e2:	4618      	mov	r0, r3
 80252e4:	3714      	adds	r7, #20
 80252e6:	46bd      	mov	sp, r7
 80252e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252ec:	4770      	bx	lr

080252ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80252ee:	b480      	push	{r7}
 80252f0:	b083      	sub	sp, #12
 80252f2:	af00      	add	r7, sp, #0
 80252f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80252f6:	687b      	ldr	r3, [r7, #4]
 80252f8:	695b      	ldr	r3, [r3, #20]
 80252fa:	f003 0301 	and.w	r3, r3, #1
}
 80252fe:	4618      	mov	r0, r3
 8025300:	370c      	adds	r7, #12
 8025302:	46bd      	mov	sp, r7
 8025304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025308:	4770      	bx	lr
	...

0802530c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802530c:	b480      	push	{r7}
 802530e:	b085      	sub	sp, #20
 8025310:	af00      	add	r7, sp, #0
 8025312:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8025314:	2300      	movs	r3, #0
 8025316:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8025318:	68fb      	ldr	r3, [r7, #12]
 802531a:	3301      	adds	r3, #1
 802531c:	60fb      	str	r3, [r7, #12]
 802531e:	4a13      	ldr	r2, [pc, #76]	; (802536c <USB_CoreReset+0x60>)
 8025320:	4293      	cmp	r3, r2
 8025322:	d901      	bls.n	8025328 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8025324:	2303      	movs	r3, #3
 8025326:	e01a      	b.n	802535e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8025328:	687b      	ldr	r3, [r7, #4]
 802532a:	691b      	ldr	r3, [r3, #16]
 802532c:	2b00      	cmp	r3, #0
 802532e:	daf3      	bge.n	8025318 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8025330:	2300      	movs	r3, #0
 8025332:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8025334:	687b      	ldr	r3, [r7, #4]
 8025336:	691b      	ldr	r3, [r3, #16]
 8025338:	f043 0201 	orr.w	r2, r3, #1
 802533c:	687b      	ldr	r3, [r7, #4]
 802533e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8025340:	68fb      	ldr	r3, [r7, #12]
 8025342:	3301      	adds	r3, #1
 8025344:	60fb      	str	r3, [r7, #12]
 8025346:	4a09      	ldr	r2, [pc, #36]	; (802536c <USB_CoreReset+0x60>)
 8025348:	4293      	cmp	r3, r2
 802534a:	d901      	bls.n	8025350 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 802534c:	2303      	movs	r3, #3
 802534e:	e006      	b.n	802535e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8025350:	687b      	ldr	r3, [r7, #4]
 8025352:	691b      	ldr	r3, [r3, #16]
 8025354:	f003 0301 	and.w	r3, r3, #1
 8025358:	2b01      	cmp	r3, #1
 802535a:	d0f1      	beq.n	8025340 <USB_CoreReset+0x34>

  return HAL_OK;
 802535c:	2300      	movs	r3, #0
}
 802535e:	4618      	mov	r0, r3
 8025360:	3714      	adds	r7, #20
 8025362:	46bd      	mov	sp, r7
 8025364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025368:	4770      	bx	lr
 802536a:	bf00      	nop
 802536c:	00030d40 	.word	0x00030d40

08025370 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8025370:	b084      	sub	sp, #16
 8025372:	b580      	push	{r7, lr}
 8025374:	b084      	sub	sp, #16
 8025376:	af00      	add	r7, sp, #0
 8025378:	6078      	str	r0, [r7, #4]
 802537a:	f107 001c 	add.w	r0, r7, #28
 802537e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025382:	687b      	ldr	r3, [r7, #4]
 8025384:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8025386:	68bb      	ldr	r3, [r7, #8]
 8025388:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802538c:	461a      	mov	r2, r3
 802538e:	2300      	movs	r3, #0
 8025390:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8025392:	687b      	ldr	r3, [r7, #4]
 8025394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025396:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802539a:	687b      	ldr	r3, [r7, #4]
 802539c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 802539e:	687b      	ldr	r3, [r7, #4]
 80253a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80253a2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80253a6:	687b      	ldr	r3, [r7, #4]
 80253a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80253aa:	687b      	ldr	r3, [r7, #4]
 80253ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80253ae:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80253b2:	687b      	ldr	r3, [r7, #4]
 80253b4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80253b6:	687b      	ldr	r3, [r7, #4]
 80253b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80253ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80253be:	2b00      	cmp	r3, #0
 80253c0:	d018      	beq.n	80253f4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80253c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80253c4:	2b01      	cmp	r3, #1
 80253c6:	d10a      	bne.n	80253de <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80253c8:	68bb      	ldr	r3, [r7, #8]
 80253ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80253ce:	681b      	ldr	r3, [r3, #0]
 80253d0:	68ba      	ldr	r2, [r7, #8]
 80253d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80253d6:	f043 0304 	orr.w	r3, r3, #4
 80253da:	6013      	str	r3, [r2, #0]
 80253dc:	e014      	b.n	8025408 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80253de:	68bb      	ldr	r3, [r7, #8]
 80253e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80253e4:	681b      	ldr	r3, [r3, #0]
 80253e6:	68ba      	ldr	r2, [r7, #8]
 80253e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80253ec:	f023 0304 	bic.w	r3, r3, #4
 80253f0:	6013      	str	r3, [r2, #0]
 80253f2:	e009      	b.n	8025408 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80253f4:	68bb      	ldr	r3, [r7, #8]
 80253f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80253fa:	681b      	ldr	r3, [r3, #0]
 80253fc:	68ba      	ldr	r2, [r7, #8]
 80253fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8025402:	f023 0304 	bic.w	r3, r3, #4
 8025406:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8025408:	2110      	movs	r1, #16
 802540a:	6878      	ldr	r0, [r7, #4]
 802540c:	f7ff fe82 	bl	8025114 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8025410:	6878      	ldr	r0, [r7, #4]
 8025412:	f7ff fea3 	bl	802515c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8025416:	2300      	movs	r3, #0
 8025418:	60fb      	str	r3, [r7, #12]
 802541a:	e015      	b.n	8025448 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 802541c:	68fb      	ldr	r3, [r7, #12]
 802541e:	015a      	lsls	r2, r3, #5
 8025420:	68bb      	ldr	r3, [r7, #8]
 8025422:	4413      	add	r3, r2
 8025424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025428:	461a      	mov	r2, r3
 802542a:	f04f 33ff 	mov.w	r3, #4294967295
 802542e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8025430:	68fb      	ldr	r3, [r7, #12]
 8025432:	015a      	lsls	r2, r3, #5
 8025434:	68bb      	ldr	r3, [r7, #8]
 8025436:	4413      	add	r3, r2
 8025438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802543c:	461a      	mov	r2, r3
 802543e:	2300      	movs	r3, #0
 8025440:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8025442:	68fb      	ldr	r3, [r7, #12]
 8025444:	3301      	adds	r3, #1
 8025446:	60fb      	str	r3, [r7, #12]
 8025448:	6a3b      	ldr	r3, [r7, #32]
 802544a:	68fa      	ldr	r2, [r7, #12]
 802544c:	429a      	cmp	r2, r3
 802544e:	d3e5      	bcc.n	802541c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8025450:	687b      	ldr	r3, [r7, #4]
 8025452:	2200      	movs	r2, #0
 8025454:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8025456:	687b      	ldr	r3, [r7, #4]
 8025458:	f04f 32ff 	mov.w	r2, #4294967295
 802545c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802545e:	687b      	ldr	r3, [r7, #4]
 8025460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025466:	2b00      	cmp	r3, #0
 8025468:	d00b      	beq.n	8025482 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 802546a:	687b      	ldr	r3, [r7, #4]
 802546c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8025470:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8025472:	687b      	ldr	r3, [r7, #4]
 8025474:	4a13      	ldr	r2, [pc, #76]	; (80254c4 <USB_HostInit+0x154>)
 8025476:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8025478:	687b      	ldr	r3, [r7, #4]
 802547a:	4a13      	ldr	r2, [pc, #76]	; (80254c8 <USB_HostInit+0x158>)
 802547c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8025480:	e009      	b.n	8025496 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8025482:	687b      	ldr	r3, [r7, #4]
 8025484:	2280      	movs	r2, #128	; 0x80
 8025486:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8025488:	687b      	ldr	r3, [r7, #4]
 802548a:	4a10      	ldr	r2, [pc, #64]	; (80254cc <USB_HostInit+0x15c>)
 802548c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 802548e:	687b      	ldr	r3, [r7, #4]
 8025490:	4a0f      	ldr	r2, [pc, #60]	; (80254d0 <USB_HostInit+0x160>)
 8025492:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8025496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025498:	2b00      	cmp	r3, #0
 802549a:	d105      	bne.n	80254a8 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802549c:	687b      	ldr	r3, [r7, #4]
 802549e:	699b      	ldr	r3, [r3, #24]
 80254a0:	f043 0210 	orr.w	r2, r3, #16
 80254a4:	687b      	ldr	r3, [r7, #4]
 80254a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80254a8:	687b      	ldr	r3, [r7, #4]
 80254aa:	699a      	ldr	r2, [r3, #24]
 80254ac:	4b09      	ldr	r3, [pc, #36]	; (80254d4 <USB_HostInit+0x164>)
 80254ae:	4313      	orrs	r3, r2
 80254b0:	687a      	ldr	r2, [r7, #4]
 80254b2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80254b4:	2300      	movs	r3, #0
}
 80254b6:	4618      	mov	r0, r3
 80254b8:	3710      	adds	r7, #16
 80254ba:	46bd      	mov	sp, r7
 80254bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80254c0:	b004      	add	sp, #16
 80254c2:	4770      	bx	lr
 80254c4:	01000200 	.word	0x01000200
 80254c8:	00e00300 	.word	0x00e00300
 80254cc:	00600080 	.word	0x00600080
 80254d0:	004000e0 	.word	0x004000e0
 80254d4:	a3200008 	.word	0xa3200008

080254d8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80254d8:	b480      	push	{r7}
 80254da:	b085      	sub	sp, #20
 80254dc:	af00      	add	r7, sp, #0
 80254de:	6078      	str	r0, [r7, #4]
 80254e0:	460b      	mov	r3, r1
 80254e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80254e4:	687b      	ldr	r3, [r7, #4]
 80254e6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80254e8:	68fb      	ldr	r3, [r7, #12]
 80254ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80254ee:	681b      	ldr	r3, [r3, #0]
 80254f0:	68fa      	ldr	r2, [r7, #12]
 80254f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80254f6:	f023 0303 	bic.w	r3, r3, #3
 80254fa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80254fc:	68fb      	ldr	r3, [r7, #12]
 80254fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8025502:	681a      	ldr	r2, [r3, #0]
 8025504:	78fb      	ldrb	r3, [r7, #3]
 8025506:	f003 0303 	and.w	r3, r3, #3
 802550a:	68f9      	ldr	r1, [r7, #12]
 802550c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8025510:	4313      	orrs	r3, r2
 8025512:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8025514:	78fb      	ldrb	r3, [r7, #3]
 8025516:	2b01      	cmp	r3, #1
 8025518:	d107      	bne.n	802552a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 802551a:	68fb      	ldr	r3, [r7, #12]
 802551c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8025520:	461a      	mov	r2, r3
 8025522:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8025526:	6053      	str	r3, [r2, #4]
 8025528:	e009      	b.n	802553e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 802552a:	78fb      	ldrb	r3, [r7, #3]
 802552c:	2b02      	cmp	r3, #2
 802552e:	d106      	bne.n	802553e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8025530:	68fb      	ldr	r3, [r7, #12]
 8025532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8025536:	461a      	mov	r2, r3
 8025538:	f241 7370 	movw	r3, #6000	; 0x1770
 802553c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 802553e:	2300      	movs	r3, #0
}
 8025540:	4618      	mov	r0, r3
 8025542:	3714      	adds	r7, #20
 8025544:	46bd      	mov	sp, r7
 8025546:	f85d 7b04 	ldr.w	r7, [sp], #4
 802554a:	4770      	bx	lr

0802554c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 802554c:	b580      	push	{r7, lr}
 802554e:	b084      	sub	sp, #16
 8025550:	af00      	add	r7, sp, #0
 8025552:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025554:	687b      	ldr	r3, [r7, #4]
 8025556:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8025558:	2300      	movs	r3, #0
 802555a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802555c:	68fb      	ldr	r3, [r7, #12]
 802555e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8025562:	681b      	ldr	r3, [r3, #0]
 8025564:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8025566:	68bb      	ldr	r3, [r7, #8]
 8025568:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802556c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 802556e:	68bb      	ldr	r3, [r7, #8]
 8025570:	68fa      	ldr	r2, [r7, #12]
 8025572:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8025576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802557a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 802557c:	2064      	movs	r0, #100	; 0x64
 802557e:	f7fb fd43 	bl	8021008 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8025582:	68bb      	ldr	r3, [r7, #8]
 8025584:	68fa      	ldr	r2, [r7, #12]
 8025586:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802558a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802558e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8025590:	200a      	movs	r0, #10
 8025592:	f7fb fd39 	bl	8021008 <HAL_Delay>

  return HAL_OK;
 8025596:	2300      	movs	r3, #0
}
 8025598:	4618      	mov	r0, r3
 802559a:	3710      	adds	r7, #16
 802559c:	46bd      	mov	sp, r7
 802559e:	bd80      	pop	{r7, pc}

080255a0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80255a0:	b480      	push	{r7}
 80255a2:	b085      	sub	sp, #20
 80255a4:	af00      	add	r7, sp, #0
 80255a6:	6078      	str	r0, [r7, #4]
 80255a8:	460b      	mov	r3, r1
 80255aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80255ac:	687b      	ldr	r3, [r7, #4]
 80255ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80255b0:	2300      	movs	r3, #0
 80255b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80255b4:	68fb      	ldr	r3, [r7, #12]
 80255b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80255ba:	681b      	ldr	r3, [r3, #0]
 80255bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80255be:	68bb      	ldr	r3, [r7, #8]
 80255c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80255c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80255c6:	68bb      	ldr	r3, [r7, #8]
 80255c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80255cc:	2b00      	cmp	r3, #0
 80255ce:	d109      	bne.n	80255e4 <USB_DriveVbus+0x44>
 80255d0:	78fb      	ldrb	r3, [r7, #3]
 80255d2:	2b01      	cmp	r3, #1
 80255d4:	d106      	bne.n	80255e4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80255d6:	68bb      	ldr	r3, [r7, #8]
 80255d8:	68fa      	ldr	r2, [r7, #12]
 80255da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80255de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80255e2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80255e4:	68bb      	ldr	r3, [r7, #8]
 80255e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80255ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80255ee:	d109      	bne.n	8025604 <USB_DriveVbus+0x64>
 80255f0:	78fb      	ldrb	r3, [r7, #3]
 80255f2:	2b00      	cmp	r3, #0
 80255f4:	d106      	bne.n	8025604 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80255f6:	68bb      	ldr	r3, [r7, #8]
 80255f8:	68fa      	ldr	r2, [r7, #12]
 80255fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80255fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025602:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8025604:	2300      	movs	r3, #0
}
 8025606:	4618      	mov	r0, r3
 8025608:	3714      	adds	r7, #20
 802560a:	46bd      	mov	sp, r7
 802560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025610:	4770      	bx	lr

08025612 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8025612:	b480      	push	{r7}
 8025614:	b085      	sub	sp, #20
 8025616:	af00      	add	r7, sp, #0
 8025618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802561a:	687b      	ldr	r3, [r7, #4]
 802561c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802561e:	2300      	movs	r3, #0
 8025620:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8025622:	68fb      	ldr	r3, [r7, #12]
 8025624:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8025628:	681b      	ldr	r3, [r3, #0]
 802562a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 802562c:	68bb      	ldr	r3, [r7, #8]
 802562e:	0c5b      	lsrs	r3, r3, #17
 8025630:	f003 0303 	and.w	r3, r3, #3
}
 8025634:	4618      	mov	r0, r3
 8025636:	3714      	adds	r7, #20
 8025638:	46bd      	mov	sp, r7
 802563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802563e:	4770      	bx	lr

08025640 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8025640:	b480      	push	{r7}
 8025642:	b085      	sub	sp, #20
 8025644:	af00      	add	r7, sp, #0
 8025646:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025648:	687b      	ldr	r3, [r7, #4]
 802564a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 802564c:	68fb      	ldr	r3, [r7, #12]
 802564e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8025652:	689b      	ldr	r3, [r3, #8]
 8025654:	b29b      	uxth	r3, r3
}
 8025656:	4618      	mov	r0, r3
 8025658:	3714      	adds	r7, #20
 802565a:	46bd      	mov	sp, r7
 802565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025660:	4770      	bx	lr
	...

08025664 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8025664:	b580      	push	{r7, lr}
 8025666:	b088      	sub	sp, #32
 8025668:	af00      	add	r7, sp, #0
 802566a:	6078      	str	r0, [r7, #4]
 802566c:	4608      	mov	r0, r1
 802566e:	4611      	mov	r1, r2
 8025670:	461a      	mov	r2, r3
 8025672:	4603      	mov	r3, r0
 8025674:	70fb      	strb	r3, [r7, #3]
 8025676:	460b      	mov	r3, r1
 8025678:	70bb      	strb	r3, [r7, #2]
 802567a:	4613      	mov	r3, r2
 802567c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 802567e:	2300      	movs	r3, #0
 8025680:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025682:	687b      	ldr	r3, [r7, #4]
 8025684:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8025686:	78fb      	ldrb	r3, [r7, #3]
 8025688:	015a      	lsls	r2, r3, #5
 802568a:	693b      	ldr	r3, [r7, #16]
 802568c:	4413      	add	r3, r2
 802568e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025692:	461a      	mov	r2, r3
 8025694:	f04f 33ff 	mov.w	r3, #4294967295
 8025698:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 802569a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802569e:	2b03      	cmp	r3, #3
 80256a0:	d87e      	bhi.n	80257a0 <USB_HC_Init+0x13c>
 80256a2:	a201      	add	r2, pc, #4	; (adr r2, 80256a8 <USB_HC_Init+0x44>)
 80256a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80256a8:	080256b9 	.word	0x080256b9
 80256ac:	08025763 	.word	0x08025763
 80256b0:	080256b9 	.word	0x080256b9
 80256b4:	08025725 	.word	0x08025725
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80256b8:	78fb      	ldrb	r3, [r7, #3]
 80256ba:	015a      	lsls	r2, r3, #5
 80256bc:	693b      	ldr	r3, [r7, #16]
 80256be:	4413      	add	r3, r2
 80256c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80256c4:	461a      	mov	r2, r3
 80256c6:	f240 439d 	movw	r3, #1181	; 0x49d
 80256ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80256cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80256d0:	2b00      	cmp	r3, #0
 80256d2:	da10      	bge.n	80256f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80256d4:	78fb      	ldrb	r3, [r7, #3]
 80256d6:	015a      	lsls	r2, r3, #5
 80256d8:	693b      	ldr	r3, [r7, #16]
 80256da:	4413      	add	r3, r2
 80256dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80256e0:	68db      	ldr	r3, [r3, #12]
 80256e2:	78fa      	ldrb	r2, [r7, #3]
 80256e4:	0151      	lsls	r1, r2, #5
 80256e6:	693a      	ldr	r2, [r7, #16]
 80256e8:	440a      	add	r2, r1
 80256ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80256ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80256f2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80256f4:	e057      	b.n	80257a6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80256f6:	687b      	ldr	r3, [r7, #4]
 80256f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80256fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80256fe:	2b00      	cmp	r3, #0
 8025700:	d051      	beq.n	80257a6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8025702:	78fb      	ldrb	r3, [r7, #3]
 8025704:	015a      	lsls	r2, r3, #5
 8025706:	693b      	ldr	r3, [r7, #16]
 8025708:	4413      	add	r3, r2
 802570a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802570e:	68db      	ldr	r3, [r3, #12]
 8025710:	78fa      	ldrb	r2, [r7, #3]
 8025712:	0151      	lsls	r1, r2, #5
 8025714:	693a      	ldr	r2, [r7, #16]
 8025716:	440a      	add	r2, r1
 8025718:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802571c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8025720:	60d3      	str	r3, [r2, #12]
      break;
 8025722:	e040      	b.n	80257a6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8025724:	78fb      	ldrb	r3, [r7, #3]
 8025726:	015a      	lsls	r2, r3, #5
 8025728:	693b      	ldr	r3, [r7, #16]
 802572a:	4413      	add	r3, r2
 802572c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025730:	461a      	mov	r2, r3
 8025732:	f240 639d 	movw	r3, #1693	; 0x69d
 8025736:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8025738:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802573c:	2b00      	cmp	r3, #0
 802573e:	da34      	bge.n	80257aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8025740:	78fb      	ldrb	r3, [r7, #3]
 8025742:	015a      	lsls	r2, r3, #5
 8025744:	693b      	ldr	r3, [r7, #16]
 8025746:	4413      	add	r3, r2
 8025748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802574c:	68db      	ldr	r3, [r3, #12]
 802574e:	78fa      	ldrb	r2, [r7, #3]
 8025750:	0151      	lsls	r1, r2, #5
 8025752:	693a      	ldr	r2, [r7, #16]
 8025754:	440a      	add	r2, r1
 8025756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802575a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802575e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8025760:	e023      	b.n	80257aa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8025762:	78fb      	ldrb	r3, [r7, #3]
 8025764:	015a      	lsls	r2, r3, #5
 8025766:	693b      	ldr	r3, [r7, #16]
 8025768:	4413      	add	r3, r2
 802576a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802576e:	461a      	mov	r2, r3
 8025770:	f240 2325 	movw	r3, #549	; 0x225
 8025774:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8025776:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802577a:	2b00      	cmp	r3, #0
 802577c:	da17      	bge.n	80257ae <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 802577e:	78fb      	ldrb	r3, [r7, #3]
 8025780:	015a      	lsls	r2, r3, #5
 8025782:	693b      	ldr	r3, [r7, #16]
 8025784:	4413      	add	r3, r2
 8025786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802578a:	68db      	ldr	r3, [r3, #12]
 802578c:	78fa      	ldrb	r2, [r7, #3]
 802578e:	0151      	lsls	r1, r2, #5
 8025790:	693a      	ldr	r2, [r7, #16]
 8025792:	440a      	add	r2, r1
 8025794:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025798:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 802579c:	60d3      	str	r3, [r2, #12]
      }
      break;
 802579e:	e006      	b.n	80257ae <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80257a0:	2301      	movs	r3, #1
 80257a2:	77fb      	strb	r3, [r7, #31]
      break;
 80257a4:	e004      	b.n	80257b0 <USB_HC_Init+0x14c>
      break;
 80257a6:	bf00      	nop
 80257a8:	e002      	b.n	80257b0 <USB_HC_Init+0x14c>
      break;
 80257aa:	bf00      	nop
 80257ac:	e000      	b.n	80257b0 <USB_HC_Init+0x14c>
      break;
 80257ae:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80257b0:	693b      	ldr	r3, [r7, #16]
 80257b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80257b6:	699a      	ldr	r2, [r3, #24]
 80257b8:	78fb      	ldrb	r3, [r7, #3]
 80257ba:	f003 030f 	and.w	r3, r3, #15
 80257be:	2101      	movs	r1, #1
 80257c0:	fa01 f303 	lsl.w	r3, r1, r3
 80257c4:	6939      	ldr	r1, [r7, #16]
 80257c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80257ca:	4313      	orrs	r3, r2
 80257cc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80257ce:	687b      	ldr	r3, [r7, #4]
 80257d0:	699b      	ldr	r3, [r3, #24]
 80257d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80257d6:	687b      	ldr	r3, [r7, #4]
 80257d8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80257da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80257de:	2b00      	cmp	r3, #0
 80257e0:	da03      	bge.n	80257ea <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80257e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80257e6:	61bb      	str	r3, [r7, #24]
 80257e8:	e001      	b.n	80257ee <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80257ea:	2300      	movs	r3, #0
 80257ec:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80257ee:	6878      	ldr	r0, [r7, #4]
 80257f0:	f7ff ff0f 	bl	8025612 <USB_GetHostSpeed>
 80257f4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80257f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80257fa:	2b02      	cmp	r3, #2
 80257fc:	d106      	bne.n	802580c <USB_HC_Init+0x1a8>
 80257fe:	68fb      	ldr	r3, [r7, #12]
 8025800:	2b02      	cmp	r3, #2
 8025802:	d003      	beq.n	802580c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8025804:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8025808:	617b      	str	r3, [r7, #20]
 802580a:	e001      	b.n	8025810 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 802580c:	2300      	movs	r3, #0
 802580e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8025810:	787b      	ldrb	r3, [r7, #1]
 8025812:	059b      	lsls	r3, r3, #22
 8025814:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8025818:	78bb      	ldrb	r3, [r7, #2]
 802581a:	02db      	lsls	r3, r3, #11
 802581c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8025820:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8025822:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8025826:	049b      	lsls	r3, r3, #18
 8025828:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802582c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802582e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8025830:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8025834:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8025836:	69bb      	ldr	r3, [r7, #24]
 8025838:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802583a:	78fb      	ldrb	r3, [r7, #3]
 802583c:	0159      	lsls	r1, r3, #5
 802583e:	693b      	ldr	r3, [r7, #16]
 8025840:	440b      	add	r3, r1
 8025842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025846:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8025848:	697b      	ldr	r3, [r7, #20]
 802584a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802584c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 802584e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8025852:	2b03      	cmp	r3, #3
 8025854:	d10f      	bne.n	8025876 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8025856:	78fb      	ldrb	r3, [r7, #3]
 8025858:	015a      	lsls	r2, r3, #5
 802585a:	693b      	ldr	r3, [r7, #16]
 802585c:	4413      	add	r3, r2
 802585e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025862:	681b      	ldr	r3, [r3, #0]
 8025864:	78fa      	ldrb	r2, [r7, #3]
 8025866:	0151      	lsls	r1, r2, #5
 8025868:	693a      	ldr	r2, [r7, #16]
 802586a:	440a      	add	r2, r1
 802586c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025870:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8025874:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8025876:	7ffb      	ldrb	r3, [r7, #31]
}
 8025878:	4618      	mov	r0, r3
 802587a:	3720      	adds	r7, #32
 802587c:	46bd      	mov	sp, r7
 802587e:	bd80      	pop	{r7, pc}

08025880 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8025880:	b580      	push	{r7, lr}
 8025882:	b08c      	sub	sp, #48	; 0x30
 8025884:	af02      	add	r7, sp, #8
 8025886:	60f8      	str	r0, [r7, #12]
 8025888:	60b9      	str	r1, [r7, #8]
 802588a:	4613      	mov	r3, r2
 802588c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802588e:	68fb      	ldr	r3, [r7, #12]
 8025890:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8025892:	68bb      	ldr	r3, [r7, #8]
 8025894:	785b      	ldrb	r3, [r3, #1]
 8025896:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8025898:	f44f 7380 	mov.w	r3, #256	; 0x100
 802589c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 802589e:	68fb      	ldr	r3, [r7, #12]
 80258a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80258a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80258a6:	2b00      	cmp	r3, #0
 80258a8:	d02d      	beq.n	8025906 <USB_HC_StartXfer+0x86>
 80258aa:	68bb      	ldr	r3, [r7, #8]
 80258ac:	791b      	ldrb	r3, [r3, #4]
 80258ae:	2b00      	cmp	r3, #0
 80258b0:	d129      	bne.n	8025906 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80258b2:	79fb      	ldrb	r3, [r7, #7]
 80258b4:	2b01      	cmp	r3, #1
 80258b6:	d117      	bne.n	80258e8 <USB_HC_StartXfer+0x68>
 80258b8:	68bb      	ldr	r3, [r7, #8]
 80258ba:	79db      	ldrb	r3, [r3, #7]
 80258bc:	2b00      	cmp	r3, #0
 80258be:	d003      	beq.n	80258c8 <USB_HC_StartXfer+0x48>
 80258c0:	68bb      	ldr	r3, [r7, #8]
 80258c2:	79db      	ldrb	r3, [r3, #7]
 80258c4:	2b02      	cmp	r3, #2
 80258c6:	d10f      	bne.n	80258e8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80258c8:	69fb      	ldr	r3, [r7, #28]
 80258ca:	015a      	lsls	r2, r3, #5
 80258cc:	6a3b      	ldr	r3, [r7, #32]
 80258ce:	4413      	add	r3, r2
 80258d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80258d4:	68db      	ldr	r3, [r3, #12]
 80258d6:	69fa      	ldr	r2, [r7, #28]
 80258d8:	0151      	lsls	r1, r2, #5
 80258da:	6a3a      	ldr	r2, [r7, #32]
 80258dc:	440a      	add	r2, r1
 80258de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80258e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80258e6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80258e8:	79fb      	ldrb	r3, [r7, #7]
 80258ea:	2b00      	cmp	r3, #0
 80258ec:	d10b      	bne.n	8025906 <USB_HC_StartXfer+0x86>
 80258ee:	68bb      	ldr	r3, [r7, #8]
 80258f0:	795b      	ldrb	r3, [r3, #5]
 80258f2:	2b01      	cmp	r3, #1
 80258f4:	d107      	bne.n	8025906 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80258f6:	68bb      	ldr	r3, [r7, #8]
 80258f8:	785b      	ldrb	r3, [r3, #1]
 80258fa:	4619      	mov	r1, r3
 80258fc:	68f8      	ldr	r0, [r7, #12]
 80258fe:	f000 fa2f 	bl	8025d60 <USB_DoPing>
      return HAL_OK;
 8025902:	2300      	movs	r3, #0
 8025904:	e0f8      	b.n	8025af8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8025906:	68bb      	ldr	r3, [r7, #8]
 8025908:	695b      	ldr	r3, [r3, #20]
 802590a:	2b00      	cmp	r3, #0
 802590c:	d018      	beq.n	8025940 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 802590e:	68bb      	ldr	r3, [r7, #8]
 8025910:	695b      	ldr	r3, [r3, #20]
 8025912:	68ba      	ldr	r2, [r7, #8]
 8025914:	8912      	ldrh	r2, [r2, #8]
 8025916:	4413      	add	r3, r2
 8025918:	3b01      	subs	r3, #1
 802591a:	68ba      	ldr	r2, [r7, #8]
 802591c:	8912      	ldrh	r2, [r2, #8]
 802591e:	fbb3 f3f2 	udiv	r3, r3, r2
 8025922:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8025924:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8025926:	8b7b      	ldrh	r3, [r7, #26]
 8025928:	429a      	cmp	r2, r3
 802592a:	d90b      	bls.n	8025944 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 802592c:	8b7b      	ldrh	r3, [r7, #26]
 802592e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8025930:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8025932:	68ba      	ldr	r2, [r7, #8]
 8025934:	8912      	ldrh	r2, [r2, #8]
 8025936:	fb02 f203 	mul.w	r2, r2, r3
 802593a:	68bb      	ldr	r3, [r7, #8]
 802593c:	611a      	str	r2, [r3, #16]
 802593e:	e001      	b.n	8025944 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8025940:	2301      	movs	r3, #1
 8025942:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8025944:	68bb      	ldr	r3, [r7, #8]
 8025946:	78db      	ldrb	r3, [r3, #3]
 8025948:	2b00      	cmp	r3, #0
 802594a:	d007      	beq.n	802595c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802594c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802594e:	68ba      	ldr	r2, [r7, #8]
 8025950:	8912      	ldrh	r2, [r2, #8]
 8025952:	fb02 f203 	mul.w	r2, r2, r3
 8025956:	68bb      	ldr	r3, [r7, #8]
 8025958:	611a      	str	r2, [r3, #16]
 802595a:	e003      	b.n	8025964 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 802595c:	68bb      	ldr	r3, [r7, #8]
 802595e:	695a      	ldr	r2, [r3, #20]
 8025960:	68bb      	ldr	r3, [r7, #8]
 8025962:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8025964:	68bb      	ldr	r3, [r7, #8]
 8025966:	691b      	ldr	r3, [r3, #16]
 8025968:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802596c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802596e:	04d9      	lsls	r1, r3, #19
 8025970:	4b63      	ldr	r3, [pc, #396]	; (8025b00 <USB_HC_StartXfer+0x280>)
 8025972:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8025974:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8025976:	68bb      	ldr	r3, [r7, #8]
 8025978:	7a9b      	ldrb	r3, [r3, #10]
 802597a:	075b      	lsls	r3, r3, #29
 802597c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8025980:	69f9      	ldr	r1, [r7, #28]
 8025982:	0148      	lsls	r0, r1, #5
 8025984:	6a39      	ldr	r1, [r7, #32]
 8025986:	4401      	add	r1, r0
 8025988:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802598c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802598e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8025990:	79fb      	ldrb	r3, [r7, #7]
 8025992:	2b00      	cmp	r3, #0
 8025994:	d009      	beq.n	80259aa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8025996:	68bb      	ldr	r3, [r7, #8]
 8025998:	68d9      	ldr	r1, [r3, #12]
 802599a:	69fb      	ldr	r3, [r7, #28]
 802599c:	015a      	lsls	r2, r3, #5
 802599e:	6a3b      	ldr	r3, [r7, #32]
 80259a0:	4413      	add	r3, r2
 80259a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259a6:	460a      	mov	r2, r1
 80259a8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80259aa:	6a3b      	ldr	r3, [r7, #32]
 80259ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80259b0:	689b      	ldr	r3, [r3, #8]
 80259b2:	f003 0301 	and.w	r3, r3, #1
 80259b6:	2b00      	cmp	r3, #0
 80259b8:	bf0c      	ite	eq
 80259ba:	2301      	moveq	r3, #1
 80259bc:	2300      	movne	r3, #0
 80259be:	b2db      	uxtb	r3, r3
 80259c0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80259c2:	69fb      	ldr	r3, [r7, #28]
 80259c4:	015a      	lsls	r2, r3, #5
 80259c6:	6a3b      	ldr	r3, [r7, #32]
 80259c8:	4413      	add	r3, r2
 80259ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259ce:	681b      	ldr	r3, [r3, #0]
 80259d0:	69fa      	ldr	r2, [r7, #28]
 80259d2:	0151      	lsls	r1, r2, #5
 80259d4:	6a3a      	ldr	r2, [r7, #32]
 80259d6:	440a      	add	r2, r1
 80259d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80259dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80259e0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80259e2:	69fb      	ldr	r3, [r7, #28]
 80259e4:	015a      	lsls	r2, r3, #5
 80259e6:	6a3b      	ldr	r3, [r7, #32]
 80259e8:	4413      	add	r3, r2
 80259ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259ee:	681a      	ldr	r2, [r3, #0]
 80259f0:	7e7b      	ldrb	r3, [r7, #25]
 80259f2:	075b      	lsls	r3, r3, #29
 80259f4:	69f9      	ldr	r1, [r7, #28]
 80259f6:	0148      	lsls	r0, r1, #5
 80259f8:	6a39      	ldr	r1, [r7, #32]
 80259fa:	4401      	add	r1, r0
 80259fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8025a00:	4313      	orrs	r3, r2
 8025a02:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025a04:	69fb      	ldr	r3, [r7, #28]
 8025a06:	015a      	lsls	r2, r3, #5
 8025a08:	6a3b      	ldr	r3, [r7, #32]
 8025a0a:	4413      	add	r3, r2
 8025a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a10:	681b      	ldr	r3, [r3, #0]
 8025a12:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025a14:	693b      	ldr	r3, [r7, #16]
 8025a16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025a1a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8025a1c:	68bb      	ldr	r3, [r7, #8]
 8025a1e:	78db      	ldrb	r3, [r3, #3]
 8025a20:	2b00      	cmp	r3, #0
 8025a22:	d004      	beq.n	8025a2e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8025a24:	693b      	ldr	r3, [r7, #16]
 8025a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8025a2a:	613b      	str	r3, [r7, #16]
 8025a2c:	e003      	b.n	8025a36 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8025a2e:	693b      	ldr	r3, [r7, #16]
 8025a30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8025a34:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025a36:	693b      	ldr	r3, [r7, #16]
 8025a38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025a3c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025a3e:	69fb      	ldr	r3, [r7, #28]
 8025a40:	015a      	lsls	r2, r3, #5
 8025a42:	6a3b      	ldr	r3, [r7, #32]
 8025a44:	4413      	add	r3, r2
 8025a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a4a:	461a      	mov	r2, r3
 8025a4c:	693b      	ldr	r3, [r7, #16]
 8025a4e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8025a50:	79fb      	ldrb	r3, [r7, #7]
 8025a52:	2b00      	cmp	r3, #0
 8025a54:	d001      	beq.n	8025a5a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8025a56:	2300      	movs	r3, #0
 8025a58:	e04e      	b.n	8025af8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8025a5a:	68bb      	ldr	r3, [r7, #8]
 8025a5c:	78db      	ldrb	r3, [r3, #3]
 8025a5e:	2b00      	cmp	r3, #0
 8025a60:	d149      	bne.n	8025af6 <USB_HC_StartXfer+0x276>
 8025a62:	68bb      	ldr	r3, [r7, #8]
 8025a64:	695b      	ldr	r3, [r3, #20]
 8025a66:	2b00      	cmp	r3, #0
 8025a68:	d045      	beq.n	8025af6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8025a6a:	68bb      	ldr	r3, [r7, #8]
 8025a6c:	79db      	ldrb	r3, [r3, #7]
 8025a6e:	2b03      	cmp	r3, #3
 8025a70:	d830      	bhi.n	8025ad4 <USB_HC_StartXfer+0x254>
 8025a72:	a201      	add	r2, pc, #4	; (adr r2, 8025a78 <USB_HC_StartXfer+0x1f8>)
 8025a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025a78:	08025a89 	.word	0x08025a89
 8025a7c:	08025aad 	.word	0x08025aad
 8025a80:	08025a89 	.word	0x08025a89
 8025a84:	08025aad 	.word	0x08025aad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8025a88:	68bb      	ldr	r3, [r7, #8]
 8025a8a:	695b      	ldr	r3, [r3, #20]
 8025a8c:	3303      	adds	r3, #3
 8025a8e:	089b      	lsrs	r3, r3, #2
 8025a90:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8025a92:	8afa      	ldrh	r2, [r7, #22]
 8025a94:	68fb      	ldr	r3, [r7, #12]
 8025a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025a98:	b29b      	uxth	r3, r3
 8025a9a:	429a      	cmp	r2, r3
 8025a9c:	d91c      	bls.n	8025ad8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8025a9e:	68fb      	ldr	r3, [r7, #12]
 8025aa0:	699b      	ldr	r3, [r3, #24]
 8025aa2:	f043 0220 	orr.w	r2, r3, #32
 8025aa6:	68fb      	ldr	r3, [r7, #12]
 8025aa8:	619a      	str	r2, [r3, #24]
        }
        break;
 8025aaa:	e015      	b.n	8025ad8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8025aac:	68bb      	ldr	r3, [r7, #8]
 8025aae:	695b      	ldr	r3, [r3, #20]
 8025ab0:	3303      	adds	r3, #3
 8025ab2:	089b      	lsrs	r3, r3, #2
 8025ab4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8025ab6:	8afa      	ldrh	r2, [r7, #22]
 8025ab8:	6a3b      	ldr	r3, [r7, #32]
 8025aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8025abe:	691b      	ldr	r3, [r3, #16]
 8025ac0:	b29b      	uxth	r3, r3
 8025ac2:	429a      	cmp	r2, r3
 8025ac4:	d90a      	bls.n	8025adc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8025ac6:	68fb      	ldr	r3, [r7, #12]
 8025ac8:	699b      	ldr	r3, [r3, #24]
 8025aca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8025ace:	68fb      	ldr	r3, [r7, #12]
 8025ad0:	619a      	str	r2, [r3, #24]
        }
        break;
 8025ad2:	e003      	b.n	8025adc <USB_HC_StartXfer+0x25c>

      default:
        break;
 8025ad4:	bf00      	nop
 8025ad6:	e002      	b.n	8025ade <USB_HC_StartXfer+0x25e>
        break;
 8025ad8:	bf00      	nop
 8025ada:	e000      	b.n	8025ade <USB_HC_StartXfer+0x25e>
        break;
 8025adc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8025ade:	68bb      	ldr	r3, [r7, #8]
 8025ae0:	68d9      	ldr	r1, [r3, #12]
 8025ae2:	68bb      	ldr	r3, [r7, #8]
 8025ae4:	785a      	ldrb	r2, [r3, #1]
 8025ae6:	68bb      	ldr	r3, [r7, #8]
 8025ae8:	695b      	ldr	r3, [r3, #20]
 8025aea:	b29b      	uxth	r3, r3
 8025aec:	2000      	movs	r0, #0
 8025aee:	9000      	str	r0, [sp, #0]
 8025af0:	68f8      	ldr	r0, [r7, #12]
 8025af2:	f7ff fb53 	bl	802519c <USB_WritePacket>
  }

  return HAL_OK;
 8025af6:	2300      	movs	r3, #0
}
 8025af8:	4618      	mov	r0, r3
 8025afa:	3728      	adds	r7, #40	; 0x28
 8025afc:	46bd      	mov	sp, r7
 8025afe:	bd80      	pop	{r7, pc}
 8025b00:	1ff80000 	.word	0x1ff80000

08025b04 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8025b04:	b480      	push	{r7}
 8025b06:	b085      	sub	sp, #20
 8025b08:	af00      	add	r7, sp, #0
 8025b0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025b0c:	687b      	ldr	r3, [r7, #4]
 8025b0e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8025b10:	68fb      	ldr	r3, [r7, #12]
 8025b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8025b16:	695b      	ldr	r3, [r3, #20]
 8025b18:	b29b      	uxth	r3, r3
}
 8025b1a:	4618      	mov	r0, r3
 8025b1c:	3714      	adds	r7, #20
 8025b1e:	46bd      	mov	sp, r7
 8025b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b24:	4770      	bx	lr

08025b26 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8025b26:	b480      	push	{r7}
 8025b28:	b089      	sub	sp, #36	; 0x24
 8025b2a:	af00      	add	r7, sp, #0
 8025b2c:	6078      	str	r0, [r7, #4]
 8025b2e:	460b      	mov	r3, r1
 8025b30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025b32:	687b      	ldr	r3, [r7, #4]
 8025b34:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8025b36:	78fb      	ldrb	r3, [r7, #3]
 8025b38:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8025b3a:	2300      	movs	r3, #0
 8025b3c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8025b3e:	697b      	ldr	r3, [r7, #20]
 8025b40:	015a      	lsls	r2, r3, #5
 8025b42:	69bb      	ldr	r3, [r7, #24]
 8025b44:	4413      	add	r3, r2
 8025b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b4a:	681b      	ldr	r3, [r3, #0]
 8025b4c:	0c9b      	lsrs	r3, r3, #18
 8025b4e:	f003 0303 	and.w	r3, r3, #3
 8025b52:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8025b54:	697b      	ldr	r3, [r7, #20]
 8025b56:	015a      	lsls	r2, r3, #5
 8025b58:	69bb      	ldr	r3, [r7, #24]
 8025b5a:	4413      	add	r3, r2
 8025b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b60:	681b      	ldr	r3, [r3, #0]
 8025b62:	0fdb      	lsrs	r3, r3, #31
 8025b64:	f003 0301 	and.w	r3, r3, #1
 8025b68:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8025b6a:	687b      	ldr	r3, [r7, #4]
 8025b6c:	689b      	ldr	r3, [r3, #8]
 8025b6e:	f003 0320 	and.w	r3, r3, #32
 8025b72:	2b20      	cmp	r3, #32
 8025b74:	d104      	bne.n	8025b80 <USB_HC_Halt+0x5a>
 8025b76:	68fb      	ldr	r3, [r7, #12]
 8025b78:	2b00      	cmp	r3, #0
 8025b7a:	d101      	bne.n	8025b80 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8025b7c:	2300      	movs	r3, #0
 8025b7e:	e0e8      	b.n	8025d52 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8025b80:	693b      	ldr	r3, [r7, #16]
 8025b82:	2b00      	cmp	r3, #0
 8025b84:	d002      	beq.n	8025b8c <USB_HC_Halt+0x66>
 8025b86:	693b      	ldr	r3, [r7, #16]
 8025b88:	2b02      	cmp	r3, #2
 8025b8a:	d173      	bne.n	8025c74 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8025b8c:	697b      	ldr	r3, [r7, #20]
 8025b8e:	015a      	lsls	r2, r3, #5
 8025b90:	69bb      	ldr	r3, [r7, #24]
 8025b92:	4413      	add	r3, r2
 8025b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b98:	681b      	ldr	r3, [r3, #0]
 8025b9a:	697a      	ldr	r2, [r7, #20]
 8025b9c:	0151      	lsls	r1, r2, #5
 8025b9e:	69ba      	ldr	r2, [r7, #24]
 8025ba0:	440a      	add	r2, r1
 8025ba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025ba6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8025baa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8025bac:	687b      	ldr	r3, [r7, #4]
 8025bae:	689b      	ldr	r3, [r3, #8]
 8025bb0:	f003 0320 	and.w	r3, r3, #32
 8025bb4:	2b00      	cmp	r3, #0
 8025bb6:	f040 80cb 	bne.w	8025d50 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8025bba:	687b      	ldr	r3, [r7, #4]
 8025bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025bbe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8025bc2:	2b00      	cmp	r3, #0
 8025bc4:	d143      	bne.n	8025c4e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8025bc6:	697b      	ldr	r3, [r7, #20]
 8025bc8:	015a      	lsls	r2, r3, #5
 8025bca:	69bb      	ldr	r3, [r7, #24]
 8025bcc:	4413      	add	r3, r2
 8025bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025bd2:	681b      	ldr	r3, [r3, #0]
 8025bd4:	697a      	ldr	r2, [r7, #20]
 8025bd6:	0151      	lsls	r1, r2, #5
 8025bd8:	69ba      	ldr	r2, [r7, #24]
 8025bda:	440a      	add	r2, r1
 8025bdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025be0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025be4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8025be6:	697b      	ldr	r3, [r7, #20]
 8025be8:	015a      	lsls	r2, r3, #5
 8025bea:	69bb      	ldr	r3, [r7, #24]
 8025bec:	4413      	add	r3, r2
 8025bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025bf2:	681b      	ldr	r3, [r3, #0]
 8025bf4:	697a      	ldr	r2, [r7, #20]
 8025bf6:	0151      	lsls	r1, r2, #5
 8025bf8:	69ba      	ldr	r2, [r7, #24]
 8025bfa:	440a      	add	r2, r1
 8025bfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025c00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025c04:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8025c06:	697b      	ldr	r3, [r7, #20]
 8025c08:	015a      	lsls	r2, r3, #5
 8025c0a:	69bb      	ldr	r3, [r7, #24]
 8025c0c:	4413      	add	r3, r2
 8025c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c12:	681b      	ldr	r3, [r3, #0]
 8025c14:	697a      	ldr	r2, [r7, #20]
 8025c16:	0151      	lsls	r1, r2, #5
 8025c18:	69ba      	ldr	r2, [r7, #24]
 8025c1a:	440a      	add	r2, r1
 8025c1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025c20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8025c24:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8025c26:	69fb      	ldr	r3, [r7, #28]
 8025c28:	3301      	adds	r3, #1
 8025c2a:	61fb      	str	r3, [r7, #28]
 8025c2c:	69fb      	ldr	r3, [r7, #28]
 8025c2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8025c32:	d81d      	bhi.n	8025c70 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8025c34:	697b      	ldr	r3, [r7, #20]
 8025c36:	015a      	lsls	r2, r3, #5
 8025c38:	69bb      	ldr	r3, [r7, #24]
 8025c3a:	4413      	add	r3, r2
 8025c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c40:	681b      	ldr	r3, [r3, #0]
 8025c42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8025c46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8025c4a:	d0ec      	beq.n	8025c26 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8025c4c:	e080      	b.n	8025d50 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8025c4e:	697b      	ldr	r3, [r7, #20]
 8025c50:	015a      	lsls	r2, r3, #5
 8025c52:	69bb      	ldr	r3, [r7, #24]
 8025c54:	4413      	add	r3, r2
 8025c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c5a:	681b      	ldr	r3, [r3, #0]
 8025c5c:	697a      	ldr	r2, [r7, #20]
 8025c5e:	0151      	lsls	r1, r2, #5
 8025c60:	69ba      	ldr	r2, [r7, #24]
 8025c62:	440a      	add	r2, r1
 8025c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025c68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025c6c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8025c6e:	e06f      	b.n	8025d50 <USB_HC_Halt+0x22a>
            break;
 8025c70:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8025c72:	e06d      	b.n	8025d50 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8025c74:	697b      	ldr	r3, [r7, #20]
 8025c76:	015a      	lsls	r2, r3, #5
 8025c78:	69bb      	ldr	r3, [r7, #24]
 8025c7a:	4413      	add	r3, r2
 8025c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c80:	681b      	ldr	r3, [r3, #0]
 8025c82:	697a      	ldr	r2, [r7, #20]
 8025c84:	0151      	lsls	r1, r2, #5
 8025c86:	69ba      	ldr	r2, [r7, #24]
 8025c88:	440a      	add	r2, r1
 8025c8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025c8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8025c92:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8025c94:	69bb      	ldr	r3, [r7, #24]
 8025c96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8025c9a:	691b      	ldr	r3, [r3, #16]
 8025c9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8025ca0:	2b00      	cmp	r3, #0
 8025ca2:	d143      	bne.n	8025d2c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8025ca4:	697b      	ldr	r3, [r7, #20]
 8025ca6:	015a      	lsls	r2, r3, #5
 8025ca8:	69bb      	ldr	r3, [r7, #24]
 8025caa:	4413      	add	r3, r2
 8025cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025cb0:	681b      	ldr	r3, [r3, #0]
 8025cb2:	697a      	ldr	r2, [r7, #20]
 8025cb4:	0151      	lsls	r1, r2, #5
 8025cb6:	69ba      	ldr	r2, [r7, #24]
 8025cb8:	440a      	add	r2, r1
 8025cba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025cbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025cc2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8025cc4:	697b      	ldr	r3, [r7, #20]
 8025cc6:	015a      	lsls	r2, r3, #5
 8025cc8:	69bb      	ldr	r3, [r7, #24]
 8025cca:	4413      	add	r3, r2
 8025ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025cd0:	681b      	ldr	r3, [r3, #0]
 8025cd2:	697a      	ldr	r2, [r7, #20]
 8025cd4:	0151      	lsls	r1, r2, #5
 8025cd6:	69ba      	ldr	r2, [r7, #24]
 8025cd8:	440a      	add	r2, r1
 8025cda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025cde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025ce2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8025ce4:	697b      	ldr	r3, [r7, #20]
 8025ce6:	015a      	lsls	r2, r3, #5
 8025ce8:	69bb      	ldr	r3, [r7, #24]
 8025cea:	4413      	add	r3, r2
 8025cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025cf0:	681b      	ldr	r3, [r3, #0]
 8025cf2:	697a      	ldr	r2, [r7, #20]
 8025cf4:	0151      	lsls	r1, r2, #5
 8025cf6:	69ba      	ldr	r2, [r7, #24]
 8025cf8:	440a      	add	r2, r1
 8025cfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025cfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8025d02:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8025d04:	69fb      	ldr	r3, [r7, #28]
 8025d06:	3301      	adds	r3, #1
 8025d08:	61fb      	str	r3, [r7, #28]
 8025d0a:	69fb      	ldr	r3, [r7, #28]
 8025d0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8025d10:	d81d      	bhi.n	8025d4e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8025d12:	697b      	ldr	r3, [r7, #20]
 8025d14:	015a      	lsls	r2, r3, #5
 8025d16:	69bb      	ldr	r3, [r7, #24]
 8025d18:	4413      	add	r3, r2
 8025d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d1e:	681b      	ldr	r3, [r3, #0]
 8025d20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8025d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8025d28:	d0ec      	beq.n	8025d04 <USB_HC_Halt+0x1de>
 8025d2a:	e011      	b.n	8025d50 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8025d2c:	697b      	ldr	r3, [r7, #20]
 8025d2e:	015a      	lsls	r2, r3, #5
 8025d30:	69bb      	ldr	r3, [r7, #24]
 8025d32:	4413      	add	r3, r2
 8025d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d38:	681b      	ldr	r3, [r3, #0]
 8025d3a:	697a      	ldr	r2, [r7, #20]
 8025d3c:	0151      	lsls	r1, r2, #5
 8025d3e:	69ba      	ldr	r2, [r7, #24]
 8025d40:	440a      	add	r2, r1
 8025d42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025d46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025d4a:	6013      	str	r3, [r2, #0]
 8025d4c:	e000      	b.n	8025d50 <USB_HC_Halt+0x22a>
          break;
 8025d4e:	bf00      	nop
    }
  }

  return HAL_OK;
 8025d50:	2300      	movs	r3, #0
}
 8025d52:	4618      	mov	r0, r3
 8025d54:	3724      	adds	r7, #36	; 0x24
 8025d56:	46bd      	mov	sp, r7
 8025d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d5c:	4770      	bx	lr
	...

08025d60 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8025d60:	b480      	push	{r7}
 8025d62:	b087      	sub	sp, #28
 8025d64:	af00      	add	r7, sp, #0
 8025d66:	6078      	str	r0, [r7, #4]
 8025d68:	460b      	mov	r3, r1
 8025d6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025d6c:	687b      	ldr	r3, [r7, #4]
 8025d6e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8025d70:	78fb      	ldrb	r3, [r7, #3]
 8025d72:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8025d74:	2301      	movs	r3, #1
 8025d76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8025d78:	68fb      	ldr	r3, [r7, #12]
 8025d7a:	04da      	lsls	r2, r3, #19
 8025d7c:	4b15      	ldr	r3, [pc, #84]	; (8025dd4 <USB_DoPing+0x74>)
 8025d7e:	4013      	ands	r3, r2
 8025d80:	693a      	ldr	r2, [r7, #16]
 8025d82:	0151      	lsls	r1, r2, #5
 8025d84:	697a      	ldr	r2, [r7, #20]
 8025d86:	440a      	add	r2, r1
 8025d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025d8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025d90:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8025d92:	693b      	ldr	r3, [r7, #16]
 8025d94:	015a      	lsls	r2, r3, #5
 8025d96:	697b      	ldr	r3, [r7, #20]
 8025d98:	4413      	add	r3, r2
 8025d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d9e:	681b      	ldr	r3, [r3, #0]
 8025da0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025da2:	68bb      	ldr	r3, [r7, #8]
 8025da4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025da8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025daa:	68bb      	ldr	r3, [r7, #8]
 8025dac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025db0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8025db2:	693b      	ldr	r3, [r7, #16]
 8025db4:	015a      	lsls	r2, r3, #5
 8025db6:	697b      	ldr	r3, [r7, #20]
 8025db8:	4413      	add	r3, r2
 8025dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025dbe:	461a      	mov	r2, r3
 8025dc0:	68bb      	ldr	r3, [r7, #8]
 8025dc2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8025dc4:	2300      	movs	r3, #0
}
 8025dc6:	4618      	mov	r0, r3
 8025dc8:	371c      	adds	r7, #28
 8025dca:	46bd      	mov	sp, r7
 8025dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dd0:	4770      	bx	lr
 8025dd2:	bf00      	nop
 8025dd4:	1ff80000 	.word	0x1ff80000

08025dd8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8025dd8:	b580      	push	{r7, lr}
 8025dda:	b086      	sub	sp, #24
 8025ddc:	af00      	add	r7, sp, #0
 8025dde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025de0:	687b      	ldr	r3, [r7, #4]
 8025de2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8025de4:	2300      	movs	r3, #0
 8025de6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8025de8:	6878      	ldr	r0, [r7, #4]
 8025dea:	f7ff f935 	bl	8025058 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8025dee:	2110      	movs	r1, #16
 8025df0:	6878      	ldr	r0, [r7, #4]
 8025df2:	f7ff f98f 	bl	8025114 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8025df6:	6878      	ldr	r0, [r7, #4]
 8025df8:	f7ff f9b0 	bl	802515c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8025dfc:	2300      	movs	r3, #0
 8025dfe:	613b      	str	r3, [r7, #16]
 8025e00:	e01f      	b.n	8025e42 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8025e02:	693b      	ldr	r3, [r7, #16]
 8025e04:	015a      	lsls	r2, r3, #5
 8025e06:	68fb      	ldr	r3, [r7, #12]
 8025e08:	4413      	add	r3, r2
 8025e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e0e:	681b      	ldr	r3, [r3, #0]
 8025e10:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8025e12:	68bb      	ldr	r3, [r7, #8]
 8025e14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8025e18:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8025e1a:	68bb      	ldr	r3, [r7, #8]
 8025e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025e20:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8025e22:	68bb      	ldr	r3, [r7, #8]
 8025e24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8025e28:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8025e2a:	693b      	ldr	r3, [r7, #16]
 8025e2c:	015a      	lsls	r2, r3, #5
 8025e2e:	68fb      	ldr	r3, [r7, #12]
 8025e30:	4413      	add	r3, r2
 8025e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e36:	461a      	mov	r2, r3
 8025e38:	68bb      	ldr	r3, [r7, #8]
 8025e3a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8025e3c:	693b      	ldr	r3, [r7, #16]
 8025e3e:	3301      	adds	r3, #1
 8025e40:	613b      	str	r3, [r7, #16]
 8025e42:	693b      	ldr	r3, [r7, #16]
 8025e44:	2b0f      	cmp	r3, #15
 8025e46:	d9dc      	bls.n	8025e02 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8025e48:	2300      	movs	r3, #0
 8025e4a:	613b      	str	r3, [r7, #16]
 8025e4c:	e034      	b.n	8025eb8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8025e4e:	693b      	ldr	r3, [r7, #16]
 8025e50:	015a      	lsls	r2, r3, #5
 8025e52:	68fb      	ldr	r3, [r7, #12]
 8025e54:	4413      	add	r3, r2
 8025e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e5a:	681b      	ldr	r3, [r3, #0]
 8025e5c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8025e5e:	68bb      	ldr	r3, [r7, #8]
 8025e60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8025e64:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8025e66:	68bb      	ldr	r3, [r7, #8]
 8025e68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025e6c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8025e6e:	68bb      	ldr	r3, [r7, #8]
 8025e70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8025e74:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8025e76:	693b      	ldr	r3, [r7, #16]
 8025e78:	015a      	lsls	r2, r3, #5
 8025e7a:	68fb      	ldr	r3, [r7, #12]
 8025e7c:	4413      	add	r3, r2
 8025e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e82:	461a      	mov	r2, r3
 8025e84:	68bb      	ldr	r3, [r7, #8]
 8025e86:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8025e88:	697b      	ldr	r3, [r7, #20]
 8025e8a:	3301      	adds	r3, #1
 8025e8c:	617b      	str	r3, [r7, #20]
 8025e8e:	697b      	ldr	r3, [r7, #20]
 8025e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8025e94:	d80c      	bhi.n	8025eb0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8025e96:	693b      	ldr	r3, [r7, #16]
 8025e98:	015a      	lsls	r2, r3, #5
 8025e9a:	68fb      	ldr	r3, [r7, #12]
 8025e9c:	4413      	add	r3, r2
 8025e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ea2:	681b      	ldr	r3, [r3, #0]
 8025ea4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8025ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8025eac:	d0ec      	beq.n	8025e88 <USB_StopHost+0xb0>
 8025eae:	e000      	b.n	8025eb2 <USB_StopHost+0xda>
        break;
 8025eb0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8025eb2:	693b      	ldr	r3, [r7, #16]
 8025eb4:	3301      	adds	r3, #1
 8025eb6:	613b      	str	r3, [r7, #16]
 8025eb8:	693b      	ldr	r3, [r7, #16]
 8025eba:	2b0f      	cmp	r3, #15
 8025ebc:	d9c7      	bls.n	8025e4e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8025ebe:	68fb      	ldr	r3, [r7, #12]
 8025ec0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8025ec4:	461a      	mov	r2, r3
 8025ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8025eca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8025ecc:	687b      	ldr	r3, [r7, #4]
 8025ece:	f04f 32ff 	mov.w	r2, #4294967295
 8025ed2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8025ed4:	6878      	ldr	r0, [r7, #4]
 8025ed6:	f7ff f8ae 	bl	8025036 <USB_EnableGlobalInt>

  return HAL_OK;
 8025eda:	2300      	movs	r3, #0
}
 8025edc:	4618      	mov	r0, r3
 8025ede:	3718      	adds	r7, #24
 8025ee0:	46bd      	mov	sp, r7
 8025ee2:	bd80      	pop	{r7, pc}

08025ee4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8025ee4:	b590      	push	{r4, r7, lr}
 8025ee6:	b089      	sub	sp, #36	; 0x24
 8025ee8:	af04      	add	r7, sp, #16
 8025eea:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8025eec:	2301      	movs	r3, #1
 8025eee:	2202      	movs	r2, #2
 8025ef0:	2102      	movs	r1, #2
 8025ef2:	6878      	ldr	r0, [r7, #4]
 8025ef4:	f000 fc66 	bl	80267c4 <USBH_FindInterface>
 8025ef8:	4603      	mov	r3, r0
 8025efa:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8025efc:	7bfb      	ldrb	r3, [r7, #15]
 8025efe:	2bff      	cmp	r3, #255	; 0xff
 8025f00:	d002      	beq.n	8025f08 <USBH_CDC_InterfaceInit+0x24>
 8025f02:	7bfb      	ldrb	r3, [r7, #15]
 8025f04:	2b01      	cmp	r3, #1
 8025f06:	d901      	bls.n	8025f0c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8025f08:	2302      	movs	r3, #2
 8025f0a:	e13d      	b.n	8026188 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8025f0c:	7bfb      	ldrb	r3, [r7, #15]
 8025f0e:	4619      	mov	r1, r3
 8025f10:	6878      	ldr	r0, [r7, #4]
 8025f12:	f000 fc3b 	bl	802678c <USBH_SelectInterface>
 8025f16:	4603      	mov	r3, r0
 8025f18:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8025f1a:	7bbb      	ldrb	r3, [r7, #14]
 8025f1c:	2b00      	cmp	r3, #0
 8025f1e:	d001      	beq.n	8025f24 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8025f20:	2302      	movs	r3, #2
 8025f22:	e131      	b.n	8026188 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8025f24:	687b      	ldr	r3, [r7, #4]
 8025f26:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8025f2a:	2050      	movs	r0, #80	; 0x50
 8025f2c:	f002 fa00 	bl	8028330 <malloc>
 8025f30:	4603      	mov	r3, r0
 8025f32:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8025f34:	687b      	ldr	r3, [r7, #4]
 8025f36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8025f3a:	69db      	ldr	r3, [r3, #28]
 8025f3c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8025f3e:	68bb      	ldr	r3, [r7, #8]
 8025f40:	2b00      	cmp	r3, #0
 8025f42:	d101      	bne.n	8025f48 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8025f44:	2302      	movs	r3, #2
 8025f46:	e11f      	b.n	8026188 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8025f48:	2250      	movs	r2, #80	; 0x50
 8025f4a:	2100      	movs	r1, #0
 8025f4c:	68b8      	ldr	r0, [r7, #8]
 8025f4e:	f002 f9ff 	bl	8028350 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8025f52:	7bfb      	ldrb	r3, [r7, #15]
 8025f54:	687a      	ldr	r2, [r7, #4]
 8025f56:	211a      	movs	r1, #26
 8025f58:	fb01 f303 	mul.w	r3, r1, r3
 8025f5c:	4413      	add	r3, r2
 8025f5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8025f62:	781b      	ldrb	r3, [r3, #0]
 8025f64:	b25b      	sxtb	r3, r3
 8025f66:	2b00      	cmp	r3, #0
 8025f68:	da15      	bge.n	8025f96 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8025f6a:	7bfb      	ldrb	r3, [r7, #15]
 8025f6c:	687a      	ldr	r2, [r7, #4]
 8025f6e:	211a      	movs	r1, #26
 8025f70:	fb01 f303 	mul.w	r3, r1, r3
 8025f74:	4413      	add	r3, r2
 8025f76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8025f7a:	781a      	ldrb	r2, [r3, #0]
 8025f7c:	68bb      	ldr	r3, [r7, #8]
 8025f7e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8025f80:	7bfb      	ldrb	r3, [r7, #15]
 8025f82:	687a      	ldr	r2, [r7, #4]
 8025f84:	211a      	movs	r1, #26
 8025f86:	fb01 f303 	mul.w	r3, r1, r3
 8025f8a:	4413      	add	r3, r2
 8025f8c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8025f90:	881a      	ldrh	r2, [r3, #0]
 8025f92:	68bb      	ldr	r3, [r7, #8]
 8025f94:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8025f96:	68bb      	ldr	r3, [r7, #8]
 8025f98:	785b      	ldrb	r3, [r3, #1]
 8025f9a:	4619      	mov	r1, r3
 8025f9c:	6878      	ldr	r0, [r7, #4]
 8025f9e:	f001 fe32 	bl	8027c06 <USBH_AllocPipe>
 8025fa2:	4603      	mov	r3, r0
 8025fa4:	461a      	mov	r2, r3
 8025fa6:	68bb      	ldr	r3, [r7, #8]
 8025fa8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8025faa:	68bb      	ldr	r3, [r7, #8]
 8025fac:	7819      	ldrb	r1, [r3, #0]
 8025fae:	68bb      	ldr	r3, [r7, #8]
 8025fb0:	7858      	ldrb	r0, [r3, #1]
 8025fb2:	687b      	ldr	r3, [r7, #4]
 8025fb4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8025fb8:	687b      	ldr	r3, [r7, #4]
 8025fba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8025fbe:	68ba      	ldr	r2, [r7, #8]
 8025fc0:	8952      	ldrh	r2, [r2, #10]
 8025fc2:	9202      	str	r2, [sp, #8]
 8025fc4:	2203      	movs	r2, #3
 8025fc6:	9201      	str	r2, [sp, #4]
 8025fc8:	9300      	str	r3, [sp, #0]
 8025fca:	4623      	mov	r3, r4
 8025fcc:	4602      	mov	r2, r0
 8025fce:	6878      	ldr	r0, [r7, #4]
 8025fd0:	f001 fdea 	bl	8027ba8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8025fd4:	68bb      	ldr	r3, [r7, #8]
 8025fd6:	781b      	ldrb	r3, [r3, #0]
 8025fd8:	2200      	movs	r2, #0
 8025fda:	4619      	mov	r1, r3
 8025fdc:	6878      	ldr	r0, [r7, #4]
 8025fde:	f002 f8f9 	bl	80281d4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8025fe2:	2300      	movs	r3, #0
 8025fe4:	2200      	movs	r2, #0
 8025fe6:	210a      	movs	r1, #10
 8025fe8:	6878      	ldr	r0, [r7, #4]
 8025fea:	f000 fbeb 	bl	80267c4 <USBH_FindInterface>
 8025fee:	4603      	mov	r3, r0
 8025ff0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8025ff2:	7bfb      	ldrb	r3, [r7, #15]
 8025ff4:	2bff      	cmp	r3, #255	; 0xff
 8025ff6:	d002      	beq.n	8025ffe <USBH_CDC_InterfaceInit+0x11a>
 8025ff8:	7bfb      	ldrb	r3, [r7, #15]
 8025ffa:	2b01      	cmp	r3, #1
 8025ffc:	d901      	bls.n	8026002 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8025ffe:	2302      	movs	r3, #2
 8026000:	e0c2      	b.n	8026188 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8026002:	7bfb      	ldrb	r3, [r7, #15]
 8026004:	687a      	ldr	r2, [r7, #4]
 8026006:	211a      	movs	r1, #26
 8026008:	fb01 f303 	mul.w	r3, r1, r3
 802600c:	4413      	add	r3, r2
 802600e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8026012:	781b      	ldrb	r3, [r3, #0]
 8026014:	b25b      	sxtb	r3, r3
 8026016:	2b00      	cmp	r3, #0
 8026018:	da16      	bge.n	8026048 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802601a:	7bfb      	ldrb	r3, [r7, #15]
 802601c:	687a      	ldr	r2, [r7, #4]
 802601e:	211a      	movs	r1, #26
 8026020:	fb01 f303 	mul.w	r3, r1, r3
 8026024:	4413      	add	r3, r2
 8026026:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802602a:	781a      	ldrb	r2, [r3, #0]
 802602c:	68bb      	ldr	r3, [r7, #8]
 802602e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8026030:	7bfb      	ldrb	r3, [r7, #15]
 8026032:	687a      	ldr	r2, [r7, #4]
 8026034:	211a      	movs	r1, #26
 8026036:	fb01 f303 	mul.w	r3, r1, r3
 802603a:	4413      	add	r3, r2
 802603c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8026040:	881a      	ldrh	r2, [r3, #0]
 8026042:	68bb      	ldr	r3, [r7, #8]
 8026044:	835a      	strh	r2, [r3, #26]
 8026046:	e015      	b.n	8026074 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8026048:	7bfb      	ldrb	r3, [r7, #15]
 802604a:	687a      	ldr	r2, [r7, #4]
 802604c:	211a      	movs	r1, #26
 802604e:	fb01 f303 	mul.w	r3, r1, r3
 8026052:	4413      	add	r3, r2
 8026054:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8026058:	781a      	ldrb	r2, [r3, #0]
 802605a:	68bb      	ldr	r3, [r7, #8]
 802605c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802605e:	7bfb      	ldrb	r3, [r7, #15]
 8026060:	687a      	ldr	r2, [r7, #4]
 8026062:	211a      	movs	r1, #26
 8026064:	fb01 f303 	mul.w	r3, r1, r3
 8026068:	4413      	add	r3, r2
 802606a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802606e:	881a      	ldrh	r2, [r3, #0]
 8026070:	68bb      	ldr	r3, [r7, #8]
 8026072:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8026074:	7bfb      	ldrb	r3, [r7, #15]
 8026076:	687a      	ldr	r2, [r7, #4]
 8026078:	211a      	movs	r1, #26
 802607a:	fb01 f303 	mul.w	r3, r1, r3
 802607e:	4413      	add	r3, r2
 8026080:	f203 3356 	addw	r3, r3, #854	; 0x356
 8026084:	781b      	ldrb	r3, [r3, #0]
 8026086:	b25b      	sxtb	r3, r3
 8026088:	2b00      	cmp	r3, #0
 802608a:	da16      	bge.n	80260ba <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802608c:	7bfb      	ldrb	r3, [r7, #15]
 802608e:	687a      	ldr	r2, [r7, #4]
 8026090:	211a      	movs	r1, #26
 8026092:	fb01 f303 	mul.w	r3, r1, r3
 8026096:	4413      	add	r3, r2
 8026098:	f203 3356 	addw	r3, r3, #854	; 0x356
 802609c:	781a      	ldrb	r2, [r3, #0]
 802609e:	68bb      	ldr	r3, [r7, #8]
 80260a0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80260a2:	7bfb      	ldrb	r3, [r7, #15]
 80260a4:	687a      	ldr	r2, [r7, #4]
 80260a6:	211a      	movs	r1, #26
 80260a8:	fb01 f303 	mul.w	r3, r1, r3
 80260ac:	4413      	add	r3, r2
 80260ae:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80260b2:	881a      	ldrh	r2, [r3, #0]
 80260b4:	68bb      	ldr	r3, [r7, #8]
 80260b6:	835a      	strh	r2, [r3, #26]
 80260b8:	e015      	b.n	80260e6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80260ba:	7bfb      	ldrb	r3, [r7, #15]
 80260bc:	687a      	ldr	r2, [r7, #4]
 80260be:	211a      	movs	r1, #26
 80260c0:	fb01 f303 	mul.w	r3, r1, r3
 80260c4:	4413      	add	r3, r2
 80260c6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80260ca:	781a      	ldrb	r2, [r3, #0]
 80260cc:	68bb      	ldr	r3, [r7, #8]
 80260ce:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80260d0:	7bfb      	ldrb	r3, [r7, #15]
 80260d2:	687a      	ldr	r2, [r7, #4]
 80260d4:	211a      	movs	r1, #26
 80260d6:	fb01 f303 	mul.w	r3, r1, r3
 80260da:	4413      	add	r3, r2
 80260dc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80260e0:	881a      	ldrh	r2, [r3, #0]
 80260e2:	68bb      	ldr	r3, [r7, #8]
 80260e4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80260e6:	68bb      	ldr	r3, [r7, #8]
 80260e8:	7b9b      	ldrb	r3, [r3, #14]
 80260ea:	4619      	mov	r1, r3
 80260ec:	6878      	ldr	r0, [r7, #4]
 80260ee:	f001 fd8a 	bl	8027c06 <USBH_AllocPipe>
 80260f2:	4603      	mov	r3, r0
 80260f4:	461a      	mov	r2, r3
 80260f6:	68bb      	ldr	r3, [r7, #8]
 80260f8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80260fa:	68bb      	ldr	r3, [r7, #8]
 80260fc:	7bdb      	ldrb	r3, [r3, #15]
 80260fe:	4619      	mov	r1, r3
 8026100:	6878      	ldr	r0, [r7, #4]
 8026102:	f001 fd80 	bl	8027c06 <USBH_AllocPipe>
 8026106:	4603      	mov	r3, r0
 8026108:	461a      	mov	r2, r3
 802610a:	68bb      	ldr	r3, [r7, #8]
 802610c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 802610e:	68bb      	ldr	r3, [r7, #8]
 8026110:	7b59      	ldrb	r1, [r3, #13]
 8026112:	68bb      	ldr	r3, [r7, #8]
 8026114:	7b98      	ldrb	r0, [r3, #14]
 8026116:	687b      	ldr	r3, [r7, #4]
 8026118:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802611c:	687b      	ldr	r3, [r7, #4]
 802611e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8026122:	68ba      	ldr	r2, [r7, #8]
 8026124:	8b12      	ldrh	r2, [r2, #24]
 8026126:	9202      	str	r2, [sp, #8]
 8026128:	2202      	movs	r2, #2
 802612a:	9201      	str	r2, [sp, #4]
 802612c:	9300      	str	r3, [sp, #0]
 802612e:	4623      	mov	r3, r4
 8026130:	4602      	mov	r2, r0
 8026132:	6878      	ldr	r0, [r7, #4]
 8026134:	f001 fd38 	bl	8027ba8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8026138:	68bb      	ldr	r3, [r7, #8]
 802613a:	7b19      	ldrb	r1, [r3, #12]
 802613c:	68bb      	ldr	r3, [r7, #8]
 802613e:	7bd8      	ldrb	r0, [r3, #15]
 8026140:	687b      	ldr	r3, [r7, #4]
 8026142:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8026146:	687b      	ldr	r3, [r7, #4]
 8026148:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802614c:	68ba      	ldr	r2, [r7, #8]
 802614e:	8b52      	ldrh	r2, [r2, #26]
 8026150:	9202      	str	r2, [sp, #8]
 8026152:	2202      	movs	r2, #2
 8026154:	9201      	str	r2, [sp, #4]
 8026156:	9300      	str	r3, [sp, #0]
 8026158:	4623      	mov	r3, r4
 802615a:	4602      	mov	r2, r0
 802615c:	6878      	ldr	r0, [r7, #4]
 802615e:	f001 fd23 	bl	8027ba8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8026162:	68bb      	ldr	r3, [r7, #8]
 8026164:	2200      	movs	r2, #0
 8026166:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 802616a:	68bb      	ldr	r3, [r7, #8]
 802616c:	7b5b      	ldrb	r3, [r3, #13]
 802616e:	2200      	movs	r2, #0
 8026170:	4619      	mov	r1, r3
 8026172:	6878      	ldr	r0, [r7, #4]
 8026174:	f002 f82e 	bl	80281d4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8026178:	68bb      	ldr	r3, [r7, #8]
 802617a:	7b1b      	ldrb	r3, [r3, #12]
 802617c:	2200      	movs	r2, #0
 802617e:	4619      	mov	r1, r3
 8026180:	6878      	ldr	r0, [r7, #4]
 8026182:	f002 f827 	bl	80281d4 <USBH_LL_SetToggle>

  return USBH_OK;
 8026186:	2300      	movs	r3, #0
}
 8026188:	4618      	mov	r0, r3
 802618a:	3714      	adds	r7, #20
 802618c:	46bd      	mov	sp, r7
 802618e:	bd90      	pop	{r4, r7, pc}

08026190 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8026190:	b580      	push	{r7, lr}
 8026192:	b084      	sub	sp, #16
 8026194:	af00      	add	r7, sp, #0
 8026196:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8026198:	687b      	ldr	r3, [r7, #4]
 802619a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802619e:	69db      	ldr	r3, [r3, #28]
 80261a0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80261a2:	68fb      	ldr	r3, [r7, #12]
 80261a4:	781b      	ldrb	r3, [r3, #0]
 80261a6:	2b00      	cmp	r3, #0
 80261a8:	d00e      	beq.n	80261c8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80261aa:	68fb      	ldr	r3, [r7, #12]
 80261ac:	781b      	ldrb	r3, [r3, #0]
 80261ae:	4619      	mov	r1, r3
 80261b0:	6878      	ldr	r0, [r7, #4]
 80261b2:	f001 fd18 	bl	8027be6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80261b6:	68fb      	ldr	r3, [r7, #12]
 80261b8:	781b      	ldrb	r3, [r3, #0]
 80261ba:	4619      	mov	r1, r3
 80261bc:	6878      	ldr	r0, [r7, #4]
 80261be:	f001 fd43 	bl	8027c48 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80261c2:	68fb      	ldr	r3, [r7, #12]
 80261c4:	2200      	movs	r2, #0
 80261c6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80261c8:	68fb      	ldr	r3, [r7, #12]
 80261ca:	7b1b      	ldrb	r3, [r3, #12]
 80261cc:	2b00      	cmp	r3, #0
 80261ce:	d00e      	beq.n	80261ee <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80261d0:	68fb      	ldr	r3, [r7, #12]
 80261d2:	7b1b      	ldrb	r3, [r3, #12]
 80261d4:	4619      	mov	r1, r3
 80261d6:	6878      	ldr	r0, [r7, #4]
 80261d8:	f001 fd05 	bl	8027be6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80261dc:	68fb      	ldr	r3, [r7, #12]
 80261de:	7b1b      	ldrb	r3, [r3, #12]
 80261e0:	4619      	mov	r1, r3
 80261e2:	6878      	ldr	r0, [r7, #4]
 80261e4:	f001 fd30 	bl	8027c48 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80261e8:	68fb      	ldr	r3, [r7, #12]
 80261ea:	2200      	movs	r2, #0
 80261ec:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80261ee:	68fb      	ldr	r3, [r7, #12]
 80261f0:	7b5b      	ldrb	r3, [r3, #13]
 80261f2:	2b00      	cmp	r3, #0
 80261f4:	d00e      	beq.n	8026214 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80261f6:	68fb      	ldr	r3, [r7, #12]
 80261f8:	7b5b      	ldrb	r3, [r3, #13]
 80261fa:	4619      	mov	r1, r3
 80261fc:	6878      	ldr	r0, [r7, #4]
 80261fe:	f001 fcf2 	bl	8027be6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8026202:	68fb      	ldr	r3, [r7, #12]
 8026204:	7b5b      	ldrb	r3, [r3, #13]
 8026206:	4619      	mov	r1, r3
 8026208:	6878      	ldr	r0, [r7, #4]
 802620a:	f001 fd1d 	bl	8027c48 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 802620e:	68fb      	ldr	r3, [r7, #12]
 8026210:	2200      	movs	r2, #0
 8026212:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8026214:	687b      	ldr	r3, [r7, #4]
 8026216:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802621a:	69db      	ldr	r3, [r3, #28]
 802621c:	2b00      	cmp	r3, #0
 802621e:	d00b      	beq.n	8026238 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8026220:	687b      	ldr	r3, [r7, #4]
 8026222:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8026226:	69db      	ldr	r3, [r3, #28]
 8026228:	4618      	mov	r0, r3
 802622a:	f002 f889 	bl	8028340 <free>
    phost->pActiveClass->pData = 0U;
 802622e:	687b      	ldr	r3, [r7, #4]
 8026230:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8026234:	2200      	movs	r2, #0
 8026236:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8026238:	2300      	movs	r3, #0
}
 802623a:	4618      	mov	r0, r3
 802623c:	3710      	adds	r7, #16
 802623e:	46bd      	mov	sp, r7
 8026240:	bd80      	pop	{r7, pc}

08026242 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8026242:	b580      	push	{r7, lr}
 8026244:	b084      	sub	sp, #16
 8026246:	af00      	add	r7, sp, #0
 8026248:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802624a:	687b      	ldr	r3, [r7, #4]
 802624c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8026250:	69db      	ldr	r3, [r3, #28]
 8026252:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8026254:	68fb      	ldr	r3, [r7, #12]
 8026256:	3340      	adds	r3, #64	; 0x40
 8026258:	4619      	mov	r1, r3
 802625a:	6878      	ldr	r0, [r7, #4]
 802625c:	f000 f8b1 	bl	80263c2 <GetLineCoding>
 8026260:	4603      	mov	r3, r0
 8026262:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8026264:	7afb      	ldrb	r3, [r7, #11]
 8026266:	2b00      	cmp	r3, #0
 8026268:	d105      	bne.n	8026276 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 802626a:	687b      	ldr	r3, [r7, #4]
 802626c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8026270:	2102      	movs	r1, #2
 8026272:	6878      	ldr	r0, [r7, #4]
 8026274:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8026276:	7afb      	ldrb	r3, [r7, #11]
}
 8026278:	4618      	mov	r0, r3
 802627a:	3710      	adds	r7, #16
 802627c:	46bd      	mov	sp, r7
 802627e:	bd80      	pop	{r7, pc}

08026280 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8026280:	b580      	push	{r7, lr}
 8026282:	b084      	sub	sp, #16
 8026284:	af00      	add	r7, sp, #0
 8026286:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8026288:	2301      	movs	r3, #1
 802628a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 802628c:	2300      	movs	r3, #0
 802628e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8026290:	687b      	ldr	r3, [r7, #4]
 8026292:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8026296:	69db      	ldr	r3, [r3, #28]
 8026298:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 802629a:	68bb      	ldr	r3, [r7, #8]
 802629c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80262a0:	2b04      	cmp	r3, #4
 80262a2:	d877      	bhi.n	8026394 <USBH_CDC_Process+0x114>
 80262a4:	a201      	add	r2, pc, #4	; (adr r2, 80262ac <USBH_CDC_Process+0x2c>)
 80262a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80262aa:	bf00      	nop
 80262ac:	080262c1 	.word	0x080262c1
 80262b0:	080262c7 	.word	0x080262c7
 80262b4:	080262f7 	.word	0x080262f7
 80262b8:	0802636b 	.word	0x0802636b
 80262bc:	08026379 	.word	0x08026379
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80262c0:	2300      	movs	r3, #0
 80262c2:	73fb      	strb	r3, [r7, #15]
      break;
 80262c4:	e06d      	b.n	80263a2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80262c6:	68bb      	ldr	r3, [r7, #8]
 80262c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80262ca:	4619      	mov	r1, r3
 80262cc:	6878      	ldr	r0, [r7, #4]
 80262ce:	f000 f897 	bl	8026400 <SetLineCoding>
 80262d2:	4603      	mov	r3, r0
 80262d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80262d6:	7bbb      	ldrb	r3, [r7, #14]
 80262d8:	2b00      	cmp	r3, #0
 80262da:	d104      	bne.n	80262e6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80262dc:	68bb      	ldr	r3, [r7, #8]
 80262de:	2202      	movs	r2, #2
 80262e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80262e4:	e058      	b.n	8026398 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80262e6:	7bbb      	ldrb	r3, [r7, #14]
 80262e8:	2b01      	cmp	r3, #1
 80262ea:	d055      	beq.n	8026398 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80262ec:	68bb      	ldr	r3, [r7, #8]
 80262ee:	2204      	movs	r2, #4
 80262f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80262f4:	e050      	b.n	8026398 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80262f6:	68bb      	ldr	r3, [r7, #8]
 80262f8:	3340      	adds	r3, #64	; 0x40
 80262fa:	4619      	mov	r1, r3
 80262fc:	6878      	ldr	r0, [r7, #4]
 80262fe:	f000 f860 	bl	80263c2 <GetLineCoding>
 8026302:	4603      	mov	r3, r0
 8026304:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8026306:	7bbb      	ldrb	r3, [r7, #14]
 8026308:	2b00      	cmp	r3, #0
 802630a:	d126      	bne.n	802635a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 802630c:	68bb      	ldr	r3, [r7, #8]
 802630e:	2200      	movs	r2, #0
 8026310:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8026314:	68bb      	ldr	r3, [r7, #8]
 8026316:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 802631a:	68bb      	ldr	r3, [r7, #8]
 802631c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802631e:	791b      	ldrb	r3, [r3, #4]
 8026320:	429a      	cmp	r2, r3
 8026322:	d13b      	bne.n	802639c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8026324:	68bb      	ldr	r3, [r7, #8]
 8026326:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 802632a:	68bb      	ldr	r3, [r7, #8]
 802632c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802632e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8026330:	429a      	cmp	r2, r3
 8026332:	d133      	bne.n	802639c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8026334:	68bb      	ldr	r3, [r7, #8]
 8026336:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 802633a:	68bb      	ldr	r3, [r7, #8]
 802633c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802633e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8026340:	429a      	cmp	r2, r3
 8026342:	d12b      	bne.n	802639c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8026344:	68bb      	ldr	r3, [r7, #8]
 8026346:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8026348:	68bb      	ldr	r3, [r7, #8]
 802634a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802634c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802634e:	429a      	cmp	r2, r3
 8026350:	d124      	bne.n	802639c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8026352:	6878      	ldr	r0, [r7, #4]
 8026354:	f000 f958 	bl	8026608 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8026358:	e020      	b.n	802639c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 802635a:	7bbb      	ldrb	r3, [r7, #14]
 802635c:	2b01      	cmp	r3, #1
 802635e:	d01d      	beq.n	802639c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8026360:	68bb      	ldr	r3, [r7, #8]
 8026362:	2204      	movs	r2, #4
 8026364:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8026368:	e018      	b.n	802639c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 802636a:	6878      	ldr	r0, [r7, #4]
 802636c:	f000 f867 	bl	802643e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8026370:	6878      	ldr	r0, [r7, #4]
 8026372:	f000 f8da 	bl	802652a <CDC_ProcessReception>
      break;
 8026376:	e014      	b.n	80263a2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8026378:	2100      	movs	r1, #0
 802637a:	6878      	ldr	r0, [r7, #4]
 802637c:	f000 ffe3 	bl	8027346 <USBH_ClrFeature>
 8026380:	4603      	mov	r3, r0
 8026382:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8026384:	7bbb      	ldrb	r3, [r7, #14]
 8026386:	2b00      	cmp	r3, #0
 8026388:	d10a      	bne.n	80263a0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 802638a:	68bb      	ldr	r3, [r7, #8]
 802638c:	2200      	movs	r2, #0
 802638e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8026392:	e005      	b.n	80263a0 <USBH_CDC_Process+0x120>

    default:
      break;
 8026394:	bf00      	nop
 8026396:	e004      	b.n	80263a2 <USBH_CDC_Process+0x122>
      break;
 8026398:	bf00      	nop
 802639a:	e002      	b.n	80263a2 <USBH_CDC_Process+0x122>
      break;
 802639c:	bf00      	nop
 802639e:	e000      	b.n	80263a2 <USBH_CDC_Process+0x122>
      break;
 80263a0:	bf00      	nop

  }

  return status;
 80263a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80263a4:	4618      	mov	r0, r3
 80263a6:	3710      	adds	r7, #16
 80263a8:	46bd      	mov	sp, r7
 80263aa:	bd80      	pop	{r7, pc}

080263ac <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80263ac:	b480      	push	{r7}
 80263ae:	b083      	sub	sp, #12
 80263b0:	af00      	add	r7, sp, #0
 80263b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80263b4:	2300      	movs	r3, #0
}
 80263b6:	4618      	mov	r0, r3
 80263b8:	370c      	adds	r7, #12
 80263ba:	46bd      	mov	sp, r7
 80263bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263c0:	4770      	bx	lr

080263c2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80263c2:	b580      	push	{r7, lr}
 80263c4:	b082      	sub	sp, #8
 80263c6:	af00      	add	r7, sp, #0
 80263c8:	6078      	str	r0, [r7, #4]
 80263ca:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80263cc:	687b      	ldr	r3, [r7, #4]
 80263ce:	22a1      	movs	r2, #161	; 0xa1
 80263d0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80263d2:	687b      	ldr	r3, [r7, #4]
 80263d4:	2221      	movs	r2, #33	; 0x21
 80263d6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80263d8:	687b      	ldr	r3, [r7, #4]
 80263da:	2200      	movs	r2, #0
 80263dc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80263de:	687b      	ldr	r3, [r7, #4]
 80263e0:	2200      	movs	r2, #0
 80263e2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80263e4:	687b      	ldr	r3, [r7, #4]
 80263e6:	2207      	movs	r2, #7
 80263e8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80263ea:	683b      	ldr	r3, [r7, #0]
 80263ec:	2207      	movs	r2, #7
 80263ee:	4619      	mov	r1, r3
 80263f0:	6878      	ldr	r0, [r7, #4]
 80263f2:	f001 f988 	bl	8027706 <USBH_CtlReq>
 80263f6:	4603      	mov	r3, r0
}
 80263f8:	4618      	mov	r0, r3
 80263fa:	3708      	adds	r7, #8
 80263fc:	46bd      	mov	sp, r7
 80263fe:	bd80      	pop	{r7, pc}

08026400 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8026400:	b580      	push	{r7, lr}
 8026402:	b082      	sub	sp, #8
 8026404:	af00      	add	r7, sp, #0
 8026406:	6078      	str	r0, [r7, #4]
 8026408:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 802640a:	687b      	ldr	r3, [r7, #4]
 802640c:	2221      	movs	r2, #33	; 0x21
 802640e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8026410:	687b      	ldr	r3, [r7, #4]
 8026412:	2220      	movs	r2, #32
 8026414:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8026416:	687b      	ldr	r3, [r7, #4]
 8026418:	2200      	movs	r2, #0
 802641a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 802641c:	687b      	ldr	r3, [r7, #4]
 802641e:	2200      	movs	r2, #0
 8026420:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8026422:	687b      	ldr	r3, [r7, #4]
 8026424:	2207      	movs	r2, #7
 8026426:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8026428:	683b      	ldr	r3, [r7, #0]
 802642a:	2207      	movs	r2, #7
 802642c:	4619      	mov	r1, r3
 802642e:	6878      	ldr	r0, [r7, #4]
 8026430:	f001 f969 	bl	8027706 <USBH_CtlReq>
 8026434:	4603      	mov	r3, r0
}
 8026436:	4618      	mov	r0, r3
 8026438:	3708      	adds	r7, #8
 802643a:	46bd      	mov	sp, r7
 802643c:	bd80      	pop	{r7, pc}

0802643e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 802643e:	b580      	push	{r7, lr}
 8026440:	b086      	sub	sp, #24
 8026442:	af02      	add	r7, sp, #8
 8026444:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8026446:	687b      	ldr	r3, [r7, #4]
 8026448:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802644c:	69db      	ldr	r3, [r3, #28]
 802644e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8026450:	2300      	movs	r3, #0
 8026452:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8026454:	68fb      	ldr	r3, [r7, #12]
 8026456:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802645a:	2b01      	cmp	r3, #1
 802645c:	d002      	beq.n	8026464 <CDC_ProcessTransmission+0x26>
 802645e:	2b02      	cmp	r3, #2
 8026460:	d023      	beq.n	80264aa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8026462:	e05e      	b.n	8026522 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8026464:	68fb      	ldr	r3, [r7, #12]
 8026466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026468:	68fa      	ldr	r2, [r7, #12]
 802646a:	8b12      	ldrh	r2, [r2, #24]
 802646c:	4293      	cmp	r3, r2
 802646e:	d90b      	bls.n	8026488 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8026470:	68fb      	ldr	r3, [r7, #12]
 8026472:	69d9      	ldr	r1, [r3, #28]
 8026474:	68fb      	ldr	r3, [r7, #12]
 8026476:	8b1a      	ldrh	r2, [r3, #24]
 8026478:	68fb      	ldr	r3, [r7, #12]
 802647a:	7b5b      	ldrb	r3, [r3, #13]
 802647c:	2001      	movs	r0, #1
 802647e:	9000      	str	r0, [sp, #0]
 8026480:	6878      	ldr	r0, [r7, #4]
 8026482:	f001 fb4e 	bl	8027b22 <USBH_BulkSendData>
 8026486:	e00b      	b.n	80264a0 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8026488:	68fb      	ldr	r3, [r7, #12]
 802648a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 802648c:	68fb      	ldr	r3, [r7, #12]
 802648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8026490:	b29a      	uxth	r2, r3
 8026492:	68fb      	ldr	r3, [r7, #12]
 8026494:	7b5b      	ldrb	r3, [r3, #13]
 8026496:	2001      	movs	r0, #1
 8026498:	9000      	str	r0, [sp, #0]
 802649a:	6878      	ldr	r0, [r7, #4]
 802649c:	f001 fb41 	bl	8027b22 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80264a0:	68fb      	ldr	r3, [r7, #12]
 80264a2:	2202      	movs	r2, #2
 80264a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80264a8:	e03b      	b.n	8026522 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80264aa:	68fb      	ldr	r3, [r7, #12]
 80264ac:	7b5b      	ldrb	r3, [r3, #13]
 80264ae:	4619      	mov	r1, r3
 80264b0:	6878      	ldr	r0, [r7, #4]
 80264b2:	f001 fe65 	bl	8028180 <USBH_LL_GetURBState>
 80264b6:	4603      	mov	r3, r0
 80264b8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80264ba:	7afb      	ldrb	r3, [r7, #11]
 80264bc:	2b01      	cmp	r3, #1
 80264be:	d128      	bne.n	8026512 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80264c0:	68fb      	ldr	r3, [r7, #12]
 80264c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80264c4:	68fa      	ldr	r2, [r7, #12]
 80264c6:	8b12      	ldrh	r2, [r2, #24]
 80264c8:	4293      	cmp	r3, r2
 80264ca:	d90e      	bls.n	80264ea <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80264cc:	68fb      	ldr	r3, [r7, #12]
 80264ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80264d0:	68fa      	ldr	r2, [r7, #12]
 80264d2:	8b12      	ldrh	r2, [r2, #24]
 80264d4:	1a9a      	subs	r2, r3, r2
 80264d6:	68fb      	ldr	r3, [r7, #12]
 80264d8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80264da:	68fb      	ldr	r3, [r7, #12]
 80264dc:	69db      	ldr	r3, [r3, #28]
 80264de:	68fa      	ldr	r2, [r7, #12]
 80264e0:	8b12      	ldrh	r2, [r2, #24]
 80264e2:	441a      	add	r2, r3
 80264e4:	68fb      	ldr	r3, [r7, #12]
 80264e6:	61da      	str	r2, [r3, #28]
 80264e8:	e002      	b.n	80264f0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80264ea:	68fb      	ldr	r3, [r7, #12]
 80264ec:	2200      	movs	r2, #0
 80264ee:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80264f0:	68fb      	ldr	r3, [r7, #12]
 80264f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80264f4:	2b00      	cmp	r3, #0
 80264f6:	d004      	beq.n	8026502 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80264f8:	68fb      	ldr	r3, [r7, #12]
 80264fa:	2201      	movs	r2, #1
 80264fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8026500:	e00e      	b.n	8026520 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8026502:	68fb      	ldr	r3, [r7, #12]
 8026504:	2200      	movs	r2, #0
 8026506:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 802650a:	6878      	ldr	r0, [r7, #4]
 802650c:	f000 f868 	bl	80265e0 <USBH_CDC_TransmitCallback>
      break;
 8026510:	e006      	b.n	8026520 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8026512:	7afb      	ldrb	r3, [r7, #11]
 8026514:	2b02      	cmp	r3, #2
 8026516:	d103      	bne.n	8026520 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8026518:	68fb      	ldr	r3, [r7, #12]
 802651a:	2201      	movs	r2, #1
 802651c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8026520:	bf00      	nop
  }
}
 8026522:	bf00      	nop
 8026524:	3710      	adds	r7, #16
 8026526:	46bd      	mov	sp, r7
 8026528:	bd80      	pop	{r7, pc}

0802652a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 802652a:	b580      	push	{r7, lr}
 802652c:	b086      	sub	sp, #24
 802652e:	af00      	add	r7, sp, #0
 8026530:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8026532:	687b      	ldr	r3, [r7, #4]
 8026534:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8026538:	69db      	ldr	r3, [r3, #28]
 802653a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802653c:	2300      	movs	r3, #0
 802653e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8026540:	697b      	ldr	r3, [r7, #20]
 8026542:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8026546:	2b03      	cmp	r3, #3
 8026548:	d002      	beq.n	8026550 <CDC_ProcessReception+0x26>
 802654a:	2b04      	cmp	r3, #4
 802654c:	d00e      	beq.n	802656c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 802654e:	e043      	b.n	80265d8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8026550:	697b      	ldr	r3, [r7, #20]
 8026552:	6a19      	ldr	r1, [r3, #32]
 8026554:	697b      	ldr	r3, [r7, #20]
 8026556:	8b5a      	ldrh	r2, [r3, #26]
 8026558:	697b      	ldr	r3, [r7, #20]
 802655a:	7b1b      	ldrb	r3, [r3, #12]
 802655c:	6878      	ldr	r0, [r7, #4]
 802655e:	f001 fb05 	bl	8027b6c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8026562:	697b      	ldr	r3, [r7, #20]
 8026564:	2204      	movs	r2, #4
 8026566:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802656a:	e035      	b.n	80265d8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 802656c:	697b      	ldr	r3, [r7, #20]
 802656e:	7b1b      	ldrb	r3, [r3, #12]
 8026570:	4619      	mov	r1, r3
 8026572:	6878      	ldr	r0, [r7, #4]
 8026574:	f001 fe04 	bl	8028180 <USBH_LL_GetURBState>
 8026578:	4603      	mov	r3, r0
 802657a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 802657c:	7cfb      	ldrb	r3, [r7, #19]
 802657e:	2b01      	cmp	r3, #1
 8026580:	d129      	bne.n	80265d6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8026582:	697b      	ldr	r3, [r7, #20]
 8026584:	7b1b      	ldrb	r3, [r3, #12]
 8026586:	4619      	mov	r1, r3
 8026588:	6878      	ldr	r0, [r7, #4]
 802658a:	f001 fd67 	bl	802805c <USBH_LL_GetLastXferSize>
 802658e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8026590:	697b      	ldr	r3, [r7, #20]
 8026592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026594:	68fa      	ldr	r2, [r7, #12]
 8026596:	429a      	cmp	r2, r3
 8026598:	d016      	beq.n	80265c8 <CDC_ProcessReception+0x9e>
 802659a:	697b      	ldr	r3, [r7, #20]
 802659c:	8b5b      	ldrh	r3, [r3, #26]
 802659e:	461a      	mov	r2, r3
 80265a0:	68fb      	ldr	r3, [r7, #12]
 80265a2:	4293      	cmp	r3, r2
 80265a4:	d910      	bls.n	80265c8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80265a6:	697b      	ldr	r3, [r7, #20]
 80265a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80265aa:	68fb      	ldr	r3, [r7, #12]
 80265ac:	1ad2      	subs	r2, r2, r3
 80265ae:	697b      	ldr	r3, [r7, #20]
 80265b0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80265b2:	697b      	ldr	r3, [r7, #20]
 80265b4:	6a1a      	ldr	r2, [r3, #32]
 80265b6:	68fb      	ldr	r3, [r7, #12]
 80265b8:	441a      	add	r2, r3
 80265ba:	697b      	ldr	r3, [r7, #20]
 80265bc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80265be:	697b      	ldr	r3, [r7, #20]
 80265c0:	2203      	movs	r2, #3
 80265c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80265c6:	e006      	b.n	80265d6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80265c8:	697b      	ldr	r3, [r7, #20]
 80265ca:	2200      	movs	r2, #0
 80265cc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80265d0:	6878      	ldr	r0, [r7, #4]
 80265d2:	f000 f80f 	bl	80265f4 <USBH_CDC_ReceiveCallback>
      break;
 80265d6:	bf00      	nop
  }
}
 80265d8:	bf00      	nop
 80265da:	3718      	adds	r7, #24
 80265dc:	46bd      	mov	sp, r7
 80265de:	bd80      	pop	{r7, pc}

080265e0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80265e0:	b480      	push	{r7}
 80265e2:	b083      	sub	sp, #12
 80265e4:	af00      	add	r7, sp, #0
 80265e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80265e8:	bf00      	nop
 80265ea:	370c      	adds	r7, #12
 80265ec:	46bd      	mov	sp, r7
 80265ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265f2:	4770      	bx	lr

080265f4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80265f4:	b480      	push	{r7}
 80265f6:	b083      	sub	sp, #12
 80265f8:	af00      	add	r7, sp, #0
 80265fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80265fc:	bf00      	nop
 80265fe:	370c      	adds	r7, #12
 8026600:	46bd      	mov	sp, r7
 8026602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026606:	4770      	bx	lr

08026608 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8026608:	b480      	push	{r7}
 802660a:	b083      	sub	sp, #12
 802660c:	af00      	add	r7, sp, #0
 802660e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8026610:	bf00      	nop
 8026612:	370c      	adds	r7, #12
 8026614:	46bd      	mov	sp, r7
 8026616:	f85d 7b04 	ldr.w	r7, [sp], #4
 802661a:	4770      	bx	lr

0802661c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 802661c:	b580      	push	{r7, lr}
 802661e:	b084      	sub	sp, #16
 8026620:	af00      	add	r7, sp, #0
 8026622:	60f8      	str	r0, [r7, #12]
 8026624:	60b9      	str	r1, [r7, #8]
 8026626:	4613      	mov	r3, r2
 8026628:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 802662a:	68fb      	ldr	r3, [r7, #12]
 802662c:	2b00      	cmp	r3, #0
 802662e:	d101      	bne.n	8026634 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8026630:	2302      	movs	r3, #2
 8026632:	e029      	b.n	8026688 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8026634:	68fb      	ldr	r3, [r7, #12]
 8026636:	79fa      	ldrb	r2, [r7, #7]
 8026638:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 802663c:	68fb      	ldr	r3, [r7, #12]
 802663e:	2200      	movs	r2, #0
 8026640:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8026644:	68fb      	ldr	r3, [r7, #12]
 8026646:	2200      	movs	r2, #0
 8026648:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 802664c:	68f8      	ldr	r0, [r7, #12]
 802664e:	f000 f81f 	bl	8026690 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8026652:	68fb      	ldr	r3, [r7, #12]
 8026654:	2200      	movs	r2, #0
 8026656:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 802665a:	68fb      	ldr	r3, [r7, #12]
 802665c:	2200      	movs	r2, #0
 802665e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8026662:	68fb      	ldr	r3, [r7, #12]
 8026664:	2200      	movs	r2, #0
 8026666:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802666a:	68fb      	ldr	r3, [r7, #12]
 802666c:	2200      	movs	r2, #0
 802666e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8026672:	68bb      	ldr	r3, [r7, #8]
 8026674:	2b00      	cmp	r3, #0
 8026676:	d003      	beq.n	8026680 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8026678:	68fb      	ldr	r3, [r7, #12]
 802667a:	68ba      	ldr	r2, [r7, #8]
 802667c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8026680:	68f8      	ldr	r0, [r7, #12]
 8026682:	f001 fc37 	bl	8027ef4 <USBH_LL_Init>

  return USBH_OK;
 8026686:	2300      	movs	r3, #0
}
 8026688:	4618      	mov	r0, r3
 802668a:	3710      	adds	r7, #16
 802668c:	46bd      	mov	sp, r7
 802668e:	bd80      	pop	{r7, pc}

08026690 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8026690:	b480      	push	{r7}
 8026692:	b085      	sub	sp, #20
 8026694:	af00      	add	r7, sp, #0
 8026696:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8026698:	2300      	movs	r3, #0
 802669a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802669c:	2300      	movs	r3, #0
 802669e:	60fb      	str	r3, [r7, #12]
 80266a0:	e009      	b.n	80266b6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80266a2:	687a      	ldr	r2, [r7, #4]
 80266a4:	68fb      	ldr	r3, [r7, #12]
 80266a6:	33e0      	adds	r3, #224	; 0xe0
 80266a8:	009b      	lsls	r3, r3, #2
 80266aa:	4413      	add	r3, r2
 80266ac:	2200      	movs	r2, #0
 80266ae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80266b0:	68fb      	ldr	r3, [r7, #12]
 80266b2:	3301      	adds	r3, #1
 80266b4:	60fb      	str	r3, [r7, #12]
 80266b6:	68fb      	ldr	r3, [r7, #12]
 80266b8:	2b0e      	cmp	r3, #14
 80266ba:	d9f2      	bls.n	80266a2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80266bc:	2300      	movs	r3, #0
 80266be:	60fb      	str	r3, [r7, #12]
 80266c0:	e009      	b.n	80266d6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80266c2:	687a      	ldr	r2, [r7, #4]
 80266c4:	68fb      	ldr	r3, [r7, #12]
 80266c6:	4413      	add	r3, r2
 80266c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80266cc:	2200      	movs	r2, #0
 80266ce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80266d0:	68fb      	ldr	r3, [r7, #12]
 80266d2:	3301      	adds	r3, #1
 80266d4:	60fb      	str	r3, [r7, #12]
 80266d6:	68fb      	ldr	r3, [r7, #12]
 80266d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80266dc:	d3f1      	bcc.n	80266c2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80266de:	687b      	ldr	r3, [r7, #4]
 80266e0:	2200      	movs	r2, #0
 80266e2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80266e4:	687b      	ldr	r3, [r7, #4]
 80266e6:	2200      	movs	r2, #0
 80266e8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80266ea:	687b      	ldr	r3, [r7, #4]
 80266ec:	2201      	movs	r2, #1
 80266ee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80266f0:	687b      	ldr	r3, [r7, #4]
 80266f2:	2200      	movs	r2, #0
 80266f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80266f8:	687b      	ldr	r3, [r7, #4]
 80266fa:	2201      	movs	r2, #1
 80266fc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80266fe:	687b      	ldr	r3, [r7, #4]
 8026700:	2240      	movs	r2, #64	; 0x40
 8026702:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8026704:	687b      	ldr	r3, [r7, #4]
 8026706:	2200      	movs	r2, #0
 8026708:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 802670a:	687b      	ldr	r3, [r7, #4]
 802670c:	2200      	movs	r2, #0
 802670e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8026712:	687b      	ldr	r3, [r7, #4]
 8026714:	2201      	movs	r2, #1
 8026716:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 802671a:	687b      	ldr	r3, [r7, #4]
 802671c:	2200      	movs	r2, #0
 802671e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8026722:	687b      	ldr	r3, [r7, #4]
 8026724:	2200      	movs	r2, #0
 8026726:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 802672a:	2300      	movs	r3, #0
}
 802672c:	4618      	mov	r0, r3
 802672e:	3714      	adds	r7, #20
 8026730:	46bd      	mov	sp, r7
 8026732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026736:	4770      	bx	lr

08026738 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8026738:	b480      	push	{r7}
 802673a:	b085      	sub	sp, #20
 802673c:	af00      	add	r7, sp, #0
 802673e:	6078      	str	r0, [r7, #4]
 8026740:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8026742:	2300      	movs	r3, #0
 8026744:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8026746:	683b      	ldr	r3, [r7, #0]
 8026748:	2b00      	cmp	r3, #0
 802674a:	d016      	beq.n	802677a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 802674c:	687b      	ldr	r3, [r7, #4]
 802674e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8026752:	2b00      	cmp	r3, #0
 8026754:	d10e      	bne.n	8026774 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8026756:	687b      	ldr	r3, [r7, #4]
 8026758:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802675c:	1c59      	adds	r1, r3, #1
 802675e:	687a      	ldr	r2, [r7, #4]
 8026760:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8026764:	687a      	ldr	r2, [r7, #4]
 8026766:	33de      	adds	r3, #222	; 0xde
 8026768:	6839      	ldr	r1, [r7, #0]
 802676a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 802676e:	2300      	movs	r3, #0
 8026770:	73fb      	strb	r3, [r7, #15]
 8026772:	e004      	b.n	802677e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8026774:	2302      	movs	r3, #2
 8026776:	73fb      	strb	r3, [r7, #15]
 8026778:	e001      	b.n	802677e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 802677a:	2302      	movs	r3, #2
 802677c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802677e:	7bfb      	ldrb	r3, [r7, #15]
}
 8026780:	4618      	mov	r0, r3
 8026782:	3714      	adds	r7, #20
 8026784:	46bd      	mov	sp, r7
 8026786:	f85d 7b04 	ldr.w	r7, [sp], #4
 802678a:	4770      	bx	lr

0802678c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 802678c:	b480      	push	{r7}
 802678e:	b085      	sub	sp, #20
 8026790:	af00      	add	r7, sp, #0
 8026792:	6078      	str	r0, [r7, #4]
 8026794:	460b      	mov	r3, r1
 8026796:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8026798:	2300      	movs	r3, #0
 802679a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 802679c:	687b      	ldr	r3, [r7, #4]
 802679e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80267a2:	78fa      	ldrb	r2, [r7, #3]
 80267a4:	429a      	cmp	r2, r3
 80267a6:	d204      	bcs.n	80267b2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80267a8:	687b      	ldr	r3, [r7, #4]
 80267aa:	78fa      	ldrb	r2, [r7, #3]
 80267ac:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80267b0:	e001      	b.n	80267b6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80267b2:	2302      	movs	r3, #2
 80267b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80267b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80267b8:	4618      	mov	r0, r3
 80267ba:	3714      	adds	r7, #20
 80267bc:	46bd      	mov	sp, r7
 80267be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267c2:	4770      	bx	lr

080267c4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80267c4:	b480      	push	{r7}
 80267c6:	b087      	sub	sp, #28
 80267c8:	af00      	add	r7, sp, #0
 80267ca:	6078      	str	r0, [r7, #4]
 80267cc:	4608      	mov	r0, r1
 80267ce:	4611      	mov	r1, r2
 80267d0:	461a      	mov	r2, r3
 80267d2:	4603      	mov	r3, r0
 80267d4:	70fb      	strb	r3, [r7, #3]
 80267d6:	460b      	mov	r3, r1
 80267d8:	70bb      	strb	r3, [r7, #2]
 80267da:	4613      	mov	r3, r2
 80267dc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80267de:	2300      	movs	r3, #0
 80267e0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80267e2:	2300      	movs	r3, #0
 80267e4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80267e6:	687b      	ldr	r3, [r7, #4]
 80267e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80267ec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80267ee:	e025      	b.n	802683c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80267f0:	7dfb      	ldrb	r3, [r7, #23]
 80267f2:	221a      	movs	r2, #26
 80267f4:	fb02 f303 	mul.w	r3, r2, r3
 80267f8:	3308      	adds	r3, #8
 80267fa:	68fa      	ldr	r2, [r7, #12]
 80267fc:	4413      	add	r3, r2
 80267fe:	3302      	adds	r3, #2
 8026800:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8026802:	693b      	ldr	r3, [r7, #16]
 8026804:	795b      	ldrb	r3, [r3, #5]
 8026806:	78fa      	ldrb	r2, [r7, #3]
 8026808:	429a      	cmp	r2, r3
 802680a:	d002      	beq.n	8026812 <USBH_FindInterface+0x4e>
 802680c:	78fb      	ldrb	r3, [r7, #3]
 802680e:	2bff      	cmp	r3, #255	; 0xff
 8026810:	d111      	bne.n	8026836 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8026812:	693b      	ldr	r3, [r7, #16]
 8026814:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8026816:	78ba      	ldrb	r2, [r7, #2]
 8026818:	429a      	cmp	r2, r3
 802681a:	d002      	beq.n	8026822 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802681c:	78bb      	ldrb	r3, [r7, #2]
 802681e:	2bff      	cmp	r3, #255	; 0xff
 8026820:	d109      	bne.n	8026836 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8026822:	693b      	ldr	r3, [r7, #16]
 8026824:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8026826:	787a      	ldrb	r2, [r7, #1]
 8026828:	429a      	cmp	r2, r3
 802682a:	d002      	beq.n	8026832 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802682c:	787b      	ldrb	r3, [r7, #1]
 802682e:	2bff      	cmp	r3, #255	; 0xff
 8026830:	d101      	bne.n	8026836 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8026832:	7dfb      	ldrb	r3, [r7, #23]
 8026834:	e006      	b.n	8026844 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8026836:	7dfb      	ldrb	r3, [r7, #23]
 8026838:	3301      	adds	r3, #1
 802683a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802683c:	7dfb      	ldrb	r3, [r7, #23]
 802683e:	2b01      	cmp	r3, #1
 8026840:	d9d6      	bls.n	80267f0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8026842:	23ff      	movs	r3, #255	; 0xff
}
 8026844:	4618      	mov	r0, r3
 8026846:	371c      	adds	r7, #28
 8026848:	46bd      	mov	sp, r7
 802684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802684e:	4770      	bx	lr

08026850 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8026850:	b580      	push	{r7, lr}
 8026852:	b082      	sub	sp, #8
 8026854:	af00      	add	r7, sp, #0
 8026856:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8026858:	6878      	ldr	r0, [r7, #4]
 802685a:	f001 fb87 	bl	8027f6c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 802685e:	2101      	movs	r1, #1
 8026860:	6878      	ldr	r0, [r7, #4]
 8026862:	f001 fca0 	bl	80281a6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8026866:	2300      	movs	r3, #0
}
 8026868:	4618      	mov	r0, r3
 802686a:	3708      	adds	r7, #8
 802686c:	46bd      	mov	sp, r7
 802686e:	bd80      	pop	{r7, pc}

08026870 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8026870:	b580      	push	{r7, lr}
 8026872:	b088      	sub	sp, #32
 8026874:	af04      	add	r7, sp, #16
 8026876:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8026878:	2302      	movs	r3, #2
 802687a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 802687c:	2300      	movs	r3, #0
 802687e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8026880:	687b      	ldr	r3, [r7, #4]
 8026882:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8026886:	b2db      	uxtb	r3, r3
 8026888:	2b01      	cmp	r3, #1
 802688a:	d102      	bne.n	8026892 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 802688c:	687b      	ldr	r3, [r7, #4]
 802688e:	2203      	movs	r2, #3
 8026890:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8026892:	687b      	ldr	r3, [r7, #4]
 8026894:	781b      	ldrb	r3, [r3, #0]
 8026896:	b2db      	uxtb	r3, r3
 8026898:	2b0b      	cmp	r3, #11
 802689a:	f200 81b3 	bhi.w	8026c04 <USBH_Process+0x394>
 802689e:	a201      	add	r2, pc, #4	; (adr r2, 80268a4 <USBH_Process+0x34>)
 80268a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80268a4:	080268d5 	.word	0x080268d5
 80268a8:	08026907 	.word	0x08026907
 80268ac:	0802696f 	.word	0x0802696f
 80268b0:	08026b9f 	.word	0x08026b9f
 80268b4:	08026c05 	.word	0x08026c05
 80268b8:	08026a13 	.word	0x08026a13
 80268bc:	08026b45 	.word	0x08026b45
 80268c0:	08026a49 	.word	0x08026a49
 80268c4:	08026a69 	.word	0x08026a69
 80268c8:	08026a89 	.word	0x08026a89
 80268cc:	08026ab7 	.word	0x08026ab7
 80268d0:	08026b87 	.word	0x08026b87
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80268d4:	687b      	ldr	r3, [r7, #4]
 80268d6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80268da:	b2db      	uxtb	r3, r3
 80268dc:	2b00      	cmp	r3, #0
 80268de:	f000 8193 	beq.w	8026c08 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80268e2:	687b      	ldr	r3, [r7, #4]
 80268e4:	2201      	movs	r2, #1
 80268e6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80268e8:	20c8      	movs	r0, #200	; 0xc8
 80268ea:	f001 fca3 	bl	8028234 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80268ee:	6878      	ldr	r0, [r7, #4]
 80268f0:	f001 fb99 	bl	8028026 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80268f4:	687b      	ldr	r3, [r7, #4]
 80268f6:	2200      	movs	r2, #0
 80268f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80268fc:	687b      	ldr	r3, [r7, #4]
 80268fe:	2200      	movs	r2, #0
 8026900:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8026904:	e180      	b.n	8026c08 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8026906:	687b      	ldr	r3, [r7, #4]
 8026908:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 802690c:	2b01      	cmp	r3, #1
 802690e:	d107      	bne.n	8026920 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8026910:	687b      	ldr	r3, [r7, #4]
 8026912:	2200      	movs	r2, #0
 8026914:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8026918:	687b      	ldr	r3, [r7, #4]
 802691a:	2202      	movs	r2, #2
 802691c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 802691e:	e182      	b.n	8026c26 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8026920:	687b      	ldr	r3, [r7, #4]
 8026922:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8026926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802692a:	d914      	bls.n	8026956 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 802692c:	687b      	ldr	r3, [r7, #4]
 802692e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8026932:	3301      	adds	r3, #1
 8026934:	b2da      	uxtb	r2, r3
 8026936:	687b      	ldr	r3, [r7, #4]
 8026938:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 802693c:	687b      	ldr	r3, [r7, #4]
 802693e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8026942:	2b03      	cmp	r3, #3
 8026944:	d903      	bls.n	802694e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8026946:	687b      	ldr	r3, [r7, #4]
 8026948:	220d      	movs	r2, #13
 802694a:	701a      	strb	r2, [r3, #0]
      break;
 802694c:	e16b      	b.n	8026c26 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 802694e:	687b      	ldr	r3, [r7, #4]
 8026950:	2200      	movs	r2, #0
 8026952:	701a      	strb	r2, [r3, #0]
      break;
 8026954:	e167      	b.n	8026c26 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8026956:	687b      	ldr	r3, [r7, #4]
 8026958:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802695c:	f103 020a 	add.w	r2, r3, #10
 8026960:	687b      	ldr	r3, [r7, #4]
 8026962:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8026966:	200a      	movs	r0, #10
 8026968:	f001 fc64 	bl	8028234 <USBH_Delay>
      break;
 802696c:	e15b      	b.n	8026c26 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 802696e:	687b      	ldr	r3, [r7, #4]
 8026970:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8026974:	2b00      	cmp	r3, #0
 8026976:	d005      	beq.n	8026984 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8026978:	687b      	ldr	r3, [r7, #4]
 802697a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802697e:	2104      	movs	r1, #4
 8026980:	6878      	ldr	r0, [r7, #4]
 8026982:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8026984:	2064      	movs	r0, #100	; 0x64
 8026986:	f001 fc55 	bl	8028234 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 802698a:	6878      	ldr	r0, [r7, #4]
 802698c:	f001 fb24 	bl	8027fd8 <USBH_LL_GetSpeed>
 8026990:	4603      	mov	r3, r0
 8026992:	461a      	mov	r2, r3
 8026994:	687b      	ldr	r3, [r7, #4]
 8026996:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 802699a:	687b      	ldr	r3, [r7, #4]
 802699c:	2205      	movs	r2, #5
 802699e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80269a0:	2100      	movs	r1, #0
 80269a2:	6878      	ldr	r0, [r7, #4]
 80269a4:	f001 f92f 	bl	8027c06 <USBH_AllocPipe>
 80269a8:	4603      	mov	r3, r0
 80269aa:	461a      	mov	r2, r3
 80269ac:	687b      	ldr	r3, [r7, #4]
 80269ae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80269b0:	2180      	movs	r1, #128	; 0x80
 80269b2:	6878      	ldr	r0, [r7, #4]
 80269b4:	f001 f927 	bl	8027c06 <USBH_AllocPipe>
 80269b8:	4603      	mov	r3, r0
 80269ba:	461a      	mov	r2, r3
 80269bc:	687b      	ldr	r3, [r7, #4]
 80269be:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80269c0:	687b      	ldr	r3, [r7, #4]
 80269c2:	7919      	ldrb	r1, [r3, #4]
 80269c4:	687b      	ldr	r3, [r7, #4]
 80269c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80269ca:	687b      	ldr	r3, [r7, #4]
 80269cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80269d0:	687a      	ldr	r2, [r7, #4]
 80269d2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80269d4:	b292      	uxth	r2, r2
 80269d6:	9202      	str	r2, [sp, #8]
 80269d8:	2200      	movs	r2, #0
 80269da:	9201      	str	r2, [sp, #4]
 80269dc:	9300      	str	r3, [sp, #0]
 80269de:	4603      	mov	r3, r0
 80269e0:	2280      	movs	r2, #128	; 0x80
 80269e2:	6878      	ldr	r0, [r7, #4]
 80269e4:	f001 f8e0 	bl	8027ba8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80269e8:	687b      	ldr	r3, [r7, #4]
 80269ea:	7959      	ldrb	r1, [r3, #5]
 80269ec:	687b      	ldr	r3, [r7, #4]
 80269ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80269f2:	687b      	ldr	r3, [r7, #4]
 80269f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80269f8:	687a      	ldr	r2, [r7, #4]
 80269fa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80269fc:	b292      	uxth	r2, r2
 80269fe:	9202      	str	r2, [sp, #8]
 8026a00:	2200      	movs	r2, #0
 8026a02:	9201      	str	r2, [sp, #4]
 8026a04:	9300      	str	r3, [sp, #0]
 8026a06:	4603      	mov	r3, r0
 8026a08:	2200      	movs	r2, #0
 8026a0a:	6878      	ldr	r0, [r7, #4]
 8026a0c:	f001 f8cc 	bl	8027ba8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8026a10:	e109      	b.n	8026c26 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8026a12:	6878      	ldr	r0, [r7, #4]
 8026a14:	f000 f90c 	bl	8026c30 <USBH_HandleEnum>
 8026a18:	4603      	mov	r3, r0
 8026a1a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8026a1c:	7bbb      	ldrb	r3, [r7, #14]
 8026a1e:	b2db      	uxtb	r3, r3
 8026a20:	2b00      	cmp	r3, #0
 8026a22:	f040 80f3 	bne.w	8026c0c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8026a26:	687b      	ldr	r3, [r7, #4]
 8026a28:	2200      	movs	r2, #0
 8026a2a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8026a2e:	687b      	ldr	r3, [r7, #4]
 8026a30:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8026a34:	2b01      	cmp	r3, #1
 8026a36:	d103      	bne.n	8026a40 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8026a38:	687b      	ldr	r3, [r7, #4]
 8026a3a:	2208      	movs	r2, #8
 8026a3c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8026a3e:	e0e5      	b.n	8026c0c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8026a40:	687b      	ldr	r3, [r7, #4]
 8026a42:	2207      	movs	r2, #7
 8026a44:	701a      	strb	r2, [r3, #0]
      break;
 8026a46:	e0e1      	b.n	8026c0c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8026a48:	687b      	ldr	r3, [r7, #4]
 8026a4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8026a4e:	2b00      	cmp	r3, #0
 8026a50:	f000 80de 	beq.w	8026c10 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8026a54:	687b      	ldr	r3, [r7, #4]
 8026a56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8026a5a:	2101      	movs	r1, #1
 8026a5c:	6878      	ldr	r0, [r7, #4]
 8026a5e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8026a60:	687b      	ldr	r3, [r7, #4]
 8026a62:	2208      	movs	r2, #8
 8026a64:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8026a66:	e0d3      	b.n	8026c10 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8026a68:	687b      	ldr	r3, [r7, #4]
 8026a6a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8026a6e:	b29b      	uxth	r3, r3
 8026a70:	4619      	mov	r1, r3
 8026a72:	6878      	ldr	r0, [r7, #4]
 8026a74:	f000 fc20 	bl	80272b8 <USBH_SetCfg>
 8026a78:	4603      	mov	r3, r0
 8026a7a:	2b00      	cmp	r3, #0
 8026a7c:	f040 80ca 	bne.w	8026c14 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8026a80:	687b      	ldr	r3, [r7, #4]
 8026a82:	2209      	movs	r2, #9
 8026a84:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8026a86:	e0c5      	b.n	8026c14 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8026a88:	687b      	ldr	r3, [r7, #4]
 8026a8a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8026a8e:	f003 0320 	and.w	r3, r3, #32
 8026a92:	2b00      	cmp	r3, #0
 8026a94:	d00b      	beq.n	8026aae <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8026a96:	2101      	movs	r1, #1
 8026a98:	6878      	ldr	r0, [r7, #4]
 8026a9a:	f000 fc30 	bl	80272fe <USBH_SetFeature>
 8026a9e:	4603      	mov	r3, r0
 8026aa0:	2b00      	cmp	r3, #0
 8026aa2:	f040 80b9 	bne.w	8026c18 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8026aa6:	687b      	ldr	r3, [r7, #4]
 8026aa8:	220a      	movs	r2, #10
 8026aaa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8026aac:	e0b4      	b.n	8026c18 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8026aae:	687b      	ldr	r3, [r7, #4]
 8026ab0:	220a      	movs	r2, #10
 8026ab2:	701a      	strb	r2, [r3, #0]
      break;
 8026ab4:	e0b0      	b.n	8026c18 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8026ab6:	687b      	ldr	r3, [r7, #4]
 8026ab8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8026abc:	2b00      	cmp	r3, #0
 8026abe:	f000 80ad 	beq.w	8026c1c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8026ac2:	687b      	ldr	r3, [r7, #4]
 8026ac4:	2200      	movs	r2, #0
 8026ac6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8026aca:	2300      	movs	r3, #0
 8026acc:	73fb      	strb	r3, [r7, #15]
 8026ace:	e016      	b.n	8026afe <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8026ad0:	7bfa      	ldrb	r2, [r7, #15]
 8026ad2:	687b      	ldr	r3, [r7, #4]
 8026ad4:	32de      	adds	r2, #222	; 0xde
 8026ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8026ada:	791a      	ldrb	r2, [r3, #4]
 8026adc:	687b      	ldr	r3, [r7, #4]
 8026ade:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8026ae2:	429a      	cmp	r2, r3
 8026ae4:	d108      	bne.n	8026af8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8026ae6:	7bfa      	ldrb	r2, [r7, #15]
 8026ae8:	687b      	ldr	r3, [r7, #4]
 8026aea:	32de      	adds	r2, #222	; 0xde
 8026aec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026af0:	687b      	ldr	r3, [r7, #4]
 8026af2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8026af6:	e005      	b.n	8026b04 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8026af8:	7bfb      	ldrb	r3, [r7, #15]
 8026afa:	3301      	adds	r3, #1
 8026afc:	73fb      	strb	r3, [r7, #15]
 8026afe:	7bfb      	ldrb	r3, [r7, #15]
 8026b00:	2b00      	cmp	r3, #0
 8026b02:	d0e5      	beq.n	8026ad0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8026b04:	687b      	ldr	r3, [r7, #4]
 8026b06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8026b0a:	2b00      	cmp	r3, #0
 8026b0c:	d016      	beq.n	8026b3c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8026b0e:	687b      	ldr	r3, [r7, #4]
 8026b10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8026b14:	689b      	ldr	r3, [r3, #8]
 8026b16:	6878      	ldr	r0, [r7, #4]
 8026b18:	4798      	blx	r3
 8026b1a:	4603      	mov	r3, r0
 8026b1c:	2b00      	cmp	r3, #0
 8026b1e:	d109      	bne.n	8026b34 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8026b20:	687b      	ldr	r3, [r7, #4]
 8026b22:	2206      	movs	r2, #6
 8026b24:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8026b26:	687b      	ldr	r3, [r7, #4]
 8026b28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8026b2c:	2103      	movs	r1, #3
 8026b2e:	6878      	ldr	r0, [r7, #4]
 8026b30:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8026b32:	e073      	b.n	8026c1c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8026b34:	687b      	ldr	r3, [r7, #4]
 8026b36:	220d      	movs	r2, #13
 8026b38:	701a      	strb	r2, [r3, #0]
      break;
 8026b3a:	e06f      	b.n	8026c1c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8026b3c:	687b      	ldr	r3, [r7, #4]
 8026b3e:	220d      	movs	r2, #13
 8026b40:	701a      	strb	r2, [r3, #0]
      break;
 8026b42:	e06b      	b.n	8026c1c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8026b44:	687b      	ldr	r3, [r7, #4]
 8026b46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8026b4a:	2b00      	cmp	r3, #0
 8026b4c:	d017      	beq.n	8026b7e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8026b4e:	687b      	ldr	r3, [r7, #4]
 8026b50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8026b54:	691b      	ldr	r3, [r3, #16]
 8026b56:	6878      	ldr	r0, [r7, #4]
 8026b58:	4798      	blx	r3
 8026b5a:	4603      	mov	r3, r0
 8026b5c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8026b5e:	7bbb      	ldrb	r3, [r7, #14]
 8026b60:	b2db      	uxtb	r3, r3
 8026b62:	2b00      	cmp	r3, #0
 8026b64:	d103      	bne.n	8026b6e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8026b66:	687b      	ldr	r3, [r7, #4]
 8026b68:	220b      	movs	r2, #11
 8026b6a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8026b6c:	e058      	b.n	8026c20 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8026b6e:	7bbb      	ldrb	r3, [r7, #14]
 8026b70:	b2db      	uxtb	r3, r3
 8026b72:	2b02      	cmp	r3, #2
 8026b74:	d154      	bne.n	8026c20 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8026b76:	687b      	ldr	r3, [r7, #4]
 8026b78:	220d      	movs	r2, #13
 8026b7a:	701a      	strb	r2, [r3, #0]
      break;
 8026b7c:	e050      	b.n	8026c20 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8026b7e:	687b      	ldr	r3, [r7, #4]
 8026b80:	220d      	movs	r2, #13
 8026b82:	701a      	strb	r2, [r3, #0]
      break;
 8026b84:	e04c      	b.n	8026c20 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8026b86:	687b      	ldr	r3, [r7, #4]
 8026b88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8026b8c:	2b00      	cmp	r3, #0
 8026b8e:	d049      	beq.n	8026c24 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8026b90:	687b      	ldr	r3, [r7, #4]
 8026b92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8026b96:	695b      	ldr	r3, [r3, #20]
 8026b98:	6878      	ldr	r0, [r7, #4]
 8026b9a:	4798      	blx	r3
      }
      break;
 8026b9c:	e042      	b.n	8026c24 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8026b9e:	687b      	ldr	r3, [r7, #4]
 8026ba0:	2200      	movs	r2, #0
 8026ba2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8026ba6:	6878      	ldr	r0, [r7, #4]
 8026ba8:	f7ff fd72 	bl	8026690 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8026bac:	687b      	ldr	r3, [r7, #4]
 8026bae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8026bb2:	2b00      	cmp	r3, #0
 8026bb4:	d009      	beq.n	8026bca <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8026bb6:	687b      	ldr	r3, [r7, #4]
 8026bb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8026bbc:	68db      	ldr	r3, [r3, #12]
 8026bbe:	6878      	ldr	r0, [r7, #4]
 8026bc0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8026bc2:	687b      	ldr	r3, [r7, #4]
 8026bc4:	2200      	movs	r2, #0
 8026bc6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8026bca:	687b      	ldr	r3, [r7, #4]
 8026bcc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8026bd0:	2b00      	cmp	r3, #0
 8026bd2:	d005      	beq.n	8026be0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8026bd4:	687b      	ldr	r3, [r7, #4]
 8026bd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8026bda:	2105      	movs	r1, #5
 8026bdc:	6878      	ldr	r0, [r7, #4]
 8026bde:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8026be0:	687b      	ldr	r3, [r7, #4]
 8026be2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8026be6:	b2db      	uxtb	r3, r3
 8026be8:	2b01      	cmp	r3, #1
 8026bea:	d107      	bne.n	8026bfc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8026bec:	687b      	ldr	r3, [r7, #4]
 8026bee:	2200      	movs	r2, #0
 8026bf0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8026bf4:	6878      	ldr	r0, [r7, #4]
 8026bf6:	f7ff fe2b 	bl	8026850 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8026bfa:	e014      	b.n	8026c26 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8026bfc:	6878      	ldr	r0, [r7, #4]
 8026bfe:	f001 f9b5 	bl	8027f6c <USBH_LL_Start>
      break;
 8026c02:	e010      	b.n	8026c26 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8026c04:	bf00      	nop
 8026c06:	e00e      	b.n	8026c26 <USBH_Process+0x3b6>
      break;
 8026c08:	bf00      	nop
 8026c0a:	e00c      	b.n	8026c26 <USBH_Process+0x3b6>
      break;
 8026c0c:	bf00      	nop
 8026c0e:	e00a      	b.n	8026c26 <USBH_Process+0x3b6>
    break;
 8026c10:	bf00      	nop
 8026c12:	e008      	b.n	8026c26 <USBH_Process+0x3b6>
      break;
 8026c14:	bf00      	nop
 8026c16:	e006      	b.n	8026c26 <USBH_Process+0x3b6>
      break;
 8026c18:	bf00      	nop
 8026c1a:	e004      	b.n	8026c26 <USBH_Process+0x3b6>
      break;
 8026c1c:	bf00      	nop
 8026c1e:	e002      	b.n	8026c26 <USBH_Process+0x3b6>
      break;
 8026c20:	bf00      	nop
 8026c22:	e000      	b.n	8026c26 <USBH_Process+0x3b6>
      break;
 8026c24:	bf00      	nop
  }
  return USBH_OK;
 8026c26:	2300      	movs	r3, #0
}
 8026c28:	4618      	mov	r0, r3
 8026c2a:	3710      	adds	r7, #16
 8026c2c:	46bd      	mov	sp, r7
 8026c2e:	bd80      	pop	{r7, pc}

08026c30 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8026c30:	b580      	push	{r7, lr}
 8026c32:	b088      	sub	sp, #32
 8026c34:	af04      	add	r7, sp, #16
 8026c36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8026c38:	2301      	movs	r3, #1
 8026c3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8026c3c:	2301      	movs	r3, #1
 8026c3e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8026c40:	687b      	ldr	r3, [r7, #4]
 8026c42:	785b      	ldrb	r3, [r3, #1]
 8026c44:	2b07      	cmp	r3, #7
 8026c46:	f200 81c1 	bhi.w	8026fcc <USBH_HandleEnum+0x39c>
 8026c4a:	a201      	add	r2, pc, #4	; (adr r2, 8026c50 <USBH_HandleEnum+0x20>)
 8026c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026c50:	08026c71 	.word	0x08026c71
 8026c54:	08026d2f 	.word	0x08026d2f
 8026c58:	08026d99 	.word	0x08026d99
 8026c5c:	08026e27 	.word	0x08026e27
 8026c60:	08026e91 	.word	0x08026e91
 8026c64:	08026f01 	.word	0x08026f01
 8026c68:	08026f47 	.word	0x08026f47
 8026c6c:	08026f8d 	.word	0x08026f8d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8026c70:	2108      	movs	r1, #8
 8026c72:	6878      	ldr	r0, [r7, #4]
 8026c74:	f000 fa50 	bl	8027118 <USBH_Get_DevDesc>
 8026c78:	4603      	mov	r3, r0
 8026c7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8026c7c:	7bbb      	ldrb	r3, [r7, #14]
 8026c7e:	2b00      	cmp	r3, #0
 8026c80:	d130      	bne.n	8026ce4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8026c82:	687b      	ldr	r3, [r7, #4]
 8026c84:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8026c88:	687b      	ldr	r3, [r7, #4]
 8026c8a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8026c8c:	687b      	ldr	r3, [r7, #4]
 8026c8e:	2201      	movs	r2, #1
 8026c90:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8026c92:	687b      	ldr	r3, [r7, #4]
 8026c94:	7919      	ldrb	r1, [r3, #4]
 8026c96:	687b      	ldr	r3, [r7, #4]
 8026c98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8026c9c:	687b      	ldr	r3, [r7, #4]
 8026c9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8026ca2:	687a      	ldr	r2, [r7, #4]
 8026ca4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8026ca6:	b292      	uxth	r2, r2
 8026ca8:	9202      	str	r2, [sp, #8]
 8026caa:	2200      	movs	r2, #0
 8026cac:	9201      	str	r2, [sp, #4]
 8026cae:	9300      	str	r3, [sp, #0]
 8026cb0:	4603      	mov	r3, r0
 8026cb2:	2280      	movs	r2, #128	; 0x80
 8026cb4:	6878      	ldr	r0, [r7, #4]
 8026cb6:	f000 ff77 	bl	8027ba8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8026cba:	687b      	ldr	r3, [r7, #4]
 8026cbc:	7959      	ldrb	r1, [r3, #5]
 8026cbe:	687b      	ldr	r3, [r7, #4]
 8026cc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8026cc4:	687b      	ldr	r3, [r7, #4]
 8026cc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8026cca:	687a      	ldr	r2, [r7, #4]
 8026ccc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8026cce:	b292      	uxth	r2, r2
 8026cd0:	9202      	str	r2, [sp, #8]
 8026cd2:	2200      	movs	r2, #0
 8026cd4:	9201      	str	r2, [sp, #4]
 8026cd6:	9300      	str	r3, [sp, #0]
 8026cd8:	4603      	mov	r3, r0
 8026cda:	2200      	movs	r2, #0
 8026cdc:	6878      	ldr	r0, [r7, #4]
 8026cde:	f000 ff63 	bl	8027ba8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8026ce2:	e175      	b.n	8026fd0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8026ce4:	7bbb      	ldrb	r3, [r7, #14]
 8026ce6:	2b03      	cmp	r3, #3
 8026ce8:	f040 8172 	bne.w	8026fd0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8026cec:	687b      	ldr	r3, [r7, #4]
 8026cee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8026cf2:	3301      	adds	r3, #1
 8026cf4:	b2da      	uxtb	r2, r3
 8026cf6:	687b      	ldr	r3, [r7, #4]
 8026cf8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8026cfc:	687b      	ldr	r3, [r7, #4]
 8026cfe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8026d02:	2b03      	cmp	r3, #3
 8026d04:	d903      	bls.n	8026d0e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8026d06:	687b      	ldr	r3, [r7, #4]
 8026d08:	220d      	movs	r2, #13
 8026d0a:	701a      	strb	r2, [r3, #0]
      break;
 8026d0c:	e160      	b.n	8026fd0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8026d0e:	687b      	ldr	r3, [r7, #4]
 8026d10:	795b      	ldrb	r3, [r3, #5]
 8026d12:	4619      	mov	r1, r3
 8026d14:	6878      	ldr	r0, [r7, #4]
 8026d16:	f000 ff97 	bl	8027c48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8026d1a:	687b      	ldr	r3, [r7, #4]
 8026d1c:	791b      	ldrb	r3, [r3, #4]
 8026d1e:	4619      	mov	r1, r3
 8026d20:	6878      	ldr	r0, [r7, #4]
 8026d22:	f000 ff91 	bl	8027c48 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8026d26:	687b      	ldr	r3, [r7, #4]
 8026d28:	2200      	movs	r2, #0
 8026d2a:	701a      	strb	r2, [r3, #0]
      break;
 8026d2c:	e150      	b.n	8026fd0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8026d2e:	2112      	movs	r1, #18
 8026d30:	6878      	ldr	r0, [r7, #4]
 8026d32:	f000 f9f1 	bl	8027118 <USBH_Get_DevDesc>
 8026d36:	4603      	mov	r3, r0
 8026d38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8026d3a:	7bbb      	ldrb	r3, [r7, #14]
 8026d3c:	2b00      	cmp	r3, #0
 8026d3e:	d103      	bne.n	8026d48 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8026d40:	687b      	ldr	r3, [r7, #4]
 8026d42:	2202      	movs	r2, #2
 8026d44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8026d46:	e145      	b.n	8026fd4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8026d48:	7bbb      	ldrb	r3, [r7, #14]
 8026d4a:	2b03      	cmp	r3, #3
 8026d4c:	f040 8142 	bne.w	8026fd4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8026d50:	687b      	ldr	r3, [r7, #4]
 8026d52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8026d56:	3301      	adds	r3, #1
 8026d58:	b2da      	uxtb	r2, r3
 8026d5a:	687b      	ldr	r3, [r7, #4]
 8026d5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8026d60:	687b      	ldr	r3, [r7, #4]
 8026d62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8026d66:	2b03      	cmp	r3, #3
 8026d68:	d903      	bls.n	8026d72 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8026d6a:	687b      	ldr	r3, [r7, #4]
 8026d6c:	220d      	movs	r2, #13
 8026d6e:	701a      	strb	r2, [r3, #0]
      break;
 8026d70:	e130      	b.n	8026fd4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8026d72:	687b      	ldr	r3, [r7, #4]
 8026d74:	795b      	ldrb	r3, [r3, #5]
 8026d76:	4619      	mov	r1, r3
 8026d78:	6878      	ldr	r0, [r7, #4]
 8026d7a:	f000 ff65 	bl	8027c48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8026d7e:	687b      	ldr	r3, [r7, #4]
 8026d80:	791b      	ldrb	r3, [r3, #4]
 8026d82:	4619      	mov	r1, r3
 8026d84:	6878      	ldr	r0, [r7, #4]
 8026d86:	f000 ff5f 	bl	8027c48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8026d8a:	687b      	ldr	r3, [r7, #4]
 8026d8c:	2200      	movs	r2, #0
 8026d8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8026d90:	687b      	ldr	r3, [r7, #4]
 8026d92:	2200      	movs	r2, #0
 8026d94:	701a      	strb	r2, [r3, #0]
      break;
 8026d96:	e11d      	b.n	8026fd4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8026d98:	2101      	movs	r1, #1
 8026d9a:	6878      	ldr	r0, [r7, #4]
 8026d9c:	f000 fa68 	bl	8027270 <USBH_SetAddress>
 8026da0:	4603      	mov	r3, r0
 8026da2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8026da4:	7bbb      	ldrb	r3, [r7, #14]
 8026da6:	2b00      	cmp	r3, #0
 8026da8:	d132      	bne.n	8026e10 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8026daa:	2002      	movs	r0, #2
 8026dac:	f001 fa42 	bl	8028234 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8026db0:	687b      	ldr	r3, [r7, #4]
 8026db2:	2201      	movs	r2, #1
 8026db4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8026db8:	687b      	ldr	r3, [r7, #4]
 8026dba:	2203      	movs	r2, #3
 8026dbc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8026dbe:	687b      	ldr	r3, [r7, #4]
 8026dc0:	7919      	ldrb	r1, [r3, #4]
 8026dc2:	687b      	ldr	r3, [r7, #4]
 8026dc4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8026dc8:	687b      	ldr	r3, [r7, #4]
 8026dca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8026dce:	687a      	ldr	r2, [r7, #4]
 8026dd0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8026dd2:	b292      	uxth	r2, r2
 8026dd4:	9202      	str	r2, [sp, #8]
 8026dd6:	2200      	movs	r2, #0
 8026dd8:	9201      	str	r2, [sp, #4]
 8026dda:	9300      	str	r3, [sp, #0]
 8026ddc:	4603      	mov	r3, r0
 8026dde:	2280      	movs	r2, #128	; 0x80
 8026de0:	6878      	ldr	r0, [r7, #4]
 8026de2:	f000 fee1 	bl	8027ba8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8026de6:	687b      	ldr	r3, [r7, #4]
 8026de8:	7959      	ldrb	r1, [r3, #5]
 8026dea:	687b      	ldr	r3, [r7, #4]
 8026dec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8026df0:	687b      	ldr	r3, [r7, #4]
 8026df2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8026df6:	687a      	ldr	r2, [r7, #4]
 8026df8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8026dfa:	b292      	uxth	r2, r2
 8026dfc:	9202      	str	r2, [sp, #8]
 8026dfe:	2200      	movs	r2, #0
 8026e00:	9201      	str	r2, [sp, #4]
 8026e02:	9300      	str	r3, [sp, #0]
 8026e04:	4603      	mov	r3, r0
 8026e06:	2200      	movs	r2, #0
 8026e08:	6878      	ldr	r0, [r7, #4]
 8026e0a:	f000 fecd 	bl	8027ba8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8026e0e:	e0e3      	b.n	8026fd8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8026e10:	7bbb      	ldrb	r3, [r7, #14]
 8026e12:	2b03      	cmp	r3, #3
 8026e14:	f040 80e0 	bne.w	8026fd8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8026e18:	687b      	ldr	r3, [r7, #4]
 8026e1a:	220d      	movs	r2, #13
 8026e1c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8026e1e:	687b      	ldr	r3, [r7, #4]
 8026e20:	2200      	movs	r2, #0
 8026e22:	705a      	strb	r2, [r3, #1]
      break;
 8026e24:	e0d8      	b.n	8026fd8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8026e26:	2109      	movs	r1, #9
 8026e28:	6878      	ldr	r0, [r7, #4]
 8026e2a:	f000 f99d 	bl	8027168 <USBH_Get_CfgDesc>
 8026e2e:	4603      	mov	r3, r0
 8026e30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8026e32:	7bbb      	ldrb	r3, [r7, #14]
 8026e34:	2b00      	cmp	r3, #0
 8026e36:	d103      	bne.n	8026e40 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8026e38:	687b      	ldr	r3, [r7, #4]
 8026e3a:	2204      	movs	r2, #4
 8026e3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8026e3e:	e0cd      	b.n	8026fdc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8026e40:	7bbb      	ldrb	r3, [r7, #14]
 8026e42:	2b03      	cmp	r3, #3
 8026e44:	f040 80ca 	bne.w	8026fdc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8026e48:	687b      	ldr	r3, [r7, #4]
 8026e4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8026e4e:	3301      	adds	r3, #1
 8026e50:	b2da      	uxtb	r2, r3
 8026e52:	687b      	ldr	r3, [r7, #4]
 8026e54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8026e58:	687b      	ldr	r3, [r7, #4]
 8026e5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8026e5e:	2b03      	cmp	r3, #3
 8026e60:	d903      	bls.n	8026e6a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8026e62:	687b      	ldr	r3, [r7, #4]
 8026e64:	220d      	movs	r2, #13
 8026e66:	701a      	strb	r2, [r3, #0]
      break;
 8026e68:	e0b8      	b.n	8026fdc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8026e6a:	687b      	ldr	r3, [r7, #4]
 8026e6c:	795b      	ldrb	r3, [r3, #5]
 8026e6e:	4619      	mov	r1, r3
 8026e70:	6878      	ldr	r0, [r7, #4]
 8026e72:	f000 fee9 	bl	8027c48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8026e76:	687b      	ldr	r3, [r7, #4]
 8026e78:	791b      	ldrb	r3, [r3, #4]
 8026e7a:	4619      	mov	r1, r3
 8026e7c:	6878      	ldr	r0, [r7, #4]
 8026e7e:	f000 fee3 	bl	8027c48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8026e82:	687b      	ldr	r3, [r7, #4]
 8026e84:	2200      	movs	r2, #0
 8026e86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8026e88:	687b      	ldr	r3, [r7, #4]
 8026e8a:	2200      	movs	r2, #0
 8026e8c:	701a      	strb	r2, [r3, #0]
      break;
 8026e8e:	e0a5      	b.n	8026fdc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8026e90:	687b      	ldr	r3, [r7, #4]
 8026e92:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8026e96:	4619      	mov	r1, r3
 8026e98:	6878      	ldr	r0, [r7, #4]
 8026e9a:	f000 f965 	bl	8027168 <USBH_Get_CfgDesc>
 8026e9e:	4603      	mov	r3, r0
 8026ea0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8026ea2:	7bbb      	ldrb	r3, [r7, #14]
 8026ea4:	2b00      	cmp	r3, #0
 8026ea6:	d103      	bne.n	8026eb0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8026ea8:	687b      	ldr	r3, [r7, #4]
 8026eaa:	2205      	movs	r2, #5
 8026eac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8026eae:	e097      	b.n	8026fe0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8026eb0:	7bbb      	ldrb	r3, [r7, #14]
 8026eb2:	2b03      	cmp	r3, #3
 8026eb4:	f040 8094 	bne.w	8026fe0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8026eb8:	687b      	ldr	r3, [r7, #4]
 8026eba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8026ebe:	3301      	adds	r3, #1
 8026ec0:	b2da      	uxtb	r2, r3
 8026ec2:	687b      	ldr	r3, [r7, #4]
 8026ec4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8026ec8:	687b      	ldr	r3, [r7, #4]
 8026eca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8026ece:	2b03      	cmp	r3, #3
 8026ed0:	d903      	bls.n	8026eda <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8026ed2:	687b      	ldr	r3, [r7, #4]
 8026ed4:	220d      	movs	r2, #13
 8026ed6:	701a      	strb	r2, [r3, #0]
      break;
 8026ed8:	e082      	b.n	8026fe0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8026eda:	687b      	ldr	r3, [r7, #4]
 8026edc:	795b      	ldrb	r3, [r3, #5]
 8026ede:	4619      	mov	r1, r3
 8026ee0:	6878      	ldr	r0, [r7, #4]
 8026ee2:	f000 feb1 	bl	8027c48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8026ee6:	687b      	ldr	r3, [r7, #4]
 8026ee8:	791b      	ldrb	r3, [r3, #4]
 8026eea:	4619      	mov	r1, r3
 8026eec:	6878      	ldr	r0, [r7, #4]
 8026eee:	f000 feab 	bl	8027c48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8026ef2:	687b      	ldr	r3, [r7, #4]
 8026ef4:	2200      	movs	r2, #0
 8026ef6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8026ef8:	687b      	ldr	r3, [r7, #4]
 8026efa:	2200      	movs	r2, #0
 8026efc:	701a      	strb	r2, [r3, #0]
      break;
 8026efe:	e06f      	b.n	8026fe0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8026f00:	687b      	ldr	r3, [r7, #4]
 8026f02:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8026f06:	2b00      	cmp	r3, #0
 8026f08:	d019      	beq.n	8026f3e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8026f0a:	687b      	ldr	r3, [r7, #4]
 8026f0c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8026f10:	687b      	ldr	r3, [r7, #4]
 8026f12:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8026f16:	23ff      	movs	r3, #255	; 0xff
 8026f18:	6878      	ldr	r0, [r7, #4]
 8026f1a:	f000 f949 	bl	80271b0 <USBH_Get_StringDesc>
 8026f1e:	4603      	mov	r3, r0
 8026f20:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8026f22:	7bbb      	ldrb	r3, [r7, #14]
 8026f24:	2b00      	cmp	r3, #0
 8026f26:	d103      	bne.n	8026f30 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8026f28:	687b      	ldr	r3, [r7, #4]
 8026f2a:	2206      	movs	r2, #6
 8026f2c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8026f2e:	e059      	b.n	8026fe4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8026f30:	7bbb      	ldrb	r3, [r7, #14]
 8026f32:	2b03      	cmp	r3, #3
 8026f34:	d156      	bne.n	8026fe4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8026f36:	687b      	ldr	r3, [r7, #4]
 8026f38:	2206      	movs	r2, #6
 8026f3a:	705a      	strb	r2, [r3, #1]
      break;
 8026f3c:	e052      	b.n	8026fe4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8026f3e:	687b      	ldr	r3, [r7, #4]
 8026f40:	2206      	movs	r2, #6
 8026f42:	705a      	strb	r2, [r3, #1]
      break;
 8026f44:	e04e      	b.n	8026fe4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8026f46:	687b      	ldr	r3, [r7, #4]
 8026f48:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8026f4c:	2b00      	cmp	r3, #0
 8026f4e:	d019      	beq.n	8026f84 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8026f50:	687b      	ldr	r3, [r7, #4]
 8026f52:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8026f56:	687b      	ldr	r3, [r7, #4]
 8026f58:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8026f5c:	23ff      	movs	r3, #255	; 0xff
 8026f5e:	6878      	ldr	r0, [r7, #4]
 8026f60:	f000 f926 	bl	80271b0 <USBH_Get_StringDesc>
 8026f64:	4603      	mov	r3, r0
 8026f66:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8026f68:	7bbb      	ldrb	r3, [r7, #14]
 8026f6a:	2b00      	cmp	r3, #0
 8026f6c:	d103      	bne.n	8026f76 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8026f6e:	687b      	ldr	r3, [r7, #4]
 8026f70:	2207      	movs	r2, #7
 8026f72:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8026f74:	e038      	b.n	8026fe8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8026f76:	7bbb      	ldrb	r3, [r7, #14]
 8026f78:	2b03      	cmp	r3, #3
 8026f7a:	d135      	bne.n	8026fe8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8026f7c:	687b      	ldr	r3, [r7, #4]
 8026f7e:	2207      	movs	r2, #7
 8026f80:	705a      	strb	r2, [r3, #1]
      break;
 8026f82:	e031      	b.n	8026fe8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8026f84:	687b      	ldr	r3, [r7, #4]
 8026f86:	2207      	movs	r2, #7
 8026f88:	705a      	strb	r2, [r3, #1]
      break;
 8026f8a:	e02d      	b.n	8026fe8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8026f8c:	687b      	ldr	r3, [r7, #4]
 8026f8e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8026f92:	2b00      	cmp	r3, #0
 8026f94:	d017      	beq.n	8026fc6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8026f96:	687b      	ldr	r3, [r7, #4]
 8026f98:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8026f9c:	687b      	ldr	r3, [r7, #4]
 8026f9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8026fa2:	23ff      	movs	r3, #255	; 0xff
 8026fa4:	6878      	ldr	r0, [r7, #4]
 8026fa6:	f000 f903 	bl	80271b0 <USBH_Get_StringDesc>
 8026faa:	4603      	mov	r3, r0
 8026fac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8026fae:	7bbb      	ldrb	r3, [r7, #14]
 8026fb0:	2b00      	cmp	r3, #0
 8026fb2:	d102      	bne.n	8026fba <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8026fb4:	2300      	movs	r3, #0
 8026fb6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8026fb8:	e018      	b.n	8026fec <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8026fba:	7bbb      	ldrb	r3, [r7, #14]
 8026fbc:	2b03      	cmp	r3, #3
 8026fbe:	d115      	bne.n	8026fec <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8026fc0:	2300      	movs	r3, #0
 8026fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8026fc4:	e012      	b.n	8026fec <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8026fc6:	2300      	movs	r3, #0
 8026fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8026fca:	e00f      	b.n	8026fec <USBH_HandleEnum+0x3bc>

    default:
      break;
 8026fcc:	bf00      	nop
 8026fce:	e00e      	b.n	8026fee <USBH_HandleEnum+0x3be>
      break;
 8026fd0:	bf00      	nop
 8026fd2:	e00c      	b.n	8026fee <USBH_HandleEnum+0x3be>
      break;
 8026fd4:	bf00      	nop
 8026fd6:	e00a      	b.n	8026fee <USBH_HandleEnum+0x3be>
      break;
 8026fd8:	bf00      	nop
 8026fda:	e008      	b.n	8026fee <USBH_HandleEnum+0x3be>
      break;
 8026fdc:	bf00      	nop
 8026fde:	e006      	b.n	8026fee <USBH_HandleEnum+0x3be>
      break;
 8026fe0:	bf00      	nop
 8026fe2:	e004      	b.n	8026fee <USBH_HandleEnum+0x3be>
      break;
 8026fe4:	bf00      	nop
 8026fe6:	e002      	b.n	8026fee <USBH_HandleEnum+0x3be>
      break;
 8026fe8:	bf00      	nop
 8026fea:	e000      	b.n	8026fee <USBH_HandleEnum+0x3be>
      break;
 8026fec:	bf00      	nop
  }
  return Status;
 8026fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8026ff0:	4618      	mov	r0, r3
 8026ff2:	3710      	adds	r7, #16
 8026ff4:	46bd      	mov	sp, r7
 8026ff6:	bd80      	pop	{r7, pc}

08026ff8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8026ff8:	b480      	push	{r7}
 8026ffa:	b083      	sub	sp, #12
 8026ffc:	af00      	add	r7, sp, #0
 8026ffe:	6078      	str	r0, [r7, #4]
 8027000:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8027002:	687b      	ldr	r3, [r7, #4]
 8027004:	683a      	ldr	r2, [r7, #0]
 8027006:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 802700a:	bf00      	nop
 802700c:	370c      	adds	r7, #12
 802700e:	46bd      	mov	sp, r7
 8027010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027014:	4770      	bx	lr

08027016 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8027016:	b580      	push	{r7, lr}
 8027018:	b082      	sub	sp, #8
 802701a:	af00      	add	r7, sp, #0
 802701c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 802701e:	687b      	ldr	r3, [r7, #4]
 8027020:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8027024:	1c5a      	adds	r2, r3, #1
 8027026:	687b      	ldr	r3, [r7, #4]
 8027028:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 802702c:	6878      	ldr	r0, [r7, #4]
 802702e:	f000 f804 	bl	802703a <USBH_HandleSof>
}
 8027032:	bf00      	nop
 8027034:	3708      	adds	r7, #8
 8027036:	46bd      	mov	sp, r7
 8027038:	bd80      	pop	{r7, pc}

0802703a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 802703a:	b580      	push	{r7, lr}
 802703c:	b082      	sub	sp, #8
 802703e:	af00      	add	r7, sp, #0
 8027040:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8027042:	687b      	ldr	r3, [r7, #4]
 8027044:	781b      	ldrb	r3, [r3, #0]
 8027046:	b2db      	uxtb	r3, r3
 8027048:	2b0b      	cmp	r3, #11
 802704a:	d10a      	bne.n	8027062 <USBH_HandleSof+0x28>
 802704c:	687b      	ldr	r3, [r7, #4]
 802704e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8027052:	2b00      	cmp	r3, #0
 8027054:	d005      	beq.n	8027062 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8027056:	687b      	ldr	r3, [r7, #4]
 8027058:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802705c:	699b      	ldr	r3, [r3, #24]
 802705e:	6878      	ldr	r0, [r7, #4]
 8027060:	4798      	blx	r3
  }
}
 8027062:	bf00      	nop
 8027064:	3708      	adds	r7, #8
 8027066:	46bd      	mov	sp, r7
 8027068:	bd80      	pop	{r7, pc}

0802706a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 802706a:	b480      	push	{r7}
 802706c:	b083      	sub	sp, #12
 802706e:	af00      	add	r7, sp, #0
 8027070:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8027072:	687b      	ldr	r3, [r7, #4]
 8027074:	2201      	movs	r2, #1
 8027076:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 802707a:	bf00      	nop
}
 802707c:	370c      	adds	r7, #12
 802707e:	46bd      	mov	sp, r7
 8027080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027084:	4770      	bx	lr

08027086 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8027086:	b480      	push	{r7}
 8027088:	b083      	sub	sp, #12
 802708a:	af00      	add	r7, sp, #0
 802708c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 802708e:	687b      	ldr	r3, [r7, #4]
 8027090:	2200      	movs	r2, #0
 8027092:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8027096:	bf00      	nop
}
 8027098:	370c      	adds	r7, #12
 802709a:	46bd      	mov	sp, r7
 802709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270a0:	4770      	bx	lr

080270a2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80270a2:	b480      	push	{r7}
 80270a4:	b083      	sub	sp, #12
 80270a6:	af00      	add	r7, sp, #0
 80270a8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80270aa:	687b      	ldr	r3, [r7, #4]
 80270ac:	2201      	movs	r2, #1
 80270ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80270b2:	687b      	ldr	r3, [r7, #4]
 80270b4:	2200      	movs	r2, #0
 80270b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80270ba:	687b      	ldr	r3, [r7, #4]
 80270bc:	2200      	movs	r2, #0
 80270be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80270c2:	2300      	movs	r3, #0
}
 80270c4:	4618      	mov	r0, r3
 80270c6:	370c      	adds	r7, #12
 80270c8:	46bd      	mov	sp, r7
 80270ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270ce:	4770      	bx	lr

080270d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80270d0:	b580      	push	{r7, lr}
 80270d2:	b082      	sub	sp, #8
 80270d4:	af00      	add	r7, sp, #0
 80270d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80270d8:	687b      	ldr	r3, [r7, #4]
 80270da:	2201      	movs	r2, #1
 80270dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80270e0:	687b      	ldr	r3, [r7, #4]
 80270e2:	2200      	movs	r2, #0
 80270e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80270e8:	687b      	ldr	r3, [r7, #4]
 80270ea:	2200      	movs	r2, #0
 80270ec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80270f0:	6878      	ldr	r0, [r7, #4]
 80270f2:	f000 ff56 	bl	8027fa2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80270f6:	687b      	ldr	r3, [r7, #4]
 80270f8:	791b      	ldrb	r3, [r3, #4]
 80270fa:	4619      	mov	r1, r3
 80270fc:	6878      	ldr	r0, [r7, #4]
 80270fe:	f000 fda3 	bl	8027c48 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8027102:	687b      	ldr	r3, [r7, #4]
 8027104:	795b      	ldrb	r3, [r3, #5]
 8027106:	4619      	mov	r1, r3
 8027108:	6878      	ldr	r0, [r7, #4]
 802710a:	f000 fd9d 	bl	8027c48 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 802710e:	2300      	movs	r3, #0
}
 8027110:	4618      	mov	r0, r3
 8027112:	3708      	adds	r7, #8
 8027114:	46bd      	mov	sp, r7
 8027116:	bd80      	pop	{r7, pc}

08027118 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8027118:	b580      	push	{r7, lr}
 802711a:	b086      	sub	sp, #24
 802711c:	af02      	add	r7, sp, #8
 802711e:	6078      	str	r0, [r7, #4]
 8027120:	460b      	mov	r3, r1
 8027122:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8027124:	687b      	ldr	r3, [r7, #4]
 8027126:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 802712a:	78fb      	ldrb	r3, [r7, #3]
 802712c:	b29b      	uxth	r3, r3
 802712e:	9300      	str	r3, [sp, #0]
 8027130:	4613      	mov	r3, r2
 8027132:	f44f 7280 	mov.w	r2, #256	; 0x100
 8027136:	2100      	movs	r1, #0
 8027138:	6878      	ldr	r0, [r7, #4]
 802713a:	f000 f864 	bl	8027206 <USBH_GetDescriptor>
 802713e:	4603      	mov	r3, r0
 8027140:	73fb      	strb	r3, [r7, #15]
 8027142:	7bfb      	ldrb	r3, [r7, #15]
 8027144:	2b00      	cmp	r3, #0
 8027146:	d10a      	bne.n	802715e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8027148:	687b      	ldr	r3, [r7, #4]
 802714a:	f203 3026 	addw	r0, r3, #806	; 0x326
 802714e:	687b      	ldr	r3, [r7, #4]
 8027150:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8027154:	78fa      	ldrb	r2, [r7, #3]
 8027156:	b292      	uxth	r2, r2
 8027158:	4619      	mov	r1, r3
 802715a:	f000 f918 	bl	802738e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 802715e:	7bfb      	ldrb	r3, [r7, #15]
}
 8027160:	4618      	mov	r0, r3
 8027162:	3710      	adds	r7, #16
 8027164:	46bd      	mov	sp, r7
 8027166:	bd80      	pop	{r7, pc}

08027168 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8027168:	b580      	push	{r7, lr}
 802716a:	b086      	sub	sp, #24
 802716c:	af02      	add	r7, sp, #8
 802716e:	6078      	str	r0, [r7, #4]
 8027170:	460b      	mov	r3, r1
 8027172:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8027174:	687b      	ldr	r3, [r7, #4]
 8027176:	331c      	adds	r3, #28
 8027178:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 802717a:	887b      	ldrh	r3, [r7, #2]
 802717c:	9300      	str	r3, [sp, #0]
 802717e:	68fb      	ldr	r3, [r7, #12]
 8027180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8027184:	2100      	movs	r1, #0
 8027186:	6878      	ldr	r0, [r7, #4]
 8027188:	f000 f83d 	bl	8027206 <USBH_GetDescriptor>
 802718c:	4603      	mov	r3, r0
 802718e:	72fb      	strb	r3, [r7, #11]
 8027190:	7afb      	ldrb	r3, [r7, #11]
 8027192:	2b00      	cmp	r3, #0
 8027194:	d107      	bne.n	80271a6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8027196:	687b      	ldr	r3, [r7, #4]
 8027198:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802719c:	887a      	ldrh	r2, [r7, #2]
 802719e:	68f9      	ldr	r1, [r7, #12]
 80271a0:	4618      	mov	r0, r3
 80271a2:	f000 f964 	bl	802746e <USBH_ParseCfgDesc>
  }

  return status;
 80271a6:	7afb      	ldrb	r3, [r7, #11]
}
 80271a8:	4618      	mov	r0, r3
 80271aa:	3710      	adds	r7, #16
 80271ac:	46bd      	mov	sp, r7
 80271ae:	bd80      	pop	{r7, pc}

080271b0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80271b0:	b580      	push	{r7, lr}
 80271b2:	b088      	sub	sp, #32
 80271b4:	af02      	add	r7, sp, #8
 80271b6:	60f8      	str	r0, [r7, #12]
 80271b8:	607a      	str	r2, [r7, #4]
 80271ba:	461a      	mov	r2, r3
 80271bc:	460b      	mov	r3, r1
 80271be:	72fb      	strb	r3, [r7, #11]
 80271c0:	4613      	mov	r3, r2
 80271c2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80271c4:	7afb      	ldrb	r3, [r7, #11]
 80271c6:	b29b      	uxth	r3, r3
 80271c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80271cc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80271ce:	68fb      	ldr	r3, [r7, #12]
 80271d0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80271d4:	893b      	ldrh	r3, [r7, #8]
 80271d6:	9300      	str	r3, [sp, #0]
 80271d8:	460b      	mov	r3, r1
 80271da:	2100      	movs	r1, #0
 80271dc:	68f8      	ldr	r0, [r7, #12]
 80271de:	f000 f812 	bl	8027206 <USBH_GetDescriptor>
 80271e2:	4603      	mov	r3, r0
 80271e4:	75fb      	strb	r3, [r7, #23]
 80271e6:	7dfb      	ldrb	r3, [r7, #23]
 80271e8:	2b00      	cmp	r3, #0
 80271ea:	d107      	bne.n	80271fc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80271ec:	68fb      	ldr	r3, [r7, #12]
 80271ee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80271f2:	893a      	ldrh	r2, [r7, #8]
 80271f4:	6879      	ldr	r1, [r7, #4]
 80271f6:	4618      	mov	r0, r3
 80271f8:	f000 fa37 	bl	802766a <USBH_ParseStringDesc>
  }

  return status;
 80271fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80271fe:	4618      	mov	r0, r3
 8027200:	3718      	adds	r7, #24
 8027202:	46bd      	mov	sp, r7
 8027204:	bd80      	pop	{r7, pc}

08027206 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8027206:	b580      	push	{r7, lr}
 8027208:	b084      	sub	sp, #16
 802720a:	af00      	add	r7, sp, #0
 802720c:	60f8      	str	r0, [r7, #12]
 802720e:	607b      	str	r3, [r7, #4]
 8027210:	460b      	mov	r3, r1
 8027212:	72fb      	strb	r3, [r7, #11]
 8027214:	4613      	mov	r3, r2
 8027216:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8027218:	68fb      	ldr	r3, [r7, #12]
 802721a:	789b      	ldrb	r3, [r3, #2]
 802721c:	2b01      	cmp	r3, #1
 802721e:	d11c      	bne.n	802725a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8027220:	7afb      	ldrb	r3, [r7, #11]
 8027222:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8027226:	b2da      	uxtb	r2, r3
 8027228:	68fb      	ldr	r3, [r7, #12]
 802722a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 802722c:	68fb      	ldr	r3, [r7, #12]
 802722e:	2206      	movs	r2, #6
 8027230:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8027232:	68fb      	ldr	r3, [r7, #12]
 8027234:	893a      	ldrh	r2, [r7, #8]
 8027236:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8027238:	893b      	ldrh	r3, [r7, #8]
 802723a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802723e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8027242:	d104      	bne.n	802724e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8027244:	68fb      	ldr	r3, [r7, #12]
 8027246:	f240 4209 	movw	r2, #1033	; 0x409
 802724a:	829a      	strh	r2, [r3, #20]
 802724c:	e002      	b.n	8027254 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 802724e:	68fb      	ldr	r3, [r7, #12]
 8027250:	2200      	movs	r2, #0
 8027252:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8027254:	68fb      	ldr	r3, [r7, #12]
 8027256:	8b3a      	ldrh	r2, [r7, #24]
 8027258:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 802725a:	8b3b      	ldrh	r3, [r7, #24]
 802725c:	461a      	mov	r2, r3
 802725e:	6879      	ldr	r1, [r7, #4]
 8027260:	68f8      	ldr	r0, [r7, #12]
 8027262:	f000 fa50 	bl	8027706 <USBH_CtlReq>
 8027266:	4603      	mov	r3, r0
}
 8027268:	4618      	mov	r0, r3
 802726a:	3710      	adds	r7, #16
 802726c:	46bd      	mov	sp, r7
 802726e:	bd80      	pop	{r7, pc}

08027270 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8027270:	b580      	push	{r7, lr}
 8027272:	b082      	sub	sp, #8
 8027274:	af00      	add	r7, sp, #0
 8027276:	6078      	str	r0, [r7, #4]
 8027278:	460b      	mov	r3, r1
 802727a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802727c:	687b      	ldr	r3, [r7, #4]
 802727e:	789b      	ldrb	r3, [r3, #2]
 8027280:	2b01      	cmp	r3, #1
 8027282:	d10f      	bne.n	80272a4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8027284:	687b      	ldr	r3, [r7, #4]
 8027286:	2200      	movs	r2, #0
 8027288:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 802728a:	687b      	ldr	r3, [r7, #4]
 802728c:	2205      	movs	r2, #5
 802728e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8027290:	78fb      	ldrb	r3, [r7, #3]
 8027292:	b29a      	uxth	r2, r3
 8027294:	687b      	ldr	r3, [r7, #4]
 8027296:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8027298:	687b      	ldr	r3, [r7, #4]
 802729a:	2200      	movs	r2, #0
 802729c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802729e:	687b      	ldr	r3, [r7, #4]
 80272a0:	2200      	movs	r2, #0
 80272a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80272a4:	2200      	movs	r2, #0
 80272a6:	2100      	movs	r1, #0
 80272a8:	6878      	ldr	r0, [r7, #4]
 80272aa:	f000 fa2c 	bl	8027706 <USBH_CtlReq>
 80272ae:	4603      	mov	r3, r0
}
 80272b0:	4618      	mov	r0, r3
 80272b2:	3708      	adds	r7, #8
 80272b4:	46bd      	mov	sp, r7
 80272b6:	bd80      	pop	{r7, pc}

080272b8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80272b8:	b580      	push	{r7, lr}
 80272ba:	b082      	sub	sp, #8
 80272bc:	af00      	add	r7, sp, #0
 80272be:	6078      	str	r0, [r7, #4]
 80272c0:	460b      	mov	r3, r1
 80272c2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80272c4:	687b      	ldr	r3, [r7, #4]
 80272c6:	789b      	ldrb	r3, [r3, #2]
 80272c8:	2b01      	cmp	r3, #1
 80272ca:	d10e      	bne.n	80272ea <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80272cc:	687b      	ldr	r3, [r7, #4]
 80272ce:	2200      	movs	r2, #0
 80272d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80272d2:	687b      	ldr	r3, [r7, #4]
 80272d4:	2209      	movs	r2, #9
 80272d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80272d8:	687b      	ldr	r3, [r7, #4]
 80272da:	887a      	ldrh	r2, [r7, #2]
 80272dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80272de:	687b      	ldr	r3, [r7, #4]
 80272e0:	2200      	movs	r2, #0
 80272e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80272e4:	687b      	ldr	r3, [r7, #4]
 80272e6:	2200      	movs	r2, #0
 80272e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80272ea:	2200      	movs	r2, #0
 80272ec:	2100      	movs	r1, #0
 80272ee:	6878      	ldr	r0, [r7, #4]
 80272f0:	f000 fa09 	bl	8027706 <USBH_CtlReq>
 80272f4:	4603      	mov	r3, r0
}
 80272f6:	4618      	mov	r0, r3
 80272f8:	3708      	adds	r7, #8
 80272fa:	46bd      	mov	sp, r7
 80272fc:	bd80      	pop	{r7, pc}

080272fe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80272fe:	b580      	push	{r7, lr}
 8027300:	b082      	sub	sp, #8
 8027302:	af00      	add	r7, sp, #0
 8027304:	6078      	str	r0, [r7, #4]
 8027306:	460b      	mov	r3, r1
 8027308:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802730a:	687b      	ldr	r3, [r7, #4]
 802730c:	789b      	ldrb	r3, [r3, #2]
 802730e:	2b01      	cmp	r3, #1
 8027310:	d10f      	bne.n	8027332 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8027312:	687b      	ldr	r3, [r7, #4]
 8027314:	2200      	movs	r2, #0
 8027316:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8027318:	687b      	ldr	r3, [r7, #4]
 802731a:	2203      	movs	r2, #3
 802731c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 802731e:	78fb      	ldrb	r3, [r7, #3]
 8027320:	b29a      	uxth	r2, r3
 8027322:	687b      	ldr	r3, [r7, #4]
 8027324:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8027326:	687b      	ldr	r3, [r7, #4]
 8027328:	2200      	movs	r2, #0
 802732a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802732c:	687b      	ldr	r3, [r7, #4]
 802732e:	2200      	movs	r2, #0
 8027330:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8027332:	2200      	movs	r2, #0
 8027334:	2100      	movs	r1, #0
 8027336:	6878      	ldr	r0, [r7, #4]
 8027338:	f000 f9e5 	bl	8027706 <USBH_CtlReq>
 802733c:	4603      	mov	r3, r0
}
 802733e:	4618      	mov	r0, r3
 8027340:	3708      	adds	r7, #8
 8027342:	46bd      	mov	sp, r7
 8027344:	bd80      	pop	{r7, pc}

08027346 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8027346:	b580      	push	{r7, lr}
 8027348:	b082      	sub	sp, #8
 802734a:	af00      	add	r7, sp, #0
 802734c:	6078      	str	r0, [r7, #4]
 802734e:	460b      	mov	r3, r1
 8027350:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8027352:	687b      	ldr	r3, [r7, #4]
 8027354:	789b      	ldrb	r3, [r3, #2]
 8027356:	2b01      	cmp	r3, #1
 8027358:	d10f      	bne.n	802737a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 802735a:	687b      	ldr	r3, [r7, #4]
 802735c:	2202      	movs	r2, #2
 802735e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8027360:	687b      	ldr	r3, [r7, #4]
 8027362:	2201      	movs	r2, #1
 8027364:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8027366:	687b      	ldr	r3, [r7, #4]
 8027368:	2200      	movs	r2, #0
 802736a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 802736c:	78fb      	ldrb	r3, [r7, #3]
 802736e:	b29a      	uxth	r2, r3
 8027370:	687b      	ldr	r3, [r7, #4]
 8027372:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8027374:	687b      	ldr	r3, [r7, #4]
 8027376:	2200      	movs	r2, #0
 8027378:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 802737a:	2200      	movs	r2, #0
 802737c:	2100      	movs	r1, #0
 802737e:	6878      	ldr	r0, [r7, #4]
 8027380:	f000 f9c1 	bl	8027706 <USBH_CtlReq>
 8027384:	4603      	mov	r3, r0
}
 8027386:	4618      	mov	r0, r3
 8027388:	3708      	adds	r7, #8
 802738a:	46bd      	mov	sp, r7
 802738c:	bd80      	pop	{r7, pc}

0802738e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 802738e:	b480      	push	{r7}
 8027390:	b085      	sub	sp, #20
 8027392:	af00      	add	r7, sp, #0
 8027394:	60f8      	str	r0, [r7, #12]
 8027396:	60b9      	str	r1, [r7, #8]
 8027398:	4613      	mov	r3, r2
 802739a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 802739c:	68bb      	ldr	r3, [r7, #8]
 802739e:	781a      	ldrb	r2, [r3, #0]
 80273a0:	68fb      	ldr	r3, [r7, #12]
 80273a2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80273a4:	68bb      	ldr	r3, [r7, #8]
 80273a6:	785a      	ldrb	r2, [r3, #1]
 80273a8:	68fb      	ldr	r3, [r7, #12]
 80273aa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80273ac:	68bb      	ldr	r3, [r7, #8]
 80273ae:	3302      	adds	r3, #2
 80273b0:	781b      	ldrb	r3, [r3, #0]
 80273b2:	b29a      	uxth	r2, r3
 80273b4:	68bb      	ldr	r3, [r7, #8]
 80273b6:	3303      	adds	r3, #3
 80273b8:	781b      	ldrb	r3, [r3, #0]
 80273ba:	b29b      	uxth	r3, r3
 80273bc:	021b      	lsls	r3, r3, #8
 80273be:	b29b      	uxth	r3, r3
 80273c0:	4313      	orrs	r3, r2
 80273c2:	b29a      	uxth	r2, r3
 80273c4:	68fb      	ldr	r3, [r7, #12]
 80273c6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80273c8:	68bb      	ldr	r3, [r7, #8]
 80273ca:	791a      	ldrb	r2, [r3, #4]
 80273cc:	68fb      	ldr	r3, [r7, #12]
 80273ce:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80273d0:	68bb      	ldr	r3, [r7, #8]
 80273d2:	795a      	ldrb	r2, [r3, #5]
 80273d4:	68fb      	ldr	r3, [r7, #12]
 80273d6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80273d8:	68bb      	ldr	r3, [r7, #8]
 80273da:	799a      	ldrb	r2, [r3, #6]
 80273dc:	68fb      	ldr	r3, [r7, #12]
 80273de:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80273e0:	68bb      	ldr	r3, [r7, #8]
 80273e2:	79da      	ldrb	r2, [r3, #7]
 80273e4:	68fb      	ldr	r3, [r7, #12]
 80273e6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80273e8:	88fb      	ldrh	r3, [r7, #6]
 80273ea:	2b08      	cmp	r3, #8
 80273ec:	d939      	bls.n	8027462 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80273ee:	68bb      	ldr	r3, [r7, #8]
 80273f0:	3308      	adds	r3, #8
 80273f2:	781b      	ldrb	r3, [r3, #0]
 80273f4:	b29a      	uxth	r2, r3
 80273f6:	68bb      	ldr	r3, [r7, #8]
 80273f8:	3309      	adds	r3, #9
 80273fa:	781b      	ldrb	r3, [r3, #0]
 80273fc:	b29b      	uxth	r3, r3
 80273fe:	021b      	lsls	r3, r3, #8
 8027400:	b29b      	uxth	r3, r3
 8027402:	4313      	orrs	r3, r2
 8027404:	b29a      	uxth	r2, r3
 8027406:	68fb      	ldr	r3, [r7, #12]
 8027408:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 802740a:	68bb      	ldr	r3, [r7, #8]
 802740c:	330a      	adds	r3, #10
 802740e:	781b      	ldrb	r3, [r3, #0]
 8027410:	b29a      	uxth	r2, r3
 8027412:	68bb      	ldr	r3, [r7, #8]
 8027414:	330b      	adds	r3, #11
 8027416:	781b      	ldrb	r3, [r3, #0]
 8027418:	b29b      	uxth	r3, r3
 802741a:	021b      	lsls	r3, r3, #8
 802741c:	b29b      	uxth	r3, r3
 802741e:	4313      	orrs	r3, r2
 8027420:	b29a      	uxth	r2, r3
 8027422:	68fb      	ldr	r3, [r7, #12]
 8027424:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8027426:	68bb      	ldr	r3, [r7, #8]
 8027428:	330c      	adds	r3, #12
 802742a:	781b      	ldrb	r3, [r3, #0]
 802742c:	b29a      	uxth	r2, r3
 802742e:	68bb      	ldr	r3, [r7, #8]
 8027430:	330d      	adds	r3, #13
 8027432:	781b      	ldrb	r3, [r3, #0]
 8027434:	b29b      	uxth	r3, r3
 8027436:	021b      	lsls	r3, r3, #8
 8027438:	b29b      	uxth	r3, r3
 802743a:	4313      	orrs	r3, r2
 802743c:	b29a      	uxth	r2, r3
 802743e:	68fb      	ldr	r3, [r7, #12]
 8027440:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8027442:	68bb      	ldr	r3, [r7, #8]
 8027444:	7b9a      	ldrb	r2, [r3, #14]
 8027446:	68fb      	ldr	r3, [r7, #12]
 8027448:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 802744a:	68bb      	ldr	r3, [r7, #8]
 802744c:	7bda      	ldrb	r2, [r3, #15]
 802744e:	68fb      	ldr	r3, [r7, #12]
 8027450:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8027452:	68bb      	ldr	r3, [r7, #8]
 8027454:	7c1a      	ldrb	r2, [r3, #16]
 8027456:	68fb      	ldr	r3, [r7, #12]
 8027458:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 802745a:	68bb      	ldr	r3, [r7, #8]
 802745c:	7c5a      	ldrb	r2, [r3, #17]
 802745e:	68fb      	ldr	r3, [r7, #12]
 8027460:	745a      	strb	r2, [r3, #17]
  }
}
 8027462:	bf00      	nop
 8027464:	3714      	adds	r7, #20
 8027466:	46bd      	mov	sp, r7
 8027468:	f85d 7b04 	ldr.w	r7, [sp], #4
 802746c:	4770      	bx	lr

0802746e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 802746e:	b580      	push	{r7, lr}
 8027470:	b08a      	sub	sp, #40	; 0x28
 8027472:	af00      	add	r7, sp, #0
 8027474:	60f8      	str	r0, [r7, #12]
 8027476:	60b9      	str	r1, [r7, #8]
 8027478:	4613      	mov	r3, r2
 802747a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 802747c:	68bb      	ldr	r3, [r7, #8]
 802747e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8027480:	2300      	movs	r3, #0
 8027482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8027486:	2300      	movs	r3, #0
 8027488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 802748c:	68bb      	ldr	r3, [r7, #8]
 802748e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8027490:	68bb      	ldr	r3, [r7, #8]
 8027492:	781a      	ldrb	r2, [r3, #0]
 8027494:	68fb      	ldr	r3, [r7, #12]
 8027496:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8027498:	68bb      	ldr	r3, [r7, #8]
 802749a:	785a      	ldrb	r2, [r3, #1]
 802749c:	68fb      	ldr	r3, [r7, #12]
 802749e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80274a0:	68bb      	ldr	r3, [r7, #8]
 80274a2:	3302      	adds	r3, #2
 80274a4:	781b      	ldrb	r3, [r3, #0]
 80274a6:	b29a      	uxth	r2, r3
 80274a8:	68bb      	ldr	r3, [r7, #8]
 80274aa:	3303      	adds	r3, #3
 80274ac:	781b      	ldrb	r3, [r3, #0]
 80274ae:	b29b      	uxth	r3, r3
 80274b0:	021b      	lsls	r3, r3, #8
 80274b2:	b29b      	uxth	r3, r3
 80274b4:	4313      	orrs	r3, r2
 80274b6:	b29a      	uxth	r2, r3
 80274b8:	68fb      	ldr	r3, [r7, #12]
 80274ba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80274bc:	68bb      	ldr	r3, [r7, #8]
 80274be:	791a      	ldrb	r2, [r3, #4]
 80274c0:	68fb      	ldr	r3, [r7, #12]
 80274c2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80274c4:	68bb      	ldr	r3, [r7, #8]
 80274c6:	795a      	ldrb	r2, [r3, #5]
 80274c8:	68fb      	ldr	r3, [r7, #12]
 80274ca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80274cc:	68bb      	ldr	r3, [r7, #8]
 80274ce:	799a      	ldrb	r2, [r3, #6]
 80274d0:	68fb      	ldr	r3, [r7, #12]
 80274d2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80274d4:	68bb      	ldr	r3, [r7, #8]
 80274d6:	79da      	ldrb	r2, [r3, #7]
 80274d8:	68fb      	ldr	r3, [r7, #12]
 80274da:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80274dc:	68bb      	ldr	r3, [r7, #8]
 80274de:	7a1a      	ldrb	r2, [r3, #8]
 80274e0:	68fb      	ldr	r3, [r7, #12]
 80274e2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80274e4:	88fb      	ldrh	r3, [r7, #6]
 80274e6:	2b09      	cmp	r3, #9
 80274e8:	d95f      	bls.n	80275aa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80274ea:	2309      	movs	r3, #9
 80274ec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80274ee:	2300      	movs	r3, #0
 80274f0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80274f2:	e051      	b.n	8027598 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80274f4:	f107 0316 	add.w	r3, r7, #22
 80274f8:	4619      	mov	r1, r3
 80274fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80274fc:	f000 f8e8 	bl	80276d0 <USBH_GetNextDesc>
 8027500:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8027502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027504:	785b      	ldrb	r3, [r3, #1]
 8027506:	2b04      	cmp	r3, #4
 8027508:	d146      	bne.n	8027598 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 802750a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802750e:	221a      	movs	r2, #26
 8027510:	fb02 f303 	mul.w	r3, r2, r3
 8027514:	3308      	adds	r3, #8
 8027516:	68fa      	ldr	r2, [r7, #12]
 8027518:	4413      	add	r3, r2
 802751a:	3302      	adds	r3, #2
 802751c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 802751e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8027520:	69f8      	ldr	r0, [r7, #28]
 8027522:	f000 f846 	bl	80275b2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8027526:	2300      	movs	r3, #0
 8027528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 802752c:	2300      	movs	r3, #0
 802752e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8027530:	e022      	b.n	8027578 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8027532:	f107 0316 	add.w	r3, r7, #22
 8027536:	4619      	mov	r1, r3
 8027538:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802753a:	f000 f8c9 	bl	80276d0 <USBH_GetNextDesc>
 802753e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8027540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027542:	785b      	ldrb	r3, [r3, #1]
 8027544:	2b05      	cmp	r3, #5
 8027546:	d117      	bne.n	8027578 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8027548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802754c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8027550:	3201      	adds	r2, #1
 8027552:	00d2      	lsls	r2, r2, #3
 8027554:	211a      	movs	r1, #26
 8027556:	fb01 f303 	mul.w	r3, r1, r3
 802755a:	4413      	add	r3, r2
 802755c:	3308      	adds	r3, #8
 802755e:	68fa      	ldr	r2, [r7, #12]
 8027560:	4413      	add	r3, r2
 8027562:	3304      	adds	r3, #4
 8027564:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8027566:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8027568:	69b8      	ldr	r0, [r7, #24]
 802756a:	f000 f851 	bl	8027610 <USBH_ParseEPDesc>
            ep_ix++;
 802756e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8027572:	3301      	adds	r3, #1
 8027574:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8027578:	69fb      	ldr	r3, [r7, #28]
 802757a:	791b      	ldrb	r3, [r3, #4]
 802757c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8027580:	429a      	cmp	r2, r3
 8027582:	d204      	bcs.n	802758e <USBH_ParseCfgDesc+0x120>
 8027584:	68fb      	ldr	r3, [r7, #12]
 8027586:	885a      	ldrh	r2, [r3, #2]
 8027588:	8afb      	ldrh	r3, [r7, #22]
 802758a:	429a      	cmp	r2, r3
 802758c:	d8d1      	bhi.n	8027532 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 802758e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027592:	3301      	adds	r3, #1
 8027594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8027598:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802759c:	2b01      	cmp	r3, #1
 802759e:	d804      	bhi.n	80275aa <USBH_ParseCfgDesc+0x13c>
 80275a0:	68fb      	ldr	r3, [r7, #12]
 80275a2:	885a      	ldrh	r2, [r3, #2]
 80275a4:	8afb      	ldrh	r3, [r7, #22]
 80275a6:	429a      	cmp	r2, r3
 80275a8:	d8a4      	bhi.n	80274f4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80275aa:	bf00      	nop
 80275ac:	3728      	adds	r7, #40	; 0x28
 80275ae:	46bd      	mov	sp, r7
 80275b0:	bd80      	pop	{r7, pc}

080275b2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80275b2:	b480      	push	{r7}
 80275b4:	b083      	sub	sp, #12
 80275b6:	af00      	add	r7, sp, #0
 80275b8:	6078      	str	r0, [r7, #4]
 80275ba:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80275bc:	683b      	ldr	r3, [r7, #0]
 80275be:	781a      	ldrb	r2, [r3, #0]
 80275c0:	687b      	ldr	r3, [r7, #4]
 80275c2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80275c4:	683b      	ldr	r3, [r7, #0]
 80275c6:	785a      	ldrb	r2, [r3, #1]
 80275c8:	687b      	ldr	r3, [r7, #4]
 80275ca:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80275cc:	683b      	ldr	r3, [r7, #0]
 80275ce:	789a      	ldrb	r2, [r3, #2]
 80275d0:	687b      	ldr	r3, [r7, #4]
 80275d2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80275d4:	683b      	ldr	r3, [r7, #0]
 80275d6:	78da      	ldrb	r2, [r3, #3]
 80275d8:	687b      	ldr	r3, [r7, #4]
 80275da:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80275dc:	683b      	ldr	r3, [r7, #0]
 80275de:	791a      	ldrb	r2, [r3, #4]
 80275e0:	687b      	ldr	r3, [r7, #4]
 80275e2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80275e4:	683b      	ldr	r3, [r7, #0]
 80275e6:	795a      	ldrb	r2, [r3, #5]
 80275e8:	687b      	ldr	r3, [r7, #4]
 80275ea:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80275ec:	683b      	ldr	r3, [r7, #0]
 80275ee:	799a      	ldrb	r2, [r3, #6]
 80275f0:	687b      	ldr	r3, [r7, #4]
 80275f2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80275f4:	683b      	ldr	r3, [r7, #0]
 80275f6:	79da      	ldrb	r2, [r3, #7]
 80275f8:	687b      	ldr	r3, [r7, #4]
 80275fa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80275fc:	683b      	ldr	r3, [r7, #0]
 80275fe:	7a1a      	ldrb	r2, [r3, #8]
 8027600:	687b      	ldr	r3, [r7, #4]
 8027602:	721a      	strb	r2, [r3, #8]
}
 8027604:	bf00      	nop
 8027606:	370c      	adds	r7, #12
 8027608:	46bd      	mov	sp, r7
 802760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802760e:	4770      	bx	lr

08027610 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8027610:	b480      	push	{r7}
 8027612:	b083      	sub	sp, #12
 8027614:	af00      	add	r7, sp, #0
 8027616:	6078      	str	r0, [r7, #4]
 8027618:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 802761a:	683b      	ldr	r3, [r7, #0]
 802761c:	781a      	ldrb	r2, [r3, #0]
 802761e:	687b      	ldr	r3, [r7, #4]
 8027620:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8027622:	683b      	ldr	r3, [r7, #0]
 8027624:	785a      	ldrb	r2, [r3, #1]
 8027626:	687b      	ldr	r3, [r7, #4]
 8027628:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 802762a:	683b      	ldr	r3, [r7, #0]
 802762c:	789a      	ldrb	r2, [r3, #2]
 802762e:	687b      	ldr	r3, [r7, #4]
 8027630:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8027632:	683b      	ldr	r3, [r7, #0]
 8027634:	78da      	ldrb	r2, [r3, #3]
 8027636:	687b      	ldr	r3, [r7, #4]
 8027638:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 802763a:	683b      	ldr	r3, [r7, #0]
 802763c:	3304      	adds	r3, #4
 802763e:	781b      	ldrb	r3, [r3, #0]
 8027640:	b29a      	uxth	r2, r3
 8027642:	683b      	ldr	r3, [r7, #0]
 8027644:	3305      	adds	r3, #5
 8027646:	781b      	ldrb	r3, [r3, #0]
 8027648:	b29b      	uxth	r3, r3
 802764a:	021b      	lsls	r3, r3, #8
 802764c:	b29b      	uxth	r3, r3
 802764e:	4313      	orrs	r3, r2
 8027650:	b29a      	uxth	r2, r3
 8027652:	687b      	ldr	r3, [r7, #4]
 8027654:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8027656:	683b      	ldr	r3, [r7, #0]
 8027658:	799a      	ldrb	r2, [r3, #6]
 802765a:	687b      	ldr	r3, [r7, #4]
 802765c:	719a      	strb	r2, [r3, #6]
}
 802765e:	bf00      	nop
 8027660:	370c      	adds	r7, #12
 8027662:	46bd      	mov	sp, r7
 8027664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027668:	4770      	bx	lr

0802766a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 802766a:	b480      	push	{r7}
 802766c:	b087      	sub	sp, #28
 802766e:	af00      	add	r7, sp, #0
 8027670:	60f8      	str	r0, [r7, #12]
 8027672:	60b9      	str	r1, [r7, #8]
 8027674:	4613      	mov	r3, r2
 8027676:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8027678:	68fb      	ldr	r3, [r7, #12]
 802767a:	3301      	adds	r3, #1
 802767c:	781b      	ldrb	r3, [r3, #0]
 802767e:	2b03      	cmp	r3, #3
 8027680:	d120      	bne.n	80276c4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8027682:	68fb      	ldr	r3, [r7, #12]
 8027684:	781b      	ldrb	r3, [r3, #0]
 8027686:	1e9a      	subs	r2, r3, #2
 8027688:	88fb      	ldrh	r3, [r7, #6]
 802768a:	4293      	cmp	r3, r2
 802768c:	bf28      	it	cs
 802768e:	4613      	movcs	r3, r2
 8027690:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8027692:	68fb      	ldr	r3, [r7, #12]
 8027694:	3302      	adds	r3, #2
 8027696:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8027698:	2300      	movs	r3, #0
 802769a:	82fb      	strh	r3, [r7, #22]
 802769c:	e00b      	b.n	80276b6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 802769e:	8afb      	ldrh	r3, [r7, #22]
 80276a0:	68fa      	ldr	r2, [r7, #12]
 80276a2:	4413      	add	r3, r2
 80276a4:	781a      	ldrb	r2, [r3, #0]
 80276a6:	68bb      	ldr	r3, [r7, #8]
 80276a8:	701a      	strb	r2, [r3, #0]
      pdest++;
 80276aa:	68bb      	ldr	r3, [r7, #8]
 80276ac:	3301      	adds	r3, #1
 80276ae:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80276b0:	8afb      	ldrh	r3, [r7, #22]
 80276b2:	3302      	adds	r3, #2
 80276b4:	82fb      	strh	r3, [r7, #22]
 80276b6:	8afa      	ldrh	r2, [r7, #22]
 80276b8:	8abb      	ldrh	r3, [r7, #20]
 80276ba:	429a      	cmp	r2, r3
 80276bc:	d3ef      	bcc.n	802769e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80276be:	68bb      	ldr	r3, [r7, #8]
 80276c0:	2200      	movs	r2, #0
 80276c2:	701a      	strb	r2, [r3, #0]
  }
}
 80276c4:	bf00      	nop
 80276c6:	371c      	adds	r7, #28
 80276c8:	46bd      	mov	sp, r7
 80276ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80276ce:	4770      	bx	lr

080276d0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80276d0:	b480      	push	{r7}
 80276d2:	b085      	sub	sp, #20
 80276d4:	af00      	add	r7, sp, #0
 80276d6:	6078      	str	r0, [r7, #4]
 80276d8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80276da:	683b      	ldr	r3, [r7, #0]
 80276dc:	881a      	ldrh	r2, [r3, #0]
 80276de:	687b      	ldr	r3, [r7, #4]
 80276e0:	781b      	ldrb	r3, [r3, #0]
 80276e2:	b29b      	uxth	r3, r3
 80276e4:	4413      	add	r3, r2
 80276e6:	b29a      	uxth	r2, r3
 80276e8:	683b      	ldr	r3, [r7, #0]
 80276ea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80276ec:	687b      	ldr	r3, [r7, #4]
 80276ee:	781b      	ldrb	r3, [r3, #0]
 80276f0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80276f2:	687b      	ldr	r3, [r7, #4]
 80276f4:	4413      	add	r3, r2
 80276f6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80276f8:	68fb      	ldr	r3, [r7, #12]
}
 80276fa:	4618      	mov	r0, r3
 80276fc:	3714      	adds	r7, #20
 80276fe:	46bd      	mov	sp, r7
 8027700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027704:	4770      	bx	lr

08027706 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8027706:	b580      	push	{r7, lr}
 8027708:	b086      	sub	sp, #24
 802770a:	af00      	add	r7, sp, #0
 802770c:	60f8      	str	r0, [r7, #12]
 802770e:	60b9      	str	r1, [r7, #8]
 8027710:	4613      	mov	r3, r2
 8027712:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8027714:	2301      	movs	r3, #1
 8027716:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8027718:	68fb      	ldr	r3, [r7, #12]
 802771a:	789b      	ldrb	r3, [r3, #2]
 802771c:	2b01      	cmp	r3, #1
 802771e:	d002      	beq.n	8027726 <USBH_CtlReq+0x20>
 8027720:	2b02      	cmp	r3, #2
 8027722:	d00f      	beq.n	8027744 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8027724:	e027      	b.n	8027776 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8027726:	68fb      	ldr	r3, [r7, #12]
 8027728:	68ba      	ldr	r2, [r7, #8]
 802772a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 802772c:	68fb      	ldr	r3, [r7, #12]
 802772e:	88fa      	ldrh	r2, [r7, #6]
 8027730:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8027732:	68fb      	ldr	r3, [r7, #12]
 8027734:	2201      	movs	r2, #1
 8027736:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8027738:	68fb      	ldr	r3, [r7, #12]
 802773a:	2202      	movs	r2, #2
 802773c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 802773e:	2301      	movs	r3, #1
 8027740:	75fb      	strb	r3, [r7, #23]
      break;
 8027742:	e018      	b.n	8027776 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8027744:	68f8      	ldr	r0, [r7, #12]
 8027746:	f000 f81b 	bl	8027780 <USBH_HandleControl>
 802774a:	4603      	mov	r3, r0
 802774c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 802774e:	7dfb      	ldrb	r3, [r7, #23]
 8027750:	2b00      	cmp	r3, #0
 8027752:	d002      	beq.n	802775a <USBH_CtlReq+0x54>
 8027754:	7dfb      	ldrb	r3, [r7, #23]
 8027756:	2b03      	cmp	r3, #3
 8027758:	d106      	bne.n	8027768 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 802775a:	68fb      	ldr	r3, [r7, #12]
 802775c:	2201      	movs	r2, #1
 802775e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8027760:	68fb      	ldr	r3, [r7, #12]
 8027762:	2200      	movs	r2, #0
 8027764:	761a      	strb	r2, [r3, #24]
      break;
 8027766:	e005      	b.n	8027774 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8027768:	7dfb      	ldrb	r3, [r7, #23]
 802776a:	2b02      	cmp	r3, #2
 802776c:	d102      	bne.n	8027774 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 802776e:	68fb      	ldr	r3, [r7, #12]
 8027770:	2201      	movs	r2, #1
 8027772:	709a      	strb	r2, [r3, #2]
      break;
 8027774:	bf00      	nop
  }
  return status;
 8027776:	7dfb      	ldrb	r3, [r7, #23]
}
 8027778:	4618      	mov	r0, r3
 802777a:	3718      	adds	r7, #24
 802777c:	46bd      	mov	sp, r7
 802777e:	bd80      	pop	{r7, pc}

08027780 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8027780:	b580      	push	{r7, lr}
 8027782:	b086      	sub	sp, #24
 8027784:	af02      	add	r7, sp, #8
 8027786:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8027788:	2301      	movs	r3, #1
 802778a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802778c:	2300      	movs	r3, #0
 802778e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8027790:	687b      	ldr	r3, [r7, #4]
 8027792:	7e1b      	ldrb	r3, [r3, #24]
 8027794:	3b01      	subs	r3, #1
 8027796:	2b0a      	cmp	r3, #10
 8027798:	f200 8156 	bhi.w	8027a48 <USBH_HandleControl+0x2c8>
 802779c:	a201      	add	r2, pc, #4	; (adr r2, 80277a4 <USBH_HandleControl+0x24>)
 802779e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80277a2:	bf00      	nop
 80277a4:	080277d1 	.word	0x080277d1
 80277a8:	080277eb 	.word	0x080277eb
 80277ac:	08027855 	.word	0x08027855
 80277b0:	0802787b 	.word	0x0802787b
 80277b4:	080278b3 	.word	0x080278b3
 80277b8:	080278dd 	.word	0x080278dd
 80277bc:	0802792f 	.word	0x0802792f
 80277c0:	08027951 	.word	0x08027951
 80277c4:	0802798d 	.word	0x0802798d
 80277c8:	080279b3 	.word	0x080279b3
 80277cc:	080279f1 	.word	0x080279f1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80277d0:	687b      	ldr	r3, [r7, #4]
 80277d2:	f103 0110 	add.w	r1, r3, #16
 80277d6:	687b      	ldr	r3, [r7, #4]
 80277d8:	795b      	ldrb	r3, [r3, #5]
 80277da:	461a      	mov	r2, r3
 80277dc:	6878      	ldr	r0, [r7, #4]
 80277de:	f000 f943 	bl	8027a68 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80277e2:	687b      	ldr	r3, [r7, #4]
 80277e4:	2202      	movs	r2, #2
 80277e6:	761a      	strb	r2, [r3, #24]
      break;
 80277e8:	e139      	b.n	8027a5e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80277ea:	687b      	ldr	r3, [r7, #4]
 80277ec:	795b      	ldrb	r3, [r3, #5]
 80277ee:	4619      	mov	r1, r3
 80277f0:	6878      	ldr	r0, [r7, #4]
 80277f2:	f000 fcc5 	bl	8028180 <USBH_LL_GetURBState>
 80277f6:	4603      	mov	r3, r0
 80277f8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80277fa:	7bbb      	ldrb	r3, [r7, #14]
 80277fc:	2b01      	cmp	r3, #1
 80277fe:	d11e      	bne.n	802783e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8027800:	687b      	ldr	r3, [r7, #4]
 8027802:	7c1b      	ldrb	r3, [r3, #16]
 8027804:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8027808:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 802780a:	687b      	ldr	r3, [r7, #4]
 802780c:	8adb      	ldrh	r3, [r3, #22]
 802780e:	2b00      	cmp	r3, #0
 8027810:	d00a      	beq.n	8027828 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8027812:	7b7b      	ldrb	r3, [r7, #13]
 8027814:	2b80      	cmp	r3, #128	; 0x80
 8027816:	d103      	bne.n	8027820 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8027818:	687b      	ldr	r3, [r7, #4]
 802781a:	2203      	movs	r2, #3
 802781c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 802781e:	e115      	b.n	8027a4c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8027820:	687b      	ldr	r3, [r7, #4]
 8027822:	2205      	movs	r2, #5
 8027824:	761a      	strb	r2, [r3, #24]
      break;
 8027826:	e111      	b.n	8027a4c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8027828:	7b7b      	ldrb	r3, [r7, #13]
 802782a:	2b80      	cmp	r3, #128	; 0x80
 802782c:	d103      	bne.n	8027836 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 802782e:	687b      	ldr	r3, [r7, #4]
 8027830:	2209      	movs	r2, #9
 8027832:	761a      	strb	r2, [r3, #24]
      break;
 8027834:	e10a      	b.n	8027a4c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8027836:	687b      	ldr	r3, [r7, #4]
 8027838:	2207      	movs	r2, #7
 802783a:	761a      	strb	r2, [r3, #24]
      break;
 802783c:	e106      	b.n	8027a4c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 802783e:	7bbb      	ldrb	r3, [r7, #14]
 8027840:	2b04      	cmp	r3, #4
 8027842:	d003      	beq.n	802784c <USBH_HandleControl+0xcc>
 8027844:	7bbb      	ldrb	r3, [r7, #14]
 8027846:	2b02      	cmp	r3, #2
 8027848:	f040 8100 	bne.w	8027a4c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 802784c:	687b      	ldr	r3, [r7, #4]
 802784e:	220b      	movs	r2, #11
 8027850:	761a      	strb	r2, [r3, #24]
      break;
 8027852:	e0fb      	b.n	8027a4c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8027854:	687b      	ldr	r3, [r7, #4]
 8027856:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802785a:	b29a      	uxth	r2, r3
 802785c:	687b      	ldr	r3, [r7, #4]
 802785e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8027860:	687b      	ldr	r3, [r7, #4]
 8027862:	6899      	ldr	r1, [r3, #8]
 8027864:	687b      	ldr	r3, [r7, #4]
 8027866:	899a      	ldrh	r2, [r3, #12]
 8027868:	687b      	ldr	r3, [r7, #4]
 802786a:	791b      	ldrb	r3, [r3, #4]
 802786c:	6878      	ldr	r0, [r7, #4]
 802786e:	f000 f93a 	bl	8027ae6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8027872:	687b      	ldr	r3, [r7, #4]
 8027874:	2204      	movs	r2, #4
 8027876:	761a      	strb	r2, [r3, #24]
      break;
 8027878:	e0f1      	b.n	8027a5e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802787a:	687b      	ldr	r3, [r7, #4]
 802787c:	791b      	ldrb	r3, [r3, #4]
 802787e:	4619      	mov	r1, r3
 8027880:	6878      	ldr	r0, [r7, #4]
 8027882:	f000 fc7d 	bl	8028180 <USBH_LL_GetURBState>
 8027886:	4603      	mov	r3, r0
 8027888:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 802788a:	7bbb      	ldrb	r3, [r7, #14]
 802788c:	2b01      	cmp	r3, #1
 802788e:	d102      	bne.n	8027896 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8027890:	687b      	ldr	r3, [r7, #4]
 8027892:	2209      	movs	r2, #9
 8027894:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8027896:	7bbb      	ldrb	r3, [r7, #14]
 8027898:	2b05      	cmp	r3, #5
 802789a:	d102      	bne.n	80278a2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 802789c:	2303      	movs	r3, #3
 802789e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80278a0:	e0d6      	b.n	8027a50 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80278a2:	7bbb      	ldrb	r3, [r7, #14]
 80278a4:	2b04      	cmp	r3, #4
 80278a6:	f040 80d3 	bne.w	8027a50 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80278aa:	687b      	ldr	r3, [r7, #4]
 80278ac:	220b      	movs	r2, #11
 80278ae:	761a      	strb	r2, [r3, #24]
      break;
 80278b0:	e0ce      	b.n	8027a50 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80278b2:	687b      	ldr	r3, [r7, #4]
 80278b4:	6899      	ldr	r1, [r3, #8]
 80278b6:	687b      	ldr	r3, [r7, #4]
 80278b8:	899a      	ldrh	r2, [r3, #12]
 80278ba:	687b      	ldr	r3, [r7, #4]
 80278bc:	795b      	ldrb	r3, [r3, #5]
 80278be:	2001      	movs	r0, #1
 80278c0:	9000      	str	r0, [sp, #0]
 80278c2:	6878      	ldr	r0, [r7, #4]
 80278c4:	f000 f8ea 	bl	8027a9c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80278c8:	687b      	ldr	r3, [r7, #4]
 80278ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80278ce:	b29a      	uxth	r2, r3
 80278d0:	687b      	ldr	r3, [r7, #4]
 80278d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80278d4:	687b      	ldr	r3, [r7, #4]
 80278d6:	2206      	movs	r2, #6
 80278d8:	761a      	strb	r2, [r3, #24]
      break;
 80278da:	e0c0      	b.n	8027a5e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80278dc:	687b      	ldr	r3, [r7, #4]
 80278de:	795b      	ldrb	r3, [r3, #5]
 80278e0:	4619      	mov	r1, r3
 80278e2:	6878      	ldr	r0, [r7, #4]
 80278e4:	f000 fc4c 	bl	8028180 <USBH_LL_GetURBState>
 80278e8:	4603      	mov	r3, r0
 80278ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80278ec:	7bbb      	ldrb	r3, [r7, #14]
 80278ee:	2b01      	cmp	r3, #1
 80278f0:	d103      	bne.n	80278fa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80278f2:	687b      	ldr	r3, [r7, #4]
 80278f4:	2207      	movs	r2, #7
 80278f6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80278f8:	e0ac      	b.n	8027a54 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80278fa:	7bbb      	ldrb	r3, [r7, #14]
 80278fc:	2b05      	cmp	r3, #5
 80278fe:	d105      	bne.n	802790c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8027900:	687b      	ldr	r3, [r7, #4]
 8027902:	220c      	movs	r2, #12
 8027904:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8027906:	2303      	movs	r3, #3
 8027908:	73fb      	strb	r3, [r7, #15]
      break;
 802790a:	e0a3      	b.n	8027a54 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 802790c:	7bbb      	ldrb	r3, [r7, #14]
 802790e:	2b02      	cmp	r3, #2
 8027910:	d103      	bne.n	802791a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8027912:	687b      	ldr	r3, [r7, #4]
 8027914:	2205      	movs	r2, #5
 8027916:	761a      	strb	r2, [r3, #24]
      break;
 8027918:	e09c      	b.n	8027a54 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 802791a:	7bbb      	ldrb	r3, [r7, #14]
 802791c:	2b04      	cmp	r3, #4
 802791e:	f040 8099 	bne.w	8027a54 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8027922:	687b      	ldr	r3, [r7, #4]
 8027924:	220b      	movs	r2, #11
 8027926:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8027928:	2302      	movs	r3, #2
 802792a:	73fb      	strb	r3, [r7, #15]
      break;
 802792c:	e092      	b.n	8027a54 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 802792e:	687b      	ldr	r3, [r7, #4]
 8027930:	791b      	ldrb	r3, [r3, #4]
 8027932:	2200      	movs	r2, #0
 8027934:	2100      	movs	r1, #0
 8027936:	6878      	ldr	r0, [r7, #4]
 8027938:	f000 f8d5 	bl	8027ae6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802793c:	687b      	ldr	r3, [r7, #4]
 802793e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8027942:	b29a      	uxth	r2, r3
 8027944:	687b      	ldr	r3, [r7, #4]
 8027946:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8027948:	687b      	ldr	r3, [r7, #4]
 802794a:	2208      	movs	r2, #8
 802794c:	761a      	strb	r2, [r3, #24]

      break;
 802794e:	e086      	b.n	8027a5e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8027950:	687b      	ldr	r3, [r7, #4]
 8027952:	791b      	ldrb	r3, [r3, #4]
 8027954:	4619      	mov	r1, r3
 8027956:	6878      	ldr	r0, [r7, #4]
 8027958:	f000 fc12 	bl	8028180 <USBH_LL_GetURBState>
 802795c:	4603      	mov	r3, r0
 802795e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8027960:	7bbb      	ldrb	r3, [r7, #14]
 8027962:	2b01      	cmp	r3, #1
 8027964:	d105      	bne.n	8027972 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8027966:	687b      	ldr	r3, [r7, #4]
 8027968:	220d      	movs	r2, #13
 802796a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 802796c:	2300      	movs	r3, #0
 802796e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8027970:	e072      	b.n	8027a58 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8027972:	7bbb      	ldrb	r3, [r7, #14]
 8027974:	2b04      	cmp	r3, #4
 8027976:	d103      	bne.n	8027980 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8027978:	687b      	ldr	r3, [r7, #4]
 802797a:	220b      	movs	r2, #11
 802797c:	761a      	strb	r2, [r3, #24]
      break;
 802797e:	e06b      	b.n	8027a58 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8027980:	7bbb      	ldrb	r3, [r7, #14]
 8027982:	2b05      	cmp	r3, #5
 8027984:	d168      	bne.n	8027a58 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8027986:	2303      	movs	r3, #3
 8027988:	73fb      	strb	r3, [r7, #15]
      break;
 802798a:	e065      	b.n	8027a58 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 802798c:	687b      	ldr	r3, [r7, #4]
 802798e:	795b      	ldrb	r3, [r3, #5]
 8027990:	2201      	movs	r2, #1
 8027992:	9200      	str	r2, [sp, #0]
 8027994:	2200      	movs	r2, #0
 8027996:	2100      	movs	r1, #0
 8027998:	6878      	ldr	r0, [r7, #4]
 802799a:	f000 f87f 	bl	8027a9c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802799e:	687b      	ldr	r3, [r7, #4]
 80279a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80279a4:	b29a      	uxth	r2, r3
 80279a6:	687b      	ldr	r3, [r7, #4]
 80279a8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80279aa:	687b      	ldr	r3, [r7, #4]
 80279ac:	220a      	movs	r2, #10
 80279ae:	761a      	strb	r2, [r3, #24]
      break;
 80279b0:	e055      	b.n	8027a5e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80279b2:	687b      	ldr	r3, [r7, #4]
 80279b4:	795b      	ldrb	r3, [r3, #5]
 80279b6:	4619      	mov	r1, r3
 80279b8:	6878      	ldr	r0, [r7, #4]
 80279ba:	f000 fbe1 	bl	8028180 <USBH_LL_GetURBState>
 80279be:	4603      	mov	r3, r0
 80279c0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80279c2:	7bbb      	ldrb	r3, [r7, #14]
 80279c4:	2b01      	cmp	r3, #1
 80279c6:	d105      	bne.n	80279d4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80279c8:	2300      	movs	r3, #0
 80279ca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80279cc:	687b      	ldr	r3, [r7, #4]
 80279ce:	220d      	movs	r2, #13
 80279d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80279d2:	e043      	b.n	8027a5c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80279d4:	7bbb      	ldrb	r3, [r7, #14]
 80279d6:	2b02      	cmp	r3, #2
 80279d8:	d103      	bne.n	80279e2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80279da:	687b      	ldr	r3, [r7, #4]
 80279dc:	2209      	movs	r2, #9
 80279de:	761a      	strb	r2, [r3, #24]
      break;
 80279e0:	e03c      	b.n	8027a5c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80279e2:	7bbb      	ldrb	r3, [r7, #14]
 80279e4:	2b04      	cmp	r3, #4
 80279e6:	d139      	bne.n	8027a5c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80279e8:	687b      	ldr	r3, [r7, #4]
 80279ea:	220b      	movs	r2, #11
 80279ec:	761a      	strb	r2, [r3, #24]
      break;
 80279ee:	e035      	b.n	8027a5c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80279f0:	687b      	ldr	r3, [r7, #4]
 80279f2:	7e5b      	ldrb	r3, [r3, #25]
 80279f4:	3301      	adds	r3, #1
 80279f6:	b2da      	uxtb	r2, r3
 80279f8:	687b      	ldr	r3, [r7, #4]
 80279fa:	765a      	strb	r2, [r3, #25]
 80279fc:	687b      	ldr	r3, [r7, #4]
 80279fe:	7e5b      	ldrb	r3, [r3, #25]
 8027a00:	2b02      	cmp	r3, #2
 8027a02:	d806      	bhi.n	8027a12 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8027a04:	687b      	ldr	r3, [r7, #4]
 8027a06:	2201      	movs	r2, #1
 8027a08:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8027a0a:	687b      	ldr	r3, [r7, #4]
 8027a0c:	2201      	movs	r2, #1
 8027a0e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8027a10:	e025      	b.n	8027a5e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8027a12:	687b      	ldr	r3, [r7, #4]
 8027a14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8027a18:	2106      	movs	r1, #6
 8027a1a:	6878      	ldr	r0, [r7, #4]
 8027a1c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8027a1e:	687b      	ldr	r3, [r7, #4]
 8027a20:	2200      	movs	r2, #0
 8027a22:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8027a24:	687b      	ldr	r3, [r7, #4]
 8027a26:	795b      	ldrb	r3, [r3, #5]
 8027a28:	4619      	mov	r1, r3
 8027a2a:	6878      	ldr	r0, [r7, #4]
 8027a2c:	f000 f90c 	bl	8027c48 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8027a30:	687b      	ldr	r3, [r7, #4]
 8027a32:	791b      	ldrb	r3, [r3, #4]
 8027a34:	4619      	mov	r1, r3
 8027a36:	6878      	ldr	r0, [r7, #4]
 8027a38:	f000 f906 	bl	8027c48 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8027a3c:	687b      	ldr	r3, [r7, #4]
 8027a3e:	2200      	movs	r2, #0
 8027a40:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8027a42:	2302      	movs	r3, #2
 8027a44:	73fb      	strb	r3, [r7, #15]
      break;
 8027a46:	e00a      	b.n	8027a5e <USBH_HandleControl+0x2de>

    default:
      break;
 8027a48:	bf00      	nop
 8027a4a:	e008      	b.n	8027a5e <USBH_HandleControl+0x2de>
      break;
 8027a4c:	bf00      	nop
 8027a4e:	e006      	b.n	8027a5e <USBH_HandleControl+0x2de>
      break;
 8027a50:	bf00      	nop
 8027a52:	e004      	b.n	8027a5e <USBH_HandleControl+0x2de>
      break;
 8027a54:	bf00      	nop
 8027a56:	e002      	b.n	8027a5e <USBH_HandleControl+0x2de>
      break;
 8027a58:	bf00      	nop
 8027a5a:	e000      	b.n	8027a5e <USBH_HandleControl+0x2de>
      break;
 8027a5c:	bf00      	nop
  }

  return status;
 8027a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8027a60:	4618      	mov	r0, r3
 8027a62:	3710      	adds	r7, #16
 8027a64:	46bd      	mov	sp, r7
 8027a66:	bd80      	pop	{r7, pc}

08027a68 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8027a68:	b580      	push	{r7, lr}
 8027a6a:	b088      	sub	sp, #32
 8027a6c:	af04      	add	r7, sp, #16
 8027a6e:	60f8      	str	r0, [r7, #12]
 8027a70:	60b9      	str	r1, [r7, #8]
 8027a72:	4613      	mov	r3, r2
 8027a74:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8027a76:	79f9      	ldrb	r1, [r7, #7]
 8027a78:	2300      	movs	r3, #0
 8027a7a:	9303      	str	r3, [sp, #12]
 8027a7c:	2308      	movs	r3, #8
 8027a7e:	9302      	str	r3, [sp, #8]
 8027a80:	68bb      	ldr	r3, [r7, #8]
 8027a82:	9301      	str	r3, [sp, #4]
 8027a84:	2300      	movs	r3, #0
 8027a86:	9300      	str	r3, [sp, #0]
 8027a88:	2300      	movs	r3, #0
 8027a8a:	2200      	movs	r2, #0
 8027a8c:	68f8      	ldr	r0, [r7, #12]
 8027a8e:	f000 fb46 	bl	802811e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8027a92:	2300      	movs	r3, #0
}
 8027a94:	4618      	mov	r0, r3
 8027a96:	3710      	adds	r7, #16
 8027a98:	46bd      	mov	sp, r7
 8027a9a:	bd80      	pop	{r7, pc}

08027a9c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8027a9c:	b580      	push	{r7, lr}
 8027a9e:	b088      	sub	sp, #32
 8027aa0:	af04      	add	r7, sp, #16
 8027aa2:	60f8      	str	r0, [r7, #12]
 8027aa4:	60b9      	str	r1, [r7, #8]
 8027aa6:	4611      	mov	r1, r2
 8027aa8:	461a      	mov	r2, r3
 8027aaa:	460b      	mov	r3, r1
 8027aac:	80fb      	strh	r3, [r7, #6]
 8027aae:	4613      	mov	r3, r2
 8027ab0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8027ab2:	68fb      	ldr	r3, [r7, #12]
 8027ab4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8027ab8:	2b00      	cmp	r3, #0
 8027aba:	d001      	beq.n	8027ac0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8027abc:	2300      	movs	r3, #0
 8027abe:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8027ac0:	7979      	ldrb	r1, [r7, #5]
 8027ac2:	7e3b      	ldrb	r3, [r7, #24]
 8027ac4:	9303      	str	r3, [sp, #12]
 8027ac6:	88fb      	ldrh	r3, [r7, #6]
 8027ac8:	9302      	str	r3, [sp, #8]
 8027aca:	68bb      	ldr	r3, [r7, #8]
 8027acc:	9301      	str	r3, [sp, #4]
 8027ace:	2301      	movs	r3, #1
 8027ad0:	9300      	str	r3, [sp, #0]
 8027ad2:	2300      	movs	r3, #0
 8027ad4:	2200      	movs	r2, #0
 8027ad6:	68f8      	ldr	r0, [r7, #12]
 8027ad8:	f000 fb21 	bl	802811e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8027adc:	2300      	movs	r3, #0
}
 8027ade:	4618      	mov	r0, r3
 8027ae0:	3710      	adds	r7, #16
 8027ae2:	46bd      	mov	sp, r7
 8027ae4:	bd80      	pop	{r7, pc}

08027ae6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8027ae6:	b580      	push	{r7, lr}
 8027ae8:	b088      	sub	sp, #32
 8027aea:	af04      	add	r7, sp, #16
 8027aec:	60f8      	str	r0, [r7, #12]
 8027aee:	60b9      	str	r1, [r7, #8]
 8027af0:	4611      	mov	r1, r2
 8027af2:	461a      	mov	r2, r3
 8027af4:	460b      	mov	r3, r1
 8027af6:	80fb      	strh	r3, [r7, #6]
 8027af8:	4613      	mov	r3, r2
 8027afa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8027afc:	7979      	ldrb	r1, [r7, #5]
 8027afe:	2300      	movs	r3, #0
 8027b00:	9303      	str	r3, [sp, #12]
 8027b02:	88fb      	ldrh	r3, [r7, #6]
 8027b04:	9302      	str	r3, [sp, #8]
 8027b06:	68bb      	ldr	r3, [r7, #8]
 8027b08:	9301      	str	r3, [sp, #4]
 8027b0a:	2301      	movs	r3, #1
 8027b0c:	9300      	str	r3, [sp, #0]
 8027b0e:	2300      	movs	r3, #0
 8027b10:	2201      	movs	r2, #1
 8027b12:	68f8      	ldr	r0, [r7, #12]
 8027b14:	f000 fb03 	bl	802811e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8027b18:	2300      	movs	r3, #0

}
 8027b1a:	4618      	mov	r0, r3
 8027b1c:	3710      	adds	r7, #16
 8027b1e:	46bd      	mov	sp, r7
 8027b20:	bd80      	pop	{r7, pc}

08027b22 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8027b22:	b580      	push	{r7, lr}
 8027b24:	b088      	sub	sp, #32
 8027b26:	af04      	add	r7, sp, #16
 8027b28:	60f8      	str	r0, [r7, #12]
 8027b2a:	60b9      	str	r1, [r7, #8]
 8027b2c:	4611      	mov	r1, r2
 8027b2e:	461a      	mov	r2, r3
 8027b30:	460b      	mov	r3, r1
 8027b32:	80fb      	strh	r3, [r7, #6]
 8027b34:	4613      	mov	r3, r2
 8027b36:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8027b38:	68fb      	ldr	r3, [r7, #12]
 8027b3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8027b3e:	2b00      	cmp	r3, #0
 8027b40:	d001      	beq.n	8027b46 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8027b42:	2300      	movs	r3, #0
 8027b44:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8027b46:	7979      	ldrb	r1, [r7, #5]
 8027b48:	7e3b      	ldrb	r3, [r7, #24]
 8027b4a:	9303      	str	r3, [sp, #12]
 8027b4c:	88fb      	ldrh	r3, [r7, #6]
 8027b4e:	9302      	str	r3, [sp, #8]
 8027b50:	68bb      	ldr	r3, [r7, #8]
 8027b52:	9301      	str	r3, [sp, #4]
 8027b54:	2301      	movs	r3, #1
 8027b56:	9300      	str	r3, [sp, #0]
 8027b58:	2302      	movs	r3, #2
 8027b5a:	2200      	movs	r2, #0
 8027b5c:	68f8      	ldr	r0, [r7, #12]
 8027b5e:	f000 fade 	bl	802811e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8027b62:	2300      	movs	r3, #0
}
 8027b64:	4618      	mov	r0, r3
 8027b66:	3710      	adds	r7, #16
 8027b68:	46bd      	mov	sp, r7
 8027b6a:	bd80      	pop	{r7, pc}

08027b6c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8027b6c:	b580      	push	{r7, lr}
 8027b6e:	b088      	sub	sp, #32
 8027b70:	af04      	add	r7, sp, #16
 8027b72:	60f8      	str	r0, [r7, #12]
 8027b74:	60b9      	str	r1, [r7, #8]
 8027b76:	4611      	mov	r1, r2
 8027b78:	461a      	mov	r2, r3
 8027b7a:	460b      	mov	r3, r1
 8027b7c:	80fb      	strh	r3, [r7, #6]
 8027b7e:	4613      	mov	r3, r2
 8027b80:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8027b82:	7979      	ldrb	r1, [r7, #5]
 8027b84:	2300      	movs	r3, #0
 8027b86:	9303      	str	r3, [sp, #12]
 8027b88:	88fb      	ldrh	r3, [r7, #6]
 8027b8a:	9302      	str	r3, [sp, #8]
 8027b8c:	68bb      	ldr	r3, [r7, #8]
 8027b8e:	9301      	str	r3, [sp, #4]
 8027b90:	2301      	movs	r3, #1
 8027b92:	9300      	str	r3, [sp, #0]
 8027b94:	2302      	movs	r3, #2
 8027b96:	2201      	movs	r2, #1
 8027b98:	68f8      	ldr	r0, [r7, #12]
 8027b9a:	f000 fac0 	bl	802811e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8027b9e:	2300      	movs	r3, #0
}
 8027ba0:	4618      	mov	r0, r3
 8027ba2:	3710      	adds	r7, #16
 8027ba4:	46bd      	mov	sp, r7
 8027ba6:	bd80      	pop	{r7, pc}

08027ba8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8027ba8:	b580      	push	{r7, lr}
 8027baa:	b086      	sub	sp, #24
 8027bac:	af04      	add	r7, sp, #16
 8027bae:	6078      	str	r0, [r7, #4]
 8027bb0:	4608      	mov	r0, r1
 8027bb2:	4611      	mov	r1, r2
 8027bb4:	461a      	mov	r2, r3
 8027bb6:	4603      	mov	r3, r0
 8027bb8:	70fb      	strb	r3, [r7, #3]
 8027bba:	460b      	mov	r3, r1
 8027bbc:	70bb      	strb	r3, [r7, #2]
 8027bbe:	4613      	mov	r3, r2
 8027bc0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8027bc2:	7878      	ldrb	r0, [r7, #1]
 8027bc4:	78ba      	ldrb	r2, [r7, #2]
 8027bc6:	78f9      	ldrb	r1, [r7, #3]
 8027bc8:	8b3b      	ldrh	r3, [r7, #24]
 8027bca:	9302      	str	r3, [sp, #8]
 8027bcc:	7d3b      	ldrb	r3, [r7, #20]
 8027bce:	9301      	str	r3, [sp, #4]
 8027bd0:	7c3b      	ldrb	r3, [r7, #16]
 8027bd2:	9300      	str	r3, [sp, #0]
 8027bd4:	4603      	mov	r3, r0
 8027bd6:	6878      	ldr	r0, [r7, #4]
 8027bd8:	f000 fa53 	bl	8028082 <USBH_LL_OpenPipe>

  return USBH_OK;
 8027bdc:	2300      	movs	r3, #0
}
 8027bde:	4618      	mov	r0, r3
 8027be0:	3708      	adds	r7, #8
 8027be2:	46bd      	mov	sp, r7
 8027be4:	bd80      	pop	{r7, pc}

08027be6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8027be6:	b580      	push	{r7, lr}
 8027be8:	b082      	sub	sp, #8
 8027bea:	af00      	add	r7, sp, #0
 8027bec:	6078      	str	r0, [r7, #4]
 8027bee:	460b      	mov	r3, r1
 8027bf0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8027bf2:	78fb      	ldrb	r3, [r7, #3]
 8027bf4:	4619      	mov	r1, r3
 8027bf6:	6878      	ldr	r0, [r7, #4]
 8027bf8:	f000 fa72 	bl	80280e0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8027bfc:	2300      	movs	r3, #0
}
 8027bfe:	4618      	mov	r0, r3
 8027c00:	3708      	adds	r7, #8
 8027c02:	46bd      	mov	sp, r7
 8027c04:	bd80      	pop	{r7, pc}

08027c06 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8027c06:	b580      	push	{r7, lr}
 8027c08:	b084      	sub	sp, #16
 8027c0a:	af00      	add	r7, sp, #0
 8027c0c:	6078      	str	r0, [r7, #4]
 8027c0e:	460b      	mov	r3, r1
 8027c10:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8027c12:	6878      	ldr	r0, [r7, #4]
 8027c14:	f000 f836 	bl	8027c84 <USBH_GetFreePipe>
 8027c18:	4603      	mov	r3, r0
 8027c1a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8027c1c:	89fb      	ldrh	r3, [r7, #14]
 8027c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8027c22:	4293      	cmp	r3, r2
 8027c24:	d00a      	beq.n	8027c3c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8027c26:	78fa      	ldrb	r2, [r7, #3]
 8027c28:	89fb      	ldrh	r3, [r7, #14]
 8027c2a:	f003 030f 	and.w	r3, r3, #15
 8027c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8027c32:	6879      	ldr	r1, [r7, #4]
 8027c34:	33e0      	adds	r3, #224	; 0xe0
 8027c36:	009b      	lsls	r3, r3, #2
 8027c38:	440b      	add	r3, r1
 8027c3a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8027c3c:	89fb      	ldrh	r3, [r7, #14]
 8027c3e:	b2db      	uxtb	r3, r3
}
 8027c40:	4618      	mov	r0, r3
 8027c42:	3710      	adds	r7, #16
 8027c44:	46bd      	mov	sp, r7
 8027c46:	bd80      	pop	{r7, pc}

08027c48 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8027c48:	b480      	push	{r7}
 8027c4a:	b083      	sub	sp, #12
 8027c4c:	af00      	add	r7, sp, #0
 8027c4e:	6078      	str	r0, [r7, #4]
 8027c50:	460b      	mov	r3, r1
 8027c52:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8027c54:	78fb      	ldrb	r3, [r7, #3]
 8027c56:	2b0a      	cmp	r3, #10
 8027c58:	d80d      	bhi.n	8027c76 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8027c5a:	78fb      	ldrb	r3, [r7, #3]
 8027c5c:	687a      	ldr	r2, [r7, #4]
 8027c5e:	33e0      	adds	r3, #224	; 0xe0
 8027c60:	009b      	lsls	r3, r3, #2
 8027c62:	4413      	add	r3, r2
 8027c64:	685a      	ldr	r2, [r3, #4]
 8027c66:	78fb      	ldrb	r3, [r7, #3]
 8027c68:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8027c6c:	6879      	ldr	r1, [r7, #4]
 8027c6e:	33e0      	adds	r3, #224	; 0xe0
 8027c70:	009b      	lsls	r3, r3, #2
 8027c72:	440b      	add	r3, r1
 8027c74:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8027c76:	2300      	movs	r3, #0
}
 8027c78:	4618      	mov	r0, r3
 8027c7a:	370c      	adds	r7, #12
 8027c7c:	46bd      	mov	sp, r7
 8027c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c82:	4770      	bx	lr

08027c84 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8027c84:	b480      	push	{r7}
 8027c86:	b085      	sub	sp, #20
 8027c88:	af00      	add	r7, sp, #0
 8027c8a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8027c8c:	2300      	movs	r3, #0
 8027c8e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8027c90:	2300      	movs	r3, #0
 8027c92:	73fb      	strb	r3, [r7, #15]
 8027c94:	e00f      	b.n	8027cb6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8027c96:	7bfb      	ldrb	r3, [r7, #15]
 8027c98:	687a      	ldr	r2, [r7, #4]
 8027c9a:	33e0      	adds	r3, #224	; 0xe0
 8027c9c:	009b      	lsls	r3, r3, #2
 8027c9e:	4413      	add	r3, r2
 8027ca0:	685b      	ldr	r3, [r3, #4]
 8027ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8027ca6:	2b00      	cmp	r3, #0
 8027ca8:	d102      	bne.n	8027cb0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8027caa:	7bfb      	ldrb	r3, [r7, #15]
 8027cac:	b29b      	uxth	r3, r3
 8027cae:	e007      	b.n	8027cc0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8027cb0:	7bfb      	ldrb	r3, [r7, #15]
 8027cb2:	3301      	adds	r3, #1
 8027cb4:	73fb      	strb	r3, [r7, #15]
 8027cb6:	7bfb      	ldrb	r3, [r7, #15]
 8027cb8:	2b0a      	cmp	r3, #10
 8027cba:	d9ec      	bls.n	8027c96 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8027cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8027cc0:	4618      	mov	r0, r3
 8027cc2:	3714      	adds	r7, #20
 8027cc4:	46bd      	mov	sp, r7
 8027cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cca:	4770      	bx	lr

08027ccc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8027ccc:	b580      	push	{r7, lr}
 8027cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8027cd0:	2201      	movs	r2, #1
 8027cd2:	490e      	ldr	r1, [pc, #56]	; (8027d0c <MX_USB_HOST_Init+0x40>)
 8027cd4:	480e      	ldr	r0, [pc, #56]	; (8027d10 <MX_USB_HOST_Init+0x44>)
 8027cd6:	f7fe fca1 	bl	802661c <USBH_Init>
 8027cda:	4603      	mov	r3, r0
 8027cdc:	2b00      	cmp	r3, #0
 8027cde:	d001      	beq.n	8027ce4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8027ce0:	f7f8 fe76 	bl	80209d0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8027ce4:	490b      	ldr	r1, [pc, #44]	; (8027d14 <MX_USB_HOST_Init+0x48>)
 8027ce6:	480a      	ldr	r0, [pc, #40]	; (8027d10 <MX_USB_HOST_Init+0x44>)
 8027ce8:	f7fe fd26 	bl	8026738 <USBH_RegisterClass>
 8027cec:	4603      	mov	r3, r0
 8027cee:	2b00      	cmp	r3, #0
 8027cf0:	d001      	beq.n	8027cf6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8027cf2:	f7f8 fe6d 	bl	80209d0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8027cf6:	4806      	ldr	r0, [pc, #24]	; (8027d10 <MX_USB_HOST_Init+0x44>)
 8027cf8:	f7fe fdaa 	bl	8026850 <USBH_Start>
 8027cfc:	4603      	mov	r3, r0
 8027cfe:	2b00      	cmp	r3, #0
 8027d00:	d001      	beq.n	8027d06 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8027d02:	f7f8 fe65 	bl	80209d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8027d06:	bf00      	nop
 8027d08:	bd80      	pop	{r7, pc}
 8027d0a:	bf00      	nop
 8027d0c:	08027d2d 	.word	0x08027d2d
 8027d10:	20000268 	.word	0x20000268
 8027d14:	20000034 	.word	0x20000034

08027d18 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8027d18:	b580      	push	{r7, lr}
 8027d1a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8027d1c:	4802      	ldr	r0, [pc, #8]	; (8027d28 <MX_USB_HOST_Process+0x10>)
 8027d1e:	f7fe fda7 	bl	8026870 <USBH_Process>
}
 8027d22:	bf00      	nop
 8027d24:	bd80      	pop	{r7, pc}
 8027d26:	bf00      	nop
 8027d28:	20000268 	.word	0x20000268

08027d2c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8027d2c:	b480      	push	{r7}
 8027d2e:	b083      	sub	sp, #12
 8027d30:	af00      	add	r7, sp, #0
 8027d32:	6078      	str	r0, [r7, #4]
 8027d34:	460b      	mov	r3, r1
 8027d36:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8027d38:	78fb      	ldrb	r3, [r7, #3]
 8027d3a:	3b01      	subs	r3, #1
 8027d3c:	2b04      	cmp	r3, #4
 8027d3e:	d819      	bhi.n	8027d74 <USBH_UserProcess+0x48>
 8027d40:	a201      	add	r2, pc, #4	; (adr r2, 8027d48 <USBH_UserProcess+0x1c>)
 8027d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027d46:	bf00      	nop
 8027d48:	08027d75 	.word	0x08027d75
 8027d4c:	08027d65 	.word	0x08027d65
 8027d50:	08027d75 	.word	0x08027d75
 8027d54:	08027d6d 	.word	0x08027d6d
 8027d58:	08027d5d 	.word	0x08027d5d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8027d5c:	4b09      	ldr	r3, [pc, #36]	; (8027d84 <USBH_UserProcess+0x58>)
 8027d5e:	2203      	movs	r2, #3
 8027d60:	701a      	strb	r2, [r3, #0]
  break;
 8027d62:	e008      	b.n	8027d76 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8027d64:	4b07      	ldr	r3, [pc, #28]	; (8027d84 <USBH_UserProcess+0x58>)
 8027d66:	2202      	movs	r2, #2
 8027d68:	701a      	strb	r2, [r3, #0]
  break;
 8027d6a:	e004      	b.n	8027d76 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8027d6c:	4b05      	ldr	r3, [pc, #20]	; (8027d84 <USBH_UserProcess+0x58>)
 8027d6e:	2201      	movs	r2, #1
 8027d70:	701a      	strb	r2, [r3, #0]
  break;
 8027d72:	e000      	b.n	8027d76 <USBH_UserProcess+0x4a>

  default:
  break;
 8027d74:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8027d76:	bf00      	nop
 8027d78:	370c      	adds	r7, #12
 8027d7a:	46bd      	mov	sp, r7
 8027d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d80:	4770      	bx	lr
 8027d82:	bf00      	nop
 8027d84:	200000dc 	.word	0x200000dc

08027d88 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8027d88:	b580      	push	{r7, lr}
 8027d8a:	b08a      	sub	sp, #40	; 0x28
 8027d8c:	af00      	add	r7, sp, #0
 8027d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8027d90:	f107 0314 	add.w	r3, r7, #20
 8027d94:	2200      	movs	r2, #0
 8027d96:	601a      	str	r2, [r3, #0]
 8027d98:	605a      	str	r2, [r3, #4]
 8027d9a:	609a      	str	r2, [r3, #8]
 8027d9c:	60da      	str	r2, [r3, #12]
 8027d9e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8027da0:	687b      	ldr	r3, [r7, #4]
 8027da2:	681b      	ldr	r3, [r3, #0]
 8027da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8027da8:	d147      	bne.n	8027e3a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8027daa:	2300      	movs	r3, #0
 8027dac:	613b      	str	r3, [r7, #16]
 8027dae:	4b25      	ldr	r3, [pc, #148]	; (8027e44 <HAL_HCD_MspInit+0xbc>)
 8027db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027db2:	4a24      	ldr	r2, [pc, #144]	; (8027e44 <HAL_HCD_MspInit+0xbc>)
 8027db4:	f043 0301 	orr.w	r3, r3, #1
 8027db8:	6313      	str	r3, [r2, #48]	; 0x30
 8027dba:	4b22      	ldr	r3, [pc, #136]	; (8027e44 <HAL_HCD_MspInit+0xbc>)
 8027dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027dbe:	f003 0301 	and.w	r3, r3, #1
 8027dc2:	613b      	str	r3, [r7, #16]
 8027dc4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8027dc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8027dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8027dcc:	2300      	movs	r3, #0
 8027dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8027dd0:	2300      	movs	r3, #0
 8027dd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8027dd4:	f107 0314 	add.w	r3, r7, #20
 8027dd8:	4619      	mov	r1, r3
 8027dda:	481b      	ldr	r0, [pc, #108]	; (8027e48 <HAL_HCD_MspInit+0xc0>)
 8027ddc:	f7f9 fa4a 	bl	8021274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8027de0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8027de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8027de6:	2302      	movs	r3, #2
 8027de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8027dea:	2300      	movs	r3, #0
 8027dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8027dee:	2300      	movs	r3, #0
 8027df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8027df2:	230a      	movs	r3, #10
 8027df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8027df6:	f107 0314 	add.w	r3, r7, #20
 8027dfa:	4619      	mov	r1, r3
 8027dfc:	4812      	ldr	r0, [pc, #72]	; (8027e48 <HAL_HCD_MspInit+0xc0>)
 8027dfe:	f7f9 fa39 	bl	8021274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8027e02:	4b10      	ldr	r3, [pc, #64]	; (8027e44 <HAL_HCD_MspInit+0xbc>)
 8027e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8027e06:	4a0f      	ldr	r2, [pc, #60]	; (8027e44 <HAL_HCD_MspInit+0xbc>)
 8027e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027e0c:	6353      	str	r3, [r2, #52]	; 0x34
 8027e0e:	2300      	movs	r3, #0
 8027e10:	60fb      	str	r3, [r7, #12]
 8027e12:	4b0c      	ldr	r3, [pc, #48]	; (8027e44 <HAL_HCD_MspInit+0xbc>)
 8027e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027e16:	4a0b      	ldr	r2, [pc, #44]	; (8027e44 <HAL_HCD_MspInit+0xbc>)
 8027e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8027e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8027e1e:	4b09      	ldr	r3, [pc, #36]	; (8027e44 <HAL_HCD_MspInit+0xbc>)
 8027e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8027e26:	60fb      	str	r3, [r7, #12]
 8027e28:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8027e2a:	2200      	movs	r2, #0
 8027e2c:	2100      	movs	r1, #0
 8027e2e:	2043      	movs	r0, #67	; 0x43
 8027e30:	f7f9 f9e9 	bl	8021206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8027e34:	2043      	movs	r0, #67	; 0x43
 8027e36:	f7f9 fa02 	bl	802123e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8027e3a:	bf00      	nop
 8027e3c:	3728      	adds	r7, #40	; 0x28
 8027e3e:	46bd      	mov	sp, r7
 8027e40:	bd80      	pop	{r7, pc}
 8027e42:	bf00      	nop
 8027e44:	40023800 	.word	0x40023800
 8027e48:	40020000 	.word	0x40020000

08027e4c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8027e4c:	b580      	push	{r7, lr}
 8027e4e:	b082      	sub	sp, #8
 8027e50:	af00      	add	r7, sp, #0
 8027e52:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8027e54:	687b      	ldr	r3, [r7, #4]
 8027e56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8027e5a:	4618      	mov	r0, r3
 8027e5c:	f7ff f8db 	bl	8027016 <USBH_LL_IncTimer>
}
 8027e60:	bf00      	nop
 8027e62:	3708      	adds	r7, #8
 8027e64:	46bd      	mov	sp, r7
 8027e66:	bd80      	pop	{r7, pc}

08027e68 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8027e68:	b580      	push	{r7, lr}
 8027e6a:	b082      	sub	sp, #8
 8027e6c:	af00      	add	r7, sp, #0
 8027e6e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8027e70:	687b      	ldr	r3, [r7, #4]
 8027e72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8027e76:	4618      	mov	r0, r3
 8027e78:	f7ff f913 	bl	80270a2 <USBH_LL_Connect>
}
 8027e7c:	bf00      	nop
 8027e7e:	3708      	adds	r7, #8
 8027e80:	46bd      	mov	sp, r7
 8027e82:	bd80      	pop	{r7, pc}

08027e84 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8027e84:	b580      	push	{r7, lr}
 8027e86:	b082      	sub	sp, #8
 8027e88:	af00      	add	r7, sp, #0
 8027e8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8027e8c:	687b      	ldr	r3, [r7, #4]
 8027e8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8027e92:	4618      	mov	r0, r3
 8027e94:	f7ff f91c 	bl	80270d0 <USBH_LL_Disconnect>
}
 8027e98:	bf00      	nop
 8027e9a:	3708      	adds	r7, #8
 8027e9c:	46bd      	mov	sp, r7
 8027e9e:	bd80      	pop	{r7, pc}

08027ea0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8027ea0:	b480      	push	{r7}
 8027ea2:	b083      	sub	sp, #12
 8027ea4:	af00      	add	r7, sp, #0
 8027ea6:	6078      	str	r0, [r7, #4]
 8027ea8:	460b      	mov	r3, r1
 8027eaa:	70fb      	strb	r3, [r7, #3]
 8027eac:	4613      	mov	r3, r2
 8027eae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8027eb0:	bf00      	nop
 8027eb2:	370c      	adds	r7, #12
 8027eb4:	46bd      	mov	sp, r7
 8027eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027eba:	4770      	bx	lr

08027ebc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8027ebc:	b580      	push	{r7, lr}
 8027ebe:	b082      	sub	sp, #8
 8027ec0:	af00      	add	r7, sp, #0
 8027ec2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8027ec4:	687b      	ldr	r3, [r7, #4]
 8027ec6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8027eca:	4618      	mov	r0, r3
 8027ecc:	f7ff f8cd 	bl	802706a <USBH_LL_PortEnabled>
}
 8027ed0:	bf00      	nop
 8027ed2:	3708      	adds	r7, #8
 8027ed4:	46bd      	mov	sp, r7
 8027ed6:	bd80      	pop	{r7, pc}

08027ed8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8027ed8:	b580      	push	{r7, lr}
 8027eda:	b082      	sub	sp, #8
 8027edc:	af00      	add	r7, sp, #0
 8027ede:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8027ee0:	687b      	ldr	r3, [r7, #4]
 8027ee2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8027ee6:	4618      	mov	r0, r3
 8027ee8:	f7ff f8cd 	bl	8027086 <USBH_LL_PortDisabled>
}
 8027eec:	bf00      	nop
 8027eee:	3708      	adds	r7, #8
 8027ef0:	46bd      	mov	sp, r7
 8027ef2:	bd80      	pop	{r7, pc}

08027ef4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8027ef4:	b580      	push	{r7, lr}
 8027ef6:	b082      	sub	sp, #8
 8027ef8:	af00      	add	r7, sp, #0
 8027efa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8027efc:	687b      	ldr	r3, [r7, #4]
 8027efe:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8027f02:	2b01      	cmp	r3, #1
 8027f04:	d12a      	bne.n	8027f5c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8027f06:	4a18      	ldr	r2, [pc, #96]	; (8027f68 <USBH_LL_Init+0x74>)
 8027f08:	687b      	ldr	r3, [r7, #4]
 8027f0a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8027f0e:	687b      	ldr	r3, [r7, #4]
 8027f10:	4a15      	ldr	r2, [pc, #84]	; (8027f68 <USBH_LL_Init+0x74>)
 8027f12:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8027f16:	4b14      	ldr	r3, [pc, #80]	; (8027f68 <USBH_LL_Init+0x74>)
 8027f18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8027f1c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8027f1e:	4b12      	ldr	r3, [pc, #72]	; (8027f68 <USBH_LL_Init+0x74>)
 8027f20:	2208      	movs	r2, #8
 8027f22:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8027f24:	4b10      	ldr	r3, [pc, #64]	; (8027f68 <USBH_LL_Init+0x74>)
 8027f26:	2201      	movs	r2, #1
 8027f28:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8027f2a:	4b0f      	ldr	r3, [pc, #60]	; (8027f68 <USBH_LL_Init+0x74>)
 8027f2c:	2200      	movs	r2, #0
 8027f2e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8027f30:	4b0d      	ldr	r3, [pc, #52]	; (8027f68 <USBH_LL_Init+0x74>)
 8027f32:	2202      	movs	r2, #2
 8027f34:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8027f36:	4b0c      	ldr	r3, [pc, #48]	; (8027f68 <USBH_LL_Init+0x74>)
 8027f38:	2200      	movs	r2, #0
 8027f3a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8027f3c:	480a      	ldr	r0, [pc, #40]	; (8027f68 <USBH_LL_Init+0x74>)
 8027f3e:	f7f9 fb72 	bl	8021626 <HAL_HCD_Init>
 8027f42:	4603      	mov	r3, r0
 8027f44:	2b00      	cmp	r3, #0
 8027f46:	d001      	beq.n	8027f4c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8027f48:	f7f8 fd42 	bl	80209d0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8027f4c:	4806      	ldr	r0, [pc, #24]	; (8027f68 <USBH_LL_Init+0x74>)
 8027f4e:	f7f9 ff56 	bl	8021dfe <HAL_HCD_GetCurrentFrame>
 8027f52:	4603      	mov	r3, r0
 8027f54:	4619      	mov	r1, r3
 8027f56:	6878      	ldr	r0, [r7, #4]
 8027f58:	f7ff f84e 	bl	8026ff8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8027f5c:	2300      	movs	r3, #0
}
 8027f5e:	4618      	mov	r0, r3
 8027f60:	3708      	adds	r7, #8
 8027f62:	46bd      	mov	sp, r7
 8027f64:	bd80      	pop	{r7, pc}
 8027f66:	bf00      	nop
 8027f68:	20000640 	.word	0x20000640

08027f6c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8027f6c:	b580      	push	{r7, lr}
 8027f6e:	b084      	sub	sp, #16
 8027f70:	af00      	add	r7, sp, #0
 8027f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8027f74:	2300      	movs	r3, #0
 8027f76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8027f78:	2300      	movs	r3, #0
 8027f7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8027f7c:	687b      	ldr	r3, [r7, #4]
 8027f7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8027f82:	4618      	mov	r0, r3
 8027f84:	f7f9 fec5 	bl	8021d12 <HAL_HCD_Start>
 8027f88:	4603      	mov	r3, r0
 8027f8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8027f8c:	7bfb      	ldrb	r3, [r7, #15]
 8027f8e:	4618      	mov	r0, r3
 8027f90:	f000 f95c 	bl	802824c <USBH_Get_USB_Status>
 8027f94:	4603      	mov	r3, r0
 8027f96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8027f98:	7bbb      	ldrb	r3, [r7, #14]
}
 8027f9a:	4618      	mov	r0, r3
 8027f9c:	3710      	adds	r7, #16
 8027f9e:	46bd      	mov	sp, r7
 8027fa0:	bd80      	pop	{r7, pc}

08027fa2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8027fa2:	b580      	push	{r7, lr}
 8027fa4:	b084      	sub	sp, #16
 8027fa6:	af00      	add	r7, sp, #0
 8027fa8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8027faa:	2300      	movs	r3, #0
 8027fac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8027fae:	2300      	movs	r3, #0
 8027fb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8027fb2:	687b      	ldr	r3, [r7, #4]
 8027fb4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8027fb8:	4618      	mov	r0, r3
 8027fba:	f7f9 fecd 	bl	8021d58 <HAL_HCD_Stop>
 8027fbe:	4603      	mov	r3, r0
 8027fc0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8027fc2:	7bfb      	ldrb	r3, [r7, #15]
 8027fc4:	4618      	mov	r0, r3
 8027fc6:	f000 f941 	bl	802824c <USBH_Get_USB_Status>
 8027fca:	4603      	mov	r3, r0
 8027fcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8027fce:	7bbb      	ldrb	r3, [r7, #14]
}
 8027fd0:	4618      	mov	r0, r3
 8027fd2:	3710      	adds	r7, #16
 8027fd4:	46bd      	mov	sp, r7
 8027fd6:	bd80      	pop	{r7, pc}

08027fd8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8027fd8:	b580      	push	{r7, lr}
 8027fda:	b084      	sub	sp, #16
 8027fdc:	af00      	add	r7, sp, #0
 8027fde:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8027fe0:	2301      	movs	r3, #1
 8027fe2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8027fe4:	687b      	ldr	r3, [r7, #4]
 8027fe6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8027fea:	4618      	mov	r0, r3
 8027fec:	f7f9 ff15 	bl	8021e1a <HAL_HCD_GetCurrentSpeed>
 8027ff0:	4603      	mov	r3, r0
 8027ff2:	2b02      	cmp	r3, #2
 8027ff4:	d00c      	beq.n	8028010 <USBH_LL_GetSpeed+0x38>
 8027ff6:	2b02      	cmp	r3, #2
 8027ff8:	d80d      	bhi.n	8028016 <USBH_LL_GetSpeed+0x3e>
 8027ffa:	2b00      	cmp	r3, #0
 8027ffc:	d002      	beq.n	8028004 <USBH_LL_GetSpeed+0x2c>
 8027ffe:	2b01      	cmp	r3, #1
 8028000:	d003      	beq.n	802800a <USBH_LL_GetSpeed+0x32>
 8028002:	e008      	b.n	8028016 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8028004:	2300      	movs	r3, #0
 8028006:	73fb      	strb	r3, [r7, #15]
    break;
 8028008:	e008      	b.n	802801c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 802800a:	2301      	movs	r3, #1
 802800c:	73fb      	strb	r3, [r7, #15]
    break;
 802800e:	e005      	b.n	802801c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8028010:	2302      	movs	r3, #2
 8028012:	73fb      	strb	r3, [r7, #15]
    break;
 8028014:	e002      	b.n	802801c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8028016:	2301      	movs	r3, #1
 8028018:	73fb      	strb	r3, [r7, #15]
    break;
 802801a:	bf00      	nop
  }
  return  speed;
 802801c:	7bfb      	ldrb	r3, [r7, #15]
}
 802801e:	4618      	mov	r0, r3
 8028020:	3710      	adds	r7, #16
 8028022:	46bd      	mov	sp, r7
 8028024:	bd80      	pop	{r7, pc}

08028026 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8028026:	b580      	push	{r7, lr}
 8028028:	b084      	sub	sp, #16
 802802a:	af00      	add	r7, sp, #0
 802802c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802802e:	2300      	movs	r3, #0
 8028030:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8028032:	2300      	movs	r3, #0
 8028034:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8028036:	687b      	ldr	r3, [r7, #4]
 8028038:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802803c:	4618      	mov	r0, r3
 802803e:	f7f9 fea8 	bl	8021d92 <HAL_HCD_ResetPort>
 8028042:	4603      	mov	r3, r0
 8028044:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8028046:	7bfb      	ldrb	r3, [r7, #15]
 8028048:	4618      	mov	r0, r3
 802804a:	f000 f8ff 	bl	802824c <USBH_Get_USB_Status>
 802804e:	4603      	mov	r3, r0
 8028050:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8028052:	7bbb      	ldrb	r3, [r7, #14]
}
 8028054:	4618      	mov	r0, r3
 8028056:	3710      	adds	r7, #16
 8028058:	46bd      	mov	sp, r7
 802805a:	bd80      	pop	{r7, pc}

0802805c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802805c:	b580      	push	{r7, lr}
 802805e:	b082      	sub	sp, #8
 8028060:	af00      	add	r7, sp, #0
 8028062:	6078      	str	r0, [r7, #4]
 8028064:	460b      	mov	r3, r1
 8028066:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8028068:	687b      	ldr	r3, [r7, #4]
 802806a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802806e:	78fa      	ldrb	r2, [r7, #3]
 8028070:	4611      	mov	r1, r2
 8028072:	4618      	mov	r0, r3
 8028074:	f7f9 feaf 	bl	8021dd6 <HAL_HCD_HC_GetXferCount>
 8028078:	4603      	mov	r3, r0
}
 802807a:	4618      	mov	r0, r3
 802807c:	3708      	adds	r7, #8
 802807e:	46bd      	mov	sp, r7
 8028080:	bd80      	pop	{r7, pc}

08028082 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8028082:	b590      	push	{r4, r7, lr}
 8028084:	b089      	sub	sp, #36	; 0x24
 8028086:	af04      	add	r7, sp, #16
 8028088:	6078      	str	r0, [r7, #4]
 802808a:	4608      	mov	r0, r1
 802808c:	4611      	mov	r1, r2
 802808e:	461a      	mov	r2, r3
 8028090:	4603      	mov	r3, r0
 8028092:	70fb      	strb	r3, [r7, #3]
 8028094:	460b      	mov	r3, r1
 8028096:	70bb      	strb	r3, [r7, #2]
 8028098:	4613      	mov	r3, r2
 802809a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802809c:	2300      	movs	r3, #0
 802809e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80280a0:	2300      	movs	r3, #0
 80280a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80280a4:	687b      	ldr	r3, [r7, #4]
 80280a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80280aa:	787c      	ldrb	r4, [r7, #1]
 80280ac:	78ba      	ldrb	r2, [r7, #2]
 80280ae:	78f9      	ldrb	r1, [r7, #3]
 80280b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80280b2:	9302      	str	r3, [sp, #8]
 80280b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80280b8:	9301      	str	r3, [sp, #4]
 80280ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80280be:	9300      	str	r3, [sp, #0]
 80280c0:	4623      	mov	r3, r4
 80280c2:	f7f9 fb12 	bl	80216ea <HAL_HCD_HC_Init>
 80280c6:	4603      	mov	r3, r0
 80280c8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80280ca:	7bfb      	ldrb	r3, [r7, #15]
 80280cc:	4618      	mov	r0, r3
 80280ce:	f000 f8bd 	bl	802824c <USBH_Get_USB_Status>
 80280d2:	4603      	mov	r3, r0
 80280d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80280d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80280d8:	4618      	mov	r0, r3
 80280da:	3714      	adds	r7, #20
 80280dc:	46bd      	mov	sp, r7
 80280de:	bd90      	pop	{r4, r7, pc}

080280e0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80280e0:	b580      	push	{r7, lr}
 80280e2:	b084      	sub	sp, #16
 80280e4:	af00      	add	r7, sp, #0
 80280e6:	6078      	str	r0, [r7, #4]
 80280e8:	460b      	mov	r3, r1
 80280ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80280ec:	2300      	movs	r3, #0
 80280ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80280f0:	2300      	movs	r3, #0
 80280f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80280f4:	687b      	ldr	r3, [r7, #4]
 80280f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80280fa:	78fa      	ldrb	r2, [r7, #3]
 80280fc:	4611      	mov	r1, r2
 80280fe:	4618      	mov	r0, r3
 8028100:	f7f9 fb82 	bl	8021808 <HAL_HCD_HC_Halt>
 8028104:	4603      	mov	r3, r0
 8028106:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8028108:	7bfb      	ldrb	r3, [r7, #15]
 802810a:	4618      	mov	r0, r3
 802810c:	f000 f89e 	bl	802824c <USBH_Get_USB_Status>
 8028110:	4603      	mov	r3, r0
 8028112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8028114:	7bbb      	ldrb	r3, [r7, #14]
}
 8028116:	4618      	mov	r0, r3
 8028118:	3710      	adds	r7, #16
 802811a:	46bd      	mov	sp, r7
 802811c:	bd80      	pop	{r7, pc}

0802811e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 802811e:	b590      	push	{r4, r7, lr}
 8028120:	b089      	sub	sp, #36	; 0x24
 8028122:	af04      	add	r7, sp, #16
 8028124:	6078      	str	r0, [r7, #4]
 8028126:	4608      	mov	r0, r1
 8028128:	4611      	mov	r1, r2
 802812a:	461a      	mov	r2, r3
 802812c:	4603      	mov	r3, r0
 802812e:	70fb      	strb	r3, [r7, #3]
 8028130:	460b      	mov	r3, r1
 8028132:	70bb      	strb	r3, [r7, #2]
 8028134:	4613      	mov	r3, r2
 8028136:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8028138:	2300      	movs	r3, #0
 802813a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802813c:	2300      	movs	r3, #0
 802813e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8028140:	687b      	ldr	r3, [r7, #4]
 8028142:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8028146:	787c      	ldrb	r4, [r7, #1]
 8028148:	78ba      	ldrb	r2, [r7, #2]
 802814a:	78f9      	ldrb	r1, [r7, #3]
 802814c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8028150:	9303      	str	r3, [sp, #12]
 8028152:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8028154:	9302      	str	r3, [sp, #8]
 8028156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028158:	9301      	str	r3, [sp, #4]
 802815a:	f897 3020 	ldrb.w	r3, [r7, #32]
 802815e:	9300      	str	r3, [sp, #0]
 8028160:	4623      	mov	r3, r4
 8028162:	f7f9 fb75 	bl	8021850 <HAL_HCD_HC_SubmitRequest>
 8028166:	4603      	mov	r3, r0
 8028168:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 802816a:	7bfb      	ldrb	r3, [r7, #15]
 802816c:	4618      	mov	r0, r3
 802816e:	f000 f86d 	bl	802824c <USBH_Get_USB_Status>
 8028172:	4603      	mov	r3, r0
 8028174:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8028176:	7bbb      	ldrb	r3, [r7, #14]
}
 8028178:	4618      	mov	r0, r3
 802817a:	3714      	adds	r7, #20
 802817c:	46bd      	mov	sp, r7
 802817e:	bd90      	pop	{r4, r7, pc}

08028180 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8028180:	b580      	push	{r7, lr}
 8028182:	b082      	sub	sp, #8
 8028184:	af00      	add	r7, sp, #0
 8028186:	6078      	str	r0, [r7, #4]
 8028188:	460b      	mov	r3, r1
 802818a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 802818c:	687b      	ldr	r3, [r7, #4]
 802818e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8028192:	78fa      	ldrb	r2, [r7, #3]
 8028194:	4611      	mov	r1, r2
 8028196:	4618      	mov	r0, r3
 8028198:	f7f9 fe09 	bl	8021dae <HAL_HCD_HC_GetURBState>
 802819c:	4603      	mov	r3, r0
}
 802819e:	4618      	mov	r0, r3
 80281a0:	3708      	adds	r7, #8
 80281a2:	46bd      	mov	sp, r7
 80281a4:	bd80      	pop	{r7, pc}

080281a6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80281a6:	b580      	push	{r7, lr}
 80281a8:	b082      	sub	sp, #8
 80281aa:	af00      	add	r7, sp, #0
 80281ac:	6078      	str	r0, [r7, #4]
 80281ae:	460b      	mov	r3, r1
 80281b0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80281b2:	687b      	ldr	r3, [r7, #4]
 80281b4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80281b8:	2b01      	cmp	r3, #1
 80281ba:	d103      	bne.n	80281c4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80281bc:	78fb      	ldrb	r3, [r7, #3]
 80281be:	4618      	mov	r0, r3
 80281c0:	f000 f870 	bl	80282a4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80281c4:	20c8      	movs	r0, #200	; 0xc8
 80281c6:	f7f8 ff1f 	bl	8021008 <HAL_Delay>
  return USBH_OK;
 80281ca:	2300      	movs	r3, #0
}
 80281cc:	4618      	mov	r0, r3
 80281ce:	3708      	adds	r7, #8
 80281d0:	46bd      	mov	sp, r7
 80281d2:	bd80      	pop	{r7, pc}

080281d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80281d4:	b480      	push	{r7}
 80281d6:	b085      	sub	sp, #20
 80281d8:	af00      	add	r7, sp, #0
 80281da:	6078      	str	r0, [r7, #4]
 80281dc:	460b      	mov	r3, r1
 80281de:	70fb      	strb	r3, [r7, #3]
 80281e0:	4613      	mov	r3, r2
 80281e2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80281e4:	687b      	ldr	r3, [r7, #4]
 80281e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80281ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80281ec:	78fb      	ldrb	r3, [r7, #3]
 80281ee:	68fa      	ldr	r2, [r7, #12]
 80281f0:	212c      	movs	r1, #44	; 0x2c
 80281f2:	fb01 f303 	mul.w	r3, r1, r3
 80281f6:	4413      	add	r3, r2
 80281f8:	333b      	adds	r3, #59	; 0x3b
 80281fa:	781b      	ldrb	r3, [r3, #0]
 80281fc:	2b00      	cmp	r3, #0
 80281fe:	d009      	beq.n	8028214 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8028200:	78fb      	ldrb	r3, [r7, #3]
 8028202:	68fa      	ldr	r2, [r7, #12]
 8028204:	212c      	movs	r1, #44	; 0x2c
 8028206:	fb01 f303 	mul.w	r3, r1, r3
 802820a:	4413      	add	r3, r2
 802820c:	3354      	adds	r3, #84	; 0x54
 802820e:	78ba      	ldrb	r2, [r7, #2]
 8028210:	701a      	strb	r2, [r3, #0]
 8028212:	e008      	b.n	8028226 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8028214:	78fb      	ldrb	r3, [r7, #3]
 8028216:	68fa      	ldr	r2, [r7, #12]
 8028218:	212c      	movs	r1, #44	; 0x2c
 802821a:	fb01 f303 	mul.w	r3, r1, r3
 802821e:	4413      	add	r3, r2
 8028220:	3355      	adds	r3, #85	; 0x55
 8028222:	78ba      	ldrb	r2, [r7, #2]
 8028224:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8028226:	2300      	movs	r3, #0
}
 8028228:	4618      	mov	r0, r3
 802822a:	3714      	adds	r7, #20
 802822c:	46bd      	mov	sp, r7
 802822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028232:	4770      	bx	lr

08028234 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8028234:	b580      	push	{r7, lr}
 8028236:	b082      	sub	sp, #8
 8028238:	af00      	add	r7, sp, #0
 802823a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 802823c:	6878      	ldr	r0, [r7, #4]
 802823e:	f7f8 fee3 	bl	8021008 <HAL_Delay>
}
 8028242:	bf00      	nop
 8028244:	3708      	adds	r7, #8
 8028246:	46bd      	mov	sp, r7
 8028248:	bd80      	pop	{r7, pc}
	...

0802824c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802824c:	b480      	push	{r7}
 802824e:	b085      	sub	sp, #20
 8028250:	af00      	add	r7, sp, #0
 8028252:	4603      	mov	r3, r0
 8028254:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8028256:	2300      	movs	r3, #0
 8028258:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802825a:	79fb      	ldrb	r3, [r7, #7]
 802825c:	2b03      	cmp	r3, #3
 802825e:	d817      	bhi.n	8028290 <USBH_Get_USB_Status+0x44>
 8028260:	a201      	add	r2, pc, #4	; (adr r2, 8028268 <USBH_Get_USB_Status+0x1c>)
 8028262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028266:	bf00      	nop
 8028268:	08028279 	.word	0x08028279
 802826c:	0802827f 	.word	0x0802827f
 8028270:	08028285 	.word	0x08028285
 8028274:	0802828b 	.word	0x0802828b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8028278:	2300      	movs	r3, #0
 802827a:	73fb      	strb	r3, [r7, #15]
    break;
 802827c:	e00b      	b.n	8028296 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 802827e:	2302      	movs	r3, #2
 8028280:	73fb      	strb	r3, [r7, #15]
    break;
 8028282:	e008      	b.n	8028296 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8028284:	2301      	movs	r3, #1
 8028286:	73fb      	strb	r3, [r7, #15]
    break;
 8028288:	e005      	b.n	8028296 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 802828a:	2302      	movs	r3, #2
 802828c:	73fb      	strb	r3, [r7, #15]
    break;
 802828e:	e002      	b.n	8028296 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8028290:	2302      	movs	r3, #2
 8028292:	73fb      	strb	r3, [r7, #15]
    break;
 8028294:	bf00      	nop
  }
  return usb_status;
 8028296:	7bfb      	ldrb	r3, [r7, #15]
}
 8028298:	4618      	mov	r0, r3
 802829a:	3714      	adds	r7, #20
 802829c:	46bd      	mov	sp, r7
 802829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80282a2:	4770      	bx	lr

080282a4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80282a4:	b580      	push	{r7, lr}
 80282a6:	b084      	sub	sp, #16
 80282a8:	af00      	add	r7, sp, #0
 80282aa:	4603      	mov	r3, r0
 80282ac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80282ae:	79fb      	ldrb	r3, [r7, #7]
 80282b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80282b2:	79fb      	ldrb	r3, [r7, #7]
 80282b4:	2b00      	cmp	r3, #0
 80282b6:	d102      	bne.n	80282be <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80282b8:	2301      	movs	r3, #1
 80282ba:	73fb      	strb	r3, [r7, #15]
 80282bc:	e001      	b.n	80282c2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80282be:	2300      	movs	r3, #0
 80282c0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80282c2:	7bfb      	ldrb	r3, [r7, #15]
 80282c4:	461a      	mov	r2, r3
 80282c6:	2101      	movs	r1, #1
 80282c8:	4803      	ldr	r0, [pc, #12]	; (80282d8 <MX_DriverVbusFS+0x34>)
 80282ca:	f7f9 f96f 	bl	80215ac <HAL_GPIO_WritePin>
}
 80282ce:	bf00      	nop
 80282d0:	3710      	adds	r7, #16
 80282d2:	46bd      	mov	sp, r7
 80282d4:	bd80      	pop	{r7, pc}
 80282d6:	bf00      	nop
 80282d8:	40020800 	.word	0x40020800

080282dc <__errno>:
 80282dc:	4b01      	ldr	r3, [pc, #4]	; (80282e4 <__errno+0x8>)
 80282de:	6818      	ldr	r0, [r3, #0]
 80282e0:	4770      	bx	lr
 80282e2:	bf00      	nop
 80282e4:	20000054 	.word	0x20000054

080282e8 <__libc_init_array>:
 80282e8:	b570      	push	{r4, r5, r6, lr}
 80282ea:	4d0d      	ldr	r5, [pc, #52]	; (8028320 <__libc_init_array+0x38>)
 80282ec:	4c0d      	ldr	r4, [pc, #52]	; (8028324 <__libc_init_array+0x3c>)
 80282ee:	1b64      	subs	r4, r4, r5
 80282f0:	10a4      	asrs	r4, r4, #2
 80282f2:	2600      	movs	r6, #0
 80282f4:	42a6      	cmp	r6, r4
 80282f6:	d109      	bne.n	802830c <__libc_init_array+0x24>
 80282f8:	4d0b      	ldr	r5, [pc, #44]	; (8028328 <__libc_init_array+0x40>)
 80282fa:	4c0c      	ldr	r4, [pc, #48]	; (802832c <__libc_init_array+0x44>)
 80282fc:	f000 f8f8 	bl	80284f0 <_init>
 8028300:	1b64      	subs	r4, r4, r5
 8028302:	10a4      	asrs	r4, r4, #2
 8028304:	2600      	movs	r6, #0
 8028306:	42a6      	cmp	r6, r4
 8028308:	d105      	bne.n	8028316 <__libc_init_array+0x2e>
 802830a:	bd70      	pop	{r4, r5, r6, pc}
 802830c:	f855 3b04 	ldr.w	r3, [r5], #4
 8028310:	4798      	blx	r3
 8028312:	3601      	adds	r6, #1
 8028314:	e7ee      	b.n	80282f4 <__libc_init_array+0xc>
 8028316:	f855 3b04 	ldr.w	r3, [r5], #4
 802831a:	4798      	blx	r3
 802831c:	3601      	adds	r6, #1
 802831e:	e7f2      	b.n	8028306 <__libc_init_array+0x1e>
 8028320:	0802852c 	.word	0x0802852c
 8028324:	0802852c 	.word	0x0802852c
 8028328:	0802852c 	.word	0x0802852c
 802832c:	08028530 	.word	0x08028530

08028330 <malloc>:
 8028330:	4b02      	ldr	r3, [pc, #8]	; (802833c <malloc+0xc>)
 8028332:	4601      	mov	r1, r0
 8028334:	6818      	ldr	r0, [r3, #0]
 8028336:	f000 b863 	b.w	8028400 <_malloc_r>
 802833a:	bf00      	nop
 802833c:	20000054 	.word	0x20000054

08028340 <free>:
 8028340:	4b02      	ldr	r3, [pc, #8]	; (802834c <free+0xc>)
 8028342:	4601      	mov	r1, r0
 8028344:	6818      	ldr	r0, [r3, #0]
 8028346:	f000 b80b 	b.w	8028360 <_free_r>
 802834a:	bf00      	nop
 802834c:	20000054 	.word	0x20000054

08028350 <memset>:
 8028350:	4402      	add	r2, r0
 8028352:	4603      	mov	r3, r0
 8028354:	4293      	cmp	r3, r2
 8028356:	d100      	bne.n	802835a <memset+0xa>
 8028358:	4770      	bx	lr
 802835a:	f803 1b01 	strb.w	r1, [r3], #1
 802835e:	e7f9      	b.n	8028354 <memset+0x4>

08028360 <_free_r>:
 8028360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8028362:	2900      	cmp	r1, #0
 8028364:	d048      	beq.n	80283f8 <_free_r+0x98>
 8028366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802836a:	9001      	str	r0, [sp, #4]
 802836c:	2b00      	cmp	r3, #0
 802836e:	f1a1 0404 	sub.w	r4, r1, #4
 8028372:	bfb8      	it	lt
 8028374:	18e4      	addlt	r4, r4, r3
 8028376:	f000 f8ad 	bl	80284d4 <__malloc_lock>
 802837a:	4a20      	ldr	r2, [pc, #128]	; (80283fc <_free_r+0x9c>)
 802837c:	9801      	ldr	r0, [sp, #4]
 802837e:	6813      	ldr	r3, [r2, #0]
 8028380:	4615      	mov	r5, r2
 8028382:	b933      	cbnz	r3, 8028392 <_free_r+0x32>
 8028384:	6063      	str	r3, [r4, #4]
 8028386:	6014      	str	r4, [r2, #0]
 8028388:	b003      	add	sp, #12
 802838a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802838e:	f000 b8a7 	b.w	80284e0 <__malloc_unlock>
 8028392:	42a3      	cmp	r3, r4
 8028394:	d90b      	bls.n	80283ae <_free_r+0x4e>
 8028396:	6821      	ldr	r1, [r4, #0]
 8028398:	1862      	adds	r2, r4, r1
 802839a:	4293      	cmp	r3, r2
 802839c:	bf04      	itt	eq
 802839e:	681a      	ldreq	r2, [r3, #0]
 80283a0:	685b      	ldreq	r3, [r3, #4]
 80283a2:	6063      	str	r3, [r4, #4]
 80283a4:	bf04      	itt	eq
 80283a6:	1852      	addeq	r2, r2, r1
 80283a8:	6022      	streq	r2, [r4, #0]
 80283aa:	602c      	str	r4, [r5, #0]
 80283ac:	e7ec      	b.n	8028388 <_free_r+0x28>
 80283ae:	461a      	mov	r2, r3
 80283b0:	685b      	ldr	r3, [r3, #4]
 80283b2:	b10b      	cbz	r3, 80283b8 <_free_r+0x58>
 80283b4:	42a3      	cmp	r3, r4
 80283b6:	d9fa      	bls.n	80283ae <_free_r+0x4e>
 80283b8:	6811      	ldr	r1, [r2, #0]
 80283ba:	1855      	adds	r5, r2, r1
 80283bc:	42a5      	cmp	r5, r4
 80283be:	d10b      	bne.n	80283d8 <_free_r+0x78>
 80283c0:	6824      	ldr	r4, [r4, #0]
 80283c2:	4421      	add	r1, r4
 80283c4:	1854      	adds	r4, r2, r1
 80283c6:	42a3      	cmp	r3, r4
 80283c8:	6011      	str	r1, [r2, #0]
 80283ca:	d1dd      	bne.n	8028388 <_free_r+0x28>
 80283cc:	681c      	ldr	r4, [r3, #0]
 80283ce:	685b      	ldr	r3, [r3, #4]
 80283d0:	6053      	str	r3, [r2, #4]
 80283d2:	4421      	add	r1, r4
 80283d4:	6011      	str	r1, [r2, #0]
 80283d6:	e7d7      	b.n	8028388 <_free_r+0x28>
 80283d8:	d902      	bls.n	80283e0 <_free_r+0x80>
 80283da:	230c      	movs	r3, #12
 80283dc:	6003      	str	r3, [r0, #0]
 80283de:	e7d3      	b.n	8028388 <_free_r+0x28>
 80283e0:	6825      	ldr	r5, [r4, #0]
 80283e2:	1961      	adds	r1, r4, r5
 80283e4:	428b      	cmp	r3, r1
 80283e6:	bf04      	itt	eq
 80283e8:	6819      	ldreq	r1, [r3, #0]
 80283ea:	685b      	ldreq	r3, [r3, #4]
 80283ec:	6063      	str	r3, [r4, #4]
 80283ee:	bf04      	itt	eq
 80283f0:	1949      	addeq	r1, r1, r5
 80283f2:	6021      	streq	r1, [r4, #0]
 80283f4:	6054      	str	r4, [r2, #4]
 80283f6:	e7c7      	b.n	8028388 <_free_r+0x28>
 80283f8:	b003      	add	sp, #12
 80283fa:	bd30      	pop	{r4, r5, pc}
 80283fc:	200000e0 	.word	0x200000e0

08028400 <_malloc_r>:
 8028400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028402:	1ccd      	adds	r5, r1, #3
 8028404:	f025 0503 	bic.w	r5, r5, #3
 8028408:	3508      	adds	r5, #8
 802840a:	2d0c      	cmp	r5, #12
 802840c:	bf38      	it	cc
 802840e:	250c      	movcc	r5, #12
 8028410:	2d00      	cmp	r5, #0
 8028412:	4606      	mov	r6, r0
 8028414:	db01      	blt.n	802841a <_malloc_r+0x1a>
 8028416:	42a9      	cmp	r1, r5
 8028418:	d903      	bls.n	8028422 <_malloc_r+0x22>
 802841a:	230c      	movs	r3, #12
 802841c:	6033      	str	r3, [r6, #0]
 802841e:	2000      	movs	r0, #0
 8028420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028422:	f000 f857 	bl	80284d4 <__malloc_lock>
 8028426:	4921      	ldr	r1, [pc, #132]	; (80284ac <_malloc_r+0xac>)
 8028428:	680a      	ldr	r2, [r1, #0]
 802842a:	4614      	mov	r4, r2
 802842c:	b99c      	cbnz	r4, 8028456 <_malloc_r+0x56>
 802842e:	4f20      	ldr	r7, [pc, #128]	; (80284b0 <_malloc_r+0xb0>)
 8028430:	683b      	ldr	r3, [r7, #0]
 8028432:	b923      	cbnz	r3, 802843e <_malloc_r+0x3e>
 8028434:	4621      	mov	r1, r4
 8028436:	4630      	mov	r0, r6
 8028438:	f000 f83c 	bl	80284b4 <_sbrk_r>
 802843c:	6038      	str	r0, [r7, #0]
 802843e:	4629      	mov	r1, r5
 8028440:	4630      	mov	r0, r6
 8028442:	f000 f837 	bl	80284b4 <_sbrk_r>
 8028446:	1c43      	adds	r3, r0, #1
 8028448:	d123      	bne.n	8028492 <_malloc_r+0x92>
 802844a:	230c      	movs	r3, #12
 802844c:	6033      	str	r3, [r6, #0]
 802844e:	4630      	mov	r0, r6
 8028450:	f000 f846 	bl	80284e0 <__malloc_unlock>
 8028454:	e7e3      	b.n	802841e <_malloc_r+0x1e>
 8028456:	6823      	ldr	r3, [r4, #0]
 8028458:	1b5b      	subs	r3, r3, r5
 802845a:	d417      	bmi.n	802848c <_malloc_r+0x8c>
 802845c:	2b0b      	cmp	r3, #11
 802845e:	d903      	bls.n	8028468 <_malloc_r+0x68>
 8028460:	6023      	str	r3, [r4, #0]
 8028462:	441c      	add	r4, r3
 8028464:	6025      	str	r5, [r4, #0]
 8028466:	e004      	b.n	8028472 <_malloc_r+0x72>
 8028468:	6863      	ldr	r3, [r4, #4]
 802846a:	42a2      	cmp	r2, r4
 802846c:	bf0c      	ite	eq
 802846e:	600b      	streq	r3, [r1, #0]
 8028470:	6053      	strne	r3, [r2, #4]
 8028472:	4630      	mov	r0, r6
 8028474:	f000 f834 	bl	80284e0 <__malloc_unlock>
 8028478:	f104 000b 	add.w	r0, r4, #11
 802847c:	1d23      	adds	r3, r4, #4
 802847e:	f020 0007 	bic.w	r0, r0, #7
 8028482:	1ac2      	subs	r2, r0, r3
 8028484:	d0cc      	beq.n	8028420 <_malloc_r+0x20>
 8028486:	1a1b      	subs	r3, r3, r0
 8028488:	50a3      	str	r3, [r4, r2]
 802848a:	e7c9      	b.n	8028420 <_malloc_r+0x20>
 802848c:	4622      	mov	r2, r4
 802848e:	6864      	ldr	r4, [r4, #4]
 8028490:	e7cc      	b.n	802842c <_malloc_r+0x2c>
 8028492:	1cc4      	adds	r4, r0, #3
 8028494:	f024 0403 	bic.w	r4, r4, #3
 8028498:	42a0      	cmp	r0, r4
 802849a:	d0e3      	beq.n	8028464 <_malloc_r+0x64>
 802849c:	1a21      	subs	r1, r4, r0
 802849e:	4630      	mov	r0, r6
 80284a0:	f000 f808 	bl	80284b4 <_sbrk_r>
 80284a4:	3001      	adds	r0, #1
 80284a6:	d1dd      	bne.n	8028464 <_malloc_r+0x64>
 80284a8:	e7cf      	b.n	802844a <_malloc_r+0x4a>
 80284aa:	bf00      	nop
 80284ac:	200000e0 	.word	0x200000e0
 80284b0:	200000e4 	.word	0x200000e4

080284b4 <_sbrk_r>:
 80284b4:	b538      	push	{r3, r4, r5, lr}
 80284b6:	4d06      	ldr	r5, [pc, #24]	; (80284d0 <_sbrk_r+0x1c>)
 80284b8:	2300      	movs	r3, #0
 80284ba:	4604      	mov	r4, r0
 80284bc:	4608      	mov	r0, r1
 80284be:	602b      	str	r3, [r5, #0]
 80284c0:	f7f8 fcba 	bl	8020e38 <_sbrk>
 80284c4:	1c43      	adds	r3, r0, #1
 80284c6:	d102      	bne.n	80284ce <_sbrk_r+0x1a>
 80284c8:	682b      	ldr	r3, [r5, #0]
 80284ca:	b103      	cbz	r3, 80284ce <_sbrk_r+0x1a>
 80284cc:	6023      	str	r3, [r4, #0]
 80284ce:	bd38      	pop	{r3, r4, r5, pc}
 80284d0:	20000944 	.word	0x20000944

080284d4 <__malloc_lock>:
 80284d4:	4801      	ldr	r0, [pc, #4]	; (80284dc <__malloc_lock+0x8>)
 80284d6:	f000 b809 	b.w	80284ec <__retarget_lock_acquire_recursive>
 80284da:	bf00      	nop
 80284dc:	2000094c 	.word	0x2000094c

080284e0 <__malloc_unlock>:
 80284e0:	4801      	ldr	r0, [pc, #4]	; (80284e8 <__malloc_unlock+0x8>)
 80284e2:	f000 b804 	b.w	80284ee <__retarget_lock_release_recursive>
 80284e6:	bf00      	nop
 80284e8:	2000094c 	.word	0x2000094c

080284ec <__retarget_lock_acquire_recursive>:
 80284ec:	4770      	bx	lr

080284ee <__retarget_lock_release_recursive>:
 80284ee:	4770      	bx	lr

080284f0 <_init>:
 80284f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80284f2:	bf00      	nop
 80284f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80284f6:	bc08      	pop	{r3}
 80284f8:	469e      	mov	lr, r3
 80284fa:	4770      	bx	lr

080284fc <_fini>:
 80284fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80284fe:	bf00      	nop
 8028500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028502:	bc08      	pop	{r3}
 8028504:	469e      	mov	lr, r3
 8028506:	4770      	bx	lr
