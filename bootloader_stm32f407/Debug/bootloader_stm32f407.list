
bootloader_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008228  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080083b8  080083b8  000183b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085a0  080085a0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080085a0  080085a0  000185a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085a8  080085a8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085a8  080085a8  000185a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085ac  080085ac  000185ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080085b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000968  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009f8  200009f8  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eb2f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040a1  00000000  00000000  0003ebef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  00042c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012d8  00000000  00000000  000440b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025184  00000000  00000000  00045390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ad7a  00000000  00000000  0006a514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce3ff  00000000  00000000  0008528e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015368d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000586c  00000000  00000000  001536e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083a0 	.word	0x080083a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080083a0 	.word	0x080083a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 ff1c 	bl	80013b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f8f0 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 fa54 	bl	8000a30 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000588:	f000 f96a 	bl	8000860 <MX_I2C1_Init>
  MX_I2S3_Init();
 800058c:	f000 f996 	bl	80008bc <MX_I2S3_Init>
  MX_SPI1_Init();
 8000590:	f000 f9c4 	bl	800091c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000594:	f006 ffe4 	bl	8007560 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000598:	f000 f9f6 	bl	8000988 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800059c:	f000 fa1e 	bl	80009dc <MX_USART3_UART_Init>
  MX_CRC_Init();
 80005a0:	f000 f94a 	bl	8000838 <MX_CRC_Init>

  /* Let's check whether button is pressed or not, if not pressed jump to user application */
  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 80005a4:	2101      	movs	r1, #1
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <main+0x58>)
 80005a8:	f001 fa90 	bl	8001acc <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d105      	bne.n	80005be <main+0x46>
  {
	  printmsg("BL_DEBUG_MSG:Button is pressed....going to BL mode\r\n");
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <main+0x5c>)
 80005b4:	f000 f8b0 	bl	8000718 <printmsg>
	  // we should continue in bootloader mode
	  bootloader_uart_read_data();
 80005b8:	f000 f810 	bl	80005dc <bootloader_uart_read_data>
 80005bc:	e004      	b.n	80005c8 <main+0x50>
  }
  else
  {
	  printmsg("BL_DEBUG_MSG:Button is not pressed....going to app mode\r\n");
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <main+0x60>)
 80005c0:	f000 f8aa 	bl	8000718 <printmsg>

	  // we should continue in app mode
	  bootloader_jump_to_app();
 80005c4:	f000 f87e 	bl	80006c4 <bootloader_jump_to_app>
 80005c8:	2300      	movs	r3, #0
  }
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40020000 	.word	0x40020000
 80005d4:	080083b8 	.word	0x080083b8
 80005d8:	080083f0 	.word	0x080083f0

080005dc <bootloader_uart_read_data>:

void bootloader_uart_read_data(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		memset(bl_rx_buffer, 0, 200);
 80005e6:	22c8      	movs	r2, #200	; 0xc8
 80005e8:	2100      	movs	r1, #0
 80005ea:	4832      	ldr	r0, [pc, #200]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 80005ec:	f007 faa2 	bl	8007b34 <memset>
		// Here we will read and decode the commands coming from host
		// first read only one byte from the host, which is the length field
		HAL_UART_Receive(C_UART, bl_rx_buffer, 1, HAL_MAX_DELAY);
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	2201      	movs	r2, #1
 80005f6:	492f      	ldr	r1, [pc, #188]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 80005f8:	482f      	ldr	r0, [pc, #188]	; (80006b8 <bootloader_uart_read_data+0xdc>)
 80005fa:	f004 fced 	bl	8004fd8 <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0];
 80005fe:	4b2d      	ldr	r3, [pc, #180]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	b29a      	uxth	r2, r3
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	492b      	ldr	r1, [pc, #172]	; (80006bc <bootloader_uart_read_data+0xe0>)
 800060e:	482a      	ldr	r0, [pc, #168]	; (80006b8 <bootloader_uart_read_data+0xdc>)
 8000610:	f004 fce2 	bl	8004fd8 <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	3b51      	subs	r3, #81	; 0x51
 800061a:	2b0a      	cmp	r3, #10
 800061c:	d844      	bhi.n	80006a8 <bootloader_uart_read_data+0xcc>
 800061e:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <bootloader_uart_read_data+0x48>)
 8000620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000624:	08000651 	.word	0x08000651
 8000628:	08000659 	.word	0x08000659
 800062c:	08000661 	.word	0x08000661
 8000630:	08000669 	.word	0x08000669
 8000634:	08000671 	.word	0x08000671
 8000638:	08000679 	.word	0x08000679
 800063c:	08000681 	.word	0x08000681
 8000640:	08000689 	.word	0x08000689
 8000644:	08000691 	.word	0x08000691
 8000648:	08000699 	.word	0x08000699
 800064c:	080006a1 	.word	0x080006a1
		{
			case BL_GET_VER:
				bootloader_handle_getver_cmd(bl_rx_buffer);
 8000650:	4818      	ldr	r0, [pc, #96]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 8000652:	f000 faeb 	bl	8000c2c <bootloader_handle_getver_cmd>
				break;
 8000656:	e02b      	b.n	80006b0 <bootloader_uart_read_data+0xd4>
			case BL_GET_HELP:
				bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000658:	4816      	ldr	r0, [pc, #88]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 800065a:	f000 fb2f 	bl	8000cbc <bootloader_handle_gethelp_cmd>
				break;
 800065e:	e027      	b.n	80006b0 <bootloader_uart_read_data+0xd4>
			case BL_GET_CID:
				bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000660:	4814      	ldr	r0, [pc, #80]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 8000662:	f000 fb35 	bl	8000cd0 <bootloader_handle_getcid_cmd>
				break;
 8000666:	e023      	b.n	80006b0 <bootloader_uart_read_data+0xd4>
			case BL_GET_RDP_STATUS:
				bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000668:	4812      	ldr	r0, [pc, #72]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 800066a:	f000 fb3b 	bl	8000ce4 <bootloader_handle_getrdp_cmd>
				break;
 800066e:	e01f      	b.n	80006b0 <bootloader_uart_read_data+0xd4>
			case BL_GO_TO_ADDR:
				bootloader_handle_go_cmd(bl_rx_buffer);
 8000670:	4810      	ldr	r0, [pc, #64]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 8000672:	f000 fb41 	bl	8000cf8 <bootloader_handle_go_cmd>
				break;
 8000676:	e01b      	b.n	80006b0 <bootloader_uart_read_data+0xd4>
			case BL_FLASH_ERASE:
				bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000678:	480e      	ldr	r0, [pc, #56]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 800067a:	f000 fb47 	bl	8000d0c <bootloader_handle_flash_erase_cmd>
				break;
 800067e:	e017      	b.n	80006b0 <bootloader_uart_read_data+0xd4>
			case BL_MEM_WRITE:
				bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000680:	480c      	ldr	r0, [pc, #48]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 8000682:	f000 fb4d 	bl	8000d20 <bootloader_handle_mem_write_cmd>
				break;
 8000686:	e013      	b.n	80006b0 <bootloader_uart_read_data+0xd4>
			case BL_EN_RW_PROTECT:
				bootloader_handle_en_rw_protect(bl_rx_buffer);
 8000688:	480a      	ldr	r0, [pc, #40]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 800068a:	f000 fb53 	bl	8000d34 <bootloader_handle_en_rw_protect>
				break;
 800068e:	e00f      	b.n	80006b0 <bootloader_uart_read_data+0xd4>
			case BL_MEM_READ:
				bootloader_handle_mem_read(bl_rx_buffer);
 8000690:	4808      	ldr	r0, [pc, #32]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 8000692:	f000 fb59 	bl	8000d48 <bootloader_handle_mem_read>
				break;
 8000696:	e00b      	b.n	80006b0 <bootloader_uart_read_data+0xd4>
			case BL_READ_SECTOR_P_STATUS:
				bootloader_handle_read_sector_status(bl_rx_buffer);
 8000698:	4806      	ldr	r0, [pc, #24]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 800069a:	f000 fb5f 	bl	8000d5c <bootloader_handle_read_sector_status>
				break;
 800069e:	e007      	b.n	80006b0 <bootloader_uart_read_data+0xd4>
			case BL_OTP_READ:
				bootloader_handle_read_otp(bl_rx_buffer);
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 80006a2:	f000 fb65 	bl	8000d70 <bootloader_handle_read_otp>
				break;
 80006a6:	e003      	b.n	80006b0 <bootloader_uart_read_data+0xd4>
			default:
				printmsg("BL_DEBUG_MSG:Invalid command received from host \n");
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <bootloader_uart_read_data+0xe4>)
 80006aa:	f000 f835 	bl	8000718 <printmsg>
				break;
 80006ae:	bf00      	nop
		memset(bl_rx_buffer, 0, 200);
 80006b0:	e799      	b.n	80005e6 <bootloader_uart_read_data+0xa>
 80006b2:	bf00      	nop
 80006b4:	20000240 	.word	0x20000240
 80006b8:	200001b4 	.word	0x200001b4
 80006bc:	20000241 	.word	0x20000241
 80006c0:	0800842c 	.word	0x0800842c

080006c4 <bootloader_jump_to_app>:
		}
	}
}

void bootloader_jump_to_app(void){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
	// just a function pointer to hold the address of the reset handler of the user app
	void (*app_reset_handler)(void);

	printmsg("BL_DEBUG_MSG:bootloader_jump_to_app\r\n");
 80006ca:	480f      	ldr	r0, [pc, #60]	; (8000708 <bootloader_jump_to_app+0x44>)
 80006cc:	f000 f824 	bl	8000718 <printmsg>

	// 1. configure the MSP by reading the value from the base address of the sector 2
	uint32_t msp_value = *(__IO uint32_t *) FLASH_SECTOR2_BASE_ADDRESS;
 80006d0:	4b0e      	ldr	r3, [pc, #56]	; (800070c <bootloader_jump_to_app+0x48>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	60fb      	str	r3, [r7, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d6:	b672      	cpsid	i
}
 80006d8:	bf00      	nop
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	f383 8808 	msr	MSP, r3
}
 80006e4:	bf00      	nop
	__set_MSP(msp_value);

	// SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS

	// 2. Now fetch the reset handler address of the user application from the location FLASH_SECTOR2_BASE_ADDRESS
	uint32_t resethandler_address = *(__IO uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <bootloader_jump_to_app+0x4c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	60bb      	str	r3, [r7, #8]

	app_reset_handler = (void (*) (void)) resethandler_address;
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	607b      	str	r3, [r7, #4]

	printmsg("BL_DEBUG_MSG:app reset handler address: %#x\r\n", app_reset_handler);
 80006f0:	6879      	ldr	r1, [r7, #4]
 80006f2:	4808      	ldr	r0, [pc, #32]	; (8000714 <bootloader_jump_to_app+0x50>)
 80006f4:	f000 f810 	bl	8000718 <printmsg>
  __ASM volatile ("cpsie i" : : : "memory");
 80006f8:	b662      	cpsie	i
}
 80006fa:	bf00      	nop

	__enable_irq();
	// 3. Jump to reset handler of the application
	app_reset_handler();
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4798      	blx	r3
}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	08008460 	.word	0x08008460
 800070c:	08008000 	.word	0x08008000
 8000710:	08008004 	.word	0x08008004
 8000714:	08008488 	.word	0x08008488

08000718 <printmsg>:


/* prints formatted string to console over UART */
void printmsg(char *format, ...)
{
 8000718:	b40f      	push	{r0, r1, r2, r3}
 800071a:	b580      	push	{r7, lr}
 800071c:	b096      	sub	sp, #88	; 0x58
 800071e:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];
	/*Extract the argument list using VA pins */
	va_list args;
	va_start(args, format);
 8000720:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000724:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800072e:	4618      	mov	r0, r3
 8000730:	f007 fad8 	bl	8007ce4 <vsiprintf>
	HAL_UART_Transmit(D_UART, (uint8_t *) str, strlen(str), HAL_MAX_DELAY);
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fd49 	bl	80001d0 <strlen>
 800073e:	4603      	mov	r3, r0
 8000740:	b29a      	uxth	r2, r3
 8000742:	f107 0108 	add.w	r1, r7, #8
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <printmsg+0x48>)
 800074c:	f004 fbb2 	bl	8004eb4 <HAL_UART_Transmit>
	va_end(args);
#endif
}
 8000750:	bf00      	nop
 8000752:	3758      	adds	r7, #88	; 0x58
 8000754:	46bd      	mov	sp, r7
 8000756:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800075a:	b004      	add	sp, #16
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	200001b4 	.word	0x200001b4

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	; 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f007 f9de 	bl	8007b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	4b28      	ldr	r3, [pc, #160]	; (8000830 <SystemClock_Config+0xcc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a27      	ldr	r2, [pc, #156]	; (8000830 <SystemClock_Config+0xcc>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <SystemClock_Config+0xcc>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <SystemClock_Config+0xd0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a21      	ldr	r2, [pc, #132]	; (8000834 <SystemClock_Config+0xd0>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <SystemClock_Config+0xd0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007d4:	2308      	movs	r3, #8
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007de:	2302      	movs	r3, #2
 80007e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e2:	2307      	movs	r3, #7
 80007e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	4618      	mov	r0, r3
 80007ec:	f003 fcd8 	bl	80041a0 <HAL_RCC_OscConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007f6:	f000 fb39 	bl	8000e6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	230f      	movs	r3, #15
 80007fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fe:	2302      	movs	r3, #2
 8000800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000806:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800080a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800080c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000810:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2105      	movs	r1, #5
 8000818:	4618      	mov	r0, r3
 800081a:	f003 ff39 	bl	8004690 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000824:	f000 fb22 	bl	8000e6c <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3750      	adds	r7, #80	; 0x50
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_CRC_Init+0x20>)
 800083e:	4a07      	ldr	r2, [pc, #28]	; (800085c <MX_CRC_Init+0x24>)
 8000840:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_CRC_Init+0x20>)
 8000844:	f000 ff5f 	bl	8001706 <HAL_CRC_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800084e:	f000 fb0d 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000154 	.word	0x20000154
 800085c:	40023000 	.word	0x40023000

08000860 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000866:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <MX_I2C1_Init+0x54>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_I2C1_Init+0x50>)
 800086c:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MX_I2C1_Init+0x58>)
 800086e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_I2C1_Init+0x50>)
 800087e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000882:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_I2C1_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_I2C1_Init+0x50>)
 800089e:	f002 fe9b 	bl	80035d8 <HAL_I2C_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a8:	f000 fae0 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000100 	.word	0x20000100
 80008b4:	40005400 	.word	0x40005400
 80008b8:	000186a0 	.word	0x000186a0

080008bc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_I2S3_Init+0x54>)
 80008c2:	4a14      	ldr	r2, [pc, #80]	; (8000914 <MX_I2S3_Init+0x58>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_I2S3_Init+0x54>)
 80008c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008cc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_I2S3_Init+0x54>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_I2S3_Init+0x54>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <MX_I2S3_Init+0x54>)
 80008dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_I2S3_Init+0x54>)
 80008e4:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <MX_I2S3_Init+0x5c>)
 80008e6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_I2S3_Init+0x54>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_I2S3_Init+0x54>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_I2S3_Init+0x54>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_I2S3_Init+0x54>)
 80008fc:	f002 ffb0 	bl	8003860 <HAL_I2S_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000906:	f000 fab1 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200001f8 	.word	0x200001f8
 8000914:	40003c00 	.word	0x40003c00
 8000918:	00017700 	.word	0x00017700

0800091c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_SPI1_Init+0x64>)
 8000922:	4a18      	ldr	r2, [pc, #96]	; (8000984 <MX_SPI1_Init+0x68>)
 8000924:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <MX_SPI1_Init+0x64>)
 8000928:	f44f 7282 	mov.w	r2, #260	; 0x104
 800092c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_SPI1_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_SPI1_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_SPI1_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_SPI1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_SPI1_Init+0x64>)
 8000948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800094c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_SPI1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <MX_SPI1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_SPI1_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <MX_SPI1_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_SPI1_Init+0x64>)
 8000968:	220a      	movs	r2, #10
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_SPI1_Init+0x64>)
 800096e:	f004 f9cb 	bl	8004d08 <HAL_SPI_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000978:	f000 fa78 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	2000015c 	.word	0x2000015c
 8000984:	40013000 	.word	0x40013000

08000988 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <MX_USART2_UART_Init+0x50>)
 8000990:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009c0:	f004 fa2b 	bl	8004e1a <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ca:	f000 fa4f 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200001b4 	.word	0x200001b4
 80009d8:	40004400 	.word	0x40004400

080009dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MX_USART3_UART_Init+0x50>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 8000a14:	f004 fa01 	bl	8004e1a <HAL_UART_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a1e:	f000 fa25 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200000bc 	.word	0x200000bc
 8000a2c:	40004800 	.word	0x40004800

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
 8000a4a:	4b72      	ldr	r3, [pc, #456]	; (8000c14 <MX_GPIO_Init+0x1e4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a71      	ldr	r2, [pc, #452]	; (8000c14 <MX_GPIO_Init+0x1e4>)
 8000a50:	f043 0310 	orr.w	r3, r3, #16
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b6f      	ldr	r3, [pc, #444]	; (8000c14 <MX_GPIO_Init+0x1e4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0310 	and.w	r3, r3, #16
 8000a5e:	61bb      	str	r3, [r7, #24]
 8000a60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	4b6b      	ldr	r3, [pc, #428]	; (8000c14 <MX_GPIO_Init+0x1e4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a6a      	ldr	r2, [pc, #424]	; (8000c14 <MX_GPIO_Init+0x1e4>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b68      	ldr	r3, [pc, #416]	; (8000c14 <MX_GPIO_Init+0x1e4>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b64      	ldr	r3, [pc, #400]	; (8000c14 <MX_GPIO_Init+0x1e4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a63      	ldr	r2, [pc, #396]	; (8000c14 <MX_GPIO_Init+0x1e4>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b61      	ldr	r3, [pc, #388]	; (8000c14 <MX_GPIO_Init+0x1e4>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b5d      	ldr	r3, [pc, #372]	; (8000c14 <MX_GPIO_Init+0x1e4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a5c      	ldr	r2, [pc, #368]	; (8000c14 <MX_GPIO_Init+0x1e4>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b5a      	ldr	r3, [pc, #360]	; (8000c14 <MX_GPIO_Init+0x1e4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	4b56      	ldr	r3, [pc, #344]	; (8000c14 <MX_GPIO_Init+0x1e4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a55      	ldr	r2, [pc, #340]	; (8000c14 <MX_GPIO_Init+0x1e4>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b53      	ldr	r3, [pc, #332]	; (8000c14 <MX_GPIO_Init+0x1e4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b4f      	ldr	r3, [pc, #316]	; (8000c14 <MX_GPIO_Init+0x1e4>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a4e      	ldr	r2, [pc, #312]	; (8000c14 <MX_GPIO_Init+0x1e4>)
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b4c      	ldr	r3, [pc, #304]	; (8000c14 <MX_GPIO_Init+0x1e4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0308 	and.w	r3, r3, #8
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2108      	movs	r1, #8
 8000af2:	4849      	ldr	r0, [pc, #292]	; (8000c18 <MX_GPIO_Init+0x1e8>)
 8000af4:	f001 f802 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2101      	movs	r1, #1
 8000afc:	4847      	ldr	r0, [pc, #284]	; (8000c1c <MX_GPIO_Init+0x1ec>)
 8000afe:	f000 fffd 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b02:	2200      	movs	r2, #0
 8000b04:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b08:	4845      	ldr	r0, [pc, #276]	; (8000c20 <MX_GPIO_Init+0x1f0>)
 8000b0a:	f000 fff7 	bl	8001afc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b0e:	2308      	movs	r3, #8
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	483c      	ldr	r0, [pc, #240]	; (8000c18 <MX_GPIO_Init+0x1e8>)
 8000b26:	f000 fe35 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4836      	ldr	r0, [pc, #216]	; (8000c1c <MX_GPIO_Init+0x1ec>)
 8000b42:	f000 fe27 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b46:	2308      	movs	r3, #8
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b56:	2305      	movs	r3, #5
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	482e      	ldr	r0, [pc, #184]	; (8000c1c <MX_GPIO_Init+0x1ec>)
 8000b62:	f000 fe17 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b6a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	482a      	ldr	r0, [pc, #168]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000b7c:	f000 fe0a 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b80:	2304      	movs	r3, #4
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	4619      	mov	r1, r3
 8000b92:	4825      	ldr	r0, [pc, #148]	; (8000c28 <MX_GPIO_Init+0x1f8>)
 8000b94:	f000 fdfe 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000baa:	2305      	movs	r3, #5
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	481c      	ldr	r0, [pc, #112]	; (8000c28 <MX_GPIO_Init+0x1f8>)
 8000bb6:	f000 fded 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bba:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000bbe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4813      	ldr	r0, [pc, #76]	; (8000c20 <MX_GPIO_Init+0x1f0>)
 8000bd4:	f000 fdde 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bd8:	2320      	movs	r3, #32
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MX_GPIO_Init+0x1f0>)
 8000bec:	f000 fdd2 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bf4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_GPIO_Init+0x1e8>)
 8000c06:	f000 fdc5 	bl	8001794 <HAL_GPIO_Init>

}
 8000c0a:	bf00      	nop
 8000c0c:	3730      	adds	r7, #48	; 0x30
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40020800 	.word	0x40020800
 8000c20:	40020c00 	.word	0x40020c00
 8000c24:	40020000 	.word	0x40020000
 8000c28:	40020400 	.word	0x40020400

08000c2c <bootloader_handle_getver_cmd>:

/********* Implementation of Bootloader command handle functions *********************/
void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	uint8_t bl_version;

	// 1. verify the checksum
	printmsg("BL_DEBUG_MSG: bootloader_handle_getver_cmd \n");
 8000c34:	481d      	ldr	r0, [pc, #116]	; (8000cac <bootloader_handle_getver_cmd+0x80>)
 8000c36:	f7ff fd6f 	bl	8000718 <printmsg>

	// Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]

	// Extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t *) (bl_rx_buffer + command_packet_len - 4));
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	3b04      	subs	r3, #4
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	613b      	str	r3, [r7, #16]

	if(!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3b04      	subs	r3, #4
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4619      	mov	r1, r3
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f000 f8b0 	bl	8000dbc <bootloader_verify_crc>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d11a      	bne.n	8000c98 <bootloader_handle_getver_cmd+0x6c>
	{
		printmsg("BL_DEBUG_MSG:checksum success !! \n");
 8000c62:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <bootloader_handle_getver_cmd+0x84>)
 8000c64:	f7ff fd58 	bl	8000718 <printmsg>
		// checksum is correct
		bootloader_send_ack(bl_rx_buffer[0], 1);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f8d0 	bl	8000e14 <bootloader_send_ack>
		bl_version = get_bootloader_version();
 8000c74:	f000 f886 	bl	8000d84 <get_bootloader_version>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG:BL_VER : %d %#x", bl_version, bl_version);
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	461a      	mov	r2, r3
 8000c84:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <bootloader_handle_getver_cmd+0x88>)
 8000c86:	f7ff fd47 	bl	8000718 <printmsg>
		bootloader_uart_write_data(&bl_version, 1);
 8000c8a:	f107 030f 	add.w	r3, r7, #15
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 f87f 	bl	8000d94 <bootloader_uart_write_data>
		printmsg("BL_DEBUG_MSG: checksum fail !! \n");
		// checksum is wrong send neck
		bootloader_send_nack();
	}

}
 8000c96:	e004      	b.n	8000ca2 <bootloader_handle_getver_cmd+0x76>
		printmsg("BL_DEBUG_MSG: checksum fail !! \n");
 8000c98:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <bootloader_handle_getver_cmd+0x8c>)
 8000c9a:	f7ff fd3d 	bl	8000718 <printmsg>
		bootloader_send_nack();
 8000c9e:	f000 f8d3 	bl	8000e48 <bootloader_send_nack>
}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	080084b8 	.word	0x080084b8
 8000cb0:	080084e8 	.word	0x080084e8
 8000cb4:	0800850c 	.word	0x0800850c
 8000cb8:	0800852c 	.word	0x0800852c

08000cbc <bootloader_handle_gethelp_cmd>:


void bootloader_handle_gethelp_cmd(uint8_t *bl_rx_buffer)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <bootloader_handle_getcid_cmd>:


void bootloader_handle_getcid_cmd(uint8_t *bl_rx_buffer)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <bootloader_handle_getrdp_cmd>:


void bootloader_handle_getrdp_cmd(uint8_t *bl_rx_buffer)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <bootloader_handle_go_cmd>:


void bootloader_handle_go_cmd(uint8_t *bl_rx_buffer)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]

}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <bootloader_handle_flash_erase_cmd>:


void bootloader_handle_flash_erase_cmd(uint8_t *bl_rx_buffer)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <bootloader_handle_mem_write_cmd>:


void bootloader_handle_mem_write_cmd(uint8_t *bl_rx_buffer)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <bootloader_handle_en_rw_protect>:


void bootloader_handle_en_rw_protect(uint8_t *bl_rx_buffer)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <bootloader_handle_mem_read>:


void bootloader_handle_mem_read(uint8_t *bl_rx_buffer)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <bootloader_handle_read_sector_status>:


void bootloader_handle_read_sector_status(uint8_t *bl_rx_buffer)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <bootloader_handle_read_otp>:


void bootloader_handle_read_otp(uint8_t *bl_rx_buffer)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <get_bootloader_version>:

uint8_t get_bootloader_version(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	return (uint8_t) BL_VERSION;
 8000d88:	2310      	movs	r3, #16
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *pBuffer, uint32_t len)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(C_UART, pBuffer, len, HAL_MAX_DELAY);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <bootloader_uart_write_data+0x24>)
 8000daa:	f004 f883 	bl	8004eb4 <HAL_UART_Transmit>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200001b4 	.word	0x200001b4

08000dbc <bootloader_verify_crc>:

uint8_t bootloader_verify_crc(uint8_t* pData, uint32_t len, uint32_t crc_host)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue = 0xff;
 8000dc8:	23ff      	movs	r3, #255	; 0xff
 8000dca:	61fb      	str	r3, [r7, #28]
	for(uint32_t i=0; i < len; i++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	e00f      	b.n	8000df2 <bootloader_verify_crc+0x36>
	{
		uint32_t i_data = pData[i];
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2201      	movs	r2, #1
 8000de2:	4619      	mov	r1, r3
 8000de4:	480a      	ldr	r0, [pc, #40]	; (8000e10 <bootloader_verify_crc+0x54>)
 8000de6:	f000 fcaa 	bl	800173e <HAL_CRC_Accumulate>
 8000dea:	61f8      	str	r0, [r7, #28]
	for(uint32_t i=0; i < len; i++)
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	3301      	adds	r3, #1
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d3eb      	bcc.n	8000dd2 <bootloader_verify_crc+0x16>
	}
	if(uwCRCValue == crc_host)
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d101      	bne.n	8000e06 <bootloader_verify_crc+0x4a>
	{
		return VERIFY_CRC_SUCCESS;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e000      	b.n	8000e08 <bootloader_verify_crc+0x4c>
	}
	return VERIFY_CRC_FAIL;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3720      	adds	r7, #32
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000154 	.word	0x20000154

08000e14 <bootloader_send_ack>:

/* This function sends ACK if CRC matches along with "len to follow" */
void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	460a      	mov	r2, r1
 8000e1e:	71fb      	strb	r3, [r7, #7]
 8000e20:	4613      	mov	r3, r2
 8000e22:	71bb      	strb	r3, [r7, #6]
	// here we send 2 bytes...first byte is ack and second byte is len value
	uint8_t ack_buff[2];
	ack_buff[0] = BL_ACK;
 8000e24:	23a5      	movs	r3, #165	; 0xa5
 8000e26:	733b      	strb	r3, [r7, #12]
	ack_buff[1] = follow_len;
 8000e28:	79bb      	ldrb	r3, [r7, #6]
 8000e2a:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART, ack_buff, 2, HAL_MAX_DELAY);
 8000e2c:	f107 010c 	add.w	r1, r7, #12
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	2202      	movs	r2, #2
 8000e36:	4803      	ldr	r0, [pc, #12]	; (8000e44 <bootloader_send_ack+0x30>)
 8000e38:	f004 f83c 	bl	8004eb4 <HAL_UART_Transmit>
}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200001b4 	.word	0x200001b4

08000e48 <bootloader_send_nack>:

void bootloader_send_nack(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8000e4e:	237f      	movs	r3, #127	; 0x7f
 8000e50:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART, &nack, 1, HAL_MAX_DELAY);
 8000e52:	1df9      	adds	r1, r7, #7
 8000e54:	f04f 33ff 	mov.w	r3, #4294967295
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4803      	ldr	r0, [pc, #12]	; (8000e68 <bootloader_send_nack+0x20>)
 8000e5c:	f004 f82a 	bl	8004eb4 <HAL_UART_Transmit>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200001b4 	.word	0x200001b4

08000e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e70:	b672      	cpsid	i
}
 8000e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <Error_Handler+0x8>
	...

08000e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_MspInit+0x4c>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eb6:	2007      	movs	r0, #7
 8000eb8:	f000 fbe4 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <HAL_CRC_MspInit+0x3c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10d      	bne.n	8000ef6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_CRC_MspInit+0x40>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <HAL_CRC_MspInit+0x40>)
 8000ee4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <HAL_CRC_MspInit+0x40>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40023000 	.word	0x40023000
 8000f08:	40023800 	.word	0x40023800

08000f0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_I2C_MspInit+0x84>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d12c      	bne.n	8000f88 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f4a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f50:	2312      	movs	r3, #18
 8000f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	480c      	ldr	r0, [pc, #48]	; (8000f98 <HAL_I2C_MspInit+0x8c>)
 8000f68:	f000 fc14 	bl	8001794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f88:	bf00      	nop
 8000f8a:	3728      	adds	r7, #40	; 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40005400 	.word	0x40005400
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020400 	.word	0x40020400

08000f9c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08e      	sub	sp, #56	; 0x38
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a31      	ldr	r2, [pc, #196]	; (800108c <HAL_I2S_MspInit+0xf0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d15a      	bne.n	8001082 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000fd0:	23c0      	movs	r3, #192	; 0xc0
 8000fd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f003 fd53 	bl	8004a88 <HAL_RCCEx_PeriphCLKConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000fe8:	f7ff ff40 	bl	8000e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	4b27      	ldr	r3, [pc, #156]	; (8001090 <HAL_I2S_MspInit+0xf4>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	4a26      	ldr	r2, [pc, #152]	; (8001090 <HAL_I2S_MspInit+0xf4>)
 8000ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffc:	4b24      	ldr	r3, [pc, #144]	; (8001090 <HAL_I2S_MspInit+0xf4>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	4b20      	ldr	r3, [pc, #128]	; (8001090 <HAL_I2S_MspInit+0xf4>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	4a1f      	ldr	r2, [pc, #124]	; (8001090 <HAL_I2S_MspInit+0xf4>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6313      	str	r3, [r2, #48]	; 0x30
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <HAL_I2S_MspInit+0xf4>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <HAL_I2S_MspInit+0xf4>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	4a18      	ldr	r2, [pc, #96]	; (8001090 <HAL_I2S_MspInit+0xf4>)
 800102e:	f043 0304 	orr.w	r3, r3, #4
 8001032:	6313      	str	r3, [r2, #48]	; 0x30
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_I2S_MspInit+0xf4>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001040:	2310      	movs	r3, #16
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001050:	2306      	movs	r3, #6
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	480e      	ldr	r0, [pc, #56]	; (8001094 <HAL_I2S_MspInit+0xf8>)
 800105c:	f000 fb9a 	bl	8001794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001060:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001072:	2306      	movs	r3, #6
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107a:	4619      	mov	r1, r3
 800107c:	4806      	ldr	r0, [pc, #24]	; (8001098 <HAL_I2S_MspInit+0xfc>)
 800107e:	f000 fb89 	bl	8001794 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001082:	bf00      	nop
 8001084:	3738      	adds	r7, #56	; 0x38
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40003c00 	.word	0x40003c00
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000
 8001098:	40020800 	.word	0x40020800

0800109c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a19      	ldr	r2, [pc, #100]	; (8001120 <HAL_SPI_MspInit+0x84>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d12b      	bne.n	8001116 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <HAL_SPI_MspInit+0x88>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a17      	ldr	r2, [pc, #92]	; (8001124 <HAL_SPI_MspInit+0x88>)
 80010c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_SPI_MspInit+0x88>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_SPI_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <HAL_SPI_MspInit+0x88>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_SPI_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010f6:	23e0      	movs	r3, #224	; 0xe0
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001106:	2305      	movs	r3, #5
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_SPI_MspInit+0x8c>)
 8001112:	f000 fb3f 	bl	8001794 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40013000 	.word	0x40013000
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000

0800112c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08c      	sub	sp, #48	; 0x30
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a42      	ldr	r2, [pc, #264]	; (8001254 <HAL_UART_MspInit+0x128>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d12c      	bne.n	80011a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	4b41      	ldr	r3, [pc, #260]	; (8001258 <HAL_UART_MspInit+0x12c>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a40      	ldr	r2, [pc, #256]	; (8001258 <HAL_UART_MspInit+0x12c>)
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
 800115e:	4b3e      	ldr	r3, [pc, #248]	; (8001258 <HAL_UART_MspInit+0x12c>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <HAL_UART_MspInit+0x12c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a39      	ldr	r2, [pc, #228]	; (8001258 <HAL_UART_MspInit+0x12c>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b37      	ldr	r3, [pc, #220]	; (8001258 <HAL_UART_MspInit+0x12c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001186:	230c      	movs	r3, #12
 8001188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001196:	2307      	movs	r3, #7
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	482e      	ldr	r0, [pc, #184]	; (800125c <HAL_UART_MspInit+0x130>)
 80011a2:	f000 faf7 	bl	8001794 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011a6:	e050      	b.n	800124a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a2c      	ldr	r2, [pc, #176]	; (8001260 <HAL_UART_MspInit+0x134>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d14b      	bne.n	800124a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b28      	ldr	r3, [pc, #160]	; (8001258 <HAL_UART_MspInit+0x12c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	4a27      	ldr	r2, [pc, #156]	; (8001258 <HAL_UART_MspInit+0x12c>)
 80011bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c0:	6413      	str	r3, [r2, #64]	; 0x40
 80011c2:	4b25      	ldr	r3, [pc, #148]	; (8001258 <HAL_UART_MspInit+0x12c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <HAL_UART_MspInit+0x12c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a20      	ldr	r2, [pc, #128]	; (8001258 <HAL_UART_MspInit+0x12c>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <HAL_UART_MspInit+0x12c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <HAL_UART_MspInit+0x12c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a19      	ldr	r2, [pc, #100]	; (8001258 <HAL_UART_MspInit+0x12c>)
 80011f4:	f043 0308 	orr.w	r3, r3, #8
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_UART_MspInit+0x12c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001206:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001218:	2307      	movs	r3, #7
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	4810      	ldr	r0, [pc, #64]	; (8001264 <HAL_UART_MspInit+0x138>)
 8001224:	f000 fab6 	bl	8001794 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001228:	f44f 7380 	mov.w	r3, #256	; 0x100
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800123a:	2307      	movs	r3, #7
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	4619      	mov	r1, r3
 8001244:	4808      	ldr	r0, [pc, #32]	; (8001268 <HAL_UART_MspInit+0x13c>)
 8001246:	f000 faa5 	bl	8001794 <HAL_GPIO_Init>
}
 800124a:	bf00      	nop
 800124c:	3730      	adds	r7, #48	; 0x30
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40004400 	.word	0x40004400
 8001258:	40023800 	.word	0x40023800
 800125c:	40020000 	.word	0x40020000
 8001260:	40004800 	.word	0x40004800
 8001264:	40020400 	.word	0x40020400
 8001268:	40020c00 	.word	0x40020c00

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <NMI_Handler+0x4>

08001272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <MemManage_Handler+0x4>

0800127e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <UsageFault_Handler+0x4>

0800128a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b8:	f000 f8d0 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <OTG_FS_IRQHandler+0x10>)
 80012c6:	f000 fe9d 	bl	8002004 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200006e4 	.word	0x200006e4

080012d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <_sbrk+0x5c>)
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <_sbrk+0x60>)
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <_sbrk+0x64>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <_sbrk+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	429a      	cmp	r2, r3
 8001302:	d207      	bcs.n	8001314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001304:	f006 fbdc 	bl	8007ac0 <__errno>
 8001308:	4603      	mov	r3, r0
 800130a:	220c      	movs	r2, #12
 800130c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e009      	b.n	8001328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <_sbrk+0x64>)
 8001324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20020000 	.word	0x20020000
 8001334:	00000400 	.word	0x00000400
 8001338:	200000ac 	.word	0x200000ac
 800133c:	200009f8 	.word	0x200009f8

08001340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <SystemInit+0x20>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <SystemInit+0x20>)
 800134c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800139c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800136a:	490e      	ldr	r1, [pc, #56]	; (80013a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800136c:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001380:	4c0b      	ldr	r4, [pc, #44]	; (80013b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800138e:	f7ff ffd7 	bl	8001340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001392:	f006 fb9b 	bl	8007acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001396:	f7ff f8ef 	bl	8000578 <main>
  bx  lr    
 800139a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800139c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80013a8:	080085b0 	.word	0x080085b0
  ldr r2, =_sbss
 80013ac:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80013b0:	200009f8 	.word	0x200009f8

080013b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <HAL_Init+0x40>)
 80013c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <HAL_Init+0x40>)
 80013ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_Init+0x40>)
 80013da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f000 f94f 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f000 f808 	bl	80013fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ec:	f7ff fd44 	bl	8000e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023c00 	.word	0x40023c00

080013fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_InitTick+0x54>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_InitTick+0x58>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001412:	fbb3 f3f1 	udiv	r3, r3, r1
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f967 	bl	80016ee <HAL_SYSTICK_Config>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e00e      	b.n	8001448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d80a      	bhi.n	8001446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001430:	2200      	movs	r2, #0
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f000 f92f 	bl	800169a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800143c:	4a06      	ldr	r2, [pc, #24]	; (8001458 <HAL_InitTick+0x5c>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	e000      	b.n	8001448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000000 	.word	0x20000000
 8001454:	20000008 	.word	0x20000008
 8001458:	20000004 	.word	0x20000004

0800145c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x24>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_IncTick+0x24>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008
 8001480:	20000308 	.word	0x20000308

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000308 	.word	0x20000308

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff ffee 	bl	8001484 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_Delay+0x44>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffde 	bl	8001484 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	; (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	; (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	210f      	movs	r1, #15
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f7ff ff8e 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff29 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ac:	f7ff ff3e 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff ff8e 	bl	80015d8 <NVIC_EncodePriority>
 80016bc:	4602      	mov	r2, r0
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff5d 	bl	8001584 <__NVIC_SetPriority>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff31 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffa2 	bl	8001640 <SysTick_Config>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e00e      	b.n	8001736 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	795b      	ldrb	r3, [r3, #5]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d105      	bne.n	800172e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff fbcd 	bl	8000ec8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800173e:	b480      	push	{r7}
 8001740:	b087      	sub	sp, #28
 8001742:	af00      	add	r7, sp, #0
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2202      	movs	r2, #2
 8001752:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e00a      	b.n	8001770 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	441a      	add	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	d3f0      	bcc.n	800175a <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2201      	movs	r2, #1
 8001784:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001786:	693b      	ldr	r3, [r7, #16]
}
 8001788:	4618      	mov	r0, r3
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	e16b      	b.n	8001a88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017b0:	2201      	movs	r2, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f040 815a 	bne.w	8001a82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d005      	beq.n	80017e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d130      	bne.n	8001848 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	2203      	movs	r2, #3
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800181c:	2201      	movs	r2, #1
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	091b      	lsrs	r3, r3, #4
 8001832:	f003 0201 	and.w	r2, r3, #1
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b03      	cmp	r3, #3
 8001852:	d017      	beq.n	8001884 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d123      	bne.n	80018d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	08da      	lsrs	r2, r3, #3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3208      	adds	r2, #8
 8001898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	220f      	movs	r2, #15
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	08da      	lsrs	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3208      	adds	r2, #8
 80018d2:	69b9      	ldr	r1, [r7, #24]
 80018d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0203 	and.w	r2, r3, #3
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 80b4 	beq.w	8001a82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b60      	ldr	r3, [pc, #384]	; (8001aa0 <HAL_GPIO_Init+0x30c>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a5f      	ldr	r2, [pc, #380]	; (8001aa0 <HAL_GPIO_Init+0x30c>)
 8001924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b5d      	ldr	r3, [pc, #372]	; (8001aa0 <HAL_GPIO_Init+0x30c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001936:	4a5b      	ldr	r2, [pc, #364]	; (8001aa4 <HAL_GPIO_Init+0x310>)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	3302      	adds	r3, #2
 800193e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	220f      	movs	r2, #15
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a52      	ldr	r2, [pc, #328]	; (8001aa8 <HAL_GPIO_Init+0x314>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d02b      	beq.n	80019ba <HAL_GPIO_Init+0x226>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a51      	ldr	r2, [pc, #324]	; (8001aac <HAL_GPIO_Init+0x318>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d025      	beq.n	80019b6 <HAL_GPIO_Init+0x222>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a50      	ldr	r2, [pc, #320]	; (8001ab0 <HAL_GPIO_Init+0x31c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d01f      	beq.n	80019b2 <HAL_GPIO_Init+0x21e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4f      	ldr	r2, [pc, #316]	; (8001ab4 <HAL_GPIO_Init+0x320>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d019      	beq.n	80019ae <HAL_GPIO_Init+0x21a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a4e      	ldr	r2, [pc, #312]	; (8001ab8 <HAL_GPIO_Init+0x324>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d013      	beq.n	80019aa <HAL_GPIO_Init+0x216>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a4d      	ldr	r2, [pc, #308]	; (8001abc <HAL_GPIO_Init+0x328>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00d      	beq.n	80019a6 <HAL_GPIO_Init+0x212>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4c      	ldr	r2, [pc, #304]	; (8001ac0 <HAL_GPIO_Init+0x32c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d007      	beq.n	80019a2 <HAL_GPIO_Init+0x20e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4b      	ldr	r2, [pc, #300]	; (8001ac4 <HAL_GPIO_Init+0x330>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d101      	bne.n	800199e <HAL_GPIO_Init+0x20a>
 800199a:	2307      	movs	r3, #7
 800199c:	e00e      	b.n	80019bc <HAL_GPIO_Init+0x228>
 800199e:	2308      	movs	r3, #8
 80019a0:	e00c      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019a2:	2306      	movs	r3, #6
 80019a4:	e00a      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019a6:	2305      	movs	r3, #5
 80019a8:	e008      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019aa:	2304      	movs	r3, #4
 80019ac:	e006      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019ae:	2303      	movs	r3, #3
 80019b0:	e004      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e002      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019ba:	2300      	movs	r3, #0
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	f002 0203 	and.w	r2, r2, #3
 80019c2:	0092      	lsls	r2, r2, #2
 80019c4:	4093      	lsls	r3, r2
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019cc:	4935      	ldr	r1, [pc, #212]	; (8001aa4 <HAL_GPIO_Init+0x310>)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <HAL_GPIO_Init+0x334>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019fe:	4a32      	ldr	r2, [pc, #200]	; (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a04:	4b30      	ldr	r3, [pc, #192]	; (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a28:	4a27      	ldr	r2, [pc, #156]	; (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a52:	4a1d      	ldr	r2, [pc, #116]	; (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a7c:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3301      	adds	r3, #1
 8001a86:	61fb      	str	r3, [r7, #28]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	2b0f      	cmp	r3, #15
 8001a8c:	f67f ae90 	bls.w	80017b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40013800 	.word	0x40013800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40020400 	.word	0x40020400
 8001ab0:	40020800 	.word	0x40020800
 8001ab4:	40020c00 	.word	0x40020c00
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40021400 	.word	0x40021400
 8001ac0:	40021800 	.word	0x40021800
 8001ac4:	40021c00 	.word	0x40021c00
 8001ac8:	40013c00 	.word	0x40013c00

08001acc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	887b      	ldrh	r3, [r7, #2]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	e001      	b.n	8001aee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b0c:	787b      	ldrb	r3, [r7, #1]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b18:	e003      	b.n	8001b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b1a:	887b      	ldrh	r3, [r7, #2]
 8001b1c:	041a      	lsls	r2, r3, #16
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	619a      	str	r2, [r3, #24]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001b2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b30:	b08f      	sub	sp, #60	; 0x3c
 8001b32:	af0a      	add	r7, sp, #40	; 0x28
 8001b34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e054      	b.n	8001bea <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f005 fd54 	bl	8007608 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2203      	movs	r2, #3
 8001b64:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f003 fd74 	bl	800566c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	687e      	ldr	r6, [r7, #4]
 8001b8c:	466d      	mov	r5, sp
 8001b8e:	f106 0410 	add.w	r4, r6, #16
 8001b92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ba2:	1d33      	adds	r3, r6, #4
 8001ba4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ba6:	6838      	ldr	r0, [r7, #0]
 8001ba8:	f003 fcee 	bl	8005588 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fd6b 	bl	800568e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	687e      	ldr	r6, [r7, #4]
 8001bc0:	466d      	mov	r5, sp
 8001bc2:	f106 0410 	add.w	r4, r6, #16
 8001bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bd6:	1d33      	adds	r3, r6, #4
 8001bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bda:	6838      	ldr	r0, [r7, #0]
 8001bdc:	f003 fed2 	bl	8005984 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bf2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001bf2:	b590      	push	{r4, r7, lr}
 8001bf4:	b089      	sub	sp, #36	; 0x24
 8001bf6:	af04      	add	r7, sp, #16
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	4608      	mov	r0, r1
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4603      	mov	r3, r0
 8001c02:	70fb      	strb	r3, [r7, #3]
 8001c04:	460b      	mov	r3, r1
 8001c06:	70bb      	strb	r3, [r7, #2]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_HCD_HC_Init+0x28>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e076      	b.n	8001d08 <HAL_HCD_HC_Init+0x116>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	212c      	movs	r1, #44	; 0x2c
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	333d      	adds	r3, #61	; 0x3d
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	212c      	movs	r1, #44	; 0x2c
 8001c3a:	fb01 f303 	mul.w	r3, r1, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	3338      	adds	r3, #56	; 0x38
 8001c42:	787a      	ldrb	r2, [r7, #1]
 8001c44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	212c      	movs	r1, #44	; 0x2c
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	3340      	adds	r3, #64	; 0x40
 8001c54:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c56:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	212c      	movs	r1, #44	; 0x2c
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	3339      	adds	r3, #57	; 0x39
 8001c66:	78fa      	ldrb	r2, [r7, #3]
 8001c68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	212c      	movs	r1, #44	; 0x2c
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	333f      	adds	r3, #63	; 0x3f
 8001c78:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001c7c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	78ba      	ldrb	r2, [r7, #2]
 8001c82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c86:	b2d0      	uxtb	r0, r2
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	212c      	movs	r1, #44	; 0x2c
 8001c8c:	fb01 f303 	mul.w	r3, r1, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	333a      	adds	r3, #58	; 0x3a
 8001c94:	4602      	mov	r2, r0
 8001c96:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001c98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	da09      	bge.n	8001cb4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	212c      	movs	r1, #44	; 0x2c
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	333b      	adds	r3, #59	; 0x3b
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	e008      	b.n	8001cc6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	333b      	adds	r3, #59	; 0x3b
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	212c      	movs	r1, #44	; 0x2c
 8001ccc:	fb01 f303 	mul.w	r3, r1, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	333c      	adds	r3, #60	; 0x3c
 8001cd4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001cd8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	787c      	ldrb	r4, [r7, #1]
 8001ce0:	78ba      	ldrb	r2, [r7, #2]
 8001ce2:	78f9      	ldrb	r1, [r7, #3]
 8001ce4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	4623      	mov	r3, r4
 8001cf6:	f003 ff95 	bl	8005c24 <USB_HC_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd90      	pop	{r4, r7, pc}

08001d10 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_HCD_HC_Halt+0x1e>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e00f      	b.n	8001d4e <HAL_HCD_HC_Halt+0x3e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	78fa      	ldrb	r2, [r7, #3]
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f004 f9d1 	bl	80060e6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	4608      	mov	r0, r1
 8001d62:	4611      	mov	r1, r2
 8001d64:	461a      	mov	r2, r3
 8001d66:	4603      	mov	r3, r0
 8001d68:	70fb      	strb	r3, [r7, #3]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	70bb      	strb	r3, [r7, #2]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	212c      	movs	r1, #44	; 0x2c
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	333b      	adds	r3, #59	; 0x3b
 8001d80:	78ba      	ldrb	r2, [r7, #2]
 8001d82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	212c      	movs	r1, #44	; 0x2c
 8001d8a:	fb01 f303 	mul.w	r3, r1, r3
 8001d8e:	4413      	add	r3, r2
 8001d90:	333f      	adds	r3, #63	; 0x3f
 8001d92:	787a      	ldrb	r2, [r7, #1]
 8001d94:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d96:	7c3b      	ldrb	r3, [r7, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d112      	bne.n	8001dc2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	212c      	movs	r1, #44	; 0x2c
 8001da2:	fb01 f303 	mul.w	r3, r1, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	3342      	adds	r3, #66	; 0x42
 8001daa:	2203      	movs	r2, #3
 8001dac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	212c      	movs	r1, #44	; 0x2c
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	333d      	adds	r3, #61	; 0x3d
 8001dbc:	7f3a      	ldrb	r2, [r7, #28]
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	e008      	b.n	8001dd4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	212c      	movs	r1, #44	; 0x2c
 8001dc8:	fb01 f303 	mul.w	r3, r1, r3
 8001dcc:	4413      	add	r3, r2
 8001dce:	3342      	adds	r3, #66	; 0x42
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001dd4:	787b      	ldrb	r3, [r7, #1]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	f200 80c6 	bhi.w	8001f68 <HAL_HCD_HC_SubmitRequest+0x210>
 8001ddc:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de2:	bf00      	nop
 8001de4:	08001df5 	.word	0x08001df5
 8001de8:	08001f55 	.word	0x08001f55
 8001dec:	08001e59 	.word	0x08001e59
 8001df0:	08001ed7 	.word	0x08001ed7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001df4:	7c3b      	ldrb	r3, [r7, #16]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	f040 80b8 	bne.w	8001f6c <HAL_HCD_HC_SubmitRequest+0x214>
 8001dfc:	78bb      	ldrb	r3, [r7, #2]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f040 80b4 	bne.w	8001f6c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001e04:	8b3b      	ldrh	r3, [r7, #24]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d108      	bne.n	8001e1c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	212c      	movs	r1, #44	; 0x2c
 8001e10:	fb01 f303 	mul.w	r3, r1, r3
 8001e14:	4413      	add	r3, r2
 8001e16:	3355      	adds	r3, #85	; 0x55
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	212c      	movs	r1, #44	; 0x2c
 8001e22:	fb01 f303 	mul.w	r3, r1, r3
 8001e26:	4413      	add	r3, r2
 8001e28:	3355      	adds	r3, #85	; 0x55
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	212c      	movs	r1, #44	; 0x2c
 8001e36:	fb01 f303 	mul.w	r3, r1, r3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3342      	adds	r3, #66	; 0x42
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e42:	e093      	b.n	8001f6c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	212c      	movs	r1, #44	; 0x2c
 8001e4a:	fb01 f303 	mul.w	r3, r1, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	3342      	adds	r3, #66	; 0x42
 8001e52:	2202      	movs	r2, #2
 8001e54:	701a      	strb	r2, [r3, #0]
      break;
 8001e56:	e089      	b.n	8001f6c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001e58:	78bb      	ldrb	r3, [r7, #2]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d11d      	bne.n	8001e9a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	212c      	movs	r1, #44	; 0x2c
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	3355      	adds	r3, #85	; 0x55
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	212c      	movs	r1, #44	; 0x2c
 8001e78:	fb01 f303 	mul.w	r3, r1, r3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3342      	adds	r3, #66	; 0x42
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001e84:	e073      	b.n	8001f6e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	212c      	movs	r1, #44	; 0x2c
 8001e8c:	fb01 f303 	mul.w	r3, r1, r3
 8001e90:	4413      	add	r3, r2
 8001e92:	3342      	adds	r3, #66	; 0x42
 8001e94:	2202      	movs	r2, #2
 8001e96:	701a      	strb	r2, [r3, #0]
      break;
 8001e98:	e069      	b.n	8001f6e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	212c      	movs	r1, #44	; 0x2c
 8001ea0:	fb01 f303 	mul.w	r3, r1, r3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3354      	adds	r3, #84	; 0x54
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	212c      	movs	r1, #44	; 0x2c
 8001eb4:	fb01 f303 	mul.w	r3, r1, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	3342      	adds	r3, #66	; 0x42
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
      break;
 8001ec0:	e055      	b.n	8001f6e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	212c      	movs	r1, #44	; 0x2c
 8001ec8:	fb01 f303 	mul.w	r3, r1, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	3342      	adds	r3, #66	; 0x42
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	701a      	strb	r2, [r3, #0]
      break;
 8001ed4:	e04b      	b.n	8001f6e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ed6:	78bb      	ldrb	r3, [r7, #2]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d11d      	bne.n	8001f18 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	212c      	movs	r1, #44	; 0x2c
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3355      	adds	r3, #85	; 0x55
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d109      	bne.n	8001f04 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	212c      	movs	r1, #44	; 0x2c
 8001ef6:	fb01 f303 	mul.w	r3, r1, r3
 8001efa:	4413      	add	r3, r2
 8001efc:	3342      	adds	r3, #66	; 0x42
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f02:	e034      	b.n	8001f6e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	212c      	movs	r1, #44	; 0x2c
 8001f0a:	fb01 f303 	mul.w	r3, r1, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	3342      	adds	r3, #66	; 0x42
 8001f12:	2202      	movs	r2, #2
 8001f14:	701a      	strb	r2, [r3, #0]
      break;
 8001f16:	e02a      	b.n	8001f6e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	212c      	movs	r1, #44	; 0x2c
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	3354      	adds	r3, #84	; 0x54
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d109      	bne.n	8001f40 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	212c      	movs	r1, #44	; 0x2c
 8001f32:	fb01 f303 	mul.w	r3, r1, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	3342      	adds	r3, #66	; 0x42
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
      break;
 8001f3e:	e016      	b.n	8001f6e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	212c      	movs	r1, #44	; 0x2c
 8001f46:	fb01 f303 	mul.w	r3, r1, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3342      	adds	r3, #66	; 0x42
 8001f4e:	2202      	movs	r2, #2
 8001f50:	701a      	strb	r2, [r3, #0]
      break;
 8001f52:	e00c      	b.n	8001f6e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	212c      	movs	r1, #44	; 0x2c
 8001f5a:	fb01 f303 	mul.w	r3, r1, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	3342      	adds	r3, #66	; 0x42
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
      break;
 8001f66:	e002      	b.n	8001f6e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001f68:	bf00      	nop
 8001f6a:	e000      	b.n	8001f6e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001f6c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	212c      	movs	r1, #44	; 0x2c
 8001f74:	fb01 f303 	mul.w	r3, r1, r3
 8001f78:	4413      	add	r3, r2
 8001f7a:	3344      	adds	r3, #68	; 0x44
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	8b3a      	ldrh	r2, [r7, #24]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	202c      	movs	r0, #44	; 0x2c
 8001f88:	fb00 f303 	mul.w	r3, r0, r3
 8001f8c:	440b      	add	r3, r1
 8001f8e:	334c      	adds	r3, #76	; 0x4c
 8001f90:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3360      	adds	r3, #96	; 0x60
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	212c      	movs	r1, #44	; 0x2c
 8001faa:	fb01 f303 	mul.w	r3, r1, r3
 8001fae:	4413      	add	r3, r2
 8001fb0:	3350      	adds	r3, #80	; 0x50
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	212c      	movs	r1, #44	; 0x2c
 8001fbc:	fb01 f303 	mul.w	r3, r1, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3339      	adds	r3, #57	; 0x39
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3361      	adds	r3, #97	; 0x61
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	222c      	movs	r2, #44	; 0x2c
 8001fe2:	fb02 f303 	mul.w	r3, r2, r3
 8001fe6:	3338      	adds	r3, #56	; 0x38
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	18d1      	adds	r1, r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f003 ff24 	bl	8005e40 <USB_HC_StartXfer>
 8001ff8:	4603      	mov	r3, r0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop

08002004 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f003 fc71 	bl	8005902 <USB_GetMode>
 8002020:	4603      	mov	r3, r0
 8002022:	2b01      	cmp	r3, #1
 8002024:	f040 80f6 	bne.w	8002214 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f003 fc55 	bl	80058dc <USB_ReadInterrupts>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80ec 	beq.w	8002212 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f003 fc4c 	bl	80058dc <USB_ReadInterrupts>
 8002044:	4603      	mov	r3, r0
 8002046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800204e:	d104      	bne.n	800205a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002058:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f003 fc3c 	bl	80058dc <USB_ReadInterrupts>
 8002064:	4603      	mov	r3, r0
 8002066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800206a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800206e:	d104      	bne.n	800207a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002078:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f003 fc2c 	bl	80058dc <USB_ReadInterrupts>
 8002084:	4603      	mov	r3, r0
 8002086:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800208a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800208e:	d104      	bne.n	800209a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002098:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 fc1c 	bl	80058dc <USB_ReadInterrupts>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d103      	bne.n	80020b6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2202      	movs	r2, #2
 80020b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 fc0e 	bl	80058dc <USB_ReadInterrupts>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020ca:	d11c      	bne.n	8002106 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80020d4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10f      	bne.n	8002106 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80020e6:	2110      	movs	r1, #16
 80020e8:	6938      	ldr	r0, [r7, #16]
 80020ea:	f003 fb1d 	bl	8005728 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80020ee:	6938      	ldr	r0, [r7, #16]
 80020f0:	f003 fb3e 	bl	8005770 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2101      	movs	r1, #1
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 fcf6 	bl	8005aec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f005 faff 	bl	8007704 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f003 fbe6 	bl	80058dc <USB_ReadInterrupts>
 8002110:	4603      	mov	r3, r0
 8002112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002116:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800211a:	d102      	bne.n	8002122 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f001 f9e7 	bl	80034f0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f003 fbd8 	bl	80058dc <USB_ReadInterrupts>
 800212c:	4603      	mov	r3, r0
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b08      	cmp	r3, #8
 8002134:	d106      	bne.n	8002144 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f005 fac8 	bl	80076cc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2208      	movs	r2, #8
 8002142:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f003 fbc7 	bl	80058dc <USB_ReadInterrupts>
 800214e:	4603      	mov	r3, r0
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b10      	cmp	r3, #16
 8002156:	d101      	bne.n	800215c <HAL_HCD_IRQHandler+0x158>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_HCD_IRQHandler+0x15a>
 800215c:	2300      	movs	r3, #0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d012      	beq.n	8002188 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699a      	ldr	r2, [r3, #24]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0210 	bic.w	r2, r2, #16
 8002170:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f001 f8ea 	bl	800334c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0210 	orr.w	r2, r2, #16
 8002186:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f003 fba5 	bl	80058dc <USB_ReadInterrupts>
 8002192:	4603      	mov	r3, r0
 8002194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002198:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800219c:	d13a      	bne.n	8002214 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f003 ff8e 	bl	80060c4 <USB_HC_ReadInterrupt>
 80021a8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	e025      	b.n	80021fc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d018      	beq.n	80021f6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021da:	d106      	bne.n	80021ea <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	4619      	mov	r1, r3
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f88f 	bl	8002306 <HCD_HC_IN_IRQHandler>
 80021e8:	e005      	b.n	80021f6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fcaa 	bl	8002b4a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3301      	adds	r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	429a      	cmp	r2, r3
 8002204:	d3d4      	bcc.n	80021b0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800220e:	615a      	str	r2, [r3, #20]
 8002210:	e000      	b.n	8002214 <HAL_HCD_IRQHandler+0x210>
      return;
 8002212:	bf00      	nop
    }
  }
}
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_HCD_Start+0x16>
 800222c:	2302      	movs	r3, #2
 800222e:	e013      	b.n	8002258 <HAL_HCD_Start+0x3e>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2101      	movs	r1, #1
 800223e:	4618      	mov	r0, r3
 8002240:	f003 fc8e 	bl	8005b60 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f003 f9fe 	bl	800564a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_HCD_Stop+0x16>
 8002272:	2302      	movs	r3, #2
 8002274:	e00d      	b.n	8002292 <HAL_HCD_Stop+0x32>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f004 f888 	bl	8006398 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3360      	adds	r3, #96	; 0x60
 80022b4:	781b      	ldrb	r3, [r3, #0]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	460b      	mov	r3, r1
 80022cc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3350      	adds	r3, #80	; 0x50
 80022dc:	681b      	ldr	r3, [r3, #0]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 fc82 	bl	8005c00 <USB_GetCurrentFrame>
 80022fc:	4603      	mov	r3, r0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	460b      	mov	r3, r1
 8002310:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4413      	add	r3, r2
 8002328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b04      	cmp	r3, #4
 8002334:	d119      	bne.n	800236a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4413      	add	r3, r2
 800233e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002342:	461a      	mov	r2, r3
 8002344:	2304      	movs	r3, #4
 8002346:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	0151      	lsls	r1, r2, #5
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	440a      	add	r2, r1
 800235e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002362:	f043 0302 	orr.w	r3, r3, #2
 8002366:	60d3      	str	r3, [r2, #12]
 8002368:	e101      	b.n	800256e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4413      	add	r3, r2
 8002372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002380:	d12b      	bne.n	80023da <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4413      	add	r3, r2
 800238a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238e:	461a      	mov	r2, r3
 8002390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002394:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	212c      	movs	r1, #44	; 0x2c
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	3361      	adds	r3, #97	; 0x61
 80023a4:	2207      	movs	r2, #7
 80023a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	0151      	lsls	r1, r2, #5
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	440a      	add	r2, r1
 80023be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 fe87 	bl	80060e6 <USB_HC_Halt>
 80023d8:	e0c9      	b.n	800256e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d109      	bne.n	8002404 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fc:	461a      	mov	r2, r3
 80023fe:	2320      	movs	r3, #32
 8002400:	6093      	str	r3, [r2, #8]
 8002402:	e0b4      	b.n	800256e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4413      	add	r3, r2
 800240c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b08      	cmp	r3, #8
 8002418:	d133      	bne.n	8002482 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	0151      	lsls	r1, r2, #5
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	440a      	add	r2, r1
 8002430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002434:	f043 0302 	orr.w	r3, r3, #2
 8002438:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	212c      	movs	r1, #44	; 0x2c
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	4413      	add	r3, r2
 8002446:	3361      	adds	r3, #97	; 0x61
 8002448:	2205      	movs	r2, #5
 800244a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002458:	461a      	mov	r2, r3
 800245a:	2310      	movs	r3, #16
 800245c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4413      	add	r3, r2
 8002466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246a:	461a      	mov	r2, r3
 800246c:	2308      	movs	r3, #8
 800246e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f003 fe33 	bl	80060e6 <USB_HC_Halt>
 8002480:	e075      	b.n	800256e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4413      	add	r3, r2
 800248a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002498:	d134      	bne.n	8002504 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	0151      	lsls	r1, r2, #5
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	440a      	add	r2, r1
 80024b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	212c      	movs	r1, #44	; 0x2c
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	3361      	adds	r3, #97	; 0x61
 80024c8:	2208      	movs	r2, #8
 80024ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d8:	461a      	mov	r2, r3
 80024da:	2310      	movs	r3, #16
 80024dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	461a      	mov	r2, r3
 80024ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f003 fdf2 	bl	80060e6 <USB_HC_Halt>
 8002502:	e034      	b.n	800256e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4413      	add	r3, r2
 800250c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002516:	2b80      	cmp	r3, #128	; 0x80
 8002518:	d129      	bne.n	800256e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4413      	add	r3, r2
 8002522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	0151      	lsls	r1, r2, #5
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	440a      	add	r2, r1
 8002530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	212c      	movs	r1, #44	; 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	3361      	adds	r3, #97	; 0x61
 8002548:	2206      	movs	r2, #6
 800254a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f003 fdc5 	bl	80060e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002568:	461a      	mov	r2, r3
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4413      	add	r3, r2
 8002576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002584:	d122      	bne.n	80025cc <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	0151      	lsls	r1, r2, #5
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	440a      	add	r2, r1
 800259c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f003 fd98 	bl	80060e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c2:	461a      	mov	r2, r3
 80025c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025c8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80025ca:	e2ba      	b.n	8002b42 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	f040 811b 	bne.w	800281a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d019      	beq.n	8002620 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	212c      	movs	r1, #44	; 0x2c
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	3348      	adds	r3, #72	; 0x48
 80025fa:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	0159      	lsls	r1, r3, #5
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	440b      	add	r3, r1
 8002604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800260e:	1ad2      	subs	r2, r2, r3
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	202c      	movs	r0, #44	; 0x2c
 8002616:	fb00 f303 	mul.w	r3, r0, r3
 800261a:	440b      	add	r3, r1
 800261c:	3350      	adds	r3, #80	; 0x50
 800261e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	212c      	movs	r1, #44	; 0x2c
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	3361      	adds	r3, #97	; 0x61
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	212c      	movs	r1, #44	; 0x2c
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	4413      	add	r3, r2
 800263e:	335c      	adds	r3, #92	; 0x5c
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	461a      	mov	r2, r3
 8002652:	2301      	movs	r3, #1
 8002654:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	333f      	adds	r3, #63	; 0x3f
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	333f      	adds	r3, #63	; 0x3f
 8002678:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800267a:	2b02      	cmp	r3, #2
 800267c:	d121      	bne.n	80026c2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	0151      	lsls	r1, r2, #5
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	440a      	add	r2, r1
 8002694:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f003 fd1c 	bl	80060e6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ba:	461a      	mov	r2, r3
 80026bc:	2310      	movs	r3, #16
 80026be:	6093      	str	r3, [r2, #8]
 80026c0:	e066      	b.n	8002790 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	333f      	adds	r3, #63	; 0x3f
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d127      	bne.n	8002726 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	0151      	lsls	r1, r2, #5
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	440a      	add	r2, r1
 80026ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026f4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	3360      	adds	r3, #96	; 0x60
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	b2d9      	uxtb	r1, r3
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	202c      	movs	r0, #44	; 0x2c
 8002712:	fb00 f303 	mul.w	r3, r0, r3
 8002716:	4413      	add	r3, r2
 8002718:	3360      	adds	r3, #96	; 0x60
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f004 fffe 	bl	8007720 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002724:	e034      	b.n	8002790 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	212c      	movs	r1, #44	; 0x2c
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	333f      	adds	r3, #63	; 0x3f
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d12a      	bne.n	8002790 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	3360      	adds	r3, #96	; 0x60
 8002748:	2201      	movs	r2, #1
 800274a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	3354      	adds	r3, #84	; 0x54
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	f083 0301 	eor.w	r3, r3, #1
 8002760:	b2d8      	uxtb	r0, r3
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	3354      	adds	r3, #84	; 0x54
 8002770:	4602      	mov	r2, r0
 8002772:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	b2d9      	uxtb	r1, r3
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	202c      	movs	r0, #44	; 0x2c
 800277e:	fb00 f303 	mul.w	r3, r0, r3
 8002782:	4413      	add	r3, r2
 8002784:	3360      	adds	r3, #96	; 0x60
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f004 ffc8 	bl	8007720 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d12b      	bne.n	80027f0 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	212c      	movs	r1, #44	; 0x2c
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	3348      	adds	r3, #72	; 0x48
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	202c      	movs	r0, #44	; 0x2c
 80027ae:	fb00 f202 	mul.w	r2, r0, r2
 80027b2:	440a      	add	r2, r1
 80027b4:	3240      	adds	r2, #64	; 0x40
 80027b6:	8812      	ldrh	r2, [r2, #0]
 80027b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 81be 	beq.w	8002b42 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	212c      	movs	r1, #44	; 0x2c
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	4413      	add	r3, r2
 80027d2:	3354      	adds	r3, #84	; 0x54
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	f083 0301 	eor.w	r3, r3, #1
 80027da:	b2d8      	uxtb	r0, r3
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	212c      	movs	r1, #44	; 0x2c
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	3354      	adds	r3, #84	; 0x54
 80027ea:	4602      	mov	r2, r0
 80027ec:	701a      	strb	r2, [r3, #0]
}
 80027ee:	e1a8      	b.n	8002b42 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	212c      	movs	r1, #44	; 0x2c
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	3354      	adds	r3, #84	; 0x54
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	f083 0301 	eor.w	r3, r3, #1
 8002804:	b2d8      	uxtb	r0, r3
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	3354      	adds	r3, #84	; 0x54
 8002814:	4602      	mov	r2, r0
 8002816:	701a      	strb	r2, [r3, #0]
}
 8002818:	e193      	b.n	8002b42 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b02      	cmp	r3, #2
 800282e:	f040 8106 	bne.w	8002a3e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4413      	add	r3, r2
 800283a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	0151      	lsls	r1, r2, #5
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	440a      	add	r2, r1
 8002848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800284c:	f023 0302 	bic.w	r3, r3, #2
 8002850:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	3361      	adds	r3, #97	; 0x61
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d109      	bne.n	800287a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	212c      	movs	r1, #44	; 0x2c
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	3360      	adds	r3, #96	; 0x60
 8002874:	2201      	movs	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]
 8002878:	e0c9      	b.n	8002a0e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	212c      	movs	r1, #44	; 0x2c
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	3361      	adds	r3, #97	; 0x61
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b05      	cmp	r3, #5
 800288c:	d109      	bne.n	80028a2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	212c      	movs	r1, #44	; 0x2c
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	4413      	add	r3, r2
 800289a:	3360      	adds	r3, #96	; 0x60
 800289c:	2205      	movs	r2, #5
 800289e:	701a      	strb	r2, [r3, #0]
 80028a0:	e0b5      	b.n	8002a0e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3361      	adds	r3, #97	; 0x61
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b06      	cmp	r3, #6
 80028b4:	d009      	beq.n	80028ca <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	212c      	movs	r1, #44	; 0x2c
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	3361      	adds	r3, #97	; 0x61
 80028c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d150      	bne.n	800296c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	335c      	adds	r3, #92	; 0x5c
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	202c      	movs	r0, #44	; 0x2c
 80028e2:	fb00 f303 	mul.w	r3, r0, r3
 80028e6:	440b      	add	r3, r1
 80028e8:	335c      	adds	r3, #92	; 0x5c
 80028ea:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	335c      	adds	r3, #92	; 0x5c
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d912      	bls.n	8002926 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	335c      	adds	r3, #92	; 0x5c
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	3360      	adds	r3, #96	; 0x60
 8002920:	2204      	movs	r2, #4
 8002922:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002924:	e073      	b.n	8002a0e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	212c      	movs	r1, #44	; 0x2c
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	3360      	adds	r3, #96	; 0x60
 8002934:	2202      	movs	r2, #2
 8002936:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4413      	add	r3, r2
 8002940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800294e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002956:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002964:	461a      	mov	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800296a:	e050      	b.n	8002a0e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	212c      	movs	r1, #44	; 0x2c
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	3361      	adds	r3, #97	; 0x61
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b03      	cmp	r3, #3
 800297e:	d122      	bne.n	80029c6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	3360      	adds	r3, #96	; 0x60
 800298e:	2202      	movs	r2, #2
 8002990:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029a8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029b0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	e023      	b.n	8002a0e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	212c      	movs	r1, #44	; 0x2c
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	4413      	add	r3, r2
 80029d2:	3361      	adds	r3, #97	; 0x61
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b07      	cmp	r3, #7
 80029d8:	d119      	bne.n	8002a0e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	212c      	movs	r1, #44	; 0x2c
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	335c      	adds	r3, #92	; 0x5c
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	202c      	movs	r0, #44	; 0x2c
 80029f2:	fb00 f303 	mul.w	r3, r0, r3
 80029f6:	440b      	add	r3, r1
 80029f8:	335c      	adds	r3, #92	; 0x5c
 80029fa:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	3360      	adds	r3, #96	; 0x60
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	b2d9      	uxtb	r1, r3
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	202c      	movs	r0, #44	; 0x2c
 8002a2a:	fb00 f303 	mul.w	r3, r0, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3360      	adds	r3, #96	; 0x60
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f004 fe72 	bl	8007720 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a3c:	e081      	b.n	8002b42 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	d176      	bne.n	8002b42 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	333f      	adds	r3, #63	; 0x3f
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d121      	bne.n	8002aac <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	335c      	adds	r3, #92	; 0x5c
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	0151      	lsls	r1, r2, #5
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	440a      	add	r2, r1
 8002a90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a94:	f043 0302 	orr.w	r3, r3, #2
 8002a98:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f003 fb1e 	bl	80060e6 <USB_HC_Halt>
 8002aaa:	e041      	b.n	8002b30 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	333f      	adds	r3, #63	; 0x3f
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d009      	beq.n	8002ad4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	333f      	adds	r3, #63	; 0x3f
 8002ace:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d12d      	bne.n	8002b30 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	212c      	movs	r1, #44	; 0x2c
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	335c      	adds	r3, #92	; 0x5c
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d120      	bne.n	8002b30 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	3361      	adds	r3, #97	; 0x61
 8002afc:	2203      	movs	r2, #3
 8002afe:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	0151      	lsls	r1, r2, #5
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	440a      	add	r2, r1
 8002b16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b1a:	f043 0302 	orr.w	r3, r3, #2
 8002b1e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f003 fadb 	bl	80060e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2310      	movs	r3, #16
 8002b40:	6093      	str	r3, [r2, #8]
}
 8002b42:	bf00      	nop
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b088      	sub	sp, #32
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d119      	bne.n	8002bae <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b86:	461a      	mov	r2, r3
 8002b88:	2304      	movs	r3, #4
 8002b8a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	0151      	lsls	r1, r2, #5
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	440a      	add	r2, r1
 8002ba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ba6:	f043 0302 	orr.w	r3, r3, #2
 8002baa:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002bac:	e3ca      	b.n	8003344 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d13e      	bne.n	8002c42 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2320      	movs	r3, #32
 8002bd4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	333d      	adds	r3, #61	; 0x3d
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	f040 83ac 	bne.w	8003344 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	212c      	movs	r1, #44	; 0x2c
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	333d      	adds	r3, #61	; 0x3d
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	212c      	movs	r1, #44	; 0x2c
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	3360      	adds	r3, #96	; 0x60
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	0151      	lsls	r1, r2, #5
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	440a      	add	r2, r1
 8002c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c2a:	f043 0302 	orr.w	r3, r3, #2
 8002c2e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f003 fa53 	bl	80060e6 <USB_HC_Halt>
}
 8002c40:	e380      	b.n	8003344 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c58:	d122      	bne.n	8002ca0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	0151      	lsls	r1, r2, #5
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	440a      	add	r2, r1
 8002c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c74:	f043 0302 	orr.w	r3, r3, #2
 8002c78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f003 fa2e 	bl	80060e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	015a      	lsls	r2, r3, #5
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c96:	461a      	mov	r2, r3
 8002c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c9c:	6093      	str	r3, [r2, #8]
}
 8002c9e:	e351      	b.n	8003344 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d150      	bne.n	8002d58 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	212c      	movs	r1, #44	; 0x2c
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	335c      	adds	r3, #92	; 0x5c
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cda:	2b40      	cmp	r3, #64	; 0x40
 8002cdc:	d111      	bne.n	8002d02 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	333d      	adds	r3, #61	; 0x3d
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2340      	movs	r3, #64	; 0x40
 8002d00:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	0151      	lsls	r1, r2, #5
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	440a      	add	r2, r1
 8002d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f003 f9da 	bl	80060e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2301      	movs	r3, #1
 8002d42:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3361      	adds	r3, #97	; 0x61
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
}
 8002d56:	e2f5      	b.n	8003344 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6a:	2b40      	cmp	r3, #64	; 0x40
 8002d6c:	d13c      	bne.n	8002de8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	212c      	movs	r1, #44	; 0x2c
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	3361      	adds	r3, #97	; 0x61
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	333d      	adds	r3, #61	; 0x3d
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	212c      	movs	r1, #44	; 0x2c
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	335c      	adds	r3, #92	; 0x5c
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	0151      	lsls	r1, r2, #5
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	440a      	add	r2, r1
 8002dba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dbe:	f043 0302 	orr.w	r3, r3, #2
 8002dc2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f003 f989 	bl	80060e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de0:	461a      	mov	r2, r3
 8002de2:	2340      	movs	r3, #64	; 0x40
 8002de4:	6093      	str	r3, [r2, #8]
}
 8002de6:	e2ad      	b.n	8003344 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d12a      	bne.n	8002e54 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	2308      	movs	r3, #8
 8002e0e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	0151      	lsls	r1, r2, #5
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	440a      	add	r2, r1
 8002e26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e2a:	f043 0302 	orr.w	r3, r3, #2
 8002e2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f003 f953 	bl	80060e6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	212c      	movs	r1, #44	; 0x2c
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3361      	adds	r3, #97	; 0x61
 8002e4e:	2205      	movs	r2, #5
 8002e50:	701a      	strb	r2, [r3, #0]
}
 8002e52:	e277      	b.n	8003344 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d150      	bne.n	8002f0c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	212c      	movs	r1, #44	; 0x2c
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	4413      	add	r3, r2
 8002e76:	335c      	adds	r3, #92	; 0x5c
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3361      	adds	r3, #97	; 0x61
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	333d      	adds	r3, #61	; 0x3d
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d112      	bne.n	8002ec8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	333c      	adds	r3, #60	; 0x3c
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d108      	bne.n	8002ec8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	333d      	adds	r3, #61	; 0x3d
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	0151      	lsls	r1, r2, #5
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	440a      	add	r2, r1
 8002ede:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ee2:	f043 0302 	orr.w	r3, r3, #2
 8002ee6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f003 f8f7 	bl	80060e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f04:	461a      	mov	r2, r3
 8002f06:	2310      	movs	r3, #16
 8002f08:	6093      	str	r3, [r2, #8]
}
 8002f0a:	e21b      	b.n	8003344 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1e:	2b80      	cmp	r3, #128	; 0x80
 8002f20:	d174      	bne.n	800300c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d121      	bne.n	8002f6e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	212c      	movs	r1, #44	; 0x2c
 8002f30:	fb01 f303 	mul.w	r3, r1, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	3361      	adds	r3, #97	; 0x61
 8002f38:	2206      	movs	r2, #6
 8002f3a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	0151      	lsls	r1, r2, #5
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	440a      	add	r2, r1
 8002f52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f56:	f043 0302 	orr.w	r3, r3, #2
 8002f5a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f003 f8bd 	bl	80060e6 <USB_HC_Halt>
 8002f6c:	e044      	b.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	335c      	adds	r3, #92	; 0x5c
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	202c      	movs	r0, #44	; 0x2c
 8002f86:	fb00 f303 	mul.w	r3, r0, r3
 8002f8a:	440b      	add	r3, r1
 8002f8c:	335c      	adds	r3, #92	; 0x5c
 8002f8e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	335c      	adds	r3, #92	; 0x5c
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d920      	bls.n	8002fe6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	212c      	movs	r1, #44	; 0x2c
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	335c      	adds	r3, #92	; 0x5c
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3360      	adds	r3, #96	; 0x60
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	b2d9      	uxtb	r1, r3
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	202c      	movs	r0, #44	; 0x2c
 8002fd2:	fb00 f303 	mul.w	r3, r0, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3360      	adds	r3, #96	; 0x60
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f004 fb9e 	bl	8007720 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fe4:	e008      	b.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3360      	adds	r3, #96	; 0x60
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003004:	461a      	mov	r2, r3
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	6093      	str	r3, [r2, #8]
}
 800300a:	e19b      	b.n	8003344 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003022:	d134      	bne.n	800308e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	4413      	add	r3, r2
 800302c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	0151      	lsls	r1, r2, #5
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	440a      	add	r2, r1
 800303a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800303e:	f043 0302 	orr.w	r3, r3, #2
 8003042:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f003 f849 	bl	80060e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003060:	461a      	mov	r2, r3
 8003062:	2310      	movs	r3, #16
 8003064:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003072:	461a      	mov	r2, r3
 8003074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003078:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	212c      	movs	r1, #44	; 0x2c
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	4413      	add	r3, r2
 8003086:	3361      	adds	r3, #97	; 0x61
 8003088:	2208      	movs	r2, #8
 800308a:	701a      	strb	r2, [r3, #0]
}
 800308c:	e15a      	b.n	8003344 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	4413      	add	r3, r2
 8003096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	f040 814f 	bne.w	8003344 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	0151      	lsls	r1, r2, #5
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	440a      	add	r2, r1
 80030bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030c0:	f023 0302 	bic.w	r3, r3, #2
 80030c4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	3361      	adds	r3, #97	; 0x61
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d17d      	bne.n	80031d6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	212c      	movs	r1, #44	; 0x2c
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	4413      	add	r3, r2
 80030e6:	3360      	adds	r3, #96	; 0x60
 80030e8:	2201      	movs	r2, #1
 80030ea:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	212c      	movs	r1, #44	; 0x2c
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	333f      	adds	r3, #63	; 0x3f
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d00a      	beq.n	8003116 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	212c      	movs	r1, #44	; 0x2c
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	4413      	add	r3, r2
 800310c:	333f      	adds	r3, #63	; 0x3f
 800310e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003110:	2b03      	cmp	r3, #3
 8003112:	f040 8100 	bne.w	8003316 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d113      	bne.n	8003146 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	212c      	movs	r1, #44	; 0x2c
 8003124:	fb01 f303 	mul.w	r3, r1, r3
 8003128:	4413      	add	r3, r2
 800312a:	3355      	adds	r3, #85	; 0x55
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	f083 0301 	eor.w	r3, r3, #1
 8003132:	b2d8      	uxtb	r0, r3
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	212c      	movs	r1, #44	; 0x2c
 800313a:	fb01 f303 	mul.w	r3, r1, r3
 800313e:	4413      	add	r3, r2
 8003140:	3355      	adds	r3, #85	; 0x55
 8003142:	4602      	mov	r2, r0
 8003144:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b01      	cmp	r3, #1
 800314c:	f040 80e3 	bne.w	8003316 <HCD_HC_OUT_IRQHandler+0x7cc>
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	334c      	adds	r3, #76	; 0x4c
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80d8 	beq.w	8003316 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	212c      	movs	r1, #44	; 0x2c
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	4413      	add	r3, r2
 8003172:	334c      	adds	r3, #76	; 0x4c
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	202c      	movs	r0, #44	; 0x2c
 800317c:	fb00 f202 	mul.w	r2, r0, r2
 8003180:	440a      	add	r2, r1
 8003182:	3240      	adds	r2, #64	; 0x40
 8003184:	8812      	ldrh	r2, [r2, #0]
 8003186:	4413      	add	r3, r2
 8003188:	3b01      	subs	r3, #1
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	202c      	movs	r0, #44	; 0x2c
 8003190:	fb00 f202 	mul.w	r2, r0, r2
 8003194:	440a      	add	r2, r1
 8003196:	3240      	adds	r2, #64	; 0x40
 8003198:	8812      	ldrh	r2, [r2, #0]
 800319a:	fbb3 f3f2 	udiv	r3, r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80b5 	beq.w	8003316 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	212c      	movs	r1, #44	; 0x2c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	3355      	adds	r3, #85	; 0x55
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	f083 0301 	eor.w	r3, r3, #1
 80031c0:	b2d8      	uxtb	r0, r3
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	3355      	adds	r3, #85	; 0x55
 80031d0:	4602      	mov	r2, r0
 80031d2:	701a      	strb	r2, [r3, #0]
 80031d4:	e09f      	b.n	8003316 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	3361      	adds	r3, #97	; 0x61
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d109      	bne.n	80031fe <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	212c      	movs	r1, #44	; 0x2c
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	3360      	adds	r3, #96	; 0x60
 80031f8:	2202      	movs	r2, #2
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e08b      	b.n	8003316 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	212c      	movs	r1, #44	; 0x2c
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	4413      	add	r3, r2
 800320a:	3361      	adds	r3, #97	; 0x61
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b04      	cmp	r3, #4
 8003210:	d109      	bne.n	8003226 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	212c      	movs	r1, #44	; 0x2c
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	3360      	adds	r3, #96	; 0x60
 8003220:	2202      	movs	r2, #2
 8003222:	701a      	strb	r2, [r3, #0]
 8003224:	e077      	b.n	8003316 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	3361      	adds	r3, #97	; 0x61
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b05      	cmp	r3, #5
 8003238:	d109      	bne.n	800324e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	212c      	movs	r1, #44	; 0x2c
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	4413      	add	r3, r2
 8003246:	3360      	adds	r3, #96	; 0x60
 8003248:	2205      	movs	r2, #5
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e063      	b.n	8003316 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	212c      	movs	r1, #44	; 0x2c
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	4413      	add	r3, r2
 800325a:	3361      	adds	r3, #97	; 0x61
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b06      	cmp	r3, #6
 8003260:	d009      	beq.n	8003276 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	212c      	movs	r1, #44	; 0x2c
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	4413      	add	r3, r2
 800326e:	3361      	adds	r3, #97	; 0x61
 8003270:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003272:	2b08      	cmp	r3, #8
 8003274:	d14f      	bne.n	8003316 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	212c      	movs	r1, #44	; 0x2c
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	4413      	add	r3, r2
 8003282:	335c      	adds	r3, #92	; 0x5c
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	202c      	movs	r0, #44	; 0x2c
 800328e:	fb00 f303 	mul.w	r3, r0, r3
 8003292:	440b      	add	r3, r1
 8003294:	335c      	adds	r3, #92	; 0x5c
 8003296:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	335c      	adds	r3, #92	; 0x5c
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d912      	bls.n	80032d2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	335c      	adds	r3, #92	; 0x5c
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	3360      	adds	r3, #96	; 0x60
 80032cc:	2204      	movs	r2, #4
 80032ce:	701a      	strb	r2, [r3, #0]
 80032d0:	e021      	b.n	8003316 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	212c      	movs	r1, #44	; 0x2c
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	4413      	add	r3, r2
 80032de:	3360      	adds	r3, #96	; 0x60
 80032e0:	2202      	movs	r2, #2
 80032e2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032fa:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003302:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	4413      	add	r3, r2
 800330c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003310:	461a      	mov	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	4413      	add	r3, r2
 800331e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003322:	461a      	mov	r2, r3
 8003324:	2302      	movs	r3, #2
 8003326:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	b2d9      	uxtb	r1, r3
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	202c      	movs	r0, #44	; 0x2c
 8003332:	fb00 f303 	mul.w	r3, r0, r3
 8003336:	4413      	add	r3, r2
 8003338:	3360      	adds	r3, #96	; 0x60
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f004 f9ee 	bl	8007720 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003344:	bf00      	nop
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	; 0x28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	0c5b      	lsrs	r3, r3, #17
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003380:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d004      	beq.n	8003392 <HCD_RXQLVL_IRQHandler+0x46>
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2b05      	cmp	r3, #5
 800338c:	f000 80a9 	beq.w	80034e2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003390:	e0aa      	b.n	80034e8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80a6 	beq.w	80034e6 <HCD_RXQLVL_IRQHandler+0x19a>
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	212c      	movs	r1, #44	; 0x2c
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	4413      	add	r3, r2
 80033a6:	3344      	adds	r3, #68	; 0x44
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 809b 	beq.w	80034e6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	212c      	movs	r1, #44	; 0x2c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	3350      	adds	r3, #80	; 0x50
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	441a      	add	r2, r3
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	202c      	movs	r0, #44	; 0x2c
 80033ca:	fb00 f303 	mul.w	r3, r0, r3
 80033ce:	440b      	add	r3, r1
 80033d0:	334c      	adds	r3, #76	; 0x4c
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d87a      	bhi.n	80034ce <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	212c      	movs	r1, #44	; 0x2c
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	3344      	adds	r3, #68	; 0x44
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	b292      	uxth	r2, r2
 80033f0:	4619      	mov	r1, r3
 80033f2:	f002 fa1b 	bl	800582c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	212c      	movs	r1, #44	; 0x2c
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	4413      	add	r3, r2
 8003402:	3344      	adds	r3, #68	; 0x44
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	441a      	add	r2, r3
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	202c      	movs	r0, #44	; 0x2c
 8003410:	fb00 f303 	mul.w	r3, r0, r3
 8003414:	440b      	add	r3, r1
 8003416:	3344      	adds	r3, #68	; 0x44
 8003418:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	212c      	movs	r1, #44	; 0x2c
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	4413      	add	r3, r2
 8003426:	3350      	adds	r3, #80	; 0x50
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	441a      	add	r2, r3
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	202c      	movs	r0, #44	; 0x2c
 8003434:	fb00 f303 	mul.w	r3, r0, r3
 8003438:	440b      	add	r3, r1
 800343a:	3350      	adds	r3, #80	; 0x50
 800343c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	4413      	add	r3, r2
 8003446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	0cdb      	lsrs	r3, r3, #19
 800344e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003452:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	212c      	movs	r1, #44	; 0x2c
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	3340      	adds	r3, #64	; 0x40
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4293      	cmp	r3, r2
 800346a:	d13c      	bne.n	80034e6 <HCD_RXQLVL_IRQHandler+0x19a>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d039      	beq.n	80034e6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	4413      	add	r3, r2
 800347a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003488:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003490:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	4413      	add	r3, r2
 800349a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349e:	461a      	mov	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	212c      	movs	r1, #44	; 0x2c
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	4413      	add	r3, r2
 80034b0:	3354      	adds	r3, #84	; 0x54
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	f083 0301 	eor.w	r3, r3, #1
 80034b8:	b2d8      	uxtb	r0, r3
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	212c      	movs	r1, #44	; 0x2c
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	4413      	add	r3, r2
 80034c6:	3354      	adds	r3, #84	; 0x54
 80034c8:	4602      	mov	r2, r0
 80034ca:	701a      	strb	r2, [r3, #0]
      break;
 80034cc:	e00b      	b.n	80034e6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	212c      	movs	r1, #44	; 0x2c
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	4413      	add	r3, r2
 80034da:	3360      	adds	r3, #96	; 0x60
 80034dc:	2204      	movs	r2, #4
 80034de:	701a      	strb	r2, [r3, #0]
      break;
 80034e0:	e001      	b.n	80034e6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80034e2:	bf00      	nop
 80034e4:	e000      	b.n	80034e8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80034e6:	bf00      	nop
  }
}
 80034e8:	bf00      	nop
 80034ea:	3728      	adds	r7, #40	; 0x28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800351c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b02      	cmp	r3, #2
 8003526:	d10b      	bne.n	8003540 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b01      	cmp	r3, #1
 8003530:	d102      	bne.n	8003538 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f004 f8d8 	bl	80076e8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f043 0302 	orr.w	r3, r3, #2
 800353e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b08      	cmp	r3, #8
 8003548:	d132      	bne.n	80035b0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f043 0308 	orr.w	r3, r3, #8
 8003550:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b04      	cmp	r3, #4
 800355a:	d126      	bne.n	80035aa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d113      	bne.n	800358c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800356a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800356e:	d106      	bne.n	800357e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2102      	movs	r1, #2
 8003576:	4618      	mov	r0, r3
 8003578:	f002 fab8 	bl	8005aec <USB_InitFSLSPClkSel>
 800357c:	e011      	b.n	80035a2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2101      	movs	r1, #1
 8003584:	4618      	mov	r0, r3
 8003586:	f002 fab1 	bl	8005aec <USB_InitFSLSPClkSel>
 800358a:	e00a      	b.n	80035a2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d106      	bne.n	80035a2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800359a:	461a      	mov	r2, r3
 800359c:	f64e 2360 	movw	r3, #60000	; 0xea60
 80035a0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f004 f8ca 	bl	800773c <HAL_HCD_PortEnabled_Callback>
 80035a8:	e002      	b.n	80035b0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f004 f8d4 	bl	8007758 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d103      	bne.n	80035c2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f043 0320 	orr.w	r3, r3, #32
 80035c0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035c8:	461a      	mov	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	6013      	str	r3, [r2, #0]
}
 80035ce:	bf00      	nop
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e12b      	b.n	8003842 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fd fc84 	bl	8000f0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2224      	movs	r2, #36	; 0x24
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800362a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800363a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800363c:	f001 f9fc 	bl	8004a38 <HAL_RCC_GetPCLK1Freq>
 8003640:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4a81      	ldr	r2, [pc, #516]	; (800384c <HAL_I2C_Init+0x274>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d807      	bhi.n	800365c <HAL_I2C_Init+0x84>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4a80      	ldr	r2, [pc, #512]	; (8003850 <HAL_I2C_Init+0x278>)
 8003650:	4293      	cmp	r3, r2
 8003652:	bf94      	ite	ls
 8003654:	2301      	movls	r3, #1
 8003656:	2300      	movhi	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	e006      	b.n	800366a <HAL_I2C_Init+0x92>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4a7d      	ldr	r2, [pc, #500]	; (8003854 <HAL_I2C_Init+0x27c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	bf94      	ite	ls
 8003664:	2301      	movls	r3, #1
 8003666:	2300      	movhi	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e0e7      	b.n	8003842 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4a78      	ldr	r2, [pc, #480]	; (8003858 <HAL_I2C_Init+0x280>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	0c9b      	lsrs	r3, r3, #18
 800367c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4a6a      	ldr	r2, [pc, #424]	; (800384c <HAL_I2C_Init+0x274>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d802      	bhi.n	80036ac <HAL_I2C_Init+0xd4>
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	3301      	adds	r3, #1
 80036aa:	e009      	b.n	80036c0 <HAL_I2C_Init+0xe8>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	4a69      	ldr	r2, [pc, #420]	; (800385c <HAL_I2C_Init+0x284>)
 80036b8:	fba2 2303 	umull	r2, r3, r2, r3
 80036bc:	099b      	lsrs	r3, r3, #6
 80036be:	3301      	adds	r3, #1
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	430b      	orrs	r3, r1
 80036c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	495c      	ldr	r1, [pc, #368]	; (800384c <HAL_I2C_Init+0x274>)
 80036dc:	428b      	cmp	r3, r1
 80036de:	d819      	bhi.n	8003714 <HAL_I2C_Init+0x13c>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1e59      	subs	r1, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80036ee:	1c59      	adds	r1, r3, #1
 80036f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036f4:	400b      	ands	r3, r1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <HAL_I2C_Init+0x138>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1e59      	subs	r1, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	fbb1 f3f3 	udiv	r3, r1, r3
 8003708:	3301      	adds	r3, #1
 800370a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800370e:	e051      	b.n	80037b4 <HAL_I2C_Init+0x1dc>
 8003710:	2304      	movs	r3, #4
 8003712:	e04f      	b.n	80037b4 <HAL_I2C_Init+0x1dc>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d111      	bne.n	8003740 <HAL_I2C_Init+0x168>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1e58      	subs	r0, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	440b      	add	r3, r1
 800372a:	fbb0 f3f3 	udiv	r3, r0, r3
 800372e:	3301      	adds	r3, #1
 8003730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	e012      	b.n	8003766 <HAL_I2C_Init+0x18e>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	1e58      	subs	r0, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	0099      	lsls	r1, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	fbb0 f3f3 	udiv	r3, r0, r3
 8003756:	3301      	adds	r3, #1
 8003758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375c:	2b00      	cmp	r3, #0
 800375e:	bf0c      	ite	eq
 8003760:	2301      	moveq	r3, #1
 8003762:	2300      	movne	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_I2C_Init+0x196>
 800376a:	2301      	movs	r3, #1
 800376c:	e022      	b.n	80037b4 <HAL_I2C_Init+0x1dc>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10e      	bne.n	8003794 <HAL_I2C_Init+0x1bc>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1e58      	subs	r0, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6859      	ldr	r1, [r3, #4]
 800377e:	460b      	mov	r3, r1
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	440b      	add	r3, r1
 8003784:	fbb0 f3f3 	udiv	r3, r0, r3
 8003788:	3301      	adds	r3, #1
 800378a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800378e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003792:	e00f      	b.n	80037b4 <HAL_I2C_Init+0x1dc>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1e58      	subs	r0, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	0099      	lsls	r1, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037aa:	3301      	adds	r3, #1
 80037ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	6809      	ldr	r1, [r1, #0]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69da      	ldr	r2, [r3, #28]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6911      	ldr	r1, [r2, #16]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	68d2      	ldr	r2, [r2, #12]
 80037ee:	4311      	orrs	r1, r2
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	430b      	orrs	r3, r1
 80037f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	000186a0 	.word	0x000186a0
 8003850:	001e847f 	.word	0x001e847f
 8003854:	003d08ff 	.word	0x003d08ff
 8003858:	431bde83 	.word	0x431bde83
 800385c:	10624dd3 	.word	0x10624dd3

08003860 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e128      	b.n	8003ac4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a90      	ldr	r2, [pc, #576]	; (8003acc <HAL_I2S_Init+0x26c>)
 800388a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7fd fb85 	bl	8000f9c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2202      	movs	r2, #2
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038a8:	f023 030f 	bic.w	r3, r3, #15
 80038ac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2202      	movs	r2, #2
 80038b4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d060      	beq.n	8003980 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80038c6:	2310      	movs	r3, #16
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	e001      	b.n	80038d0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80038cc:	2320      	movs	r3, #32
 80038ce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d802      	bhi.n	80038de <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80038de:	2001      	movs	r0, #1
 80038e0:	f001 f9b4 	bl	8004c4c <HAL_RCCEx_GetPeriphCLKFreq>
 80038e4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ee:	d125      	bne.n	800393c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d010      	beq.n	800391a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	461a      	mov	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	fbb2 f3f3 	udiv	r3, r2, r3
 8003914:	3305      	adds	r3, #5
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	e01f      	b.n	800395a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	fbb2 f2f3 	udiv	r2, r2, r3
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	461a      	mov	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	3305      	adds	r3, #5
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	e00e      	b.n	800395a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	fbb2 f2f3 	udiv	r2, r2, r3
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	461a      	mov	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	fbb2 f3f3 	udiv	r3, r2, r3
 8003956:	3305      	adds	r3, #5
 8003958:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4a5c      	ldr	r2, [pc, #368]	; (8003ad0 <HAL_I2S_Init+0x270>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	08db      	lsrs	r3, r3, #3
 8003964:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	e003      	b.n	8003988 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003980:	2302      	movs	r3, #2
 8003982:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d902      	bls.n	8003994 <HAL_I2S_Init+0x134>
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	2bff      	cmp	r3, #255	; 0xff
 8003992:	d907      	bls.n	80039a4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003998:	f043 0210 	orr.w	r2, r3, #16
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e08f      	b.n	8003ac4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	ea42 0103 	orr.w	r1, r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039c2:	f023 030f 	bic.w	r3, r3, #15
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6851      	ldr	r1, [r2, #4]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6892      	ldr	r2, [r2, #8]
 80039ce:	4311      	orrs	r1, r2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	68d2      	ldr	r2, [r2, #12]
 80039d4:	4311      	orrs	r1, r2
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6992      	ldr	r2, [r2, #24]
 80039da:	430a      	orrs	r2, r1
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039e6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d161      	bne.n	8003ab4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a38      	ldr	r2, [pc, #224]	; (8003ad4 <HAL_I2S_Init+0x274>)
 80039f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a37      	ldr	r2, [pc, #220]	; (8003ad8 <HAL_I2S_Init+0x278>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d101      	bne.n	8003a04 <HAL_I2S_Init+0x1a4>
 8003a00:	4b36      	ldr	r3, [pc, #216]	; (8003adc <HAL_I2S_Init+0x27c>)
 8003a02:	e001      	b.n	8003a08 <HAL_I2S_Init+0x1a8>
 8003a04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	4932      	ldr	r1, [pc, #200]	; (8003ad8 <HAL_I2S_Init+0x278>)
 8003a10:	428a      	cmp	r2, r1
 8003a12:	d101      	bne.n	8003a18 <HAL_I2S_Init+0x1b8>
 8003a14:	4a31      	ldr	r2, [pc, #196]	; (8003adc <HAL_I2S_Init+0x27c>)
 8003a16:	e001      	b.n	8003a1c <HAL_I2S_Init+0x1bc>
 8003a18:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003a1c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a20:	f023 030f 	bic.w	r3, r3, #15
 8003a24:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a2b      	ldr	r2, [pc, #172]	; (8003ad8 <HAL_I2S_Init+0x278>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d101      	bne.n	8003a34 <HAL_I2S_Init+0x1d4>
 8003a30:	4b2a      	ldr	r3, [pc, #168]	; (8003adc <HAL_I2S_Init+0x27c>)
 8003a32:	e001      	b.n	8003a38 <HAL_I2S_Init+0x1d8>
 8003a34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a38:	2202      	movs	r2, #2
 8003a3a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a25      	ldr	r2, [pc, #148]	; (8003ad8 <HAL_I2S_Init+0x278>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d101      	bne.n	8003a4a <HAL_I2S_Init+0x1ea>
 8003a46:	4b25      	ldr	r3, [pc, #148]	; (8003adc <HAL_I2S_Init+0x27c>)
 8003a48:	e001      	b.n	8003a4e <HAL_I2S_Init+0x1ee>
 8003a4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a5a:	d003      	beq.n	8003a64 <HAL_I2S_Init+0x204>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d103      	bne.n	8003a6c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	e001      	b.n	8003a70 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a84:	4313      	orrs	r3, r2
 8003a86:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	897b      	ldrh	r3, [r7, #10]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a9c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a0d      	ldr	r2, [pc, #52]	; (8003ad8 <HAL_I2S_Init+0x278>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d101      	bne.n	8003aac <HAL_I2S_Init+0x24c>
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <HAL_I2S_Init+0x27c>)
 8003aaa:	e001      	b.n	8003ab0 <HAL_I2S_Init+0x250>
 8003aac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ab0:	897a      	ldrh	r2, [r7, #10]
 8003ab2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3720      	adds	r7, #32
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	08003bd7 	.word	0x08003bd7
 8003ad0:	cccccccd 	.word	0xcccccccd
 8003ad4:	08003ced 	.word	0x08003ced
 8003ad8:	40003800 	.word	0x40003800
 8003adc:	40003400 	.word	0x40003400

08003ae0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	881a      	ldrh	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	1c9a      	adds	r2, r3, #2
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10e      	bne.n	8003b70 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b60:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff ffb8 	bl	8003ae0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	b292      	uxth	r2, r2
 8003b8c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b92:	1c9a      	adds	r2, r3, #2
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10e      	bne.n	8003bce <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bbe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ff93 	bl	8003af4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b086      	sub	sp, #24
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d13a      	bne.n	8003c68 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d109      	bne.n	8003c10 <I2S_IRQHandler+0x3a>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c06:	2b40      	cmp	r3, #64	; 0x40
 8003c08:	d102      	bne.n	8003c10 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff ffb4 	bl	8003b78 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c16:	2b40      	cmp	r3, #64	; 0x40
 8003c18:	d126      	bne.n	8003c68 <I2S_IRQHandler+0x92>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d11f      	bne.n	8003c68 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c36:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c38:	2300      	movs	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	f043 0202 	orr.w	r2, r3, #2
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff ff50 	bl	8003b08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d136      	bne.n	8003ce2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d109      	bne.n	8003c92 <I2S_IRQHandler+0xbc>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c88:	2b80      	cmp	r3, #128	; 0x80
 8003c8a:	d102      	bne.n	8003c92 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ff45 	bl	8003b1c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d122      	bne.n	8003ce2 <I2S_IRQHandler+0x10c>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d11b      	bne.n	8003ce2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cb8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd4:	f043 0204 	orr.w	r2, r3, #4
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff ff13 	bl	8003b08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4aa2      	ldr	r2, [pc, #648]	; (8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d101      	bne.n	8003d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d06:	4ba2      	ldr	r3, [pc, #648]	; (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d08:	e001      	b.n	8003d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a9b      	ldr	r2, [pc, #620]	; (8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d101      	bne.n	8003d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d24:	4b9a      	ldr	r3, [pc, #616]	; (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d26:	e001      	b.n	8003d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d38:	d004      	beq.n	8003d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f040 8099 	bne.w	8003e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d107      	bne.n	8003d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f925 	bl	8003fa8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d107      	bne.n	8003d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f9c8 	bl	8004108 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d13a      	bne.n	8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d035      	beq.n	8003df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a7e      	ldr	r2, [pc, #504]	; (8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d101      	bne.n	8003d9a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003d96:	4b7e      	ldr	r3, [pc, #504]	; (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d98:	e001      	b.n	8003d9e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003d9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4979      	ldr	r1, [pc, #484]	; (8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003da6:	428b      	cmp	r3, r1
 8003da8:	d101      	bne.n	8003dae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003daa:	4b79      	ldr	r3, [pc, #484]	; (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003dac:	e001      	b.n	8003db2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003dae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003db2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003db6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dc6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	f043 0202 	orr.w	r2, r3, #2
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff fe88 	bl	8003b08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	f040 80be 	bne.w	8003f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f003 0320 	and.w	r3, r3, #32
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 80b8 	beq.w	8003f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e1e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a59      	ldr	r2, [pc, #356]	; (8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d101      	bne.n	8003e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e2a:	4b59      	ldr	r3, [pc, #356]	; (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e2c:	e001      	b.n	8003e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4954      	ldr	r1, [pc, #336]	; (8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e3a:	428b      	cmp	r3, r1
 8003e3c:	d101      	bne.n	8003e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e3e:	4b54      	ldr	r3, [pc, #336]	; (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e40:	e001      	b.n	8003e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e4a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	f043 0204 	orr.w	r2, r3, #4
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff fe4a 	bl	8003b08 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e74:	e084      	b.n	8003f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d107      	bne.n	8003e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f8be 	bl	800400c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d107      	bne.n	8003eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f8fd 	bl	80040a4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb0:	2b40      	cmp	r3, #64	; 0x40
 8003eb2:	d12f      	bne.n	8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d02a      	beq.n	8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ecc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a2e      	ldr	r2, [pc, #184]	; (8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d101      	bne.n	8003edc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ed8:	4b2d      	ldr	r3, [pc, #180]	; (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003eda:	e001      	b.n	8003ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003edc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4929      	ldr	r1, [pc, #164]	; (8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ee8:	428b      	cmp	r3, r1
 8003eea:	d101      	bne.n	8003ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003eec:	4b28      	ldr	r3, [pc, #160]	; (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003eee:	e001      	b.n	8003ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003ef0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ef4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ef8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	f043 0202 	orr.w	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff fdfa 	bl	8003b08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d131      	bne.n	8003f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d02c      	beq.n	8003f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a17      	ldr	r2, [pc, #92]	; (8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d101      	bne.n	8003f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f32:	4b17      	ldr	r3, [pc, #92]	; (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f34:	e001      	b.n	8003f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4912      	ldr	r1, [pc, #72]	; (8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f42:	428b      	cmp	r3, r1
 8003f44:	d101      	bne.n	8003f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003f46:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f48:	e001      	b.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003f4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f52:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f62:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f70:	f043 0204 	orr.w	r2, r3, #4
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff fdc5 	bl	8003b08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f7e:	e000      	b.n	8003f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f80:	bf00      	nop
}
 8003f82:	bf00      	nop
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40003800 	.word	0x40003800
 8003f90:	40003400 	.word	0x40003400

08003f94 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	1c99      	adds	r1, r3, #2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6251      	str	r1, [r2, #36]	; 0x24
 8003fba:	881a      	ldrh	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d113      	bne.n	8004002 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fe8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d106      	bne.n	8004002 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff ffc9 	bl	8003f94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	1c99      	adds	r1, r3, #2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6251      	str	r1, [r2, #36]	; 0x24
 800401e:	8819      	ldrh	r1, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1d      	ldr	r2, [pc, #116]	; (800409c <I2SEx_TxISR_I2SExt+0x90>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d101      	bne.n	800402e <I2SEx_TxISR_I2SExt+0x22>
 800402a:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <I2SEx_TxISR_I2SExt+0x94>)
 800402c:	e001      	b.n	8004032 <I2SEx_TxISR_I2SExt+0x26>
 800402e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004032:	460a      	mov	r2, r1
 8004034:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d121      	bne.n	8004092 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a12      	ldr	r2, [pc, #72]	; (800409c <I2SEx_TxISR_I2SExt+0x90>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d101      	bne.n	800405c <I2SEx_TxISR_I2SExt+0x50>
 8004058:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <I2SEx_TxISR_I2SExt+0x94>)
 800405a:	e001      	b.n	8004060 <I2SEx_TxISR_I2SExt+0x54>
 800405c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	490d      	ldr	r1, [pc, #52]	; (800409c <I2SEx_TxISR_I2SExt+0x90>)
 8004068:	428b      	cmp	r3, r1
 800406a:	d101      	bne.n	8004070 <I2SEx_TxISR_I2SExt+0x64>
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <I2SEx_TxISR_I2SExt+0x94>)
 800406e:	e001      	b.n	8004074 <I2SEx_TxISR_I2SExt+0x68>
 8004070:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004074:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004078:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d106      	bne.n	8004092 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7ff ff81 	bl	8003f94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40003800 	.word	0x40003800
 80040a0:	40003400 	.word	0x40003400

080040a4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68d8      	ldr	r0, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	1c99      	adds	r1, r3, #2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	62d1      	str	r1, [r2, #44]	; 0x2c
 80040bc:	b282      	uxth	r2, r0
 80040be:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d113      	bne.n	8004100 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040e6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff ff4a 	bl	8003f94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004100:	bf00      	nop
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a20      	ldr	r2, [pc, #128]	; (8004198 <I2SEx_RxISR_I2SExt+0x90>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d101      	bne.n	800411e <I2SEx_RxISR_I2SExt+0x16>
 800411a:	4b20      	ldr	r3, [pc, #128]	; (800419c <I2SEx_RxISR_I2SExt+0x94>)
 800411c:	e001      	b.n	8004122 <I2SEx_RxISR_I2SExt+0x1a>
 800411e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004122:	68d8      	ldr	r0, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	1c99      	adds	r1, r3, #2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800412e:	b282      	uxth	r2, r0
 8004130:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d121      	bne.n	800418e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a12      	ldr	r2, [pc, #72]	; (8004198 <I2SEx_RxISR_I2SExt+0x90>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d101      	bne.n	8004158 <I2SEx_RxISR_I2SExt+0x50>
 8004154:	4b11      	ldr	r3, [pc, #68]	; (800419c <I2SEx_RxISR_I2SExt+0x94>)
 8004156:	e001      	b.n	800415c <I2SEx_RxISR_I2SExt+0x54>
 8004158:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	490d      	ldr	r1, [pc, #52]	; (8004198 <I2SEx_RxISR_I2SExt+0x90>)
 8004164:	428b      	cmp	r3, r1
 8004166:	d101      	bne.n	800416c <I2SEx_RxISR_I2SExt+0x64>
 8004168:	4b0c      	ldr	r3, [pc, #48]	; (800419c <I2SEx_RxISR_I2SExt+0x94>)
 800416a:	e001      	b.n	8004170 <I2SEx_RxISR_I2SExt+0x68>
 800416c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004170:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004174:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d106      	bne.n	800418e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff ff03 	bl	8003f94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800418e:	bf00      	nop
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40003800 	.word	0x40003800
 800419c:	40003400 	.word	0x40003400

080041a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e264      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d075      	beq.n	80042aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041be:	4ba3      	ldr	r3, [pc, #652]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d00c      	beq.n	80041e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ca:	4ba0      	ldr	r3, [pc, #640]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d112      	bne.n	80041fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041d6:	4b9d      	ldr	r3, [pc, #628]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e2:	d10b      	bne.n	80041fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e4:	4b99      	ldr	r3, [pc, #612]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d05b      	beq.n	80042a8 <HAL_RCC_OscConfig+0x108>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d157      	bne.n	80042a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e23f      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004204:	d106      	bne.n	8004214 <HAL_RCC_OscConfig+0x74>
 8004206:	4b91      	ldr	r3, [pc, #580]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a90      	ldr	r2, [pc, #576]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 800420c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	e01d      	b.n	8004250 <HAL_RCC_OscConfig+0xb0>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800421c:	d10c      	bne.n	8004238 <HAL_RCC_OscConfig+0x98>
 800421e:	4b8b      	ldr	r3, [pc, #556]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a8a      	ldr	r2, [pc, #552]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	4b88      	ldr	r3, [pc, #544]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a87      	ldr	r2, [pc, #540]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e00b      	b.n	8004250 <HAL_RCC_OscConfig+0xb0>
 8004238:	4b84      	ldr	r3, [pc, #528]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a83      	ldr	r2, [pc, #524]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 800423e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	4b81      	ldr	r3, [pc, #516]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a80      	ldr	r2, [pc, #512]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 800424a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800424e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d013      	beq.n	8004280 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004258:	f7fd f914 	bl	8001484 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004260:	f7fd f910 	bl	8001484 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b64      	cmp	r3, #100	; 0x64
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e204      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004272:	4b76      	ldr	r3, [pc, #472]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0xc0>
 800427e:	e014      	b.n	80042aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004280:	f7fd f900 	bl	8001484 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004288:	f7fd f8fc 	bl	8001484 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	; 0x64
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e1f0      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800429a:	4b6c      	ldr	r3, [pc, #432]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0xe8>
 80042a6:	e000      	b.n	80042aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d063      	beq.n	800437e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042b6:	4b65      	ldr	r3, [pc, #404]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00b      	beq.n	80042da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042c2:	4b62      	ldr	r3, [pc, #392]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d11c      	bne.n	8004308 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ce:	4b5f      	ldr	r3, [pc, #380]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d116      	bne.n	8004308 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042da:	4b5c      	ldr	r3, [pc, #368]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_RCC_OscConfig+0x152>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d001      	beq.n	80042f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e1c4      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f2:	4b56      	ldr	r3, [pc, #344]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4952      	ldr	r1, [pc, #328]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004302:	4313      	orrs	r3, r2
 8004304:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004306:	e03a      	b.n	800437e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d020      	beq.n	8004352 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004310:	4b4f      	ldr	r3, [pc, #316]	; (8004450 <HAL_RCC_OscConfig+0x2b0>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004316:	f7fd f8b5 	bl	8001484 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800431e:	f7fd f8b1 	bl	8001484 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e1a5      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004330:	4b46      	ldr	r3, [pc, #280]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433c:	4b43      	ldr	r3, [pc, #268]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	4940      	ldr	r1, [pc, #256]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 800434c:	4313      	orrs	r3, r2
 800434e:	600b      	str	r3, [r1, #0]
 8004350:	e015      	b.n	800437e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004352:	4b3f      	ldr	r3, [pc, #252]	; (8004450 <HAL_RCC_OscConfig+0x2b0>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fd f894 	bl	8001484 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004360:	f7fd f890 	bl	8001484 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e184      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004372:	4b36      	ldr	r3, [pc, #216]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d030      	beq.n	80043ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d016      	beq.n	80043c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004392:	4b30      	ldr	r3, [pc, #192]	; (8004454 <HAL_RCC_OscConfig+0x2b4>)
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004398:	f7fd f874 	bl	8001484 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a0:	f7fd f870 	bl	8001484 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e164      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b2:	4b26      	ldr	r3, [pc, #152]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80043b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x200>
 80043be:	e015      	b.n	80043ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c0:	4b24      	ldr	r3, [pc, #144]	; (8004454 <HAL_RCC_OscConfig+0x2b4>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c6:	f7fd f85d 	bl	8001484 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ce:	f7fd f859 	bl	8001484 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e14d      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e0:	4b1a      	ldr	r3, [pc, #104]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80043e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f0      	bne.n	80043ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80a0 	beq.w	800453a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043fa:	2300      	movs	r3, #0
 80043fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10f      	bne.n	800442a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800440a:	2300      	movs	r3, #0
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	4b0f      	ldr	r3, [pc, #60]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	4a0e      	ldr	r2, [pc, #56]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004418:	6413      	str	r3, [r2, #64]	; 0x40
 800441a:	4b0c      	ldr	r3, [pc, #48]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004426:	2301      	movs	r3, #1
 8004428:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_RCC_OscConfig+0x2b8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004432:	2b00      	cmp	r3, #0
 8004434:	d121      	bne.n	800447a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004436:	4b08      	ldr	r3, [pc, #32]	; (8004458 <HAL_RCC_OscConfig+0x2b8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a07      	ldr	r2, [pc, #28]	; (8004458 <HAL_RCC_OscConfig+0x2b8>)
 800443c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004442:	f7fd f81f 	bl	8001484 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004448:	e011      	b.n	800446e <HAL_RCC_OscConfig+0x2ce>
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800
 8004450:	42470000 	.word	0x42470000
 8004454:	42470e80 	.word	0x42470e80
 8004458:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800445c:	f7fd f812 	bl	8001484 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e106      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446e:	4b85      	ldr	r3, [pc, #532]	; (8004684 <HAL_RCC_OscConfig+0x4e4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d106      	bne.n	8004490 <HAL_RCC_OscConfig+0x2f0>
 8004482:	4b81      	ldr	r3, [pc, #516]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004486:	4a80      	ldr	r2, [pc, #512]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	6713      	str	r3, [r2, #112]	; 0x70
 800448e:	e01c      	b.n	80044ca <HAL_RCC_OscConfig+0x32a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b05      	cmp	r3, #5
 8004496:	d10c      	bne.n	80044b2 <HAL_RCC_OscConfig+0x312>
 8004498:	4b7b      	ldr	r3, [pc, #492]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 800449a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449c:	4a7a      	ldr	r2, [pc, #488]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 800449e:	f043 0304 	orr.w	r3, r3, #4
 80044a2:	6713      	str	r3, [r2, #112]	; 0x70
 80044a4:	4b78      	ldr	r3, [pc, #480]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a8:	4a77      	ldr	r2, [pc, #476]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	6713      	str	r3, [r2, #112]	; 0x70
 80044b0:	e00b      	b.n	80044ca <HAL_RCC_OscConfig+0x32a>
 80044b2:	4b75      	ldr	r3, [pc, #468]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	4a74      	ldr	r2, [pc, #464]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80044b8:	f023 0301 	bic.w	r3, r3, #1
 80044bc:	6713      	str	r3, [r2, #112]	; 0x70
 80044be:	4b72      	ldr	r3, [pc, #456]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	4a71      	ldr	r2, [pc, #452]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80044c4:	f023 0304 	bic.w	r3, r3, #4
 80044c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d015      	beq.n	80044fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d2:	f7fc ffd7 	bl	8001484 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d8:	e00a      	b.n	80044f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044da:	f7fc ffd3 	bl	8001484 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e0c5      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f0:	4b65      	ldr	r3, [pc, #404]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0ee      	beq.n	80044da <HAL_RCC_OscConfig+0x33a>
 80044fc:	e014      	b.n	8004528 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044fe:	f7fc ffc1 	bl	8001484 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004504:	e00a      	b.n	800451c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004506:	f7fc ffbd 	bl	8001484 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	f241 3288 	movw	r2, #5000	; 0x1388
 8004514:	4293      	cmp	r3, r2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e0af      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800451c:	4b5a      	ldr	r3, [pc, #360]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 800451e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1ee      	bne.n	8004506 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004528:	7dfb      	ldrb	r3, [r7, #23]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d105      	bne.n	800453a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800452e:	4b56      	ldr	r3, [pc, #344]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	4a55      	ldr	r2, [pc, #340]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 8004534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004538:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 809b 	beq.w	800467a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004544:	4b50      	ldr	r3, [pc, #320]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 030c 	and.w	r3, r3, #12
 800454c:	2b08      	cmp	r3, #8
 800454e:	d05c      	beq.n	800460a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d141      	bne.n	80045dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004558:	4b4c      	ldr	r3, [pc, #304]	; (800468c <HAL_RCC_OscConfig+0x4ec>)
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455e:	f7fc ff91 	bl	8001484 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004566:	f7fc ff8d 	bl	8001484 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e081      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004578:	4b43      	ldr	r3, [pc, #268]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f0      	bne.n	8004566 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	019b      	lsls	r3, r3, #6
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	3b01      	subs	r3, #1
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	061b      	lsls	r3, r3, #24
 80045a8:	4937      	ldr	r1, [pc, #220]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ae:	4b37      	ldr	r3, [pc, #220]	; (800468c <HAL_RCC_OscConfig+0x4ec>)
 80045b0:	2201      	movs	r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b4:	f7fc ff66 	bl	8001484 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045bc:	f7fc ff62 	bl	8001484 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e056      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ce:	4b2e      	ldr	r3, [pc, #184]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0f0      	beq.n	80045bc <HAL_RCC_OscConfig+0x41c>
 80045da:	e04e      	b.n	800467a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045dc:	4b2b      	ldr	r3, [pc, #172]	; (800468c <HAL_RCC_OscConfig+0x4ec>)
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e2:	f7fc ff4f 	bl	8001484 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ea:	f7fc ff4b 	bl	8001484 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e03f      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fc:	4b22      	ldr	r3, [pc, #136]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1f0      	bne.n	80045ea <HAL_RCC_OscConfig+0x44a>
 8004608:	e037      	b.n	800467a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e032      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004616:	4b1c      	ldr	r3, [pc, #112]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d028      	beq.n	8004676 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462e:	429a      	cmp	r2, r3
 8004630:	d121      	bne.n	8004676 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d11a      	bne.n	8004676 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004646:	4013      	ands	r3, r2
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800464c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800464e:	4293      	cmp	r3, r2
 8004650:	d111      	bne.n	8004676 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	3b01      	subs	r3, #1
 8004660:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004662:	429a      	cmp	r2, r3
 8004664:	d107      	bne.n	8004676 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004672:	429a      	cmp	r2, r3
 8004674:	d001      	beq.n	800467a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40007000 	.word	0x40007000
 8004688:	40023800 	.word	0x40023800
 800468c:	42470060 	.word	0x42470060

08004690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0cc      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046a4:	4b68      	ldr	r3, [pc, #416]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d90c      	bls.n	80046cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b2:	4b65      	ldr	r3, [pc, #404]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ba:	4b63      	ldr	r3, [pc, #396]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d001      	beq.n	80046cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0b8      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d020      	beq.n	800471a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046e4:	4b59      	ldr	r3, [pc, #356]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	4a58      	ldr	r2, [pc, #352]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046fc:	4b53      	ldr	r3, [pc, #332]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	4a52      	ldr	r2, [pc, #328]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004708:	4b50      	ldr	r3, [pc, #320]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	494d      	ldr	r1, [pc, #308]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d044      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d107      	bne.n	800473e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472e:	4b47      	ldr	r3, [pc, #284]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d119      	bne.n	800476e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e07f      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d003      	beq.n	800474e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800474a:	2b03      	cmp	r3, #3
 800474c:	d107      	bne.n	800475e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474e:	4b3f      	ldr	r3, [pc, #252]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d109      	bne.n	800476e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e06f      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475e:	4b3b      	ldr	r3, [pc, #236]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e067      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800476e:	4b37      	ldr	r3, [pc, #220]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f023 0203 	bic.w	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	4934      	ldr	r1, [pc, #208]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	4313      	orrs	r3, r2
 800477e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004780:	f7fc fe80 	bl	8001484 <HAL_GetTick>
 8004784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004786:	e00a      	b.n	800479e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004788:	f7fc fe7c 	bl	8001484 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	f241 3288 	movw	r2, #5000	; 0x1388
 8004796:	4293      	cmp	r3, r2
 8004798:	d901      	bls.n	800479e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e04f      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479e:	4b2b      	ldr	r3, [pc, #172]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 020c 	and.w	r2, r3, #12
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d1eb      	bne.n	8004788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047b0:	4b25      	ldr	r3, [pc, #148]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d20c      	bcs.n	80047d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047be:	4b22      	ldr	r3, [pc, #136]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c6:	4b20      	ldr	r3, [pc, #128]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d001      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e032      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047e4:	4b19      	ldr	r3, [pc, #100]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4916      	ldr	r1, [pc, #88]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004802:	4b12      	ldr	r3, [pc, #72]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	490e      	ldr	r1, [pc, #56]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	4313      	orrs	r3, r2
 8004814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004816:	f000 f821 	bl	800485c <HAL_RCC_GetSysClockFreq>
 800481a:	4602      	mov	r2, r0
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	091b      	lsrs	r3, r3, #4
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	490a      	ldr	r1, [pc, #40]	; (8004850 <HAL_RCC_ClockConfig+0x1c0>)
 8004828:	5ccb      	ldrb	r3, [r1, r3]
 800482a:	fa22 f303 	lsr.w	r3, r2, r3
 800482e:	4a09      	ldr	r2, [pc, #36]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 8004830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004832:	4b09      	ldr	r3, [pc, #36]	; (8004858 <HAL_RCC_ClockConfig+0x1c8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f7fc fde0 	bl	80013fc <HAL_InitTick>

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40023c00 	.word	0x40023c00
 800484c:	40023800 	.word	0x40023800
 8004850:	08008554 	.word	0x08008554
 8004854:	20000000 	.word	0x20000000
 8004858:	20000004 	.word	0x20000004

0800485c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800485c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	607b      	str	r3, [r7, #4]
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	2300      	movs	r3, #0
 800486e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004874:	4b67      	ldr	r3, [pc, #412]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 030c 	and.w	r3, r3, #12
 800487c:	2b08      	cmp	r3, #8
 800487e:	d00d      	beq.n	800489c <HAL_RCC_GetSysClockFreq+0x40>
 8004880:	2b08      	cmp	r3, #8
 8004882:	f200 80bd 	bhi.w	8004a00 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_RCC_GetSysClockFreq+0x34>
 800488a:	2b04      	cmp	r3, #4
 800488c:	d003      	beq.n	8004896 <HAL_RCC_GetSysClockFreq+0x3a>
 800488e:	e0b7      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004890:	4b61      	ldr	r3, [pc, #388]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004892:	60bb      	str	r3, [r7, #8]
       break;
 8004894:	e0b7      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004896:	4b61      	ldr	r3, [pc, #388]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004898:	60bb      	str	r3, [r7, #8]
      break;
 800489a:	e0b4      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800489c:	4b5d      	ldr	r3, [pc, #372]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048a6:	4b5b      	ldr	r3, [pc, #364]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d04d      	beq.n	800494e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048b2:	4b58      	ldr	r3, [pc, #352]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	099b      	lsrs	r3, r3, #6
 80048b8:	461a      	mov	r2, r3
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048c2:	f04f 0100 	mov.w	r1, #0
 80048c6:	ea02 0800 	and.w	r8, r2, r0
 80048ca:	ea03 0901 	and.w	r9, r3, r1
 80048ce:	4640      	mov	r0, r8
 80048d0:	4649      	mov	r1, r9
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	014b      	lsls	r3, r1, #5
 80048dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048e0:	0142      	lsls	r2, r0, #5
 80048e2:	4610      	mov	r0, r2
 80048e4:	4619      	mov	r1, r3
 80048e6:	ebb0 0008 	subs.w	r0, r0, r8
 80048ea:	eb61 0109 	sbc.w	r1, r1, r9
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	018b      	lsls	r3, r1, #6
 80048f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048fc:	0182      	lsls	r2, r0, #6
 80048fe:	1a12      	subs	r2, r2, r0
 8004900:	eb63 0301 	sbc.w	r3, r3, r1
 8004904:	f04f 0000 	mov.w	r0, #0
 8004908:	f04f 0100 	mov.w	r1, #0
 800490c:	00d9      	lsls	r1, r3, #3
 800490e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004912:	00d0      	lsls	r0, r2, #3
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	eb12 0208 	adds.w	r2, r2, r8
 800491c:	eb43 0309 	adc.w	r3, r3, r9
 8004920:	f04f 0000 	mov.w	r0, #0
 8004924:	f04f 0100 	mov.w	r1, #0
 8004928:	0259      	lsls	r1, r3, #9
 800492a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800492e:	0250      	lsls	r0, r2, #9
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4610      	mov	r0, r2
 8004936:	4619      	mov	r1, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	461a      	mov	r2, r3
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	f7fb fc9e 	bl	8000280 <__aeabi_uldivmod>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4613      	mov	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	e04a      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800494e:	4b31      	ldr	r3, [pc, #196]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	099b      	lsrs	r3, r3, #6
 8004954:	461a      	mov	r2, r3
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800495e:	f04f 0100 	mov.w	r1, #0
 8004962:	ea02 0400 	and.w	r4, r2, r0
 8004966:	ea03 0501 	and.w	r5, r3, r1
 800496a:	4620      	mov	r0, r4
 800496c:	4629      	mov	r1, r5
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	014b      	lsls	r3, r1, #5
 8004978:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800497c:	0142      	lsls	r2, r0, #5
 800497e:	4610      	mov	r0, r2
 8004980:	4619      	mov	r1, r3
 8004982:	1b00      	subs	r0, r0, r4
 8004984:	eb61 0105 	sbc.w	r1, r1, r5
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	018b      	lsls	r3, r1, #6
 8004992:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004996:	0182      	lsls	r2, r0, #6
 8004998:	1a12      	subs	r2, r2, r0
 800499a:	eb63 0301 	sbc.w	r3, r3, r1
 800499e:	f04f 0000 	mov.w	r0, #0
 80049a2:	f04f 0100 	mov.w	r1, #0
 80049a6:	00d9      	lsls	r1, r3, #3
 80049a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049ac:	00d0      	lsls	r0, r2, #3
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	1912      	adds	r2, r2, r4
 80049b4:	eb45 0303 	adc.w	r3, r5, r3
 80049b8:	f04f 0000 	mov.w	r0, #0
 80049bc:	f04f 0100 	mov.w	r1, #0
 80049c0:	0299      	lsls	r1, r3, #10
 80049c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80049c6:	0290      	lsls	r0, r2, #10
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	4610      	mov	r0, r2
 80049ce:	4619      	mov	r1, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	461a      	mov	r2, r3
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	f7fb fc52 	bl	8000280 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4613      	mov	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049e4:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	0c1b      	lsrs	r3, r3, #16
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	3301      	adds	r3, #1
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fc:	60bb      	str	r3, [r7, #8]
      break;
 80049fe:	e002      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a02:	60bb      	str	r3, [r7, #8]
      break;
 8004a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a06:	68bb      	ldr	r3, [r7, #8]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a12:	bf00      	nop
 8004a14:	40023800 	.word	0x40023800
 8004a18:	00f42400 	.word	0x00f42400
 8004a1c:	007a1200 	.word	0x007a1200

08004a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a24:	4b03      	ldr	r3, [pc, #12]	; (8004a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a26:	681b      	ldr	r3, [r3, #0]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	20000000 	.word	0x20000000

08004a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a3c:	f7ff fff0 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	0a9b      	lsrs	r3, r3, #10
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	4903      	ldr	r1, [pc, #12]	; (8004a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a4e:	5ccb      	ldrb	r3, [r1, r3]
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	08008564 	.word	0x08008564

08004a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a64:	f7ff ffdc 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	0b5b      	lsrs	r3, r3, #13
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	4903      	ldr	r1, [pc, #12]	; (8004a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a76:	5ccb      	ldrb	r3, [r1, r3]
 8004a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40023800 	.word	0x40023800
 8004a84:	08008564 	.word	0x08008564

08004a88 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d035      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ab0:	4b62      	ldr	r3, [pc, #392]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ab6:	f7fc fce5 	bl	8001484 <HAL_GetTick>
 8004aba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004abe:	f7fc fce1 	bl	8001484 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e0b0      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ad0:	4b5b      	ldr	r3, [pc, #364]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f0      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	019a      	lsls	r2, r3, #6
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	071b      	lsls	r3, r3, #28
 8004ae8:	4955      	ldr	r1, [pc, #340]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004af0:	4b52      	ldr	r3, [pc, #328]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004af6:	f7fc fcc5 	bl	8001484 <HAL_GetTick>
 8004afa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004afc:	e008      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004afe:	f7fc fcc1 	bl	8001484 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e090      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b10:	4b4b      	ldr	r3, [pc, #300]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 8083 	beq.w	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	4b44      	ldr	r3, [pc, #272]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	4a43      	ldr	r2, [pc, #268]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b38:	6413      	str	r3, [r2, #64]	; 0x40
 8004b3a:	4b41      	ldr	r3, [pc, #260]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b46:	4b3f      	ldr	r3, [pc, #252]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a3e      	ldr	r2, [pc, #248]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b52:	f7fc fc97 	bl	8001484 <HAL_GetTick>
 8004b56:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b58:	e008      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b5a:	f7fc fc93 	bl	8001484 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e062      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b6c:	4b35      	ldr	r3, [pc, #212]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f0      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b78:	4b31      	ldr	r3, [pc, #196]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b80:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d02f      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d028      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b96:	4b2a      	ldr	r3, [pc, #168]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ba0:	4b29      	ldr	r3, [pc, #164]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ba6:	4b28      	ldr	r3, [pc, #160]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004bac:	4a24      	ldr	r2, [pc, #144]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bb2:	4b23      	ldr	r3, [pc, #140]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d114      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004bbe:	f7fc fc61 	bl	8001484 <HAL_GetTick>
 8004bc2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc4:	e00a      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc6:	f7fc fc5d 	bl	8001484 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e02a      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bdc:	4b18      	ldr	r3, [pc, #96]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0ee      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bf4:	d10d      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004bf6:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c0a:	490d      	ldr	r1, [pc, #52]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	608b      	str	r3, [r1, #8]
 8004c10:	e005      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	4a0a      	ldr	r2, [pc, #40]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c18:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c1c:	6093      	str	r3, [r2, #8]
 8004c1e:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c2a:	4905      	ldr	r1, [pc, #20]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	42470068 	.word	0x42470068
 8004c40:	40023800 	.word	0x40023800
 8004c44:	40007000 	.word	0x40007000
 8004c48:	42470e40 	.word	0x42470e40

08004c4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d13e      	bne.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c6a:	4b23      	ldr	r3, [pc, #140]	; (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d12f      	bne.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c80:	4b1e      	ldr	r3, [pc, #120]	; (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c82:	617b      	str	r3, [r7, #20]
          break;
 8004c84:	e02f      	b.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c86:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c92:	d108      	bne.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c94:	4b18      	ldr	r3, [pc, #96]	; (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c9c:	4a18      	ldr	r2, [pc, #96]	; (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	e007      	b.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ca6:	4b14      	ldr	r3, [pc, #80]	; (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cae:	4a15      	ldr	r2, [pc, #84]	; (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004cb6:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cbc:	099b      	lsrs	r3, r3, #6
 8004cbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	fb02 f303 	mul.w	r3, r2, r3
 8004cc8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004cca:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd0:	0f1b      	lsrs	r3, r3, #28
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cdc:	617b      	str	r3, [r7, #20]
          break;
 8004cde:	e002      	b.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]
          break;
 8004ce4:	bf00      	nop
        }
      }
      break;
 8004ce6:	bf00      	nop
    }
  }
  return frequency;
 8004ce8:	697b      	ldr	r3, [r7, #20]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	371c      	adds	r7, #28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	00bb8000 	.word	0x00bb8000
 8004d00:	007a1200 	.word	0x007a1200
 8004d04:	00f42400 	.word	0x00f42400

08004d08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e07b      	b.n	8004e12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d108      	bne.n	8004d34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d2a:	d009      	beq.n	8004d40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	61da      	str	r2, [r3, #28]
 8004d32:	e005      	b.n	8004d40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fc f99e 	bl	800109c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc4:	ea42 0103 	orr.w	r1, r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	0c1b      	lsrs	r3, r3, #16
 8004dde:	f003 0104 	and.w	r1, r3, #4
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	f003 0210 	and.w	r2, r3, #16
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	69da      	ldr	r2, [r3, #28]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b082      	sub	sp, #8
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e03f      	b.n	8004eac <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7fc f973 	bl	800112c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2224      	movs	r2, #36	; 0x24
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68da      	ldr	r2, [r3, #12]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e5c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f9ca 	bl	80051f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695a      	ldr	r2, [r3, #20]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e82:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e92:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	; 0x28
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d17c      	bne.n	8004fce <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <HAL_UART_Transmit+0x2c>
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e075      	b.n	8004fd0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_UART_Transmit+0x3e>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e06e      	b.n	8004fd0 <HAL_UART_Transmit+0x11c>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2221      	movs	r2, #33	; 0x21
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f08:	f7fc fabc 	bl	8001484 <HAL_GetTick>
 8004f0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	88fa      	ldrh	r2, [r7, #6]
 8004f12:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	88fa      	ldrh	r2, [r7, #6]
 8004f18:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f22:	d108      	bne.n	8004f36 <HAL_UART_Transmit+0x82>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d104      	bne.n	8004f36 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	e003      	b.n	8004f3e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f46:	e02a      	b.n	8004f9e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2180      	movs	r1, #128	; 0x80
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 f8e2 	bl	800511c <UART_WaitOnFlagUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e036      	b.n	8004fd0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10b      	bne.n	8004f80 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f76:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	3302      	adds	r3, #2
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	e007      	b.n	8004f90 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	781a      	ldrb	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1cf      	bne.n	8004f48 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2140      	movs	r1, #64	; 0x40
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f8b2 	bl	800511c <UART_WaitOnFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e006      	b.n	8004fd0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e000      	b.n	8004fd0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004fce:	2302      	movs	r3, #2
  }
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3720      	adds	r7, #32
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08a      	sub	sp, #40	; 0x28
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	603b      	str	r3, [r7, #0]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	f040 808c 	bne.w	8005112 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <HAL_UART_Receive+0x2e>
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e084      	b.n	8005114 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_UART_Receive+0x40>
 8005014:	2302      	movs	r3, #2
 8005016:	e07d      	b.n	8005114 <HAL_UART_Receive+0x13c>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2222      	movs	r2, #34	; 0x22
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005034:	f7fc fa26 	bl	8001484 <HAL_GetTick>
 8005038:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	88fa      	ldrh	r2, [r7, #6]
 800503e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504e:	d108      	bne.n	8005062 <HAL_UART_Receive+0x8a>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d104      	bne.n	8005062 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005058:	2300      	movs	r3, #0
 800505a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	61bb      	str	r3, [r7, #24]
 8005060:	e003      	b.n	800506a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005066:	2300      	movs	r3, #0
 8005068:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005072:	e043      	b.n	80050fc <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2200      	movs	r2, #0
 800507c:	2120      	movs	r1, #32
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f84c 	bl	800511c <UART_WaitOnFlagUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e042      	b.n	8005114 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10c      	bne.n	80050ae <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	b29b      	uxth	r3, r3
 800509c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	3302      	adds	r3, #2
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	e01f      	b.n	80050ee <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b6:	d007      	beq.n	80050c8 <HAL_UART_Receive+0xf0>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10a      	bne.n	80050d6 <HAL_UART_Receive+0xfe>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d106      	bne.n	80050d6 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	e008      	b.n	80050e8 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	3301      	adds	r3, #1
 80050ec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005100:	b29b      	uxth	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1b6      	bne.n	8005074 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	e000      	b.n	8005114 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005112:	2302      	movs	r3, #2
  }
}
 8005114:	4618      	mov	r0, r3
 8005116:	3720      	adds	r7, #32
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b090      	sub	sp, #64	; 0x40
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	4613      	mov	r3, r2
 800512a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800512c:	e050      	b.n	80051d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d04c      	beq.n	80051d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005138:	2b00      	cmp	r3, #0
 800513a:	d007      	beq.n	800514c <UART_WaitOnFlagUntilTimeout+0x30>
 800513c:	f7fc f9a2 	bl	8001484 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005148:	429a      	cmp	r2, r3
 800514a:	d241      	bcs.n	80051d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	330c      	adds	r3, #12
 8005152:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005156:	e853 3f00 	ldrex	r3, [r3]
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	330c      	adds	r3, #12
 800516a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800516c:	637a      	str	r2, [r7, #52]	; 0x34
 800516e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005170:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005174:	e841 2300 	strex	r3, r2, [r1]
 8005178:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e5      	bne.n	800514c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3314      	adds	r3, #20
 8005186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	613b      	str	r3, [r7, #16]
   return(result);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f023 0301 	bic.w	r3, r3, #1
 8005196:	63bb      	str	r3, [r7, #56]	; 0x38
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3314      	adds	r3, #20
 800519e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051a0:	623a      	str	r2, [r7, #32]
 80051a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	69f9      	ldr	r1, [r7, #28]
 80051a6:	6a3a      	ldr	r2, [r7, #32]
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e5      	bne.n	8005180 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e00f      	b.n	80051f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4013      	ands	r3, r2
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	429a      	cmp	r2, r3
 80051de:	bf0c      	ite	eq
 80051e0:	2301      	moveq	r3, #1
 80051e2:	2300      	movne	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	79fb      	ldrb	r3, [r7, #7]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d09f      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3740      	adds	r7, #64	; 0x40
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fc:	b09f      	sub	sp, #124	; 0x7c
 80051fe:	af00      	add	r7, sp, #0
 8005200:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800520c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520e:	68d9      	ldr	r1, [r3, #12]
 8005210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	ea40 0301 	orr.w	r3, r0, r1
 8005218:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800521a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	431a      	orrs	r2, r3
 8005224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	431a      	orrs	r2, r3
 800522a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	4313      	orrs	r3, r2
 8005230:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800523c:	f021 010c 	bic.w	r1, r1, #12
 8005240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005246:	430b      	orrs	r3, r1
 8005248:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800524a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005256:	6999      	ldr	r1, [r3, #24]
 8005258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	ea40 0301 	orr.w	r3, r0, r1
 8005260:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	4bc5      	ldr	r3, [pc, #788]	; (800557c <UART_SetConfig+0x384>)
 8005268:	429a      	cmp	r2, r3
 800526a:	d004      	beq.n	8005276 <UART_SetConfig+0x7e>
 800526c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	4bc3      	ldr	r3, [pc, #780]	; (8005580 <UART_SetConfig+0x388>)
 8005272:	429a      	cmp	r2, r3
 8005274:	d103      	bne.n	800527e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005276:	f7ff fbf3 	bl	8004a60 <HAL_RCC_GetPCLK2Freq>
 800527a:	6778      	str	r0, [r7, #116]	; 0x74
 800527c:	e002      	b.n	8005284 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800527e:	f7ff fbdb 	bl	8004a38 <HAL_RCC_GetPCLK1Freq>
 8005282:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800528c:	f040 80b6 	bne.w	80053fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005292:	461c      	mov	r4, r3
 8005294:	f04f 0500 	mov.w	r5, #0
 8005298:	4622      	mov	r2, r4
 800529a:	462b      	mov	r3, r5
 800529c:	1891      	adds	r1, r2, r2
 800529e:	6439      	str	r1, [r7, #64]	; 0x40
 80052a0:	415b      	adcs	r3, r3
 80052a2:	647b      	str	r3, [r7, #68]	; 0x44
 80052a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052a8:	1912      	adds	r2, r2, r4
 80052aa:	eb45 0303 	adc.w	r3, r5, r3
 80052ae:	f04f 0000 	mov.w	r0, #0
 80052b2:	f04f 0100 	mov.w	r1, #0
 80052b6:	00d9      	lsls	r1, r3, #3
 80052b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052bc:	00d0      	lsls	r0, r2, #3
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	1911      	adds	r1, r2, r4
 80052c4:	6639      	str	r1, [r7, #96]	; 0x60
 80052c6:	416b      	adcs	r3, r5
 80052c8:	667b      	str	r3, [r7, #100]	; 0x64
 80052ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	461a      	mov	r2, r3
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	1891      	adds	r1, r2, r2
 80052d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80052d8:	415b      	adcs	r3, r3
 80052da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80052e4:	f7fa ffcc 	bl	8000280 <__aeabi_uldivmod>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4ba5      	ldr	r3, [pc, #660]	; (8005584 <UART_SetConfig+0x38c>)
 80052ee:	fba3 2302 	umull	r2, r3, r3, r2
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	011e      	lsls	r6, r3, #4
 80052f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052f8:	461c      	mov	r4, r3
 80052fa:	f04f 0500 	mov.w	r5, #0
 80052fe:	4622      	mov	r2, r4
 8005300:	462b      	mov	r3, r5
 8005302:	1891      	adds	r1, r2, r2
 8005304:	6339      	str	r1, [r7, #48]	; 0x30
 8005306:	415b      	adcs	r3, r3
 8005308:	637b      	str	r3, [r7, #52]	; 0x34
 800530a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800530e:	1912      	adds	r2, r2, r4
 8005310:	eb45 0303 	adc.w	r3, r5, r3
 8005314:	f04f 0000 	mov.w	r0, #0
 8005318:	f04f 0100 	mov.w	r1, #0
 800531c:	00d9      	lsls	r1, r3, #3
 800531e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005322:	00d0      	lsls	r0, r2, #3
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	1911      	adds	r1, r2, r4
 800532a:	65b9      	str	r1, [r7, #88]	; 0x58
 800532c:	416b      	adcs	r3, r5
 800532e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	461a      	mov	r2, r3
 8005336:	f04f 0300 	mov.w	r3, #0
 800533a:	1891      	adds	r1, r2, r2
 800533c:	62b9      	str	r1, [r7, #40]	; 0x28
 800533e:	415b      	adcs	r3, r3
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005342:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005346:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800534a:	f7fa ff99 	bl	8000280 <__aeabi_uldivmod>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	4b8c      	ldr	r3, [pc, #560]	; (8005584 <UART_SetConfig+0x38c>)
 8005354:	fba3 1302 	umull	r1, r3, r3, r2
 8005358:	095b      	lsrs	r3, r3, #5
 800535a:	2164      	movs	r1, #100	; 0x64
 800535c:	fb01 f303 	mul.w	r3, r1, r3
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	3332      	adds	r3, #50	; 0x32
 8005366:	4a87      	ldr	r2, [pc, #540]	; (8005584 <UART_SetConfig+0x38c>)
 8005368:	fba2 2303 	umull	r2, r3, r2, r3
 800536c:	095b      	lsrs	r3, r3, #5
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005374:	441e      	add	r6, r3
 8005376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005378:	4618      	mov	r0, r3
 800537a:	f04f 0100 	mov.w	r1, #0
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	1894      	adds	r4, r2, r2
 8005384:	623c      	str	r4, [r7, #32]
 8005386:	415b      	adcs	r3, r3
 8005388:	627b      	str	r3, [r7, #36]	; 0x24
 800538a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800538e:	1812      	adds	r2, r2, r0
 8005390:	eb41 0303 	adc.w	r3, r1, r3
 8005394:	f04f 0400 	mov.w	r4, #0
 8005398:	f04f 0500 	mov.w	r5, #0
 800539c:	00dd      	lsls	r5, r3, #3
 800539e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053a2:	00d4      	lsls	r4, r2, #3
 80053a4:	4622      	mov	r2, r4
 80053a6:	462b      	mov	r3, r5
 80053a8:	1814      	adds	r4, r2, r0
 80053aa:	653c      	str	r4, [r7, #80]	; 0x50
 80053ac:	414b      	adcs	r3, r1
 80053ae:	657b      	str	r3, [r7, #84]	; 0x54
 80053b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	461a      	mov	r2, r3
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	1891      	adds	r1, r2, r2
 80053bc:	61b9      	str	r1, [r7, #24]
 80053be:	415b      	adcs	r3, r3
 80053c0:	61fb      	str	r3, [r7, #28]
 80053c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80053ca:	f7fa ff59 	bl	8000280 <__aeabi_uldivmod>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4b6c      	ldr	r3, [pc, #432]	; (8005584 <UART_SetConfig+0x38c>)
 80053d4:	fba3 1302 	umull	r1, r3, r3, r2
 80053d8:	095b      	lsrs	r3, r3, #5
 80053da:	2164      	movs	r1, #100	; 0x64
 80053dc:	fb01 f303 	mul.w	r3, r1, r3
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	3332      	adds	r3, #50	; 0x32
 80053e6:	4a67      	ldr	r2, [pc, #412]	; (8005584 <UART_SetConfig+0x38c>)
 80053e8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ec:	095b      	lsrs	r3, r3, #5
 80053ee:	f003 0207 	and.w	r2, r3, #7
 80053f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4432      	add	r2, r6
 80053f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053fa:	e0b9      	b.n	8005570 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053fe:	461c      	mov	r4, r3
 8005400:	f04f 0500 	mov.w	r5, #0
 8005404:	4622      	mov	r2, r4
 8005406:	462b      	mov	r3, r5
 8005408:	1891      	adds	r1, r2, r2
 800540a:	6139      	str	r1, [r7, #16]
 800540c:	415b      	adcs	r3, r3
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005414:	1912      	adds	r2, r2, r4
 8005416:	eb45 0303 	adc.w	r3, r5, r3
 800541a:	f04f 0000 	mov.w	r0, #0
 800541e:	f04f 0100 	mov.w	r1, #0
 8005422:	00d9      	lsls	r1, r3, #3
 8005424:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005428:	00d0      	lsls	r0, r2, #3
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	eb12 0804 	adds.w	r8, r2, r4
 8005432:	eb43 0905 	adc.w	r9, r3, r5
 8005436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	4618      	mov	r0, r3
 800543c:	f04f 0100 	mov.w	r1, #0
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	008b      	lsls	r3, r1, #2
 800544a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800544e:	0082      	lsls	r2, r0, #2
 8005450:	4640      	mov	r0, r8
 8005452:	4649      	mov	r1, r9
 8005454:	f7fa ff14 	bl	8000280 <__aeabi_uldivmod>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4b49      	ldr	r3, [pc, #292]	; (8005584 <UART_SetConfig+0x38c>)
 800545e:	fba3 2302 	umull	r2, r3, r3, r2
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	011e      	lsls	r6, r3, #4
 8005466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005468:	4618      	mov	r0, r3
 800546a:	f04f 0100 	mov.w	r1, #0
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	1894      	adds	r4, r2, r2
 8005474:	60bc      	str	r4, [r7, #8]
 8005476:	415b      	adcs	r3, r3
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800547e:	1812      	adds	r2, r2, r0
 8005480:	eb41 0303 	adc.w	r3, r1, r3
 8005484:	f04f 0400 	mov.w	r4, #0
 8005488:	f04f 0500 	mov.w	r5, #0
 800548c:	00dd      	lsls	r5, r3, #3
 800548e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005492:	00d4      	lsls	r4, r2, #3
 8005494:	4622      	mov	r2, r4
 8005496:	462b      	mov	r3, r5
 8005498:	1814      	adds	r4, r2, r0
 800549a:	64bc      	str	r4, [r7, #72]	; 0x48
 800549c:	414b      	adcs	r3, r1
 800549e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f04f 0100 	mov.w	r1, #0
 80054aa:	f04f 0200 	mov.w	r2, #0
 80054ae:	f04f 0300 	mov.w	r3, #0
 80054b2:	008b      	lsls	r3, r1, #2
 80054b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054b8:	0082      	lsls	r2, r0, #2
 80054ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80054be:	f7fa fedf 	bl	8000280 <__aeabi_uldivmod>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4b2f      	ldr	r3, [pc, #188]	; (8005584 <UART_SetConfig+0x38c>)
 80054c8:	fba3 1302 	umull	r1, r3, r3, r2
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	2164      	movs	r1, #100	; 0x64
 80054d0:	fb01 f303 	mul.w	r3, r1, r3
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	3332      	adds	r3, #50	; 0x32
 80054da:	4a2a      	ldr	r2, [pc, #168]	; (8005584 <UART_SetConfig+0x38c>)
 80054dc:	fba2 2303 	umull	r2, r3, r2, r3
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054e6:	441e      	add	r6, r3
 80054e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054ea:	4618      	mov	r0, r3
 80054ec:	f04f 0100 	mov.w	r1, #0
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	1894      	adds	r4, r2, r2
 80054f6:	603c      	str	r4, [r7, #0]
 80054f8:	415b      	adcs	r3, r3
 80054fa:	607b      	str	r3, [r7, #4]
 80054fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005500:	1812      	adds	r2, r2, r0
 8005502:	eb41 0303 	adc.w	r3, r1, r3
 8005506:	f04f 0400 	mov.w	r4, #0
 800550a:	f04f 0500 	mov.w	r5, #0
 800550e:	00dd      	lsls	r5, r3, #3
 8005510:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005514:	00d4      	lsls	r4, r2, #3
 8005516:	4622      	mov	r2, r4
 8005518:	462b      	mov	r3, r5
 800551a:	eb12 0a00 	adds.w	sl, r2, r0
 800551e:	eb43 0b01 	adc.w	fp, r3, r1
 8005522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	4618      	mov	r0, r3
 8005528:	f04f 0100 	mov.w	r1, #0
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	008b      	lsls	r3, r1, #2
 8005536:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800553a:	0082      	lsls	r2, r0, #2
 800553c:	4650      	mov	r0, sl
 800553e:	4659      	mov	r1, fp
 8005540:	f7fa fe9e 	bl	8000280 <__aeabi_uldivmod>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4b0e      	ldr	r3, [pc, #56]	; (8005584 <UART_SetConfig+0x38c>)
 800554a:	fba3 1302 	umull	r1, r3, r3, r2
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	2164      	movs	r1, #100	; 0x64
 8005552:	fb01 f303 	mul.w	r3, r1, r3
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	3332      	adds	r3, #50	; 0x32
 800555c:	4a09      	ldr	r2, [pc, #36]	; (8005584 <UART_SetConfig+0x38c>)
 800555e:	fba2 2303 	umull	r2, r3, r2, r3
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	f003 020f 	and.w	r2, r3, #15
 8005568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4432      	add	r2, r6
 800556e:	609a      	str	r2, [r3, #8]
}
 8005570:	bf00      	nop
 8005572:	377c      	adds	r7, #124	; 0x7c
 8005574:	46bd      	mov	sp, r7
 8005576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557a:	bf00      	nop
 800557c:	40011000 	.word	0x40011000
 8005580:	40011400 	.word	0x40011400
 8005584:	51eb851f 	.word	0x51eb851f

08005588 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005588:	b084      	sub	sp, #16
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	f107 001c 	add.w	r0, r7, #28
 8005596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	2b01      	cmp	r3, #1
 800559e:	d122      	bne.n	80055e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d105      	bne.n	80055da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f9a0 	bl	8005920 <USB_CoreReset>
 80055e0:	4603      	mov	r3, r0
 80055e2:	73fb      	strb	r3, [r7, #15]
 80055e4:	e01a      	b.n	800561c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f994 	bl	8005920 <USB_CoreReset>
 80055f8:	4603      	mov	r3, r0
 80055fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005606:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	639a      	str	r2, [r3, #56]	; 0x38
 800560e:	e005      	b.n	800561c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005614:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	2b01      	cmp	r3, #1
 8005620:	d10b      	bne.n	800563a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f043 0206 	orr.w	r2, r3, #6
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f043 0220 	orr.w	r2, r3, #32
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800563a:	7bfb      	ldrb	r3, [r7, #15]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005646:	b004      	add	sp, #16
 8005648:	4770      	bx	lr

0800564a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f043 0201 	orr.w	r2, r3, #1
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f023 0201 	bic.w	r2, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	460b      	mov	r3, r1
 8005698:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056aa:	78fb      	ldrb	r3, [r7, #3]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d115      	bne.n	80056dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056bc:	2001      	movs	r0, #1
 80056be:	f7fb feed 	bl	800149c <HAL_Delay>
      ms++;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3301      	adds	r3, #1
 80056c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f91a 	bl	8005902 <USB_GetMode>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d01e      	beq.n	8005712 <USB_SetCurrentMode+0x84>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b31      	cmp	r3, #49	; 0x31
 80056d8:	d9f0      	bls.n	80056bc <USB_SetCurrentMode+0x2e>
 80056da:	e01a      	b.n	8005712 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d115      	bne.n	800570e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056ee:	2001      	movs	r0, #1
 80056f0:	f7fb fed4 	bl	800149c <HAL_Delay>
      ms++;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3301      	adds	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f901 	bl	8005902 <USB_GetMode>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <USB_SetCurrentMode+0x84>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b31      	cmp	r3, #49	; 0x31
 800570a:	d9f0      	bls.n	80056ee <USB_SetCurrentMode+0x60>
 800570c:	e001      	b.n	8005712 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e005      	b.n	800571e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b32      	cmp	r3, #50	; 0x32
 8005716:	d101      	bne.n	800571c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e000      	b.n	800571e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	019b      	lsls	r3, r3, #6
 800573a:	f043 0220 	orr.w	r2, r3, #32
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3301      	adds	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	4a08      	ldr	r2, [pc, #32]	; (800576c <USB_FlushTxFifo+0x44>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d901      	bls.n	8005752 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e006      	b.n	8005760 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b20      	cmp	r3, #32
 800575c:	d0f1      	beq.n	8005742 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	00030d40 	.word	0x00030d40

08005770 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2210      	movs	r2, #16
 8005780:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3301      	adds	r3, #1
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	4a08      	ldr	r2, [pc, #32]	; (80057ac <USB_FlushRxFifo+0x3c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d901      	bls.n	8005792 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e006      	b.n	80057a0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0310 	and.w	r3, r3, #16
 800579a:	2b10      	cmp	r3, #16
 800579c:	d0f1      	beq.n	8005782 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	00030d40 	.word	0x00030d40

080057b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b089      	sub	sp, #36	; 0x24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	4611      	mov	r1, r2
 80057bc:	461a      	mov	r2, r3
 80057be:	460b      	mov	r3, r1
 80057c0:	71fb      	strb	r3, [r7, #7]
 80057c2:	4613      	mov	r3, r2
 80057c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80057ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d123      	bne.n	800581e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057d6:	88bb      	ldrh	r3, [r7, #4]
 80057d8:	3303      	adds	r3, #3
 80057da:	089b      	lsrs	r3, r3, #2
 80057dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057de:	2300      	movs	r3, #0
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	e018      	b.n	8005816 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057e4:	79fb      	ldrb	r3, [r7, #7]
 80057e6:	031a      	lsls	r2, r3, #12
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057f0:	461a      	mov	r2, r3
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	3301      	adds	r3, #1
 80057fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	3301      	adds	r3, #1
 8005802:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	3301      	adds	r3, #1
 8005808:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	3301      	adds	r3, #1
 800580e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	3301      	adds	r3, #1
 8005814:	61bb      	str	r3, [r7, #24]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	429a      	cmp	r2, r3
 800581c:	d3e2      	bcc.n	80057e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3724      	adds	r7, #36	; 0x24
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800582c:	b480      	push	{r7}
 800582e:	b08b      	sub	sp, #44	; 0x2c
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	4613      	mov	r3, r2
 8005838:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005842:	88fb      	ldrh	r3, [r7, #6]
 8005844:	089b      	lsrs	r3, r3, #2
 8005846:	b29b      	uxth	r3, r3
 8005848:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	f003 0303 	and.w	r3, r3, #3
 8005850:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005852:	2300      	movs	r3, #0
 8005854:	623b      	str	r3, [r7, #32]
 8005856:	e014      	b.n	8005882 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	601a      	str	r2, [r3, #0]
    pDest++;
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	3301      	adds	r3, #1
 8005868:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	3301      	adds	r3, #1
 800586e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	3301      	adds	r3, #1
 8005874:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	3301      	adds	r3, #1
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	3301      	adds	r3, #1
 8005880:	623b      	str	r3, [r7, #32]
 8005882:	6a3a      	ldr	r2, [r7, #32]
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	429a      	cmp	r2, r3
 8005888:	d3e6      	bcc.n	8005858 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800588a:	8bfb      	ldrh	r3, [r7, #30]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01e      	beq.n	80058ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800589a:	461a      	mov	r2, r3
 800589c:	f107 0310 	add.w	r3, r7, #16
 80058a0:	6812      	ldr	r2, [r2, #0]
 80058a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	fa22 f303 	lsr.w	r3, r2, r3
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	701a      	strb	r2, [r3, #0]
      i++;
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	3301      	adds	r3, #1
 80058ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	3301      	adds	r3, #1
 80058c0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80058c2:	8bfb      	ldrh	r3, [r7, #30]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80058c8:	8bfb      	ldrh	r3, [r7, #30]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1ea      	bne.n	80058a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	372c      	adds	r7, #44	; 0x2c
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4013      	ands	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058f4:	68fb      	ldr	r3, [r7, #12]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	f003 0301 	and.w	r3, r3, #1
}
 8005912:	4618      	mov	r0, r3
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
	...

08005920 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3301      	adds	r3, #1
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	4a13      	ldr	r2, [pc, #76]	; (8005980 <USB_CoreReset+0x60>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d901      	bls.n	800593c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e01a      	b.n	8005972 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	daf3      	bge.n	800592c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f043 0201 	orr.w	r2, r3, #1
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3301      	adds	r3, #1
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	4a09      	ldr	r2, [pc, #36]	; (8005980 <USB_CoreReset+0x60>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d901      	bls.n	8005964 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e006      	b.n	8005972 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b01      	cmp	r3, #1
 800596e:	d0f1      	beq.n	8005954 <USB_CoreReset+0x34>

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	00030d40 	.word	0x00030d40

08005984 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005984:	b084      	sub	sp, #16
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	f107 001c 	add.w	r0, r7, #28
 8005992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059a0:	461a      	mov	r2, r3
 80059a2:	2300      	movs	r3, #0
 80059a4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d018      	beq.n	8005a08 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d10a      	bne.n	80059f2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059ea:	f043 0304 	orr.w	r3, r3, #4
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	e014      	b.n	8005a1c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a00:	f023 0304 	bic.w	r3, r3, #4
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	e009      	b.n	8005a1c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a16:	f023 0304 	bic.w	r3, r3, #4
 8005a1a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005a1c:	2110      	movs	r1, #16
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff fe82 	bl	8005728 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7ff fea3 	bl	8005770 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	e015      	b.n	8005a5c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a42:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a50:	461a      	mov	r2, r3
 8005a52:	2300      	movs	r3, #0
 8005a54:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d3e5      	bcc.n	8005a30 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a70:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00b      	beq.n	8005a96 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a84:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a13      	ldr	r2, [pc, #76]	; (8005ad8 <USB_HostInit+0x154>)
 8005a8a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a13      	ldr	r2, [pc, #76]	; (8005adc <USB_HostInit+0x158>)
 8005a90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005a94:	e009      	b.n	8005aaa <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2280      	movs	r2, #128	; 0x80
 8005a9a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a10      	ldr	r2, [pc, #64]	; (8005ae0 <USB_HostInit+0x15c>)
 8005aa0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a0f      	ldr	r2, [pc, #60]	; (8005ae4 <USB_HostInit+0x160>)
 8005aa6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d105      	bne.n	8005abc <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f043 0210 	orr.w	r2, r3, #16
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699a      	ldr	r2, [r3, #24]
 8005ac0:	4b09      	ldr	r3, [pc, #36]	; (8005ae8 <USB_HostInit+0x164>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ad4:	b004      	add	sp, #16
 8005ad6:	4770      	bx	lr
 8005ad8:	01000200 	.word	0x01000200
 8005adc:	00e00300 	.word	0x00e00300
 8005ae0:	00600080 	.word	0x00600080
 8005ae4:	004000e0 	.word	0x004000e0
 8005ae8:	a3200008 	.word	0xa3200008

08005aec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b0a:	f023 0303 	bic.w	r3, r3, #3
 8005b0e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	68f9      	ldr	r1, [r7, #12]
 8005b20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b24:	4313      	orrs	r3, r2
 8005b26:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005b28:	78fb      	ldrb	r3, [r7, #3]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d107      	bne.n	8005b3e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b34:	461a      	mov	r2, r3
 8005b36:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005b3a:	6053      	str	r3, [r2, #4]
 8005b3c:	e009      	b.n	8005b52 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005b3e:	78fb      	ldrb	r3, [r7, #3]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d106      	bne.n	8005b52 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005b50:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b84:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d109      	bne.n	8005ba4 <USB_DriveVbus+0x44>
 8005b90:	78fb      	ldrb	r3, [r7, #3]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d106      	bne.n	8005ba4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ba2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bae:	d109      	bne.n	8005bc4 <USB_DriveVbus+0x64>
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bc2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	0c5b      	lsrs	r3, r3, #17
 8005bf0:	f003 0303 	and.w	r3, r3, #3
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	b29b      	uxth	r3, r3
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
	...

08005c24 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	4608      	mov	r0, r1
 8005c2e:	4611      	mov	r1, r2
 8005c30:	461a      	mov	r2, r3
 8005c32:	4603      	mov	r3, r0
 8005c34:	70fb      	strb	r3, [r7, #3]
 8005c36:	460b      	mov	r3, r1
 8005c38:	70bb      	strb	r3, [r7, #2]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005c46:	78fb      	ldrb	r3, [r7, #3]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c52:	461a      	mov	r2, r3
 8005c54:	f04f 33ff 	mov.w	r3, #4294967295
 8005c58:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005c5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d87e      	bhi.n	8005d60 <USB_HC_Init+0x13c>
 8005c62:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <USB_HC_Init+0x44>)
 8005c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c68:	08005c79 	.word	0x08005c79
 8005c6c:	08005d23 	.word	0x08005d23
 8005c70:	08005c79 	.word	0x08005c79
 8005c74:	08005ce5 	.word	0x08005ce5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c78:	78fb      	ldrb	r3, [r7, #3]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c84:	461a      	mov	r2, r3
 8005c86:	f240 439d 	movw	r3, #1181	; 0x49d
 8005c8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005c8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	da10      	bge.n	8005cb6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	78fa      	ldrb	r2, [r7, #3]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cb2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005cb4:	e057      	b.n	8005d66 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d051      	beq.n	8005d66 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	78fa      	ldrb	r2, [r7, #3]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cdc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ce0:	60d3      	str	r3, [r2, #12]
      break;
 8005ce2:	e040      	b.n	8005d66 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	f240 639d 	movw	r3, #1693	; 0x69d
 8005cf6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005cf8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	da34      	bge.n	8005d6a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d00:	78fb      	ldrb	r3, [r7, #3]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	78fa      	ldrb	r2, [r7, #3]
 8005d10:	0151      	lsls	r1, r2, #5
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	440a      	add	r2, r1
 8005d16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d1e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005d20:	e023      	b.n	8005d6a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f240 2325 	movw	r3, #549	; 0x225
 8005d34:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	da17      	bge.n	8005d6e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	78fa      	ldrb	r2, [r7, #3]
 8005d4e:	0151      	lsls	r1, r2, #5
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	440a      	add	r2, r1
 8005d54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d58:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005d5c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005d5e:	e006      	b.n	8005d6e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	77fb      	strb	r3, [r7, #31]
      break;
 8005d64:	e004      	b.n	8005d70 <USB_HC_Init+0x14c>
      break;
 8005d66:	bf00      	nop
 8005d68:	e002      	b.n	8005d70 <USB_HC_Init+0x14c>
      break;
 8005d6a:	bf00      	nop
 8005d6c:	e000      	b.n	8005d70 <USB_HC_Init+0x14c>
      break;
 8005d6e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d76:	699a      	ldr	r2, [r3, #24]
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	2101      	movs	r1, #1
 8005d80:	fa01 f303 	lsl.w	r3, r1, r3
 8005d84:	6939      	ldr	r1, [r7, #16]
 8005d86:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005d9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	da03      	bge.n	8005daa <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005da6:	61bb      	str	r3, [r7, #24]
 8005da8:	e001      	b.n	8005dae <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff ff0f 	bl	8005bd2 <USB_GetHostSpeed>
 8005db4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005db6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d106      	bne.n	8005dcc <USB_HC_Init+0x1a8>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d003      	beq.n	8005dcc <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005dc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dc8:	617b      	str	r3, [r7, #20]
 8005dca:	e001      	b.n	8005dd0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dd0:	787b      	ldrb	r3, [r7, #1]
 8005dd2:	059b      	lsls	r3, r3, #22
 8005dd4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005dd8:	78bb      	ldrb	r3, [r7, #2]
 8005dda:	02db      	lsls	r3, r3, #11
 8005ddc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005de0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005de2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005de6:	049b      	lsls	r3, r3, #18
 8005de8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005dec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005dee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005df0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005df4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dfa:	78fb      	ldrb	r3, [r7, #3]
 8005dfc:	0159      	lsls	r1, r3, #5
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	440b      	add	r3, r1
 8005e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e06:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e0c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005e0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d10f      	bne.n	8005e36 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	78fa      	ldrb	r2, [r7, #3]
 8005e26:	0151      	lsls	r1, r2, #5
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	440a      	add	r2, r1
 8005e2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e34:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005e36:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3720      	adds	r7, #32
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08c      	sub	sp, #48	; 0x30
 8005e44:	af02      	add	r7, sp, #8
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	785b      	ldrb	r3, [r3, #1]
 8005e56:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005e58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e5c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d02d      	beq.n	8005ec6 <USB_HC_StartXfer+0x86>
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	791b      	ldrb	r3, [r3, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d129      	bne.n	8005ec6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005e72:	79fb      	ldrb	r3, [r7, #7]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d117      	bne.n	8005ea8 <USB_HC_StartXfer+0x68>
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	79db      	ldrb	r3, [r3, #7]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <USB_HC_StartXfer+0x48>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	79db      	ldrb	r3, [r3, #7]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d10f      	bne.n	8005ea8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	0151      	lsls	r1, r2, #5
 8005e9a:	6a3a      	ldr	r2, [r7, #32]
 8005e9c:	440a      	add	r2, r1
 8005e9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005ea8:	79fb      	ldrb	r3, [r7, #7]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10b      	bne.n	8005ec6 <USB_HC_StartXfer+0x86>
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	795b      	ldrb	r3, [r3, #5]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d107      	bne.n	8005ec6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	785b      	ldrb	r3, [r3, #1]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 fa2f 	bl	8006320 <USB_DoPing>
      return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	e0f8      	b.n	80060b8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d018      	beq.n	8005f00 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	8912      	ldrh	r2, [r2, #8]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	8912      	ldrh	r2, [r2, #8]
 8005ede:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ee2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005ee4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005ee6:	8b7b      	ldrh	r3, [r7, #26]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d90b      	bls.n	8005f04 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005eec:	8b7b      	ldrh	r3, [r7, #26]
 8005eee:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ef0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	8912      	ldrh	r2, [r2, #8]
 8005ef6:	fb02 f203 	mul.w	r2, r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	611a      	str	r2, [r3, #16]
 8005efe:	e001      	b.n	8005f04 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005f00:	2301      	movs	r3, #1
 8005f02:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	78db      	ldrb	r3, [r3, #3]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d007      	beq.n	8005f1c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	8912      	ldrh	r2, [r2, #8]
 8005f12:	fb02 f203 	mul.w	r2, r2, r3
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	611a      	str	r2, [r3, #16]
 8005f1a:	e003      	b.n	8005f24 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	695a      	ldr	r2, [r3, #20]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f2e:	04d9      	lsls	r1, r3, #19
 8005f30:	4b63      	ldr	r3, [pc, #396]	; (80060c0 <USB_HC_StartXfer+0x280>)
 8005f32:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f34:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	7a9b      	ldrb	r3, [r3, #10]
 8005f3a:	075b      	lsls	r3, r3, #29
 8005f3c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f40:	69f9      	ldr	r1, [r7, #28]
 8005f42:	0148      	lsls	r0, r1, #5
 8005f44:	6a39      	ldr	r1, [r7, #32]
 8005f46:	4401      	add	r1, r0
 8005f48:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f4c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f4e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d009      	beq.n	8005f6a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	68d9      	ldr	r1, [r3, #12]
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f66:	460a      	mov	r2, r1
 8005f68:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bf0c      	ite	eq
 8005f7a:	2301      	moveq	r3, #1
 8005f7c:	2300      	movne	r3, #0
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69fa      	ldr	r2, [r7, #28]
 8005f92:	0151      	lsls	r1, r2, #5
 8005f94:	6a3a      	ldr	r2, [r7, #32]
 8005f96:	440a      	add	r2, r1
 8005f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f9c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005fa0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	7e7b      	ldrb	r3, [r7, #25]
 8005fb2:	075b      	lsls	r3, r3, #29
 8005fb4:	69f9      	ldr	r1, [r7, #28]
 8005fb6:	0148      	lsls	r0, r1, #5
 8005fb8:	6a39      	ldr	r1, [r7, #32]
 8005fba:	4401      	add	r1, r0
 8005fbc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fda:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	78db      	ldrb	r3, [r3, #3]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d004      	beq.n	8005fee <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fea:	613b      	str	r3, [r7, #16]
 8005fec:	e003      	b.n	8005ff6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ff4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ffc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	4413      	add	r3, r2
 8006006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600a:	461a      	mov	r2, r3
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006010:	79fb      	ldrb	r3, [r7, #7]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	e04e      	b.n	80060b8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	78db      	ldrb	r3, [r3, #3]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d149      	bne.n	80060b6 <USB_HC_StartXfer+0x276>
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d045      	beq.n	80060b6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	79db      	ldrb	r3, [r3, #7]
 800602e:	2b03      	cmp	r3, #3
 8006030:	d830      	bhi.n	8006094 <USB_HC_StartXfer+0x254>
 8006032:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <USB_HC_StartXfer+0x1f8>)
 8006034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006038:	08006049 	.word	0x08006049
 800603c:	0800606d 	.word	0x0800606d
 8006040:	08006049 	.word	0x08006049
 8006044:	0800606d 	.word	0x0800606d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	3303      	adds	r3, #3
 800604e:	089b      	lsrs	r3, r3, #2
 8006050:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006052:	8afa      	ldrh	r2, [r7, #22]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006058:	b29b      	uxth	r3, r3
 800605a:	429a      	cmp	r2, r3
 800605c:	d91c      	bls.n	8006098 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	f043 0220 	orr.w	r2, r3, #32
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	619a      	str	r2, [r3, #24]
        }
        break;
 800606a:	e015      	b.n	8006098 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	3303      	adds	r3, #3
 8006072:	089b      	lsrs	r3, r3, #2
 8006074:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006076:	8afa      	ldrh	r2, [r7, #22]
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	b29b      	uxth	r3, r3
 8006082:	429a      	cmp	r2, r3
 8006084:	d90a      	bls.n	800609c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	619a      	str	r2, [r3, #24]
        }
        break;
 8006092:	e003      	b.n	800609c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006094:	bf00      	nop
 8006096:	e002      	b.n	800609e <USB_HC_StartXfer+0x25e>
        break;
 8006098:	bf00      	nop
 800609a:	e000      	b.n	800609e <USB_HC_StartXfer+0x25e>
        break;
 800609c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	68d9      	ldr	r1, [r3, #12]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	785a      	ldrb	r2, [r3, #1]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2000      	movs	r0, #0
 80060ae:	9000      	str	r0, [sp, #0]
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f7ff fb7d 	bl	80057b0 <USB_WritePacket>
  }

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3728      	adds	r7, #40	; 0x28
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	1ff80000 	.word	0x1ff80000

080060c4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	b29b      	uxth	r3, r3
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b089      	sub	sp, #36	; 0x24
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	460b      	mov	r3, r1
 80060f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	4413      	add	r3, r2
 8006106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	0c9b      	lsrs	r3, r3, #18
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	4413      	add	r3, r2
 800611c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	0fdb      	lsrs	r3, r3, #31
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b20      	cmp	r3, #32
 8006134:	d104      	bne.n	8006140 <USB_HC_Halt+0x5a>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	e0e8      	b.n	8006312 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <USB_HC_Halt+0x66>
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	2b02      	cmp	r3, #2
 800614a:	d173      	bne.n	8006234 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	4413      	add	r3, r2
 8006154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	440a      	add	r2, r1
 8006162:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006166:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800616a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f003 0320 	and.w	r3, r3, #32
 8006174:	2b00      	cmp	r3, #0
 8006176:	f040 80cb 	bne.w	8006310 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d143      	bne.n	800620e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	4413      	add	r3, r2
 800618e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	0151      	lsls	r1, r2, #5
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	440a      	add	r2, r1
 800619c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061a4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	0151      	lsls	r1, r2, #5
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	440a      	add	r2, r1
 80061bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061c4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	0151      	lsls	r1, r2, #5
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	440a      	add	r2, r1
 80061dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061e4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	3301      	adds	r3, #1
 80061ea:	61fb      	str	r3, [r7, #28]
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061f2:	d81d      	bhi.n	8006230 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800620a:	d0ec      	beq.n	80061e6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800620c:	e080      	b.n	8006310 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	4413      	add	r3, r2
 8006216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	0151      	lsls	r1, r2, #5
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	440a      	add	r2, r1
 8006224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006228:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800622c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800622e:	e06f      	b.n	8006310 <USB_HC_Halt+0x22a>
            break;
 8006230:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006232:	e06d      	b.n	8006310 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	4413      	add	r3, r2
 800623c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	0151      	lsls	r1, r2, #5
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	440a      	add	r2, r1
 800624a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800624e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006252:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d143      	bne.n	80062ec <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	4413      	add	r3, r2
 800626c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	0151      	lsls	r1, r2, #5
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	440a      	add	r2, r1
 800627a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800627e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006282:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	4413      	add	r3, r2
 800628c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	0151      	lsls	r1, r2, #5
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	440a      	add	r2, r1
 800629a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800629e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062a2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	0151      	lsls	r1, r2, #5
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	440a      	add	r2, r1
 80062ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062c2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	3301      	adds	r3, #1
 80062c8:	61fb      	str	r3, [r7, #28]
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062d0:	d81d      	bhi.n	800630e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062e8:	d0ec      	beq.n	80062c4 <USB_HC_Halt+0x1de>
 80062ea:	e011      	b.n	8006310 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	0151      	lsls	r1, r2, #5
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	440a      	add	r2, r1
 8006302:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	e000      	b.n	8006310 <USB_HC_Halt+0x22a>
          break;
 800630e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3724      	adds	r7, #36	; 0x24
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
	...

08006320 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006334:	2301      	movs	r3, #1
 8006336:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	04da      	lsls	r2, r3, #19
 800633c:	4b15      	ldr	r3, [pc, #84]	; (8006394 <USB_DoPing+0x74>)
 800633e:	4013      	ands	r3, r2
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	0151      	lsls	r1, r2, #5
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	440a      	add	r2, r1
 8006348:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800634c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006350:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	4413      	add	r3, r2
 800635a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006368:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006370:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	4413      	add	r3, r2
 800637a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637e:	461a      	mov	r2, r3
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	1ff80000 	.word	0x1ff80000

08006398 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7ff f95f 	bl	800566c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80063ae:	2110      	movs	r1, #16
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7ff f9b9 	bl	8005728 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7ff f9da 	bl	8005770 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80063bc:	2300      	movs	r3, #0
 80063be:	613b      	str	r3, [r7, #16]
 80063c0:	e01f      	b.n	8006402 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063e8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f6:	461a      	mov	r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	3301      	adds	r3, #1
 8006400:	613b      	str	r3, [r7, #16]
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2b0f      	cmp	r3, #15
 8006406:	d9dc      	bls.n	80063c2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006408:	2300      	movs	r3, #0
 800640a:	613b      	str	r3, [r7, #16]
 800640c:	e034      	b.n	8006478 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4413      	add	r3, r2
 8006416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006424:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800642c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006434:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4413      	add	r3, r2
 800643e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006442:	461a      	mov	r2, r3
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	3301      	adds	r3, #1
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006454:	d80c      	bhi.n	8006470 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4413      	add	r3, r2
 800645e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800646c:	d0ec      	beq.n	8006448 <USB_StopHost+0xb0>
 800646e:	e000      	b.n	8006472 <USB_StopHost+0xda>
        break;
 8006470:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	3301      	adds	r3, #1
 8006476:	613b      	str	r3, [r7, #16]
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	2b0f      	cmp	r3, #15
 800647c:	d9c7      	bls.n	800640e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006484:	461a      	mov	r2, r3
 8006486:	f04f 33ff 	mov.w	r3, #4294967295
 800648a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f04f 32ff 	mov.w	r2, #4294967295
 8006492:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff f8d8 	bl	800564a <USB_EnableGlobalInt>

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80064a4:	b590      	push	{r4, r7, lr}
 80064a6:	b089      	sub	sp, #36	; 0x24
 80064a8:	af04      	add	r7, sp, #16
 80064aa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80064ac:	2301      	movs	r3, #1
 80064ae:	2202      	movs	r2, #2
 80064b0:	2102      	movs	r1, #2
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fc66 	bl	8006d84 <USBH_FindInterface>
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	2bff      	cmp	r3, #255	; 0xff
 80064c0:	d002      	beq.n	80064c8 <USBH_CDC_InterfaceInit+0x24>
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d901      	bls.n	80064cc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80064c8:	2302      	movs	r3, #2
 80064ca:	e13d      	b.n	8006748 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	4619      	mov	r1, r3
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fc3b 	bl	8006d4c <USBH_SelectInterface>
 80064d6:	4603      	mov	r3, r0
 80064d8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80064da:	7bbb      	ldrb	r3, [r7, #14]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80064e0:	2302      	movs	r3, #2
 80064e2:	e131      	b.n	8006748 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80064ea:	2050      	movs	r0, #80	; 0x50
 80064ec:	f001 fb12 	bl	8007b14 <malloc>
 80064f0:	4603      	mov	r3, r0
 80064f2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064fa:	69db      	ldr	r3, [r3, #28]
 80064fc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006504:	2302      	movs	r3, #2
 8006506:	e11f      	b.n	8006748 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006508:	2250      	movs	r2, #80	; 0x50
 800650a:	2100      	movs	r1, #0
 800650c:	68b8      	ldr	r0, [r7, #8]
 800650e:	f001 fb11 	bl	8007b34 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006512:	7bfb      	ldrb	r3, [r7, #15]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	211a      	movs	r1, #26
 8006518:	fb01 f303 	mul.w	r3, r1, r3
 800651c:	4413      	add	r3, r2
 800651e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	b25b      	sxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	da15      	bge.n	8006556 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	211a      	movs	r1, #26
 8006530:	fb01 f303 	mul.w	r3, r1, r3
 8006534:	4413      	add	r3, r2
 8006536:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800653a:	781a      	ldrb	r2, [r3, #0]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	211a      	movs	r1, #26
 8006546:	fb01 f303 	mul.w	r3, r1, r3
 800654a:	4413      	add	r3, r2
 800654c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006550:	881a      	ldrh	r2, [r3, #0]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	785b      	ldrb	r3, [r3, #1]
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 ff9c 	bl	800749a <USBH_AllocPipe>
 8006562:	4603      	mov	r3, r0
 8006564:	461a      	mov	r2, r3
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	7819      	ldrb	r1, [r3, #0]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	7858      	ldrb	r0, [r3, #1]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	8952      	ldrh	r2, [r2, #10]
 8006582:	9202      	str	r2, [sp, #8]
 8006584:	2203      	movs	r2, #3
 8006586:	9201      	str	r2, [sp, #4]
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	4623      	mov	r3, r4
 800658c:	4602      	mov	r2, r0
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 ff54 	bl	800743c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2200      	movs	r2, #0
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 fa17 	bl	80079d0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80065a2:	2300      	movs	r3, #0
 80065a4:	2200      	movs	r2, #0
 80065a6:	210a      	movs	r1, #10
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fbeb 	bl	8006d84 <USBH_FindInterface>
 80065ae:	4603      	mov	r3, r0
 80065b0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	2bff      	cmp	r3, #255	; 0xff
 80065b6:	d002      	beq.n	80065be <USBH_CDC_InterfaceInit+0x11a>
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d901      	bls.n	80065c2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065be:	2302      	movs	r3, #2
 80065c0:	e0c2      	b.n	8006748 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	211a      	movs	r1, #26
 80065c8:	fb01 f303 	mul.w	r3, r1, r3
 80065cc:	4413      	add	r3, r2
 80065ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	b25b      	sxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	da16      	bge.n	8006608 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065da:	7bfb      	ldrb	r3, [r7, #15]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	211a      	movs	r1, #26
 80065e0:	fb01 f303 	mul.w	r3, r1, r3
 80065e4:	4413      	add	r3, r2
 80065e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065ea:	781a      	ldrb	r2, [r3, #0]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	211a      	movs	r1, #26
 80065f6:	fb01 f303 	mul.w	r3, r1, r3
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006600:	881a      	ldrh	r2, [r3, #0]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	835a      	strh	r2, [r3, #26]
 8006606:	e015      	b.n	8006634 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	211a      	movs	r1, #26
 800660e:	fb01 f303 	mul.w	r3, r1, r3
 8006612:	4413      	add	r3, r2
 8006614:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006618:	781a      	ldrb	r2, [r3, #0]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800661e:	7bfb      	ldrb	r3, [r7, #15]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	211a      	movs	r1, #26
 8006624:	fb01 f303 	mul.w	r3, r1, r3
 8006628:	4413      	add	r3, r2
 800662a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800662e:	881a      	ldrh	r2, [r3, #0]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	211a      	movs	r1, #26
 800663a:	fb01 f303 	mul.w	r3, r1, r3
 800663e:	4413      	add	r3, r2
 8006640:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	b25b      	sxtb	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	da16      	bge.n	800667a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800664c:	7bfb      	ldrb	r3, [r7, #15]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	211a      	movs	r1, #26
 8006652:	fb01 f303 	mul.w	r3, r1, r3
 8006656:	4413      	add	r3, r2
 8006658:	f203 3356 	addw	r3, r3, #854	; 0x356
 800665c:	781a      	ldrb	r2, [r3, #0]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	211a      	movs	r1, #26
 8006668:	fb01 f303 	mul.w	r3, r1, r3
 800666c:	4413      	add	r3, r2
 800666e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006672:	881a      	ldrh	r2, [r3, #0]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	835a      	strh	r2, [r3, #26]
 8006678:	e015      	b.n	80066a6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	211a      	movs	r1, #26
 8006680:	fb01 f303 	mul.w	r3, r1, r3
 8006684:	4413      	add	r3, r2
 8006686:	f203 3356 	addw	r3, r3, #854	; 0x356
 800668a:	781a      	ldrb	r2, [r3, #0]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006690:	7bfb      	ldrb	r3, [r7, #15]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	211a      	movs	r1, #26
 8006696:	fb01 f303 	mul.w	r3, r1, r3
 800669a:	4413      	add	r3, r2
 800669c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80066a0:	881a      	ldrh	r2, [r3, #0]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	7b9b      	ldrb	r3, [r3, #14]
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fef4 	bl	800749a <USBH_AllocPipe>
 80066b2:	4603      	mov	r3, r0
 80066b4:	461a      	mov	r2, r3
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	7bdb      	ldrb	r3, [r3, #15]
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 feea 	bl	800749a <USBH_AllocPipe>
 80066c6:	4603      	mov	r3, r0
 80066c8:	461a      	mov	r2, r3
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	7b59      	ldrb	r1, [r3, #13]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	7b98      	ldrb	r0, [r3, #14]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	8b12      	ldrh	r2, [r2, #24]
 80066e6:	9202      	str	r2, [sp, #8]
 80066e8:	2202      	movs	r2, #2
 80066ea:	9201      	str	r2, [sp, #4]
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	4623      	mov	r3, r4
 80066f0:	4602      	mov	r2, r0
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fea2 	bl	800743c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	7b19      	ldrb	r1, [r3, #12]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	7bd8      	ldrb	r0, [r3, #15]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	8b52      	ldrh	r2, [r2, #26]
 8006710:	9202      	str	r2, [sp, #8]
 8006712:	2202      	movs	r2, #2
 8006714:	9201      	str	r2, [sp, #4]
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	4623      	mov	r3, r4
 800671a:	4602      	mov	r2, r0
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fe8d 	bl	800743c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	7b5b      	ldrb	r3, [r3, #13]
 800672e:	2200      	movs	r2, #0
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f001 f94c 	bl	80079d0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	7b1b      	ldrb	r3, [r3, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 f945 	bl	80079d0 <USBH_LL_SetToggle>

  return USBH_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	bd90      	pop	{r4, r7, pc}

08006750 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00e      	beq.n	8006788 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	4619      	mov	r1, r3
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fe82 	bl	800747a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fead 	bl	80074dc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	7b1b      	ldrb	r3, [r3, #12]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00e      	beq.n	80067ae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	7b1b      	ldrb	r3, [r3, #12]
 8006794:	4619      	mov	r1, r3
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fe6f 	bl	800747a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	7b1b      	ldrb	r3, [r3, #12]
 80067a0:	4619      	mov	r1, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fe9a 	bl	80074dc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	7b5b      	ldrb	r3, [r3, #13]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00e      	beq.n	80067d4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	7b5b      	ldrb	r3, [r3, #13]
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fe5c 	bl	800747a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	7b5b      	ldrb	r3, [r3, #13]
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fe87 	bl	80074dc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00b      	beq.n	80067f8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f001 f99b 	bl	8007b24 <free>
    phost->pActiveClass->pData = 0U;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067f4:	2200      	movs	r2, #0
 80067f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3340      	adds	r3, #64	; 0x40
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f8b1 	bl	8006982 <GetLineCoding>
 8006820:	4603      	mov	r3, r0
 8006822:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006824:	7afb      	ldrb	r3, [r7, #11]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d105      	bne.n	8006836 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006830:	2102      	movs	r1, #2
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006836:	7afb      	ldrb	r3, [r7, #11]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006848:	2301      	movs	r3, #1
 800684a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800684c:	2300      	movs	r3, #0
 800684e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006860:	2b04      	cmp	r3, #4
 8006862:	d877      	bhi.n	8006954 <USBH_CDC_Process+0x114>
 8006864:	a201      	add	r2, pc, #4	; (adr r2, 800686c <USBH_CDC_Process+0x2c>)
 8006866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686a:	bf00      	nop
 800686c:	08006881 	.word	0x08006881
 8006870:	08006887 	.word	0x08006887
 8006874:	080068b7 	.word	0x080068b7
 8006878:	0800692b 	.word	0x0800692b
 800687c:	08006939 	.word	0x08006939
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006880:	2300      	movs	r3, #0
 8006882:	73fb      	strb	r3, [r7, #15]
      break;
 8006884:	e06d      	b.n	8006962 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f897 	bl	80069c0 <SetLineCoding>
 8006892:	4603      	mov	r3, r0
 8006894:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006896:	7bbb      	ldrb	r3, [r7, #14]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d104      	bne.n	80068a6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80068a4:	e058      	b.n	8006958 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d055      	beq.n	8006958 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2204      	movs	r2, #4
 80068b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80068b4:	e050      	b.n	8006958 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	3340      	adds	r3, #64	; 0x40
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f860 	bl	8006982 <GetLineCoding>
 80068c2:	4603      	mov	r3, r0
 80068c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80068c6:	7bbb      	ldrb	r3, [r7, #14]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d126      	bne.n	800691a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068de:	791b      	ldrb	r3, [r3, #4]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d13b      	bne.n	800695c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d133      	bne.n	800695c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068fe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006900:	429a      	cmp	r2, r3
 8006902:	d12b      	bne.n	800695c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800690e:	429a      	cmp	r2, r3
 8006910:	d124      	bne.n	800695c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f958 	bl	8006bc8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006918:	e020      	b.n	800695c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800691a:	7bbb      	ldrb	r3, [r7, #14]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d01d      	beq.n	800695c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2204      	movs	r2, #4
 8006924:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006928:	e018      	b.n	800695c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f867 	bl	80069fe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f8da 	bl	8006aea <CDC_ProcessReception>
      break;
 8006936:	e014      	b.n	8006962 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006938:	2100      	movs	r1, #0
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fb08 	bl	8006f50 <USBH_ClrFeature>
 8006940:	4603      	mov	r3, r0
 8006942:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006944:	7bbb      	ldrb	r3, [r7, #14]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10a      	bne.n	8006960 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006952:	e005      	b.n	8006960 <USBH_CDC_Process+0x120>

    default:
      break;
 8006954:	bf00      	nop
 8006956:	e004      	b.n	8006962 <USBH_CDC_Process+0x122>
      break;
 8006958:	bf00      	nop
 800695a:	e002      	b.n	8006962 <USBH_CDC_Process+0x122>
      break;
 800695c:	bf00      	nop
 800695e:	e000      	b.n	8006962 <USBH_CDC_Process+0x122>
      break;
 8006960:	bf00      	nop

  }

  return status;
 8006962:	7bfb      	ldrb	r3, [r7, #15]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b082      	sub	sp, #8
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	22a1      	movs	r2, #161	; 0xa1
 8006990:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2221      	movs	r2, #33	; 0x21
 8006996:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2207      	movs	r2, #7
 80069a8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2207      	movs	r2, #7
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 faf1 	bl	8006f98 <USBH_CtlReq>
 80069b6:	4603      	mov	r3, r0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2221      	movs	r2, #33	; 0x21
 80069ce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2207      	movs	r2, #7
 80069e6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	2207      	movs	r2, #7
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fad2 	bl	8006f98 <USBH_CtlReq>
 80069f4:	4603      	mov	r3, r0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b086      	sub	sp, #24
 8006a02:	af02      	add	r7, sp, #8
 8006a04:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a10:	2300      	movs	r3, #0
 8006a12:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d002      	beq.n	8006a24 <CDC_ProcessTransmission+0x26>
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d023      	beq.n	8006a6a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006a22:	e05e      	b.n	8006ae2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	8b12      	ldrh	r2, [r2, #24]
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d90b      	bls.n	8006a48 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	69d9      	ldr	r1, [r3, #28]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8b1a      	ldrh	r2, [r3, #24]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	7b5b      	ldrb	r3, [r3, #13]
 8006a3c:	2001      	movs	r0, #1
 8006a3e:	9000      	str	r0, [sp, #0]
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fcb8 	bl	80073b6 <USBH_BulkSendData>
 8006a46:	e00b      	b.n	8006a60 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	7b5b      	ldrb	r3, [r3, #13]
 8006a56:	2001      	movs	r0, #1
 8006a58:	9000      	str	r0, [sp, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fcab 	bl	80073b6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006a68:	e03b      	b.n	8006ae2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	7b5b      	ldrb	r3, [r3, #13]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 ff83 	bl	800797c <USBH_LL_GetURBState>
 8006a76:	4603      	mov	r3, r0
 8006a78:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006a7a:	7afb      	ldrb	r3, [r7, #11]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d128      	bne.n	8006ad2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	8b12      	ldrh	r2, [r2, #24]
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d90e      	bls.n	8006aaa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	8b12      	ldrh	r2, [r2, #24]
 8006a94:	1a9a      	subs	r2, r3, r2
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	8b12      	ldrh	r2, [r2, #24]
 8006aa2:	441a      	add	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	61da      	str	r2, [r3, #28]
 8006aa8:	e002      	b.n	8006ab0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006ac0:	e00e      	b.n	8006ae0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f868 	bl	8006ba0 <USBH_CDC_TransmitCallback>
      break;
 8006ad0:	e006      	b.n	8006ae0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006ad2:	7afb      	ldrb	r3, [r7, #11]
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d103      	bne.n	8006ae0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006ae0:	bf00      	nop
  }
}
 8006ae2:	bf00      	nop
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b086      	sub	sp, #24
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006afc:	2300      	movs	r3, #0
 8006afe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d002      	beq.n	8006b10 <CDC_ProcessReception+0x26>
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d00e      	beq.n	8006b2c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006b0e:	e043      	b.n	8006b98 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	6a19      	ldr	r1, [r3, #32]
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	8b5a      	ldrh	r2, [r3, #26]
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	7b1b      	ldrb	r3, [r3, #12]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fc6f 	bl	8007400 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2204      	movs	r2, #4
 8006b26:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006b2a:	e035      	b.n	8006b98 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	7b1b      	ldrb	r3, [r3, #12]
 8006b30:	4619      	mov	r1, r3
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 ff22 	bl	800797c <USBH_LL_GetURBState>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006b3c:	7cfb      	ldrb	r3, [r7, #19]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d129      	bne.n	8006b96 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	7b1b      	ldrb	r3, [r3, #12]
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fe85 	bl	8007858 <USBH_LL_GetLastXferSize>
 8006b4e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d016      	beq.n	8006b88 <CDC_ProcessReception+0x9e>
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	8b5b      	ldrh	r3, [r3, #26]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d910      	bls.n	8006b88 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	1ad2      	subs	r2, r2, r3
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	6a1a      	ldr	r2, [r3, #32]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	441a      	add	r2, r3
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	2203      	movs	r2, #3
 8006b82:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006b86:	e006      	b.n	8006b96 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f80f 	bl	8006bb4 <USBH_CDC_ReceiveCallback>
      break;
 8006b96:	bf00      	nop
  }
}
 8006b98:	bf00      	nop
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	4613      	mov	r3, r2
 8006be8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	e029      	b.n	8006c48 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	79fa      	ldrb	r2, [r7, #7]
 8006bf8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 f81f 	bl	8006c50 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 fd97 	bl	8007774 <USBH_LL_Init>

  return USBH_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	e009      	b.n	8006c76 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	33e0      	adds	r3, #224	; 0xe0
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	3301      	adds	r3, #1
 8006c74:	60fb      	str	r3, [r7, #12]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b0e      	cmp	r3, #14
 8006c7a:	d9f2      	bls.n	8006c62 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	e009      	b.n	8006c96 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	3301      	adds	r3, #1
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c9c:	d3f1      	bcc.n	8006c82 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2240      	movs	r2, #64	; 0x40
 8006cc2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d016      	beq.n	8006d3a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10e      	bne.n	8006d34 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d1c:	1c59      	adds	r1, r3, #1
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	33de      	adds	r3, #222	; 0xde
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	73fb      	strb	r3, [r7, #15]
 8006d32:	e004      	b.n	8006d3e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006d34:	2302      	movs	r3, #2
 8006d36:	73fb      	strb	r3, [r7, #15]
 8006d38:	e001      	b.n	8006d3e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006d62:	78fa      	ldrb	r2, [r7, #3]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d204      	bcs.n	8006d72 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	78fa      	ldrb	r2, [r7, #3]
 8006d6c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006d70:	e001      	b.n	8006d76 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006d72:	2302      	movs	r3, #2
 8006d74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	4608      	mov	r0, r1
 8006d8e:	4611      	mov	r1, r2
 8006d90:	461a      	mov	r2, r3
 8006d92:	4603      	mov	r3, r0
 8006d94:	70fb      	strb	r3, [r7, #3]
 8006d96:	460b      	mov	r3, r1
 8006d98:	70bb      	strb	r3, [r7, #2]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006dac:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006dae:	e025      	b.n	8006dfc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
 8006db2:	221a      	movs	r2, #26
 8006db4:	fb02 f303 	mul.w	r3, r2, r3
 8006db8:	3308      	adds	r3, #8
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	3302      	adds	r3, #2
 8006dc0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	795b      	ldrb	r3, [r3, #5]
 8006dc6:	78fa      	ldrb	r2, [r7, #3]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d002      	beq.n	8006dd2 <USBH_FindInterface+0x4e>
 8006dcc:	78fb      	ldrb	r3, [r7, #3]
 8006dce:	2bff      	cmp	r3, #255	; 0xff
 8006dd0:	d111      	bne.n	8006df6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006dd6:	78ba      	ldrb	r2, [r7, #2]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d002      	beq.n	8006de2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ddc:	78bb      	ldrb	r3, [r7, #2]
 8006dde:	2bff      	cmp	r3, #255	; 0xff
 8006de0:	d109      	bne.n	8006df6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006de6:	787a      	ldrb	r2, [r7, #1]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d002      	beq.n	8006df2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006dec:	787b      	ldrb	r3, [r7, #1]
 8006dee:	2bff      	cmp	r3, #255	; 0xff
 8006df0:	d101      	bne.n	8006df6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006df2:	7dfb      	ldrb	r3, [r7, #23]
 8006df4:	e006      	b.n	8006e04 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006dfc:	7dfb      	ldrb	r3, [r7, #23]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d9d6      	bls.n	8006db0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006e02:	23ff      	movs	r3, #255	; 0xff
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	371c      	adds	r7, #28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fce7 	bl	80077ec <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006e1e:	2101      	movs	r1, #1
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fdbe 	bl	80079a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f804 	bl	8006e72 <USBH_HandleSof>
}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b0b      	cmp	r3, #11
 8006e82:	d10a      	bne.n	8006e9a <USBH_HandleSof+0x28>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d005      	beq.n	8006e9a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	4798      	blx	r3
  }
}
 8006e9a:	bf00      	nop
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006eb2:	bf00      	nop
}
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b083      	sub	sp, #12
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006ece:	bf00      	nop
}
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fc7a 	bl	8007822 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	791b      	ldrb	r3, [r3, #4]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fad1 	bl	80074dc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	795b      	ldrb	r3, [r3, #5]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 facb 	bl	80074dc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	789b      	ldrb	r3, [r3, #2]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d10f      	bne.n	8006f84 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006f76:	78fb      	ldrb	r3, [r7, #3]
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006f84:	2200      	movs	r2, #0
 8006f86:	2100      	movs	r1, #0
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f805 	bl	8006f98 <USBH_CtlReq>
 8006f8e:	4603      	mov	r3, r0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	789b      	ldrb	r3, [r3, #2]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d002      	beq.n	8006fb8 <USBH_CtlReq+0x20>
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d00f      	beq.n	8006fd6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006fb6:	e027      	b.n	8007008 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	88fa      	ldrh	r2, [r7, #6]
 8006fc2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd4:	e018      	b.n	8007008 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 f81c 	bl	8007014 <USBH_HandleControl>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006fe0:	7dfb      	ldrb	r3, [r7, #23]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <USBH_CtlReq+0x54>
 8006fe6:	7dfb      	ldrb	r3, [r7, #23]
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d106      	bne.n	8006ffa <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	761a      	strb	r2, [r3, #24]
      break;
 8006ff8:	e005      	b.n	8007006 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d102      	bne.n	8007006 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2201      	movs	r2, #1
 8007004:	709a      	strb	r2, [r3, #2]
      break;
 8007006:	bf00      	nop
  }
  return status;
 8007008:	7dfb      	ldrb	r3, [r7, #23]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
	...

08007014 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af02      	add	r7, sp, #8
 800701a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800701c:	2301      	movs	r3, #1
 800701e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007020:	2300      	movs	r3, #0
 8007022:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	7e1b      	ldrb	r3, [r3, #24]
 8007028:	3b01      	subs	r3, #1
 800702a:	2b0a      	cmp	r3, #10
 800702c:	f200 8156 	bhi.w	80072dc <USBH_HandleControl+0x2c8>
 8007030:	a201      	add	r2, pc, #4	; (adr r2, 8007038 <USBH_HandleControl+0x24>)
 8007032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007036:	bf00      	nop
 8007038:	08007065 	.word	0x08007065
 800703c:	0800707f 	.word	0x0800707f
 8007040:	080070e9 	.word	0x080070e9
 8007044:	0800710f 	.word	0x0800710f
 8007048:	08007147 	.word	0x08007147
 800704c:	08007171 	.word	0x08007171
 8007050:	080071c3 	.word	0x080071c3
 8007054:	080071e5 	.word	0x080071e5
 8007058:	08007221 	.word	0x08007221
 800705c:	08007247 	.word	0x08007247
 8007060:	08007285 	.word	0x08007285
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f103 0110 	add.w	r1, r3, #16
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	795b      	ldrb	r3, [r3, #5]
 800706e:	461a      	mov	r2, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f943 	bl	80072fc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2202      	movs	r2, #2
 800707a:	761a      	strb	r2, [r3, #24]
      break;
 800707c:	e139      	b.n	80072f2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	795b      	ldrb	r3, [r3, #5]
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fc79 	bl	800797c <USBH_LL_GetURBState>
 800708a:	4603      	mov	r3, r0
 800708c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800708e:	7bbb      	ldrb	r3, [r7, #14]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d11e      	bne.n	80070d2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	7c1b      	ldrb	r3, [r3, #16]
 8007098:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800709c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	8adb      	ldrh	r3, [r3, #22]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00a      	beq.n	80070bc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80070a6:	7b7b      	ldrb	r3, [r7, #13]
 80070a8:	2b80      	cmp	r3, #128	; 0x80
 80070aa:	d103      	bne.n	80070b4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2203      	movs	r2, #3
 80070b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80070b2:	e115      	b.n	80072e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2205      	movs	r2, #5
 80070b8:	761a      	strb	r2, [r3, #24]
      break;
 80070ba:	e111      	b.n	80072e0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80070bc:	7b7b      	ldrb	r3, [r7, #13]
 80070be:	2b80      	cmp	r3, #128	; 0x80
 80070c0:	d103      	bne.n	80070ca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2209      	movs	r2, #9
 80070c6:	761a      	strb	r2, [r3, #24]
      break;
 80070c8:	e10a      	b.n	80072e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2207      	movs	r2, #7
 80070ce:	761a      	strb	r2, [r3, #24]
      break;
 80070d0:	e106      	b.n	80072e0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80070d2:	7bbb      	ldrb	r3, [r7, #14]
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	d003      	beq.n	80070e0 <USBH_HandleControl+0xcc>
 80070d8:	7bbb      	ldrb	r3, [r7, #14]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	f040 8100 	bne.w	80072e0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	220b      	movs	r2, #11
 80070e4:	761a      	strb	r2, [r3, #24]
      break;
 80070e6:	e0fb      	b.n	80072e0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6899      	ldr	r1, [r3, #8]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	899a      	ldrh	r2, [r3, #12]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	791b      	ldrb	r3, [r3, #4]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f93a 	bl	800737a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2204      	movs	r2, #4
 800710a:	761a      	strb	r2, [r3, #24]
      break;
 800710c:	e0f1      	b.n	80072f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	791b      	ldrb	r3, [r3, #4]
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fc31 	bl	800797c <USBH_LL_GetURBState>
 800711a:	4603      	mov	r3, r0
 800711c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800711e:	7bbb      	ldrb	r3, [r7, #14]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d102      	bne.n	800712a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2209      	movs	r2, #9
 8007128:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	2b05      	cmp	r3, #5
 800712e:	d102      	bne.n	8007136 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007130:	2303      	movs	r3, #3
 8007132:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007134:	e0d6      	b.n	80072e4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	2b04      	cmp	r3, #4
 800713a:	f040 80d3 	bne.w	80072e4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	220b      	movs	r2, #11
 8007142:	761a      	strb	r2, [r3, #24]
      break;
 8007144:	e0ce      	b.n	80072e4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6899      	ldr	r1, [r3, #8]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	899a      	ldrh	r2, [r3, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	795b      	ldrb	r3, [r3, #5]
 8007152:	2001      	movs	r0, #1
 8007154:	9000      	str	r0, [sp, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f8ea 	bl	8007330 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007162:	b29a      	uxth	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2206      	movs	r2, #6
 800716c:	761a      	strb	r2, [r3, #24]
      break;
 800716e:	e0c0      	b.n	80072f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	795b      	ldrb	r3, [r3, #5]
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fc00 	bl	800797c <USBH_LL_GetURBState>
 800717c:	4603      	mov	r3, r0
 800717e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007180:	7bbb      	ldrb	r3, [r7, #14]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d103      	bne.n	800718e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2207      	movs	r2, #7
 800718a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800718c:	e0ac      	b.n	80072e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800718e:	7bbb      	ldrb	r3, [r7, #14]
 8007190:	2b05      	cmp	r3, #5
 8007192:	d105      	bne.n	80071a0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	220c      	movs	r2, #12
 8007198:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800719a:	2303      	movs	r3, #3
 800719c:	73fb      	strb	r3, [r7, #15]
      break;
 800719e:	e0a3      	b.n	80072e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d103      	bne.n	80071ae <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2205      	movs	r2, #5
 80071aa:	761a      	strb	r2, [r3, #24]
      break;
 80071ac:	e09c      	b.n	80072e8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80071ae:	7bbb      	ldrb	r3, [r7, #14]
 80071b0:	2b04      	cmp	r3, #4
 80071b2:	f040 8099 	bne.w	80072e8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	220b      	movs	r2, #11
 80071ba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80071bc:	2302      	movs	r3, #2
 80071be:	73fb      	strb	r3, [r7, #15]
      break;
 80071c0:	e092      	b.n	80072e8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	791b      	ldrb	r3, [r3, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	2100      	movs	r1, #0
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f8d5 	bl	800737a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2208      	movs	r2, #8
 80071e0:	761a      	strb	r2, [r3, #24]

      break;
 80071e2:	e086      	b.n	80072f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	791b      	ldrb	r3, [r3, #4]
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fbc6 	bl	800797c <USBH_LL_GetURBState>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d105      	bne.n	8007206 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	220d      	movs	r2, #13
 80071fe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007204:	e072      	b.n	80072ec <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007206:	7bbb      	ldrb	r3, [r7, #14]
 8007208:	2b04      	cmp	r3, #4
 800720a:	d103      	bne.n	8007214 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	220b      	movs	r2, #11
 8007210:	761a      	strb	r2, [r3, #24]
      break;
 8007212:	e06b      	b.n	80072ec <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007214:	7bbb      	ldrb	r3, [r7, #14]
 8007216:	2b05      	cmp	r3, #5
 8007218:	d168      	bne.n	80072ec <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800721a:	2303      	movs	r3, #3
 800721c:	73fb      	strb	r3, [r7, #15]
      break;
 800721e:	e065      	b.n	80072ec <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	795b      	ldrb	r3, [r3, #5]
 8007224:	2201      	movs	r2, #1
 8007226:	9200      	str	r2, [sp, #0]
 8007228:	2200      	movs	r2, #0
 800722a:	2100      	movs	r1, #0
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f87f 	bl	8007330 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007238:	b29a      	uxth	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	220a      	movs	r2, #10
 8007242:	761a      	strb	r2, [r3, #24]
      break;
 8007244:	e055      	b.n	80072f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	795b      	ldrb	r3, [r3, #5]
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fb95 	bl	800797c <USBH_LL_GetURBState>
 8007252:	4603      	mov	r3, r0
 8007254:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007256:	7bbb      	ldrb	r3, [r7, #14]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d105      	bne.n	8007268 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	220d      	movs	r2, #13
 8007264:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007266:	e043      	b.n	80072f0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	2b02      	cmp	r3, #2
 800726c:	d103      	bne.n	8007276 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2209      	movs	r2, #9
 8007272:	761a      	strb	r2, [r3, #24]
      break;
 8007274:	e03c      	b.n	80072f0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	2b04      	cmp	r3, #4
 800727a:	d139      	bne.n	80072f0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	220b      	movs	r2, #11
 8007280:	761a      	strb	r2, [r3, #24]
      break;
 8007282:	e035      	b.n	80072f0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	7e5b      	ldrb	r3, [r3, #25]
 8007288:	3301      	adds	r3, #1
 800728a:	b2da      	uxtb	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	765a      	strb	r2, [r3, #25]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	7e5b      	ldrb	r3, [r3, #25]
 8007294:	2b02      	cmp	r3, #2
 8007296:	d806      	bhi.n	80072a6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80072a4:	e025      	b.n	80072f2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072ac:	2106      	movs	r1, #6
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	795b      	ldrb	r3, [r3, #5]
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f90c 	bl	80074dc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	791b      	ldrb	r3, [r3, #4]
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f906 	bl	80074dc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80072d6:	2302      	movs	r3, #2
 80072d8:	73fb      	strb	r3, [r7, #15]
      break;
 80072da:	e00a      	b.n	80072f2 <USBH_HandleControl+0x2de>

    default:
      break;
 80072dc:	bf00      	nop
 80072de:	e008      	b.n	80072f2 <USBH_HandleControl+0x2de>
      break;
 80072e0:	bf00      	nop
 80072e2:	e006      	b.n	80072f2 <USBH_HandleControl+0x2de>
      break;
 80072e4:	bf00      	nop
 80072e6:	e004      	b.n	80072f2 <USBH_HandleControl+0x2de>
      break;
 80072e8:	bf00      	nop
 80072ea:	e002      	b.n	80072f2 <USBH_HandleControl+0x2de>
      break;
 80072ec:	bf00      	nop
 80072ee:	e000      	b.n	80072f2 <USBH_HandleControl+0x2de>
      break;
 80072f0:	bf00      	nop
  }

  return status;
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af04      	add	r7, sp, #16
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	4613      	mov	r3, r2
 8007308:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800730a:	79f9      	ldrb	r1, [r7, #7]
 800730c:	2300      	movs	r3, #0
 800730e:	9303      	str	r3, [sp, #12]
 8007310:	2308      	movs	r3, #8
 8007312:	9302      	str	r3, [sp, #8]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	9301      	str	r3, [sp, #4]
 8007318:	2300      	movs	r3, #0
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	2300      	movs	r3, #0
 800731e:	2200      	movs	r2, #0
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 fafa 	bl	800791a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af04      	add	r7, sp, #16
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	4611      	mov	r1, r2
 800733c:	461a      	mov	r2, r3
 800733e:	460b      	mov	r3, r1
 8007340:	80fb      	strh	r3, [r7, #6]
 8007342:	4613      	mov	r3, r2
 8007344:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007354:	7979      	ldrb	r1, [r7, #5]
 8007356:	7e3b      	ldrb	r3, [r7, #24]
 8007358:	9303      	str	r3, [sp, #12]
 800735a:	88fb      	ldrh	r3, [r7, #6]
 800735c:	9302      	str	r3, [sp, #8]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	9301      	str	r3, [sp, #4]
 8007362:	2301      	movs	r3, #1
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	2300      	movs	r3, #0
 8007368:	2200      	movs	r2, #0
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 fad5 	bl	800791a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b088      	sub	sp, #32
 800737e:	af04      	add	r7, sp, #16
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	4611      	mov	r1, r2
 8007386:	461a      	mov	r2, r3
 8007388:	460b      	mov	r3, r1
 800738a:	80fb      	strh	r3, [r7, #6]
 800738c:	4613      	mov	r3, r2
 800738e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007390:	7979      	ldrb	r1, [r7, #5]
 8007392:	2300      	movs	r3, #0
 8007394:	9303      	str	r3, [sp, #12]
 8007396:	88fb      	ldrh	r3, [r7, #6]
 8007398:	9302      	str	r3, [sp, #8]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	9301      	str	r3, [sp, #4]
 800739e:	2301      	movs	r3, #1
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	2300      	movs	r3, #0
 80073a4:	2201      	movs	r2, #1
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 fab7 	bl	800791a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80073ac:	2300      	movs	r3, #0

}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b088      	sub	sp, #32
 80073ba:	af04      	add	r7, sp, #16
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	4611      	mov	r1, r2
 80073c2:	461a      	mov	r2, r3
 80073c4:	460b      	mov	r3, r1
 80073c6:	80fb      	strh	r3, [r7, #6]
 80073c8:	4613      	mov	r3, r2
 80073ca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d001      	beq.n	80073da <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80073da:	7979      	ldrb	r1, [r7, #5]
 80073dc:	7e3b      	ldrb	r3, [r7, #24]
 80073de:	9303      	str	r3, [sp, #12]
 80073e0:	88fb      	ldrh	r3, [r7, #6]
 80073e2:	9302      	str	r3, [sp, #8]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	9301      	str	r3, [sp, #4]
 80073e8:	2301      	movs	r3, #1
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	2302      	movs	r3, #2
 80073ee:	2200      	movs	r2, #0
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 fa92 	bl	800791a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af04      	add	r7, sp, #16
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	4611      	mov	r1, r2
 800740c:	461a      	mov	r2, r3
 800740e:	460b      	mov	r3, r1
 8007410:	80fb      	strh	r3, [r7, #6]
 8007412:	4613      	mov	r3, r2
 8007414:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007416:	7979      	ldrb	r1, [r7, #5]
 8007418:	2300      	movs	r3, #0
 800741a:	9303      	str	r3, [sp, #12]
 800741c:	88fb      	ldrh	r3, [r7, #6]
 800741e:	9302      	str	r3, [sp, #8]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	9301      	str	r3, [sp, #4]
 8007424:	2301      	movs	r3, #1
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	2302      	movs	r3, #2
 800742a:	2201      	movs	r2, #1
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 fa74 	bl	800791a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af04      	add	r7, sp, #16
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	4608      	mov	r0, r1
 8007446:	4611      	mov	r1, r2
 8007448:	461a      	mov	r2, r3
 800744a:	4603      	mov	r3, r0
 800744c:	70fb      	strb	r3, [r7, #3]
 800744e:	460b      	mov	r3, r1
 8007450:	70bb      	strb	r3, [r7, #2]
 8007452:	4613      	mov	r3, r2
 8007454:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007456:	7878      	ldrb	r0, [r7, #1]
 8007458:	78ba      	ldrb	r2, [r7, #2]
 800745a:	78f9      	ldrb	r1, [r7, #3]
 800745c:	8b3b      	ldrh	r3, [r7, #24]
 800745e:	9302      	str	r3, [sp, #8]
 8007460:	7d3b      	ldrb	r3, [r7, #20]
 8007462:	9301      	str	r3, [sp, #4]
 8007464:	7c3b      	ldrb	r3, [r7, #16]
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	4603      	mov	r3, r0
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fa07 	bl	800787e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b082      	sub	sp, #8
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	460b      	mov	r3, r1
 8007484:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fa26 	bl	80078dc <USBH_LL_ClosePipe>

  return USBH_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	460b      	mov	r3, r1
 80074a4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f836 	bl	8007518 <USBH_GetFreePipe>
 80074ac:	4603      	mov	r3, r0
 80074ae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80074b0:	89fb      	ldrh	r3, [r7, #14]
 80074b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00a      	beq.n	80074d0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80074ba:	78fa      	ldrb	r2, [r7, #3]
 80074bc:	89fb      	ldrh	r3, [r7, #14]
 80074be:	f003 030f 	and.w	r3, r3, #15
 80074c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074c6:	6879      	ldr	r1, [r7, #4]
 80074c8:	33e0      	adds	r3, #224	; 0xe0
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	440b      	add	r3, r1
 80074ce:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80074d0:	89fb      	ldrh	r3, [r7, #14]
 80074d2:	b2db      	uxtb	r3, r3
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80074e8:	78fb      	ldrb	r3, [r7, #3]
 80074ea:	2b0a      	cmp	r3, #10
 80074ec:	d80d      	bhi.n	800750a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80074ee:	78fb      	ldrb	r3, [r7, #3]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	33e0      	adds	r3, #224	; 0xe0
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	78fb      	ldrb	r3, [r7, #3]
 80074fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007500:	6879      	ldr	r1, [r7, #4]
 8007502:	33e0      	adds	r3, #224	; 0xe0
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	440b      	add	r3, r1
 8007508:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007520:	2300      	movs	r3, #0
 8007522:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007524:	2300      	movs	r3, #0
 8007526:	73fb      	strb	r3, [r7, #15]
 8007528:	e00f      	b.n	800754a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800752a:	7bfb      	ldrb	r3, [r7, #15]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	33e0      	adds	r3, #224	; 0xe0
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d102      	bne.n	8007544 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	b29b      	uxth	r3, r3
 8007542:	e007      	b.n	8007554 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	3301      	adds	r3, #1
 8007548:	73fb      	strb	r3, [r7, #15]
 800754a:	7bfb      	ldrb	r3, [r7, #15]
 800754c:	2b0a      	cmp	r3, #10
 800754e:	d9ec      	bls.n	800752a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007550:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007564:	2201      	movs	r2, #1
 8007566:	490e      	ldr	r1, [pc, #56]	; (80075a0 <MX_USB_HOST_Init+0x40>)
 8007568:	480e      	ldr	r0, [pc, #56]	; (80075a4 <MX_USB_HOST_Init+0x44>)
 800756a:	f7ff fb37 	bl	8006bdc <USBH_Init>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007574:	f7f9 fc7a 	bl	8000e6c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007578:	490b      	ldr	r1, [pc, #44]	; (80075a8 <MX_USB_HOST_Init+0x48>)
 800757a:	480a      	ldr	r0, [pc, #40]	; (80075a4 <MX_USB_HOST_Init+0x44>)
 800757c:	f7ff fbbc 	bl	8006cf8 <USBH_RegisterClass>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007586:	f7f9 fc71 	bl	8000e6c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800758a:	4806      	ldr	r0, [pc, #24]	; (80075a4 <MX_USB_HOST_Init+0x44>)
 800758c:	f7ff fc40 	bl	8006e10 <USBH_Start>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007596:	f7f9 fc69 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800759a:	bf00      	nop
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	080075ad 	.word	0x080075ad
 80075a4:	2000030c 	.word	0x2000030c
 80075a8:	2000000c 	.word	0x2000000c

080075ac <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80075b8:	78fb      	ldrb	r3, [r7, #3]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	2b04      	cmp	r3, #4
 80075be:	d819      	bhi.n	80075f4 <USBH_UserProcess+0x48>
 80075c0:	a201      	add	r2, pc, #4	; (adr r2, 80075c8 <USBH_UserProcess+0x1c>)
 80075c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c6:	bf00      	nop
 80075c8:	080075f5 	.word	0x080075f5
 80075cc:	080075e5 	.word	0x080075e5
 80075d0:	080075f5 	.word	0x080075f5
 80075d4:	080075ed 	.word	0x080075ed
 80075d8:	080075dd 	.word	0x080075dd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80075dc:	4b09      	ldr	r3, [pc, #36]	; (8007604 <USBH_UserProcess+0x58>)
 80075de:	2203      	movs	r2, #3
 80075e0:	701a      	strb	r2, [r3, #0]
  break;
 80075e2:	e008      	b.n	80075f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80075e4:	4b07      	ldr	r3, [pc, #28]	; (8007604 <USBH_UserProcess+0x58>)
 80075e6:	2202      	movs	r2, #2
 80075e8:	701a      	strb	r2, [r3, #0]
  break;
 80075ea:	e004      	b.n	80075f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80075ec:	4b05      	ldr	r3, [pc, #20]	; (8007604 <USBH_UserProcess+0x58>)
 80075ee:	2201      	movs	r2, #1
 80075f0:	701a      	strb	r2, [r3, #0]
  break;
 80075f2:	e000      	b.n	80075f6 <USBH_UserProcess+0x4a>

  default:
  break;
 80075f4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80075f6:	bf00      	nop
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	200000b0 	.word	0x200000b0

08007608 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b08a      	sub	sp, #40	; 0x28
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007610:	f107 0314 	add.w	r3, r7, #20
 8007614:	2200      	movs	r2, #0
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	605a      	str	r2, [r3, #4]
 800761a:	609a      	str	r2, [r3, #8]
 800761c:	60da      	str	r2, [r3, #12]
 800761e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007628:	d147      	bne.n	80076ba <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800762a:	2300      	movs	r3, #0
 800762c:	613b      	str	r3, [r7, #16]
 800762e:	4b25      	ldr	r3, [pc, #148]	; (80076c4 <HAL_HCD_MspInit+0xbc>)
 8007630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007632:	4a24      	ldr	r2, [pc, #144]	; (80076c4 <HAL_HCD_MspInit+0xbc>)
 8007634:	f043 0301 	orr.w	r3, r3, #1
 8007638:	6313      	str	r3, [r2, #48]	; 0x30
 800763a:	4b22      	ldr	r3, [pc, #136]	; (80076c4 <HAL_HCD_MspInit+0xbc>)
 800763c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	613b      	str	r3, [r7, #16]
 8007644:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800764a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800764c:	2300      	movs	r3, #0
 800764e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007650:	2300      	movs	r3, #0
 8007652:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007654:	f107 0314 	add.w	r3, r7, #20
 8007658:	4619      	mov	r1, r3
 800765a:	481b      	ldr	r0, [pc, #108]	; (80076c8 <HAL_HCD_MspInit+0xc0>)
 800765c:	f7fa f89a 	bl	8001794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007660:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007666:	2302      	movs	r3, #2
 8007668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800766a:	2300      	movs	r3, #0
 800766c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800766e:	2300      	movs	r3, #0
 8007670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007672:	230a      	movs	r3, #10
 8007674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007676:	f107 0314 	add.w	r3, r7, #20
 800767a:	4619      	mov	r1, r3
 800767c:	4812      	ldr	r0, [pc, #72]	; (80076c8 <HAL_HCD_MspInit+0xc0>)
 800767e:	f7fa f889 	bl	8001794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007682:	4b10      	ldr	r3, [pc, #64]	; (80076c4 <HAL_HCD_MspInit+0xbc>)
 8007684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007686:	4a0f      	ldr	r2, [pc, #60]	; (80076c4 <HAL_HCD_MspInit+0xbc>)
 8007688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768c:	6353      	str	r3, [r2, #52]	; 0x34
 800768e:	2300      	movs	r3, #0
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	4b0c      	ldr	r3, [pc, #48]	; (80076c4 <HAL_HCD_MspInit+0xbc>)
 8007694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007696:	4a0b      	ldr	r2, [pc, #44]	; (80076c4 <HAL_HCD_MspInit+0xbc>)
 8007698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800769c:	6453      	str	r3, [r2, #68]	; 0x44
 800769e:	4b09      	ldr	r3, [pc, #36]	; (80076c4 <HAL_HCD_MspInit+0xbc>)
 80076a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076a6:	60fb      	str	r3, [r7, #12]
 80076a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80076aa:	2200      	movs	r2, #0
 80076ac:	2100      	movs	r1, #0
 80076ae:	2043      	movs	r0, #67	; 0x43
 80076b0:	f7f9 fff3 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80076b4:	2043      	movs	r0, #67	; 0x43
 80076b6:	f7fa f80c 	bl	80016d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80076ba:	bf00      	nop
 80076bc:	3728      	adds	r7, #40	; 0x28
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	40023800 	.word	0x40023800
 80076c8:	40020000 	.word	0x40020000

080076cc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076da:	4618      	mov	r0, r3
 80076dc:	f7ff fbb7 	bl	8006e4e <USBH_LL_IncTimer>
}
 80076e0:	bf00      	nop
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7ff fbef 	bl	8006eda <USBH_LL_Connect>
}
 80076fc:	bf00      	nop
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007712:	4618      	mov	r0, r3
 8007714:	f7ff fbf8 	bl	8006f08 <USBH_LL_Disconnect>
}
 8007718:	bf00      	nop
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	70fb      	strb	r3, [r7, #3]
 800772c:	4613      	mov	r3, r2
 800772e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800774a:	4618      	mov	r0, r3
 800774c:	f7ff fba9 	bl	8006ea2 <USBH_LL_PortEnabled>
}
 8007750:	bf00      	nop
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff fba9 	bl	8006ebe <USBH_LL_PortDisabled>
}
 800776c:	bf00      	nop
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007782:	2b01      	cmp	r3, #1
 8007784:	d12a      	bne.n	80077dc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007786:	4a18      	ldr	r2, [pc, #96]	; (80077e8 <USBH_LL_Init+0x74>)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a15      	ldr	r2, [pc, #84]	; (80077e8 <USBH_LL_Init+0x74>)
 8007792:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007796:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <USBH_LL_Init+0x74>)
 8007798:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800779c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800779e:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <USBH_LL_Init+0x74>)
 80077a0:	2208      	movs	r2, #8
 80077a2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80077a4:	4b10      	ldr	r3, [pc, #64]	; (80077e8 <USBH_LL_Init+0x74>)
 80077a6:	2201      	movs	r2, #1
 80077a8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80077aa:	4b0f      	ldr	r3, [pc, #60]	; (80077e8 <USBH_LL_Init+0x74>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80077b0:	4b0d      	ldr	r3, [pc, #52]	; (80077e8 <USBH_LL_Init+0x74>)
 80077b2:	2202      	movs	r2, #2
 80077b4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80077b6:	4b0c      	ldr	r3, [pc, #48]	; (80077e8 <USBH_LL_Init+0x74>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80077bc:	480a      	ldr	r0, [pc, #40]	; (80077e8 <USBH_LL_Init+0x74>)
 80077be:	f7fa f9b6 	bl	8001b2e <HAL_HCD_Init>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80077c8:	f7f9 fb50 	bl	8000e6c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80077cc:	4806      	ldr	r0, [pc, #24]	; (80077e8 <USBH_LL_Init+0x74>)
 80077ce:	f7fa fd8c 	bl	80022ea <HAL_HCD_GetCurrentFrame>
 80077d2:	4603      	mov	r3, r0
 80077d4:	4619      	mov	r1, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7ff fb2a 	bl	8006e30 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	200006e4 	.word	0x200006e4

080077ec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077f4:	2300      	movs	r3, #0
 80077f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007802:	4618      	mov	r0, r3
 8007804:	f7fa fd09 	bl	800221a <HAL_HCD_Start>
 8007808:	4603      	mov	r3, r0
 800780a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800780c:	7bfb      	ldrb	r3, [r7, #15]
 800780e:	4618      	mov	r0, r3
 8007810:	f000 f90e 	bl	8007a30 <USBH_Get_USB_Status>
 8007814:	4603      	mov	r3, r0
 8007816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007818:	7bbb      	ldrb	r3, [r7, #14]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b084      	sub	sp, #16
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007838:	4618      	mov	r0, r3
 800783a:	f7fa fd11 	bl	8002260 <HAL_HCD_Stop>
 800783e:	4603      	mov	r3, r0
 8007840:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007842:	7bfb      	ldrb	r3, [r7, #15]
 8007844:	4618      	mov	r0, r3
 8007846:	f000 f8f3 	bl	8007a30 <USBH_Get_USB_Status>
 800784a:	4603      	mov	r3, r0
 800784c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800784e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800786a:	78fa      	ldrb	r2, [r7, #3]
 800786c:	4611      	mov	r1, r2
 800786e:	4618      	mov	r0, r3
 8007870:	f7fa fd27 	bl	80022c2 <HAL_HCD_HC_GetXferCount>
 8007874:	4603      	mov	r3, r0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800787e:	b590      	push	{r4, r7, lr}
 8007880:	b089      	sub	sp, #36	; 0x24
 8007882:	af04      	add	r7, sp, #16
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	4608      	mov	r0, r1
 8007888:	4611      	mov	r1, r2
 800788a:	461a      	mov	r2, r3
 800788c:	4603      	mov	r3, r0
 800788e:	70fb      	strb	r3, [r7, #3]
 8007890:	460b      	mov	r3, r1
 8007892:	70bb      	strb	r3, [r7, #2]
 8007894:	4613      	mov	r3, r2
 8007896:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80078a6:	787c      	ldrb	r4, [r7, #1]
 80078a8:	78ba      	ldrb	r2, [r7, #2]
 80078aa:	78f9      	ldrb	r1, [r7, #3]
 80078ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078ae:	9302      	str	r3, [sp, #8]
 80078b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80078b4:	9301      	str	r3, [sp, #4]
 80078b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	4623      	mov	r3, r4
 80078be:	f7fa f998 	bl	8001bf2 <HAL_HCD_HC_Init>
 80078c2:	4603      	mov	r3, r0
 80078c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 f8b1 	bl	8007a30 <USBH_Get_USB_Status>
 80078ce:	4603      	mov	r3, r0
 80078d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd90      	pop	{r4, r7, pc}

080078dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078f6:	78fa      	ldrb	r2, [r7, #3]
 80078f8:	4611      	mov	r1, r2
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fa fa08 	bl	8001d10 <HAL_HCD_HC_Halt>
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007904:	7bfb      	ldrb	r3, [r7, #15]
 8007906:	4618      	mov	r0, r3
 8007908:	f000 f892 	bl	8007a30 <USBH_Get_USB_Status>
 800790c:	4603      	mov	r3, r0
 800790e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007910:	7bbb      	ldrb	r3, [r7, #14]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800791a:	b590      	push	{r4, r7, lr}
 800791c:	b089      	sub	sp, #36	; 0x24
 800791e:	af04      	add	r7, sp, #16
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	4608      	mov	r0, r1
 8007924:	4611      	mov	r1, r2
 8007926:	461a      	mov	r2, r3
 8007928:	4603      	mov	r3, r0
 800792a:	70fb      	strb	r3, [r7, #3]
 800792c:	460b      	mov	r3, r1
 800792e:	70bb      	strb	r3, [r7, #2]
 8007930:	4613      	mov	r3, r2
 8007932:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007942:	787c      	ldrb	r4, [r7, #1]
 8007944:	78ba      	ldrb	r2, [r7, #2]
 8007946:	78f9      	ldrb	r1, [r7, #3]
 8007948:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800794c:	9303      	str	r3, [sp, #12]
 800794e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007950:	9302      	str	r3, [sp, #8]
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	9301      	str	r3, [sp, #4]
 8007956:	f897 3020 	ldrb.w	r3, [r7, #32]
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	4623      	mov	r3, r4
 800795e:	f7fa f9fb 	bl	8001d58 <HAL_HCD_HC_SubmitRequest>
 8007962:	4603      	mov	r3, r0
 8007964:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007966:	7bfb      	ldrb	r3, [r7, #15]
 8007968:	4618      	mov	r0, r3
 800796a:	f000 f861 	bl	8007a30 <USBH_Get_USB_Status>
 800796e:	4603      	mov	r3, r0
 8007970:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007972:	7bbb      	ldrb	r3, [r7, #14]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	bd90      	pop	{r4, r7, pc}

0800797c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800798e:	78fa      	ldrb	r2, [r7, #3]
 8007990:	4611      	mov	r1, r2
 8007992:	4618      	mov	r0, r3
 8007994:	f7fa fc81 	bl	800229a <HAL_HCD_HC_GetURBState>
 8007998:	4603      	mov	r3, r0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b082      	sub	sp, #8
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	460b      	mov	r3, r1
 80079ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d103      	bne.n	80079c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80079b8:	78fb      	ldrb	r3, [r7, #3]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 f864 	bl	8007a88 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80079c0:	20c8      	movs	r0, #200	; 0xc8
 80079c2:	f7f9 fd6b 	bl	800149c <HAL_Delay>
  return USBH_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	460b      	mov	r3, r1
 80079da:	70fb      	strb	r3, [r7, #3]
 80079dc:	4613      	mov	r3, r2
 80079de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80079e8:	78fb      	ldrb	r3, [r7, #3]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	212c      	movs	r1, #44	; 0x2c
 80079ee:	fb01 f303 	mul.w	r3, r1, r3
 80079f2:	4413      	add	r3, r2
 80079f4:	333b      	adds	r3, #59	; 0x3b
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d009      	beq.n	8007a10 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80079fc:	78fb      	ldrb	r3, [r7, #3]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	212c      	movs	r1, #44	; 0x2c
 8007a02:	fb01 f303 	mul.w	r3, r1, r3
 8007a06:	4413      	add	r3, r2
 8007a08:	3354      	adds	r3, #84	; 0x54
 8007a0a:	78ba      	ldrb	r2, [r7, #2]
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	e008      	b.n	8007a22 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	212c      	movs	r1, #44	; 0x2c
 8007a16:	fb01 f303 	mul.w	r3, r1, r3
 8007a1a:	4413      	add	r3, r2
 8007a1c:	3355      	adds	r3, #85	; 0x55
 8007a1e:	78ba      	ldrb	r2, [r7, #2]
 8007a20:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	4603      	mov	r3, r0
 8007a38:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a3e:	79fb      	ldrb	r3, [r7, #7]
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d817      	bhi.n	8007a74 <USBH_Get_USB_Status+0x44>
 8007a44:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <USBH_Get_USB_Status+0x1c>)
 8007a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4a:	bf00      	nop
 8007a4c:	08007a5d 	.word	0x08007a5d
 8007a50:	08007a63 	.word	0x08007a63
 8007a54:	08007a69 	.word	0x08007a69
 8007a58:	08007a6f 	.word	0x08007a6f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a60:	e00b      	b.n	8007a7a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007a62:	2302      	movs	r3, #2
 8007a64:	73fb      	strb	r3, [r7, #15]
    break;
 8007a66:	e008      	b.n	8007a7a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a6c:	e005      	b.n	8007a7a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007a6e:	2302      	movs	r3, #2
 8007a70:	73fb      	strb	r3, [r7, #15]
    break;
 8007a72:	e002      	b.n	8007a7a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007a74:	2302      	movs	r3, #2
 8007a76:	73fb      	strb	r3, [r7, #15]
    break;
 8007a78:	bf00      	nop
  }
  return usb_status;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d102      	bne.n	8007aa2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	73fb      	strb	r3, [r7, #15]
 8007aa0:	e001      	b.n	8007aa6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	2101      	movs	r1, #1
 8007aac:	4803      	ldr	r0, [pc, #12]	; (8007abc <MX_DriverVbusFS+0x34>)
 8007aae:	f7fa f825 	bl	8001afc <HAL_GPIO_WritePin>
}
 8007ab2:	bf00      	nop
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	40020800 	.word	0x40020800

08007ac0 <__errno>:
 8007ac0:	4b01      	ldr	r3, [pc, #4]	; (8007ac8 <__errno+0x8>)
 8007ac2:	6818      	ldr	r0, [r3, #0]
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	2000002c 	.word	0x2000002c

08007acc <__libc_init_array>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	4d0d      	ldr	r5, [pc, #52]	; (8007b04 <__libc_init_array+0x38>)
 8007ad0:	4c0d      	ldr	r4, [pc, #52]	; (8007b08 <__libc_init_array+0x3c>)
 8007ad2:	1b64      	subs	r4, r4, r5
 8007ad4:	10a4      	asrs	r4, r4, #2
 8007ad6:	2600      	movs	r6, #0
 8007ad8:	42a6      	cmp	r6, r4
 8007ada:	d109      	bne.n	8007af0 <__libc_init_array+0x24>
 8007adc:	4d0b      	ldr	r5, [pc, #44]	; (8007b0c <__libc_init_array+0x40>)
 8007ade:	4c0c      	ldr	r4, [pc, #48]	; (8007b10 <__libc_init_array+0x44>)
 8007ae0:	f000 fc5e 	bl	80083a0 <_init>
 8007ae4:	1b64      	subs	r4, r4, r5
 8007ae6:	10a4      	asrs	r4, r4, #2
 8007ae8:	2600      	movs	r6, #0
 8007aea:	42a6      	cmp	r6, r4
 8007aec:	d105      	bne.n	8007afa <__libc_init_array+0x2e>
 8007aee:	bd70      	pop	{r4, r5, r6, pc}
 8007af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af4:	4798      	blx	r3
 8007af6:	3601      	adds	r6, #1
 8007af8:	e7ee      	b.n	8007ad8 <__libc_init_array+0xc>
 8007afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007afe:	4798      	blx	r3
 8007b00:	3601      	adds	r6, #1
 8007b02:	e7f2      	b.n	8007aea <__libc_init_array+0x1e>
 8007b04:	080085a8 	.word	0x080085a8
 8007b08:	080085a8 	.word	0x080085a8
 8007b0c:	080085a8 	.word	0x080085a8
 8007b10:	080085ac 	.word	0x080085ac

08007b14 <malloc>:
 8007b14:	4b02      	ldr	r3, [pc, #8]	; (8007b20 <malloc+0xc>)
 8007b16:	4601      	mov	r1, r0
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	f000 b863 	b.w	8007be4 <_malloc_r>
 8007b1e:	bf00      	nop
 8007b20:	2000002c 	.word	0x2000002c

08007b24 <free>:
 8007b24:	4b02      	ldr	r3, [pc, #8]	; (8007b30 <free+0xc>)
 8007b26:	4601      	mov	r1, r0
 8007b28:	6818      	ldr	r0, [r3, #0]
 8007b2a:	f000 b80b 	b.w	8007b44 <_free_r>
 8007b2e:	bf00      	nop
 8007b30:	2000002c 	.word	0x2000002c

08007b34 <memset>:
 8007b34:	4402      	add	r2, r0
 8007b36:	4603      	mov	r3, r0
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d100      	bne.n	8007b3e <memset+0xa>
 8007b3c:	4770      	bx	lr
 8007b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b42:	e7f9      	b.n	8007b38 <memset+0x4>

08007b44 <_free_r>:
 8007b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b46:	2900      	cmp	r1, #0
 8007b48:	d048      	beq.n	8007bdc <_free_r+0x98>
 8007b4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b4e:	9001      	str	r0, [sp, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f1a1 0404 	sub.w	r4, r1, #4
 8007b56:	bfb8      	it	lt
 8007b58:	18e4      	addlt	r4, r4, r3
 8007b5a:	f000 f8cd 	bl	8007cf8 <__malloc_lock>
 8007b5e:	4a20      	ldr	r2, [pc, #128]	; (8007be0 <_free_r+0x9c>)
 8007b60:	9801      	ldr	r0, [sp, #4]
 8007b62:	6813      	ldr	r3, [r2, #0]
 8007b64:	4615      	mov	r5, r2
 8007b66:	b933      	cbnz	r3, 8007b76 <_free_r+0x32>
 8007b68:	6063      	str	r3, [r4, #4]
 8007b6a:	6014      	str	r4, [r2, #0]
 8007b6c:	b003      	add	sp, #12
 8007b6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b72:	f000 b8c7 	b.w	8007d04 <__malloc_unlock>
 8007b76:	42a3      	cmp	r3, r4
 8007b78:	d90b      	bls.n	8007b92 <_free_r+0x4e>
 8007b7a:	6821      	ldr	r1, [r4, #0]
 8007b7c:	1862      	adds	r2, r4, r1
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	bf04      	itt	eq
 8007b82:	681a      	ldreq	r2, [r3, #0]
 8007b84:	685b      	ldreq	r3, [r3, #4]
 8007b86:	6063      	str	r3, [r4, #4]
 8007b88:	bf04      	itt	eq
 8007b8a:	1852      	addeq	r2, r2, r1
 8007b8c:	6022      	streq	r2, [r4, #0]
 8007b8e:	602c      	str	r4, [r5, #0]
 8007b90:	e7ec      	b.n	8007b6c <_free_r+0x28>
 8007b92:	461a      	mov	r2, r3
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	b10b      	cbz	r3, 8007b9c <_free_r+0x58>
 8007b98:	42a3      	cmp	r3, r4
 8007b9a:	d9fa      	bls.n	8007b92 <_free_r+0x4e>
 8007b9c:	6811      	ldr	r1, [r2, #0]
 8007b9e:	1855      	adds	r5, r2, r1
 8007ba0:	42a5      	cmp	r5, r4
 8007ba2:	d10b      	bne.n	8007bbc <_free_r+0x78>
 8007ba4:	6824      	ldr	r4, [r4, #0]
 8007ba6:	4421      	add	r1, r4
 8007ba8:	1854      	adds	r4, r2, r1
 8007baa:	42a3      	cmp	r3, r4
 8007bac:	6011      	str	r1, [r2, #0]
 8007bae:	d1dd      	bne.n	8007b6c <_free_r+0x28>
 8007bb0:	681c      	ldr	r4, [r3, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	6053      	str	r3, [r2, #4]
 8007bb6:	4421      	add	r1, r4
 8007bb8:	6011      	str	r1, [r2, #0]
 8007bba:	e7d7      	b.n	8007b6c <_free_r+0x28>
 8007bbc:	d902      	bls.n	8007bc4 <_free_r+0x80>
 8007bbe:	230c      	movs	r3, #12
 8007bc0:	6003      	str	r3, [r0, #0]
 8007bc2:	e7d3      	b.n	8007b6c <_free_r+0x28>
 8007bc4:	6825      	ldr	r5, [r4, #0]
 8007bc6:	1961      	adds	r1, r4, r5
 8007bc8:	428b      	cmp	r3, r1
 8007bca:	bf04      	itt	eq
 8007bcc:	6819      	ldreq	r1, [r3, #0]
 8007bce:	685b      	ldreq	r3, [r3, #4]
 8007bd0:	6063      	str	r3, [r4, #4]
 8007bd2:	bf04      	itt	eq
 8007bd4:	1949      	addeq	r1, r1, r5
 8007bd6:	6021      	streq	r1, [r4, #0]
 8007bd8:	6054      	str	r4, [r2, #4]
 8007bda:	e7c7      	b.n	8007b6c <_free_r+0x28>
 8007bdc:	b003      	add	sp, #12
 8007bde:	bd30      	pop	{r4, r5, pc}
 8007be0:	200000b4 	.word	0x200000b4

08007be4 <_malloc_r>:
 8007be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be6:	1ccd      	adds	r5, r1, #3
 8007be8:	f025 0503 	bic.w	r5, r5, #3
 8007bec:	3508      	adds	r5, #8
 8007bee:	2d0c      	cmp	r5, #12
 8007bf0:	bf38      	it	cc
 8007bf2:	250c      	movcc	r5, #12
 8007bf4:	2d00      	cmp	r5, #0
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	db01      	blt.n	8007bfe <_malloc_r+0x1a>
 8007bfa:	42a9      	cmp	r1, r5
 8007bfc:	d903      	bls.n	8007c06 <_malloc_r+0x22>
 8007bfe:	230c      	movs	r3, #12
 8007c00:	6033      	str	r3, [r6, #0]
 8007c02:	2000      	movs	r0, #0
 8007c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c06:	f000 f877 	bl	8007cf8 <__malloc_lock>
 8007c0a:	4921      	ldr	r1, [pc, #132]	; (8007c90 <_malloc_r+0xac>)
 8007c0c:	680a      	ldr	r2, [r1, #0]
 8007c0e:	4614      	mov	r4, r2
 8007c10:	b99c      	cbnz	r4, 8007c3a <_malloc_r+0x56>
 8007c12:	4f20      	ldr	r7, [pc, #128]	; (8007c94 <_malloc_r+0xb0>)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	b923      	cbnz	r3, 8007c22 <_malloc_r+0x3e>
 8007c18:	4621      	mov	r1, r4
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f000 f83c 	bl	8007c98 <_sbrk_r>
 8007c20:	6038      	str	r0, [r7, #0]
 8007c22:	4629      	mov	r1, r5
 8007c24:	4630      	mov	r0, r6
 8007c26:	f000 f837 	bl	8007c98 <_sbrk_r>
 8007c2a:	1c43      	adds	r3, r0, #1
 8007c2c:	d123      	bne.n	8007c76 <_malloc_r+0x92>
 8007c2e:	230c      	movs	r3, #12
 8007c30:	6033      	str	r3, [r6, #0]
 8007c32:	4630      	mov	r0, r6
 8007c34:	f000 f866 	bl	8007d04 <__malloc_unlock>
 8007c38:	e7e3      	b.n	8007c02 <_malloc_r+0x1e>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	1b5b      	subs	r3, r3, r5
 8007c3e:	d417      	bmi.n	8007c70 <_malloc_r+0x8c>
 8007c40:	2b0b      	cmp	r3, #11
 8007c42:	d903      	bls.n	8007c4c <_malloc_r+0x68>
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	441c      	add	r4, r3
 8007c48:	6025      	str	r5, [r4, #0]
 8007c4a:	e004      	b.n	8007c56 <_malloc_r+0x72>
 8007c4c:	6863      	ldr	r3, [r4, #4]
 8007c4e:	42a2      	cmp	r2, r4
 8007c50:	bf0c      	ite	eq
 8007c52:	600b      	streq	r3, [r1, #0]
 8007c54:	6053      	strne	r3, [r2, #4]
 8007c56:	4630      	mov	r0, r6
 8007c58:	f000 f854 	bl	8007d04 <__malloc_unlock>
 8007c5c:	f104 000b 	add.w	r0, r4, #11
 8007c60:	1d23      	adds	r3, r4, #4
 8007c62:	f020 0007 	bic.w	r0, r0, #7
 8007c66:	1ac2      	subs	r2, r0, r3
 8007c68:	d0cc      	beq.n	8007c04 <_malloc_r+0x20>
 8007c6a:	1a1b      	subs	r3, r3, r0
 8007c6c:	50a3      	str	r3, [r4, r2]
 8007c6e:	e7c9      	b.n	8007c04 <_malloc_r+0x20>
 8007c70:	4622      	mov	r2, r4
 8007c72:	6864      	ldr	r4, [r4, #4]
 8007c74:	e7cc      	b.n	8007c10 <_malloc_r+0x2c>
 8007c76:	1cc4      	adds	r4, r0, #3
 8007c78:	f024 0403 	bic.w	r4, r4, #3
 8007c7c:	42a0      	cmp	r0, r4
 8007c7e:	d0e3      	beq.n	8007c48 <_malloc_r+0x64>
 8007c80:	1a21      	subs	r1, r4, r0
 8007c82:	4630      	mov	r0, r6
 8007c84:	f000 f808 	bl	8007c98 <_sbrk_r>
 8007c88:	3001      	adds	r0, #1
 8007c8a:	d1dd      	bne.n	8007c48 <_malloc_r+0x64>
 8007c8c:	e7cf      	b.n	8007c2e <_malloc_r+0x4a>
 8007c8e:	bf00      	nop
 8007c90:	200000b4 	.word	0x200000b4
 8007c94:	200000b8 	.word	0x200000b8

08007c98 <_sbrk_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	4d06      	ldr	r5, [pc, #24]	; (8007cb4 <_sbrk_r+0x1c>)
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	4608      	mov	r0, r1
 8007ca2:	602b      	str	r3, [r5, #0]
 8007ca4:	f7f9 fb16 	bl	80012d4 <_sbrk>
 8007ca8:	1c43      	adds	r3, r0, #1
 8007caa:	d102      	bne.n	8007cb2 <_sbrk_r+0x1a>
 8007cac:	682b      	ldr	r3, [r5, #0]
 8007cae:	b103      	cbz	r3, 8007cb2 <_sbrk_r+0x1a>
 8007cb0:	6023      	str	r3, [r4, #0]
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	200009e8 	.word	0x200009e8

08007cb8 <_vsiprintf_r>:
 8007cb8:	b500      	push	{lr}
 8007cba:	b09b      	sub	sp, #108	; 0x6c
 8007cbc:	9100      	str	r1, [sp, #0]
 8007cbe:	9104      	str	r1, [sp, #16]
 8007cc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007cc4:	9105      	str	r1, [sp, #20]
 8007cc6:	9102      	str	r1, [sp, #8]
 8007cc8:	4905      	ldr	r1, [pc, #20]	; (8007ce0 <_vsiprintf_r+0x28>)
 8007cca:	9103      	str	r1, [sp, #12]
 8007ccc:	4669      	mov	r1, sp
 8007cce:	f000 f87b 	bl	8007dc8 <_svfiprintf_r>
 8007cd2:	9b00      	ldr	r3, [sp, #0]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	701a      	strb	r2, [r3, #0]
 8007cd8:	b01b      	add	sp, #108	; 0x6c
 8007cda:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cde:	bf00      	nop
 8007ce0:	ffff0208 	.word	0xffff0208

08007ce4 <vsiprintf>:
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	460a      	mov	r2, r1
 8007ce8:	4601      	mov	r1, r0
 8007cea:	4802      	ldr	r0, [pc, #8]	; (8007cf4 <vsiprintf+0x10>)
 8007cec:	6800      	ldr	r0, [r0, #0]
 8007cee:	f7ff bfe3 	b.w	8007cb8 <_vsiprintf_r>
 8007cf2:	bf00      	nop
 8007cf4:	2000002c 	.word	0x2000002c

08007cf8 <__malloc_lock>:
 8007cf8:	4801      	ldr	r0, [pc, #4]	; (8007d00 <__malloc_lock+0x8>)
 8007cfa:	f000 baf9 	b.w	80082f0 <__retarget_lock_acquire_recursive>
 8007cfe:	bf00      	nop
 8007d00:	200009f0 	.word	0x200009f0

08007d04 <__malloc_unlock>:
 8007d04:	4801      	ldr	r0, [pc, #4]	; (8007d0c <__malloc_unlock+0x8>)
 8007d06:	f000 baf4 	b.w	80082f2 <__retarget_lock_release_recursive>
 8007d0a:	bf00      	nop
 8007d0c:	200009f0 	.word	0x200009f0

08007d10 <__ssputs_r>:
 8007d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d14:	688e      	ldr	r6, [r1, #8]
 8007d16:	429e      	cmp	r6, r3
 8007d18:	4682      	mov	sl, r0
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	4690      	mov	r8, r2
 8007d1e:	461f      	mov	r7, r3
 8007d20:	d838      	bhi.n	8007d94 <__ssputs_r+0x84>
 8007d22:	898a      	ldrh	r2, [r1, #12]
 8007d24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d28:	d032      	beq.n	8007d90 <__ssputs_r+0x80>
 8007d2a:	6825      	ldr	r5, [r4, #0]
 8007d2c:	6909      	ldr	r1, [r1, #16]
 8007d2e:	eba5 0901 	sub.w	r9, r5, r1
 8007d32:	6965      	ldr	r5, [r4, #20]
 8007d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	444b      	add	r3, r9
 8007d40:	106d      	asrs	r5, r5, #1
 8007d42:	429d      	cmp	r5, r3
 8007d44:	bf38      	it	cc
 8007d46:	461d      	movcc	r5, r3
 8007d48:	0553      	lsls	r3, r2, #21
 8007d4a:	d531      	bpl.n	8007db0 <__ssputs_r+0xa0>
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	f7ff ff49 	bl	8007be4 <_malloc_r>
 8007d52:	4606      	mov	r6, r0
 8007d54:	b950      	cbnz	r0, 8007d6c <__ssputs_r+0x5c>
 8007d56:	230c      	movs	r3, #12
 8007d58:	f8ca 3000 	str.w	r3, [sl]
 8007d5c:	89a3      	ldrh	r3, [r4, #12]
 8007d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d62:	81a3      	strh	r3, [r4, #12]
 8007d64:	f04f 30ff 	mov.w	r0, #4294967295
 8007d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d6c:	6921      	ldr	r1, [r4, #16]
 8007d6e:	464a      	mov	r2, r9
 8007d70:	f000 fac0 	bl	80082f4 <memcpy>
 8007d74:	89a3      	ldrh	r3, [r4, #12]
 8007d76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d7e:	81a3      	strh	r3, [r4, #12]
 8007d80:	6126      	str	r6, [r4, #16]
 8007d82:	6165      	str	r5, [r4, #20]
 8007d84:	444e      	add	r6, r9
 8007d86:	eba5 0509 	sub.w	r5, r5, r9
 8007d8a:	6026      	str	r6, [r4, #0]
 8007d8c:	60a5      	str	r5, [r4, #8]
 8007d8e:	463e      	mov	r6, r7
 8007d90:	42be      	cmp	r6, r7
 8007d92:	d900      	bls.n	8007d96 <__ssputs_r+0x86>
 8007d94:	463e      	mov	r6, r7
 8007d96:	4632      	mov	r2, r6
 8007d98:	6820      	ldr	r0, [r4, #0]
 8007d9a:	4641      	mov	r1, r8
 8007d9c:	f000 fab8 	bl	8008310 <memmove>
 8007da0:	68a3      	ldr	r3, [r4, #8]
 8007da2:	6822      	ldr	r2, [r4, #0]
 8007da4:	1b9b      	subs	r3, r3, r6
 8007da6:	4432      	add	r2, r6
 8007da8:	60a3      	str	r3, [r4, #8]
 8007daa:	6022      	str	r2, [r4, #0]
 8007dac:	2000      	movs	r0, #0
 8007dae:	e7db      	b.n	8007d68 <__ssputs_r+0x58>
 8007db0:	462a      	mov	r2, r5
 8007db2:	f000 fac7 	bl	8008344 <_realloc_r>
 8007db6:	4606      	mov	r6, r0
 8007db8:	2800      	cmp	r0, #0
 8007dba:	d1e1      	bne.n	8007d80 <__ssputs_r+0x70>
 8007dbc:	6921      	ldr	r1, [r4, #16]
 8007dbe:	4650      	mov	r0, sl
 8007dc0:	f7ff fec0 	bl	8007b44 <_free_r>
 8007dc4:	e7c7      	b.n	8007d56 <__ssputs_r+0x46>
	...

08007dc8 <_svfiprintf_r>:
 8007dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	4698      	mov	r8, r3
 8007dce:	898b      	ldrh	r3, [r1, #12]
 8007dd0:	061b      	lsls	r3, r3, #24
 8007dd2:	b09d      	sub	sp, #116	; 0x74
 8007dd4:	4607      	mov	r7, r0
 8007dd6:	460d      	mov	r5, r1
 8007dd8:	4614      	mov	r4, r2
 8007dda:	d50e      	bpl.n	8007dfa <_svfiprintf_r+0x32>
 8007ddc:	690b      	ldr	r3, [r1, #16]
 8007dde:	b963      	cbnz	r3, 8007dfa <_svfiprintf_r+0x32>
 8007de0:	2140      	movs	r1, #64	; 0x40
 8007de2:	f7ff feff 	bl	8007be4 <_malloc_r>
 8007de6:	6028      	str	r0, [r5, #0]
 8007de8:	6128      	str	r0, [r5, #16]
 8007dea:	b920      	cbnz	r0, 8007df6 <_svfiprintf_r+0x2e>
 8007dec:	230c      	movs	r3, #12
 8007dee:	603b      	str	r3, [r7, #0]
 8007df0:	f04f 30ff 	mov.w	r0, #4294967295
 8007df4:	e0d1      	b.n	8007f9a <_svfiprintf_r+0x1d2>
 8007df6:	2340      	movs	r3, #64	; 0x40
 8007df8:	616b      	str	r3, [r5, #20]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8007dfe:	2320      	movs	r3, #32
 8007e00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e04:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e08:	2330      	movs	r3, #48	; 0x30
 8007e0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007fb4 <_svfiprintf_r+0x1ec>
 8007e0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e12:	f04f 0901 	mov.w	r9, #1
 8007e16:	4623      	mov	r3, r4
 8007e18:	469a      	mov	sl, r3
 8007e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e1e:	b10a      	cbz	r2, 8007e24 <_svfiprintf_r+0x5c>
 8007e20:	2a25      	cmp	r2, #37	; 0x25
 8007e22:	d1f9      	bne.n	8007e18 <_svfiprintf_r+0x50>
 8007e24:	ebba 0b04 	subs.w	fp, sl, r4
 8007e28:	d00b      	beq.n	8007e42 <_svfiprintf_r+0x7a>
 8007e2a:	465b      	mov	r3, fp
 8007e2c:	4622      	mov	r2, r4
 8007e2e:	4629      	mov	r1, r5
 8007e30:	4638      	mov	r0, r7
 8007e32:	f7ff ff6d 	bl	8007d10 <__ssputs_r>
 8007e36:	3001      	adds	r0, #1
 8007e38:	f000 80aa 	beq.w	8007f90 <_svfiprintf_r+0x1c8>
 8007e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e3e:	445a      	add	r2, fp
 8007e40:	9209      	str	r2, [sp, #36]	; 0x24
 8007e42:	f89a 3000 	ldrb.w	r3, [sl]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f000 80a2 	beq.w	8007f90 <_svfiprintf_r+0x1c8>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e56:	f10a 0a01 	add.w	sl, sl, #1
 8007e5a:	9304      	str	r3, [sp, #16]
 8007e5c:	9307      	str	r3, [sp, #28]
 8007e5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e62:	931a      	str	r3, [sp, #104]	; 0x68
 8007e64:	4654      	mov	r4, sl
 8007e66:	2205      	movs	r2, #5
 8007e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e6c:	4851      	ldr	r0, [pc, #324]	; (8007fb4 <_svfiprintf_r+0x1ec>)
 8007e6e:	f7f8 f9b7 	bl	80001e0 <memchr>
 8007e72:	9a04      	ldr	r2, [sp, #16]
 8007e74:	b9d8      	cbnz	r0, 8007eae <_svfiprintf_r+0xe6>
 8007e76:	06d0      	lsls	r0, r2, #27
 8007e78:	bf44      	itt	mi
 8007e7a:	2320      	movmi	r3, #32
 8007e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e80:	0711      	lsls	r1, r2, #28
 8007e82:	bf44      	itt	mi
 8007e84:	232b      	movmi	r3, #43	; 0x2b
 8007e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8007e90:	d015      	beq.n	8007ebe <_svfiprintf_r+0xf6>
 8007e92:	9a07      	ldr	r2, [sp, #28]
 8007e94:	4654      	mov	r4, sl
 8007e96:	2000      	movs	r0, #0
 8007e98:	f04f 0c0a 	mov.w	ip, #10
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ea2:	3b30      	subs	r3, #48	; 0x30
 8007ea4:	2b09      	cmp	r3, #9
 8007ea6:	d94e      	bls.n	8007f46 <_svfiprintf_r+0x17e>
 8007ea8:	b1b0      	cbz	r0, 8007ed8 <_svfiprintf_r+0x110>
 8007eaa:	9207      	str	r2, [sp, #28]
 8007eac:	e014      	b.n	8007ed8 <_svfiprintf_r+0x110>
 8007eae:	eba0 0308 	sub.w	r3, r0, r8
 8007eb2:	fa09 f303 	lsl.w	r3, r9, r3
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	9304      	str	r3, [sp, #16]
 8007eba:	46a2      	mov	sl, r4
 8007ebc:	e7d2      	b.n	8007e64 <_svfiprintf_r+0x9c>
 8007ebe:	9b03      	ldr	r3, [sp, #12]
 8007ec0:	1d19      	adds	r1, r3, #4
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	9103      	str	r1, [sp, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bfbb      	ittet	lt
 8007eca:	425b      	neglt	r3, r3
 8007ecc:	f042 0202 	orrlt.w	r2, r2, #2
 8007ed0:	9307      	strge	r3, [sp, #28]
 8007ed2:	9307      	strlt	r3, [sp, #28]
 8007ed4:	bfb8      	it	lt
 8007ed6:	9204      	strlt	r2, [sp, #16]
 8007ed8:	7823      	ldrb	r3, [r4, #0]
 8007eda:	2b2e      	cmp	r3, #46	; 0x2e
 8007edc:	d10c      	bne.n	8007ef8 <_svfiprintf_r+0x130>
 8007ede:	7863      	ldrb	r3, [r4, #1]
 8007ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ee2:	d135      	bne.n	8007f50 <_svfiprintf_r+0x188>
 8007ee4:	9b03      	ldr	r3, [sp, #12]
 8007ee6:	1d1a      	adds	r2, r3, #4
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	9203      	str	r2, [sp, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	bfb8      	it	lt
 8007ef0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ef4:	3402      	adds	r4, #2
 8007ef6:	9305      	str	r3, [sp, #20]
 8007ef8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007fc4 <_svfiprintf_r+0x1fc>
 8007efc:	7821      	ldrb	r1, [r4, #0]
 8007efe:	2203      	movs	r2, #3
 8007f00:	4650      	mov	r0, sl
 8007f02:	f7f8 f96d 	bl	80001e0 <memchr>
 8007f06:	b140      	cbz	r0, 8007f1a <_svfiprintf_r+0x152>
 8007f08:	2340      	movs	r3, #64	; 0x40
 8007f0a:	eba0 000a 	sub.w	r0, r0, sl
 8007f0e:	fa03 f000 	lsl.w	r0, r3, r0
 8007f12:	9b04      	ldr	r3, [sp, #16]
 8007f14:	4303      	orrs	r3, r0
 8007f16:	3401      	adds	r4, #1
 8007f18:	9304      	str	r3, [sp, #16]
 8007f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f1e:	4826      	ldr	r0, [pc, #152]	; (8007fb8 <_svfiprintf_r+0x1f0>)
 8007f20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f24:	2206      	movs	r2, #6
 8007f26:	f7f8 f95b 	bl	80001e0 <memchr>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d038      	beq.n	8007fa0 <_svfiprintf_r+0x1d8>
 8007f2e:	4b23      	ldr	r3, [pc, #140]	; (8007fbc <_svfiprintf_r+0x1f4>)
 8007f30:	bb1b      	cbnz	r3, 8007f7a <_svfiprintf_r+0x1b2>
 8007f32:	9b03      	ldr	r3, [sp, #12]
 8007f34:	3307      	adds	r3, #7
 8007f36:	f023 0307 	bic.w	r3, r3, #7
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	9303      	str	r3, [sp, #12]
 8007f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f40:	4433      	add	r3, r6
 8007f42:	9309      	str	r3, [sp, #36]	; 0x24
 8007f44:	e767      	b.n	8007e16 <_svfiprintf_r+0x4e>
 8007f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	e7a5      	b.n	8007e9c <_svfiprintf_r+0xd4>
 8007f50:	2300      	movs	r3, #0
 8007f52:	3401      	adds	r4, #1
 8007f54:	9305      	str	r3, [sp, #20]
 8007f56:	4619      	mov	r1, r3
 8007f58:	f04f 0c0a 	mov.w	ip, #10
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f62:	3a30      	subs	r2, #48	; 0x30
 8007f64:	2a09      	cmp	r2, #9
 8007f66:	d903      	bls.n	8007f70 <_svfiprintf_r+0x1a8>
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d0c5      	beq.n	8007ef8 <_svfiprintf_r+0x130>
 8007f6c:	9105      	str	r1, [sp, #20]
 8007f6e:	e7c3      	b.n	8007ef8 <_svfiprintf_r+0x130>
 8007f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f74:	4604      	mov	r4, r0
 8007f76:	2301      	movs	r3, #1
 8007f78:	e7f0      	b.n	8007f5c <_svfiprintf_r+0x194>
 8007f7a:	ab03      	add	r3, sp, #12
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	462a      	mov	r2, r5
 8007f80:	4b0f      	ldr	r3, [pc, #60]	; (8007fc0 <_svfiprintf_r+0x1f8>)
 8007f82:	a904      	add	r1, sp, #16
 8007f84:	4638      	mov	r0, r7
 8007f86:	f3af 8000 	nop.w
 8007f8a:	1c42      	adds	r2, r0, #1
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	d1d6      	bne.n	8007f3e <_svfiprintf_r+0x176>
 8007f90:	89ab      	ldrh	r3, [r5, #12]
 8007f92:	065b      	lsls	r3, r3, #25
 8007f94:	f53f af2c 	bmi.w	8007df0 <_svfiprintf_r+0x28>
 8007f98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f9a:	b01d      	add	sp, #116	; 0x74
 8007f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa0:	ab03      	add	r3, sp, #12
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	462a      	mov	r2, r5
 8007fa6:	4b06      	ldr	r3, [pc, #24]	; (8007fc0 <_svfiprintf_r+0x1f8>)
 8007fa8:	a904      	add	r1, sp, #16
 8007faa:	4638      	mov	r0, r7
 8007fac:	f000 f87a 	bl	80080a4 <_printf_i>
 8007fb0:	e7eb      	b.n	8007f8a <_svfiprintf_r+0x1c2>
 8007fb2:	bf00      	nop
 8007fb4:	0800856c 	.word	0x0800856c
 8007fb8:	08008576 	.word	0x08008576
 8007fbc:	00000000 	.word	0x00000000
 8007fc0:	08007d11 	.word	0x08007d11
 8007fc4:	08008572 	.word	0x08008572

08007fc8 <_printf_common>:
 8007fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fcc:	4616      	mov	r6, r2
 8007fce:	4699      	mov	r9, r3
 8007fd0:	688a      	ldr	r2, [r1, #8]
 8007fd2:	690b      	ldr	r3, [r1, #16]
 8007fd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	bfb8      	it	lt
 8007fdc:	4613      	movlt	r3, r2
 8007fde:	6033      	str	r3, [r6, #0]
 8007fe0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fe4:	4607      	mov	r7, r0
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	b10a      	cbz	r2, 8007fee <_printf_common+0x26>
 8007fea:	3301      	adds	r3, #1
 8007fec:	6033      	str	r3, [r6, #0]
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	0699      	lsls	r1, r3, #26
 8007ff2:	bf42      	ittt	mi
 8007ff4:	6833      	ldrmi	r3, [r6, #0]
 8007ff6:	3302      	addmi	r3, #2
 8007ff8:	6033      	strmi	r3, [r6, #0]
 8007ffa:	6825      	ldr	r5, [r4, #0]
 8007ffc:	f015 0506 	ands.w	r5, r5, #6
 8008000:	d106      	bne.n	8008010 <_printf_common+0x48>
 8008002:	f104 0a19 	add.w	sl, r4, #25
 8008006:	68e3      	ldr	r3, [r4, #12]
 8008008:	6832      	ldr	r2, [r6, #0]
 800800a:	1a9b      	subs	r3, r3, r2
 800800c:	42ab      	cmp	r3, r5
 800800e:	dc26      	bgt.n	800805e <_printf_common+0x96>
 8008010:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008014:	1e13      	subs	r3, r2, #0
 8008016:	6822      	ldr	r2, [r4, #0]
 8008018:	bf18      	it	ne
 800801a:	2301      	movne	r3, #1
 800801c:	0692      	lsls	r2, r2, #26
 800801e:	d42b      	bmi.n	8008078 <_printf_common+0xb0>
 8008020:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008024:	4649      	mov	r1, r9
 8008026:	4638      	mov	r0, r7
 8008028:	47c0      	blx	r8
 800802a:	3001      	adds	r0, #1
 800802c:	d01e      	beq.n	800806c <_printf_common+0xa4>
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	68e5      	ldr	r5, [r4, #12]
 8008032:	6832      	ldr	r2, [r6, #0]
 8008034:	f003 0306 	and.w	r3, r3, #6
 8008038:	2b04      	cmp	r3, #4
 800803a:	bf08      	it	eq
 800803c:	1aad      	subeq	r5, r5, r2
 800803e:	68a3      	ldr	r3, [r4, #8]
 8008040:	6922      	ldr	r2, [r4, #16]
 8008042:	bf0c      	ite	eq
 8008044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008048:	2500      	movne	r5, #0
 800804a:	4293      	cmp	r3, r2
 800804c:	bfc4      	itt	gt
 800804e:	1a9b      	subgt	r3, r3, r2
 8008050:	18ed      	addgt	r5, r5, r3
 8008052:	2600      	movs	r6, #0
 8008054:	341a      	adds	r4, #26
 8008056:	42b5      	cmp	r5, r6
 8008058:	d11a      	bne.n	8008090 <_printf_common+0xc8>
 800805a:	2000      	movs	r0, #0
 800805c:	e008      	b.n	8008070 <_printf_common+0xa8>
 800805e:	2301      	movs	r3, #1
 8008060:	4652      	mov	r2, sl
 8008062:	4649      	mov	r1, r9
 8008064:	4638      	mov	r0, r7
 8008066:	47c0      	blx	r8
 8008068:	3001      	adds	r0, #1
 800806a:	d103      	bne.n	8008074 <_printf_common+0xac>
 800806c:	f04f 30ff 	mov.w	r0, #4294967295
 8008070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008074:	3501      	adds	r5, #1
 8008076:	e7c6      	b.n	8008006 <_printf_common+0x3e>
 8008078:	18e1      	adds	r1, r4, r3
 800807a:	1c5a      	adds	r2, r3, #1
 800807c:	2030      	movs	r0, #48	; 0x30
 800807e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008082:	4422      	add	r2, r4
 8008084:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008088:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800808c:	3302      	adds	r3, #2
 800808e:	e7c7      	b.n	8008020 <_printf_common+0x58>
 8008090:	2301      	movs	r3, #1
 8008092:	4622      	mov	r2, r4
 8008094:	4649      	mov	r1, r9
 8008096:	4638      	mov	r0, r7
 8008098:	47c0      	blx	r8
 800809a:	3001      	adds	r0, #1
 800809c:	d0e6      	beq.n	800806c <_printf_common+0xa4>
 800809e:	3601      	adds	r6, #1
 80080a0:	e7d9      	b.n	8008056 <_printf_common+0x8e>
	...

080080a4 <_printf_i>:
 80080a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080a8:	460c      	mov	r4, r1
 80080aa:	4691      	mov	r9, r2
 80080ac:	7e27      	ldrb	r7, [r4, #24]
 80080ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80080b0:	2f78      	cmp	r7, #120	; 0x78
 80080b2:	4680      	mov	r8, r0
 80080b4:	469a      	mov	sl, r3
 80080b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080ba:	d807      	bhi.n	80080cc <_printf_i+0x28>
 80080bc:	2f62      	cmp	r7, #98	; 0x62
 80080be:	d80a      	bhi.n	80080d6 <_printf_i+0x32>
 80080c0:	2f00      	cmp	r7, #0
 80080c2:	f000 80d8 	beq.w	8008276 <_printf_i+0x1d2>
 80080c6:	2f58      	cmp	r7, #88	; 0x58
 80080c8:	f000 80a3 	beq.w	8008212 <_printf_i+0x16e>
 80080cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80080d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080d4:	e03a      	b.n	800814c <_printf_i+0xa8>
 80080d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080da:	2b15      	cmp	r3, #21
 80080dc:	d8f6      	bhi.n	80080cc <_printf_i+0x28>
 80080de:	a001      	add	r0, pc, #4	; (adr r0, 80080e4 <_printf_i+0x40>)
 80080e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80080e4:	0800813d 	.word	0x0800813d
 80080e8:	08008151 	.word	0x08008151
 80080ec:	080080cd 	.word	0x080080cd
 80080f0:	080080cd 	.word	0x080080cd
 80080f4:	080080cd 	.word	0x080080cd
 80080f8:	080080cd 	.word	0x080080cd
 80080fc:	08008151 	.word	0x08008151
 8008100:	080080cd 	.word	0x080080cd
 8008104:	080080cd 	.word	0x080080cd
 8008108:	080080cd 	.word	0x080080cd
 800810c:	080080cd 	.word	0x080080cd
 8008110:	0800825d 	.word	0x0800825d
 8008114:	08008181 	.word	0x08008181
 8008118:	0800823f 	.word	0x0800823f
 800811c:	080080cd 	.word	0x080080cd
 8008120:	080080cd 	.word	0x080080cd
 8008124:	0800827f 	.word	0x0800827f
 8008128:	080080cd 	.word	0x080080cd
 800812c:	08008181 	.word	0x08008181
 8008130:	080080cd 	.word	0x080080cd
 8008134:	080080cd 	.word	0x080080cd
 8008138:	08008247 	.word	0x08008247
 800813c:	680b      	ldr	r3, [r1, #0]
 800813e:	1d1a      	adds	r2, r3, #4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	600a      	str	r2, [r1, #0]
 8008144:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800814c:	2301      	movs	r3, #1
 800814e:	e0a3      	b.n	8008298 <_printf_i+0x1f4>
 8008150:	6825      	ldr	r5, [r4, #0]
 8008152:	6808      	ldr	r0, [r1, #0]
 8008154:	062e      	lsls	r6, r5, #24
 8008156:	f100 0304 	add.w	r3, r0, #4
 800815a:	d50a      	bpl.n	8008172 <_printf_i+0xce>
 800815c:	6805      	ldr	r5, [r0, #0]
 800815e:	600b      	str	r3, [r1, #0]
 8008160:	2d00      	cmp	r5, #0
 8008162:	da03      	bge.n	800816c <_printf_i+0xc8>
 8008164:	232d      	movs	r3, #45	; 0x2d
 8008166:	426d      	negs	r5, r5
 8008168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800816c:	485e      	ldr	r0, [pc, #376]	; (80082e8 <_printf_i+0x244>)
 800816e:	230a      	movs	r3, #10
 8008170:	e019      	b.n	80081a6 <_printf_i+0x102>
 8008172:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008176:	6805      	ldr	r5, [r0, #0]
 8008178:	600b      	str	r3, [r1, #0]
 800817a:	bf18      	it	ne
 800817c:	b22d      	sxthne	r5, r5
 800817e:	e7ef      	b.n	8008160 <_printf_i+0xbc>
 8008180:	680b      	ldr	r3, [r1, #0]
 8008182:	6825      	ldr	r5, [r4, #0]
 8008184:	1d18      	adds	r0, r3, #4
 8008186:	6008      	str	r0, [r1, #0]
 8008188:	0628      	lsls	r0, r5, #24
 800818a:	d501      	bpl.n	8008190 <_printf_i+0xec>
 800818c:	681d      	ldr	r5, [r3, #0]
 800818e:	e002      	b.n	8008196 <_printf_i+0xf2>
 8008190:	0669      	lsls	r1, r5, #25
 8008192:	d5fb      	bpl.n	800818c <_printf_i+0xe8>
 8008194:	881d      	ldrh	r5, [r3, #0]
 8008196:	4854      	ldr	r0, [pc, #336]	; (80082e8 <_printf_i+0x244>)
 8008198:	2f6f      	cmp	r7, #111	; 0x6f
 800819a:	bf0c      	ite	eq
 800819c:	2308      	moveq	r3, #8
 800819e:	230a      	movne	r3, #10
 80081a0:	2100      	movs	r1, #0
 80081a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081a6:	6866      	ldr	r6, [r4, #4]
 80081a8:	60a6      	str	r6, [r4, #8]
 80081aa:	2e00      	cmp	r6, #0
 80081ac:	bfa2      	ittt	ge
 80081ae:	6821      	ldrge	r1, [r4, #0]
 80081b0:	f021 0104 	bicge.w	r1, r1, #4
 80081b4:	6021      	strge	r1, [r4, #0]
 80081b6:	b90d      	cbnz	r5, 80081bc <_printf_i+0x118>
 80081b8:	2e00      	cmp	r6, #0
 80081ba:	d04d      	beq.n	8008258 <_printf_i+0x1b4>
 80081bc:	4616      	mov	r6, r2
 80081be:	fbb5 f1f3 	udiv	r1, r5, r3
 80081c2:	fb03 5711 	mls	r7, r3, r1, r5
 80081c6:	5dc7      	ldrb	r7, [r0, r7]
 80081c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081cc:	462f      	mov	r7, r5
 80081ce:	42bb      	cmp	r3, r7
 80081d0:	460d      	mov	r5, r1
 80081d2:	d9f4      	bls.n	80081be <_printf_i+0x11a>
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	d10b      	bne.n	80081f0 <_printf_i+0x14c>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	07df      	lsls	r7, r3, #31
 80081dc:	d508      	bpl.n	80081f0 <_printf_i+0x14c>
 80081de:	6923      	ldr	r3, [r4, #16]
 80081e0:	6861      	ldr	r1, [r4, #4]
 80081e2:	4299      	cmp	r1, r3
 80081e4:	bfde      	ittt	le
 80081e6:	2330      	movle	r3, #48	; 0x30
 80081e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081f0:	1b92      	subs	r2, r2, r6
 80081f2:	6122      	str	r2, [r4, #16]
 80081f4:	f8cd a000 	str.w	sl, [sp]
 80081f8:	464b      	mov	r3, r9
 80081fa:	aa03      	add	r2, sp, #12
 80081fc:	4621      	mov	r1, r4
 80081fe:	4640      	mov	r0, r8
 8008200:	f7ff fee2 	bl	8007fc8 <_printf_common>
 8008204:	3001      	adds	r0, #1
 8008206:	d14c      	bne.n	80082a2 <_printf_i+0x1fe>
 8008208:	f04f 30ff 	mov.w	r0, #4294967295
 800820c:	b004      	add	sp, #16
 800820e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008212:	4835      	ldr	r0, [pc, #212]	; (80082e8 <_printf_i+0x244>)
 8008214:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008218:	6823      	ldr	r3, [r4, #0]
 800821a:	680e      	ldr	r6, [r1, #0]
 800821c:	061f      	lsls	r7, r3, #24
 800821e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008222:	600e      	str	r6, [r1, #0]
 8008224:	d514      	bpl.n	8008250 <_printf_i+0x1ac>
 8008226:	07d9      	lsls	r1, r3, #31
 8008228:	bf44      	itt	mi
 800822a:	f043 0320 	orrmi.w	r3, r3, #32
 800822e:	6023      	strmi	r3, [r4, #0]
 8008230:	b91d      	cbnz	r5, 800823a <_printf_i+0x196>
 8008232:	6823      	ldr	r3, [r4, #0]
 8008234:	f023 0320 	bic.w	r3, r3, #32
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	2310      	movs	r3, #16
 800823c:	e7b0      	b.n	80081a0 <_printf_i+0xfc>
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	f043 0320 	orr.w	r3, r3, #32
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	2378      	movs	r3, #120	; 0x78
 8008248:	4828      	ldr	r0, [pc, #160]	; (80082ec <_printf_i+0x248>)
 800824a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800824e:	e7e3      	b.n	8008218 <_printf_i+0x174>
 8008250:	065e      	lsls	r6, r3, #25
 8008252:	bf48      	it	mi
 8008254:	b2ad      	uxthmi	r5, r5
 8008256:	e7e6      	b.n	8008226 <_printf_i+0x182>
 8008258:	4616      	mov	r6, r2
 800825a:	e7bb      	b.n	80081d4 <_printf_i+0x130>
 800825c:	680b      	ldr	r3, [r1, #0]
 800825e:	6826      	ldr	r6, [r4, #0]
 8008260:	6960      	ldr	r0, [r4, #20]
 8008262:	1d1d      	adds	r5, r3, #4
 8008264:	600d      	str	r5, [r1, #0]
 8008266:	0635      	lsls	r5, r6, #24
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	d501      	bpl.n	8008270 <_printf_i+0x1cc>
 800826c:	6018      	str	r0, [r3, #0]
 800826e:	e002      	b.n	8008276 <_printf_i+0x1d2>
 8008270:	0671      	lsls	r1, r6, #25
 8008272:	d5fb      	bpl.n	800826c <_printf_i+0x1c8>
 8008274:	8018      	strh	r0, [r3, #0]
 8008276:	2300      	movs	r3, #0
 8008278:	6123      	str	r3, [r4, #16]
 800827a:	4616      	mov	r6, r2
 800827c:	e7ba      	b.n	80081f4 <_printf_i+0x150>
 800827e:	680b      	ldr	r3, [r1, #0]
 8008280:	1d1a      	adds	r2, r3, #4
 8008282:	600a      	str	r2, [r1, #0]
 8008284:	681e      	ldr	r6, [r3, #0]
 8008286:	6862      	ldr	r2, [r4, #4]
 8008288:	2100      	movs	r1, #0
 800828a:	4630      	mov	r0, r6
 800828c:	f7f7 ffa8 	bl	80001e0 <memchr>
 8008290:	b108      	cbz	r0, 8008296 <_printf_i+0x1f2>
 8008292:	1b80      	subs	r0, r0, r6
 8008294:	6060      	str	r0, [r4, #4]
 8008296:	6863      	ldr	r3, [r4, #4]
 8008298:	6123      	str	r3, [r4, #16]
 800829a:	2300      	movs	r3, #0
 800829c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082a0:	e7a8      	b.n	80081f4 <_printf_i+0x150>
 80082a2:	6923      	ldr	r3, [r4, #16]
 80082a4:	4632      	mov	r2, r6
 80082a6:	4649      	mov	r1, r9
 80082a8:	4640      	mov	r0, r8
 80082aa:	47d0      	blx	sl
 80082ac:	3001      	adds	r0, #1
 80082ae:	d0ab      	beq.n	8008208 <_printf_i+0x164>
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	079b      	lsls	r3, r3, #30
 80082b4:	d413      	bmi.n	80082de <_printf_i+0x23a>
 80082b6:	68e0      	ldr	r0, [r4, #12]
 80082b8:	9b03      	ldr	r3, [sp, #12]
 80082ba:	4298      	cmp	r0, r3
 80082bc:	bfb8      	it	lt
 80082be:	4618      	movlt	r0, r3
 80082c0:	e7a4      	b.n	800820c <_printf_i+0x168>
 80082c2:	2301      	movs	r3, #1
 80082c4:	4632      	mov	r2, r6
 80082c6:	4649      	mov	r1, r9
 80082c8:	4640      	mov	r0, r8
 80082ca:	47d0      	blx	sl
 80082cc:	3001      	adds	r0, #1
 80082ce:	d09b      	beq.n	8008208 <_printf_i+0x164>
 80082d0:	3501      	adds	r5, #1
 80082d2:	68e3      	ldr	r3, [r4, #12]
 80082d4:	9903      	ldr	r1, [sp, #12]
 80082d6:	1a5b      	subs	r3, r3, r1
 80082d8:	42ab      	cmp	r3, r5
 80082da:	dcf2      	bgt.n	80082c2 <_printf_i+0x21e>
 80082dc:	e7eb      	b.n	80082b6 <_printf_i+0x212>
 80082de:	2500      	movs	r5, #0
 80082e0:	f104 0619 	add.w	r6, r4, #25
 80082e4:	e7f5      	b.n	80082d2 <_printf_i+0x22e>
 80082e6:	bf00      	nop
 80082e8:	0800857d 	.word	0x0800857d
 80082ec:	0800858e 	.word	0x0800858e

080082f0 <__retarget_lock_acquire_recursive>:
 80082f0:	4770      	bx	lr

080082f2 <__retarget_lock_release_recursive>:
 80082f2:	4770      	bx	lr

080082f4 <memcpy>:
 80082f4:	440a      	add	r2, r1
 80082f6:	4291      	cmp	r1, r2
 80082f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80082fc:	d100      	bne.n	8008300 <memcpy+0xc>
 80082fe:	4770      	bx	lr
 8008300:	b510      	push	{r4, lr}
 8008302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800830a:	4291      	cmp	r1, r2
 800830c:	d1f9      	bne.n	8008302 <memcpy+0xe>
 800830e:	bd10      	pop	{r4, pc}

08008310 <memmove>:
 8008310:	4288      	cmp	r0, r1
 8008312:	b510      	push	{r4, lr}
 8008314:	eb01 0402 	add.w	r4, r1, r2
 8008318:	d902      	bls.n	8008320 <memmove+0x10>
 800831a:	4284      	cmp	r4, r0
 800831c:	4623      	mov	r3, r4
 800831e:	d807      	bhi.n	8008330 <memmove+0x20>
 8008320:	1e43      	subs	r3, r0, #1
 8008322:	42a1      	cmp	r1, r4
 8008324:	d008      	beq.n	8008338 <memmove+0x28>
 8008326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800832a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800832e:	e7f8      	b.n	8008322 <memmove+0x12>
 8008330:	4402      	add	r2, r0
 8008332:	4601      	mov	r1, r0
 8008334:	428a      	cmp	r2, r1
 8008336:	d100      	bne.n	800833a <memmove+0x2a>
 8008338:	bd10      	pop	{r4, pc}
 800833a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800833e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008342:	e7f7      	b.n	8008334 <memmove+0x24>

08008344 <_realloc_r>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	4607      	mov	r7, r0
 8008348:	4614      	mov	r4, r2
 800834a:	460e      	mov	r6, r1
 800834c:	b921      	cbnz	r1, 8008358 <_realloc_r+0x14>
 800834e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008352:	4611      	mov	r1, r2
 8008354:	f7ff bc46 	b.w	8007be4 <_malloc_r>
 8008358:	b922      	cbnz	r2, 8008364 <_realloc_r+0x20>
 800835a:	f7ff fbf3 	bl	8007b44 <_free_r>
 800835e:	4625      	mov	r5, r4
 8008360:	4628      	mov	r0, r5
 8008362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008364:	f000 f814 	bl	8008390 <_malloc_usable_size_r>
 8008368:	42a0      	cmp	r0, r4
 800836a:	d20f      	bcs.n	800838c <_realloc_r+0x48>
 800836c:	4621      	mov	r1, r4
 800836e:	4638      	mov	r0, r7
 8008370:	f7ff fc38 	bl	8007be4 <_malloc_r>
 8008374:	4605      	mov	r5, r0
 8008376:	2800      	cmp	r0, #0
 8008378:	d0f2      	beq.n	8008360 <_realloc_r+0x1c>
 800837a:	4631      	mov	r1, r6
 800837c:	4622      	mov	r2, r4
 800837e:	f7ff ffb9 	bl	80082f4 <memcpy>
 8008382:	4631      	mov	r1, r6
 8008384:	4638      	mov	r0, r7
 8008386:	f7ff fbdd 	bl	8007b44 <_free_r>
 800838a:	e7e9      	b.n	8008360 <_realloc_r+0x1c>
 800838c:	4635      	mov	r5, r6
 800838e:	e7e7      	b.n	8008360 <_realloc_r+0x1c>

08008390 <_malloc_usable_size_r>:
 8008390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008394:	1f18      	subs	r0, r3, #4
 8008396:	2b00      	cmp	r3, #0
 8008398:	bfbc      	itt	lt
 800839a:	580b      	ldrlt	r3, [r1, r0]
 800839c:	18c0      	addlt	r0, r0, r3
 800839e:	4770      	bx	lr

080083a0 <_init>:
 80083a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a2:	bf00      	nop
 80083a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083a6:	bc08      	pop	{r3}
 80083a8:	469e      	mov	lr, r3
 80083aa:	4770      	bx	lr

080083ac <_fini>:
 80083ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ae:	bf00      	nop
 80083b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083b2:	bc08      	pop	{r3}
 80083b4:	469e      	mov	lr, r3
 80083b6:	4770      	bx	lr
