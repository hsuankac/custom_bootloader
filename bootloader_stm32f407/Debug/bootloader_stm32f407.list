
bootloader_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009154  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  080092e4  080092e4  000192e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098a0  080098a0  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  080098a0  080098a0  000198a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098a8  080098a8  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098a8  080098a8  000198a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098ac  080098ac  000198ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080098b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00000988  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a24  20000a24  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ff20  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000457f  00000000  00000000  0003ffec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  00044570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001430  00000000  00000000  00045b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025664  00000000  00000000  00046f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c74b  00000000  00000000  0006c5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cebe5  00000000  00000000  00088cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001578d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e3c  00000000  00000000  00157928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092cc 	.word	0x080092cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	080092cc 	.word	0x080092cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f001 fb3e 	bl	8001bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f8ec 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 fa50 	bl	8000a28 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000588:	f000 f966 	bl	8000858 <MX_I2C1_Init>
  MX_I2S3_Init();
 800058c:	f000 f992 	bl	80008b4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000590:	f000 f9c0 	bl	8000914 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000594:	f007 ff7a 	bl	800848c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000598:	f000 f9f2 	bl	8000980 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800059c:	f000 fa1a 	bl	80009d4 <MX_USART3_UART_Init>
  MX_CRC_Init();
 80005a0:	f000 f946 	bl	8000830 <MX_CRC_Init>

  /* Let's check whether button is pressed or not, if not pressed jump to user application */
  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 80005a4:	2101      	movs	r1, #1
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <main+0x58>)
 80005a8:	f002 fa26 	bl	80029f8 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d105      	bne.n	80005be <main+0x46>
  {
	  printmsg("BL_DEBUG_MSG:Button is pressed....going to BL mode\r\n");
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <main+0x5c>)
 80005b4:	f000 f8ac 	bl	8000710 <printmsg>
	  // we should continue in bootloader mode
	  bootloader_uart_read_data();
 80005b8:	f000 f810 	bl	80005dc <bootloader_uart_read_data>
 80005bc:	e004      	b.n	80005c8 <main+0x50>
  }
  else
  {
	  printmsg("BL_DEBUG_MSG:Button is not pressed....going to app mode\r\n");
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <main+0x60>)
 80005c0:	f000 f8a6 	bl	8000710 <printmsg>

	  // we should continue in app mode
	  bootloader_jump_to_app();
 80005c4:	f000 f87e 	bl	80006c4 <bootloader_jump_to_app>
 80005c8:	2300      	movs	r3, #0
  }
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40020000 	.word	0x40020000
 80005d4:	080092e4 	.word	0x080092e4
 80005d8:	0800931c 	.word	0x0800931c

080005dc <bootloader_uart_read_data>:

void bootloader_uart_read_data(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		memset(bl_rx_buffer, 0, 200);
 80005e6:	22c8      	movs	r2, #200	; 0xc8
 80005e8:	2100      	movs	r1, #0
 80005ea:	4832      	ldr	r0, [pc, #200]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 80005ec:	f008 fa38 	bl	8008a60 <memset>
		// Here we will read and decode the commands coming from host
		// first read only one byte from the host, which is the length field
		HAL_UART_Receive(C_UART, bl_rx_buffer, 1, HAL_MAX_DELAY);
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	2201      	movs	r2, #1
 80005f6:	492f      	ldr	r1, [pc, #188]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 80005f8:	482f      	ldr	r0, [pc, #188]	; (80006b8 <bootloader_uart_read_data+0xdc>)
 80005fa:	f005 fc83 	bl	8005f04 <HAL_UART_Receive>
		rcv_len = (uint8_t) bl_rx_buffer[0];
 80005fe:	4b2d      	ldr	r3, [pc, #180]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	b29a      	uxth	r2, r3
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	492b      	ldr	r1, [pc, #172]	; (80006bc <bootloader_uart_read_data+0xe0>)
 800060e:	482a      	ldr	r0, [pc, #168]	; (80006b8 <bootloader_uart_read_data+0xdc>)
 8000610:	f005 fc78 	bl	8005f04 <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	3b51      	subs	r3, #81	; 0x51
 800061a:	2b0b      	cmp	r3, #11
 800061c:	d845      	bhi.n	80006aa <bootloader_uart_read_data+0xce>
 800061e:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <bootloader_uart_read_data+0x48>)
 8000620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000624:	08000655 	.word	0x08000655
 8000628:	0800065d 	.word	0x0800065d
 800062c:	08000665 	.word	0x08000665
 8000630:	0800066d 	.word	0x0800066d
 8000634:	08000675 	.word	0x08000675
 8000638:	0800067d 	.word	0x0800067d
 800063c:	08000685 	.word	0x08000685
 8000640:	0800068d 	.word	0x0800068d
 8000644:	0800069b 	.word	0x0800069b
 8000648:	080006a3 	.word	0x080006a3
 800064c:	080006ab 	.word	0x080006ab
 8000650:	08000695 	.word	0x08000695
		{
			case BL_GET_VER:
				bootloader_handle_getver_cmd(bl_rx_buffer);
 8000654:	4817      	ldr	r0, [pc, #92]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 8000656:	f000 fb1f 	bl	8000c98 <bootloader_handle_getver_cmd>
				break;
 800065a:	e02a      	b.n	80006b2 <bootloader_uart_read_data+0xd6>
			case BL_GET_HELP:
				bootloader_handle_gethelp_cmd(bl_rx_buffer);
 800065c:	4815      	ldr	r0, [pc, #84]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 800065e:	f000 fae1 	bl	8000c24 <bootloader_handle_gethelp_cmd>
				break;
 8000662:	e026      	b.n	80006b2 <bootloader_uart_read_data+0xd6>
			case BL_GET_CID:
				bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000664:	4813      	ldr	r0, [pc, #76]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 8000666:	f000 fb5f 	bl	8000d28 <bootloader_handle_getcid_cmd>
				break;
 800066a:	e022      	b.n	80006b2 <bootloader_uart_read_data+0xd6>
			case BL_GET_RDP_STATUS:
				bootloader_handle_getrdp_cmd(bl_rx_buffer);
 800066c:	4811      	ldr	r0, [pc, #68]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 800066e:	f000 fba3 	bl	8000db8 <bootloader_handle_getrdp_cmd>
				break;
 8000672:	e01e      	b.n	80006b2 <bootloader_uart_read_data+0xd6>
			case BL_GO_TO_ADDR:
				bootloader_handle_go_cmd(bl_rx_buffer);
 8000674:	480f      	ldr	r0, [pc, #60]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 8000676:	f000 fbe9 	bl	8000e4c <bootloader_handle_go_cmd>
				break;
 800067a:	e01a      	b.n	80006b2 <bootloader_uart_read_data+0xd6>
			case BL_FLASH_ERASE:
				bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 800067c:	480d      	ldr	r0, [pc, #52]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 800067e:	f000 fc4b 	bl	8000f18 <bootloader_handle_flash_erase_cmd>
				break;
 8000682:	e016      	b.n	80006b2 <bootloader_uart_read_data+0xd6>
			case BL_MEM_WRITE:
				bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 8000686:	f000 fcb1 	bl	8000fec <bootloader_handle_mem_write_cmd>
				break;
 800068a:	e012      	b.n	80006b2 <bootloader_uart_read_data+0xd6>
			case BL_EN_RW_PROTECT:
				bootloader_handle_en_rw_protect(bl_rx_buffer);
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 800068e:	f000 fd29 	bl	80010e4 <bootloader_handle_en_rw_protect>
				break;
 8000692:	e00e      	b.n	80006b2 <bootloader_uart_read_data+0xd6>
			case BL_DIS_R_W_PROTECT:
                bootloader_handle_dis_rw_protect(bl_rx_buffer);
 8000694:	4807      	ldr	r0, [pc, #28]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 8000696:	f000 fd75 	bl	8001184 <bootloader_handle_dis_rw_protect>
			case BL_MEM_READ:
				bootloader_handle_mem_read(bl_rx_buffer);
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 800069c:	f000 fdbc 	bl	8001218 <bootloader_handle_mem_read>
				break;
 80006a0:	e007      	b.n	80006b2 <bootloader_uart_read_data+0xd6>
			case BL_READ_SECTOR_P_STATUS:
				bootloader_handle_read_sector_protection_status(bl_rx_buffer);
 80006a2:	4804      	ldr	r0, [pc, #16]	; (80006b4 <bootloader_uart_read_data+0xd8>)
 80006a4:	f000 fdc2 	bl	800122c <bootloader_handle_read_sector_protection_status>
				break;
 80006a8:	e003      	b.n	80006b2 <bootloader_uart_read_data+0xd6>
			default:
				printmsg("BL_DEBUG_MSG:Invalid command received from host \n");
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <bootloader_uart_read_data+0xe4>)
 80006ac:	f000 f830 	bl	8000710 <printmsg>
				break;
 80006b0:	bf00      	nop
		memset(bl_rx_buffer, 0, 200);
 80006b2:	e798      	b.n	80005e6 <bootloader_uart_read_data+0xa>
 80006b4:	2000024c 	.word	0x2000024c
 80006b8:	200001c0 	.word	0x200001c0
 80006bc:	2000024d 	.word	0x2000024d
 80006c0:	08009358 	.word	0x08009358

080006c4 <bootloader_jump_to_app>:
		}
	}
}

void bootloader_jump_to_app(void){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
	// just a function pointer to hold the address of the reset handler of the user app
	void (*app_reset_handler)(void);

	printmsg("BL_DEBUG_MSG:bootloader_jump_to_app\r\n");
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <bootloader_jump_to_app+0x3c>)
 80006cc:	f000 f820 	bl	8000710 <printmsg>

//	__disable_irq();
	// 1. configure the MSP by reading the value from the base address of the sector 2
	uint32_t msp_value = *(__IO uint32_t *) FLASH_SECTOR2_BASE_ADDRESS;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <bootloader_jump_to_app+0x40>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	f383 8808 	msr	MSP, r3
}
 80006e0:	bf00      	nop
	__set_MSP(msp_value);

	// SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS

	// 2. Now fetch the reset handler address of the user application from the location FLASH_SECTOR2_BASE_ADDRESS
	uint32_t resethandler_address = *(__IO uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <bootloader_jump_to_app+0x44>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	60bb      	str	r3, [r7, #8]

	app_reset_handler = (void (*) (void)) resethandler_address;
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	607b      	str	r3, [r7, #4]

	printmsg("BL_DEBUG_MSG:app reset handler address: %#x\r\n", app_reset_handler);
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	4807      	ldr	r0, [pc, #28]	; (800070c <bootloader_jump_to_app+0x48>)
 80006f0:	f000 f80e 	bl	8000710 <printmsg>

//	__enable_irq();
	// 3. Jump to reset handler of the application
	app_reset_handler();
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4798      	blx	r3
}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	0800938c 	.word	0x0800938c
 8000704:	08020000 	.word	0x08020000
 8000708:	08020004 	.word	0x08020004
 800070c:	080093b4 	.word	0x080093b4

08000710 <printmsg>:


/* prints formatted string to console over UART */
void printmsg(char *format, ...)
{
 8000710:	b40f      	push	{r0, r1, r2, r3}
 8000712:	b580      	push	{r7, lr}
 8000714:	b096      	sub	sp, #88	; 0x58
 8000716:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];
	/*Extract the argument list using VA pins */
	va_list args;
	va_start(args, format);
 8000718:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800071c:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000726:	4618      	mov	r0, r3
 8000728:	f008 fa72 	bl	8008c10 <vsiprintf>
	HAL_UART_Transmit(D_UART, (uint8_t *) str, strlen(str), HAL_MAX_DELAY);
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd4d 	bl	80001d0 <strlen>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	f107 0108 	add.w	r1, r7, #8
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <printmsg+0x48>)
 8000744:	f005 fb4c 	bl	8005de0 <HAL_UART_Transmit>
	va_end(args);
#endif
}
 8000748:	bf00      	nop
 800074a:	3758      	adds	r7, #88	; 0x58
 800074c:	46bd      	mov	sp, r7
 800074e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000752:	b004      	add	sp, #16
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	200000c8 	.word	0x200000c8

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b094      	sub	sp, #80	; 0x50
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	2230      	movs	r2, #48	; 0x30
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f008 f978 	bl	8008a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	4b28      	ldr	r3, [pc, #160]	; (8000828 <SystemClock_Config+0xcc>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	4a27      	ldr	r2, [pc, #156]	; (8000828 <SystemClock_Config+0xcc>)
 800078a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078e:	6413      	str	r3, [r2, #64]	; 0x40
 8000790:	4b25      	ldr	r3, [pc, #148]	; (8000828 <SystemClock_Config+0xcc>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <SystemClock_Config+0xd0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a21      	ldr	r2, [pc, #132]	; (800082c <SystemClock_Config+0xd0>)
 80007a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <SystemClock_Config+0xd0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007cc:	2308      	movs	r3, #8
 80007ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007da:	2307      	movs	r3, #7
 80007dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4618      	mov	r0, r3
 80007e4:	f004 fc72 	bl	80050cc <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007ee:	f000 ff5c 	bl	80016aa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2302      	movs	r3, #2
 80007f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000802:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2105      	movs	r1, #5
 8000810:	4618      	mov	r0, r3
 8000812:	f004 fed3 	bl	80055bc <HAL_RCC_ClockConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800081c:	f000 ff45 	bl	80016aa <Error_Handler>
  }
}
 8000820:	bf00      	nop
 8000822:	3750      	adds	r7, #80	; 0x50
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_CRC_Init+0x20>)
 8000836:	4a07      	ldr	r2, [pc, #28]	; (8000854 <MX_CRC_Init+0x24>)
 8000838:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_CRC_Init+0x20>)
 800083c:	f001 fb85 	bl	8001f4a <HAL_CRC_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000846:	f000 ff30 	bl	80016aa <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000160 	.word	0x20000160
 8000854:	40023000 	.word	0x40023000

08000858 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C1_Init+0x50>)
 800085e:	4a13      	ldr	r2, [pc, #76]	; (80008ac <MX_I2C1_Init+0x54>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000864:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <MX_I2C1_Init+0x58>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800087a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000896:	f003 fe35 	bl	8004504 <HAL_I2C_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a0:	f000 ff03 	bl	80016aa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000010c 	.word	0x2000010c
 80008ac:	40005400 	.word	0x40005400
 80008b0:	000186a0 	.word	0x000186a0

080008b4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_I2S3_Init+0x54>)
 80008ba:	4a14      	ldr	r2, [pc, #80]	; (800090c <MX_I2S3_Init+0x58>)
 80008bc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_I2S3_Init+0x54>)
 80008c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_I2S3_Init+0x54>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_I2S3_Init+0x54>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <MX_I2S3_Init+0x54>)
 80008d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_I2S3_Init+0x54>)
 80008dc:	4a0c      	ldr	r2, [pc, #48]	; (8000910 <MX_I2S3_Init+0x5c>)
 80008de:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_I2S3_Init+0x54>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_I2S3_Init+0x54>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_I2S3_Init+0x54>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_I2S3_Init+0x54>)
 80008f4:	f003 ff4a 	bl	800478c <HAL_I2S_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008fe:	f000 fed4 	bl	80016aa <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000204 	.word	0x20000204
 800090c:	40003c00 	.word	0x40003c00
 8000910:	00017700 	.word	0x00017700

08000914 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_SPI1_Init+0x64>)
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <MX_SPI1_Init+0x68>)
 800091c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_SPI1_Init+0x64>)
 8000920:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000924:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_SPI1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_SPI1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_SPI1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_SPI1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_SPI1_Init+0x64>)
 8000940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000944:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_SPI1_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_SPI1_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_SPI1_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_SPI1_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_SPI1_Init+0x64>)
 8000960:	220a      	movs	r2, #10
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_SPI1_Init+0x64>)
 8000966:	f005 f965 	bl	8005c34 <HAL_SPI_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000970:	f000 fe9b 	bl	80016aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000168 	.word	0x20000168
 800097c:	40013000 	.word	0x40013000

08000980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_USART2_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b8:	f005 f9c5 	bl	8005d46 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f000 fe72 	bl	80016aa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200001c0 	.word	0x200001c0
 80009d0:	40004400 	.word	0x40004400

080009d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART3_UART_Init+0x4c>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <MX_USART3_UART_Init+0x50>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_USART3_UART_Init+0x4c>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART3_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART3_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART3_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART3_UART_Init+0x4c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART3_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART3_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART3_UART_Init+0x4c>)
 8000a0c:	f005 f99b 	bl	8005d46 <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a16:	f000 fe48 	bl	80016aa <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200000c8 	.word	0x200000c8
 8000a24:	40004800 	.word	0x40004800

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	; 0x30
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
 8000a42:	4b72      	ldr	r3, [pc, #456]	; (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a71      	ldr	r2, [pc, #452]	; (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a48:	f043 0310 	orr.w	r3, r3, #16
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b6f      	ldr	r3, [pc, #444]	; (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0310 	and.w	r3, r3, #16
 8000a56:	61bb      	str	r3, [r7, #24]
 8000a58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	4b6b      	ldr	r3, [pc, #428]	; (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a6a      	ldr	r2, [pc, #424]	; (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b68      	ldr	r3, [pc, #416]	; (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b64      	ldr	r3, [pc, #400]	; (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a63      	ldr	r2, [pc, #396]	; (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b61      	ldr	r3, [pc, #388]	; (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b5d      	ldr	r3, [pc, #372]	; (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a5c      	ldr	r2, [pc, #368]	; (8000c0c <MX_GPIO_Init+0x1e4>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b5a      	ldr	r3, [pc, #360]	; (8000c0c <MX_GPIO_Init+0x1e4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b56      	ldr	r3, [pc, #344]	; (8000c0c <MX_GPIO_Init+0x1e4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a55      	ldr	r2, [pc, #340]	; (8000c0c <MX_GPIO_Init+0x1e4>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b53      	ldr	r3, [pc, #332]	; (8000c0c <MX_GPIO_Init+0x1e4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b4f      	ldr	r3, [pc, #316]	; (8000c0c <MX_GPIO_Init+0x1e4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a4e      	ldr	r2, [pc, #312]	; (8000c0c <MX_GPIO_Init+0x1e4>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b4c      	ldr	r3, [pc, #304]	; (8000c0c <MX_GPIO_Init+0x1e4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2108      	movs	r1, #8
 8000aea:	4849      	ldr	r0, [pc, #292]	; (8000c10 <MX_GPIO_Init+0x1e8>)
 8000aec:	f001 ff9c 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2101      	movs	r1, #1
 8000af4:	4847      	ldr	r0, [pc, #284]	; (8000c14 <MX_GPIO_Init+0x1ec>)
 8000af6:	f001 ff97 	bl	8002a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000afa:	2200      	movs	r2, #0
 8000afc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b00:	4845      	ldr	r0, [pc, #276]	; (8000c18 <MX_GPIO_Init+0x1f0>)
 8000b02:	f001 ff91 	bl	8002a28 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b06:	2308      	movs	r3, #8
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	483c      	ldr	r0, [pc, #240]	; (8000c10 <MX_GPIO_Init+0x1e8>)
 8000b1e:	f001 fdcf 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4836      	ldr	r0, [pc, #216]	; (8000c14 <MX_GPIO_Init+0x1ec>)
 8000b3a:	f001 fdc1 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b3e:	2308      	movs	r3, #8
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b4e:	2305      	movs	r3, #5
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	482e      	ldr	r0, [pc, #184]	; (8000c14 <MX_GPIO_Init+0x1ec>)
 8000b5a:	f001 fdb1 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b62:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	482a      	ldr	r0, [pc, #168]	; (8000c1c <MX_GPIO_Init+0x1f4>)
 8000b74:	f001 fda4 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4825      	ldr	r0, [pc, #148]	; (8000c20 <MX_GPIO_Init+0x1f8>)
 8000b8c:	f001 fd98 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ba2:	2305      	movs	r3, #5
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	481c      	ldr	r0, [pc, #112]	; (8000c20 <MX_GPIO_Init+0x1f8>)
 8000bae:	f001 fd87 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bb2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000bb6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4813      	ldr	r0, [pc, #76]	; (8000c18 <MX_GPIO_Init+0x1f0>)
 8000bcc:	f001 fd78 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bd0:	2320      	movs	r3, #32
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_GPIO_Init+0x1f0>)
 8000be4:	f001 fd6c 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_GPIO_Init+0x1e8>)
 8000bfe:	f001 fd5f 	bl	80026c0 <HAL_GPIO_Init>

}
 8000c02:	bf00      	nop
 8000c04:	3730      	adds	r7, #48	; 0x30
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40020800 	.word	0x40020800
 8000c18:	40020c00 	.word	0x40020c00
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	40020400 	.word	0x40020400

08000c24 <bootloader_handle_gethelp_cmd>:

/********* Implementation of Bootloader command handle functions *********************/
void bootloader_handle_gethelp_cmd(uint8_t *pBuffer)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	// 1. verify the checksum
	printmsg("BL_DEBUG_MSG: bootloader_handle_gethelp_cmd \r\n");
 8000c2c:	4816      	ldr	r0, [pc, #88]	; (8000c88 <bootloader_handle_gethelp_cmd+0x64>)
 8000c2e:	f7ff fd6f 	bl	8000710 <printmsg>

	// Total length of the command packet
	uint32_t command_packet_len = pBuffer[0] + 1;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	60fb      	str	r3, [r7, #12]

	// Extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t *) (pBuffer + command_packet_len - 4));
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3b04      	subs	r3, #4
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60bb      	str	r3, [r7, #8]

	if(!bootloader_verify_crc(&pBuffer[0], command_packet_len - 4, host_crc))
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	3b04      	subs	r3, #4
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 fb50 	bl	80012f4 <bootloader_verify_crc>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10d      	bne.n	8000c76 <bootloader_handle_gethelp_cmd+0x52>
	{
		printmsg("BL_DEBUG_MSG: checksum success !! \r\n");
 8000c5a:	480c      	ldr	r0, [pc, #48]	; (8000c8c <bootloader_handle_gethelp_cmd+0x68>)
 8000c5c:	f7ff fd58 	bl	8000710 <printmsg>
		// checksum is correct
		bootloader_send_ack(pBuffer[0], sizeof(supported_commands));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	210c      	movs	r1, #12
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 fb78 	bl	800135c <bootloader_send_ack>
		bootloader_uart_write_data(supported_commands, sizeof(supported_commands));
 8000c6c:	210c      	movs	r1, #12
 8000c6e:	4808      	ldr	r0, [pc, #32]	; (8000c90 <bootloader_handle_gethelp_cmd+0x6c>)
 8000c70:	f000 fb2c 	bl	80012cc <bootloader_uart_write_data>
	{
		printmsg("BL_DEBUG_MSG: checksum fail !! \r\n");
		// checksum is wrong send neck
		bootloader_send_nack();
	}
}
 8000c74:	e004      	b.n	8000c80 <bootloader_handle_gethelp_cmd+0x5c>
		printmsg("BL_DEBUG_MSG: checksum fail !! \r\n");
 8000c76:	4807      	ldr	r0, [pc, #28]	; (8000c94 <bootloader_handle_gethelp_cmd+0x70>)
 8000c78:	f7ff fd4a 	bl	8000710 <printmsg>
		bootloader_send_nack();
 8000c7c:	f000 fb88 	bl	8001390 <bootloader_send_nack>
}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	080093e4 	.word	0x080093e4
 8000c8c:	08009414 	.word	0x08009414
 8000c90:	20000000 	.word	0x20000000
 8000c94:	0800943c 	.word	0x0800943c

08000c98 <bootloader_handle_getver_cmd>:


void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	uint8_t bl_version;
	printmsg("BL_DEBUG_MSG: bootloader_handle_getver_cmd \r\n");
 8000ca0:	481d      	ldr	r0, [pc, #116]	; (8000d18 <bootloader_handle_getver_cmd+0x80>)
 8000ca2:	f7ff fd35 	bl	8000710 <printmsg>

	// Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]

	// Extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t *) (bl_rx_buffer + command_packet_len - 4));
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3b04      	subs	r3, #4
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	613b      	str	r3, [r7, #16]

	if(!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	3b04      	subs	r3, #4
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 fb16 	bl	80012f4 <bootloader_verify_crc>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d11a      	bne.n	8000d04 <bootloader_handle_getver_cmd+0x6c>
	{
		printmsg("BL_DEBUG_MSG:checksum success !! \r\n");
 8000cce:	4813      	ldr	r0, [pc, #76]	; (8000d1c <bootloader_handle_getver_cmd+0x84>)
 8000cd0:	f7ff fd1e 	bl	8000710 <printmsg>
		// checksum is correct
		bootloader_send_ack(bl_rx_buffer[0], 1);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 fb3e 	bl	800135c <bootloader_send_ack>
		bl_version = get_bootloader_version();
 8000ce0:	f000 faec 	bl	80012bc <get_bootloader_version>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG:BL_VER : %d %#x", bl_version, bl_version);
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	4619      	mov	r1, r3
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	480b      	ldr	r0, [pc, #44]	; (8000d20 <bootloader_handle_getver_cmd+0x88>)
 8000cf2:	f7ff fd0d 	bl	8000710 <printmsg>
		bootloader_uart_write_data(&bl_version, 1);
 8000cf6:	f107 030f 	add.w	r3, r7, #15
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fae5 	bl	80012cc <bootloader_uart_write_data>
	{
		printmsg("BL_DEBUG_MSG: checksum fail !! \r\n");
		// checksum is wrong send neck
		bootloader_send_nack();
	}
}
 8000d02:	e004      	b.n	8000d0e <bootloader_handle_getver_cmd+0x76>
		printmsg("BL_DEBUG_MSG: checksum fail !! \r\n");
 8000d04:	4807      	ldr	r0, [pc, #28]	; (8000d24 <bootloader_handle_getver_cmd+0x8c>)
 8000d06:	f7ff fd03 	bl	8000710 <printmsg>
		bootloader_send_nack();
 8000d0a:	f000 fb41 	bl	8001390 <bootloader_send_nack>
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	08009460 	.word	0x08009460
 8000d1c:	08009490 	.word	0x08009490
 8000d20:	080094b4 	.word	0x080094b4
 8000d24:	0800943c 	.word	0x0800943c

08000d28 <bootloader_handle_getcid_cmd>:


void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	uint16_t bl_cid_num;
	// 1. verify the checksum
	printmsg("BL_DEBUG_MSG: bootloader_handle_getcid_cmd \r\n");
 8000d30:	481d      	ldr	r0, [pc, #116]	; (8000da8 <bootloader_handle_getcid_cmd+0x80>)
 8000d32:	f7ff fced 	bl	8000710 <printmsg>

	// Total length of the command packet
	uint32_t command_packet_len = pBuffer[0] + 1;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	617b      	str	r3, [r7, #20]

	// Extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t *) (pBuffer + command_packet_len - 4));
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3b04      	subs	r3, #4
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	613b      	str	r3, [r7, #16]

	if(!bootloader_verify_crc(&pBuffer[0], command_packet_len - 4, host_crc))
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3b04      	subs	r3, #4
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4619      	mov	r1, r3
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 face 	bl	80012f4 <bootloader_verify_crc>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d11a      	bne.n	8000d94 <bootloader_handle_getcid_cmd+0x6c>
	{
		printmsg("BL_DEBUG_MSG: checksum success !! \r\n");
 8000d5e:	4813      	ldr	r0, [pc, #76]	; (8000dac <bootloader_handle_getcid_cmd+0x84>)
 8000d60:	f7ff fcd6 	bl	8000710 <printmsg>
		// checksum is correct
		bootloader_send_ack(pBuffer[0], 2);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2102      	movs	r1, #2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 faf6 	bl	800135c <bootloader_send_ack>
		bl_cid_num = get_mcu_chip_id();
 8000d70:	f000 fb20 	bl	80013b4 <get_mcu_chip_id>
 8000d74:	4603      	mov	r3, r0
 8000d76:	81fb      	strh	r3, [r7, #14]
		printmsg("BL_DEBUG_MSG: MCU id : %d %#x !! \r\n", bl_cid_num, bl_cid_num);
 8000d78:	89fb      	ldrh	r3, [r7, #14]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	89fb      	ldrh	r3, [r7, #14]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <bootloader_handle_getcid_cmd+0x88>)
 8000d82:	f7ff fcc5 	bl	8000710 <printmsg>
		bootloader_uart_write_data((uint8_t *) &bl_cid_num, 2);
 8000d86:	f107 030e 	add.w	r3, r7, #14
 8000d8a:	2102      	movs	r1, #2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fa9d 	bl	80012cc <bootloader_uart_write_data>
	{
		printmsg("BL_DEBUG_MSG: checksum fail !! \r\n");
		// checksum is wrong send neck
		bootloader_send_nack();
	}
}
 8000d92:	e004      	b.n	8000d9e <bootloader_handle_getcid_cmd+0x76>
		printmsg("BL_DEBUG_MSG: checksum fail !! \r\n");
 8000d94:	4807      	ldr	r0, [pc, #28]	; (8000db4 <bootloader_handle_getcid_cmd+0x8c>)
 8000d96:	f7ff fcbb 	bl	8000710 <printmsg>
		bootloader_send_nack();
 8000d9a:	f000 faf9 	bl	8001390 <bootloader_send_nack>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	080094d4 	.word	0x080094d4
 8000dac:	08009414 	.word	0x08009414
 8000db0:	08009504 	.word	0x08009504
 8000db4:	0800943c 	.word	0x0800943c

08000db8 <bootloader_handle_getrdp_cmd>:

void bootloader_handle_getrdp_cmd(uint8_t *pBuffer)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	uint8_t rdp_level = 0x00;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]
	// 1. verify the checksum
	printmsg("BL_DEBUG_MSG: bootloader_handle_getrdp_cmd \r\n");
 8000dc4:	481d      	ldr	r0, [pc, #116]	; (8000e3c <bootloader_handle_getrdp_cmd+0x84>)
 8000dc6:	f7ff fca3 	bl	8000710 <printmsg>

	// Total length of the command packet
	uint32_t command_packet_len = pBuffer[0] + 1;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]

	// Extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t *) (pBuffer + command_packet_len - 4));
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3b04      	subs	r3, #4
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	613b      	str	r3, [r7, #16]

	if(!bootloader_verify_crc(&pBuffer[0], command_packet_len - 4, host_crc))
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3b04      	subs	r3, #4
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4619      	mov	r1, r3
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f000 fa84 	bl	80012f4 <bootloader_verify_crc>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d11a      	bne.n	8000e28 <bootloader_handle_getrdp_cmd+0x70>
	{
		printmsg("BL_DEBUG_MSG: checksum success !! \r\n");
 8000df2:	4813      	ldr	r0, [pc, #76]	; (8000e40 <bootloader_handle_getrdp_cmd+0x88>)
 8000df4:	f7ff fc8c 	bl	8000710 <printmsg>
		// checksum is correct
		bootloader_send_ack(pBuffer[0], 1);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 faac 	bl	800135c <bootloader_send_ack>
		rdp_level = get_flash_rdp_level();
 8000e04:	f000 fae8 	bl	80013d8 <get_flash_rdp_level>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG: RDP level : %d %#x !! \r\n", rdp_level, rdp_level);
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	461a      	mov	r2, r3
 8000e14:	480b      	ldr	r0, [pc, #44]	; (8000e44 <bootloader_handle_getrdp_cmd+0x8c>)
 8000e16:	f7ff fc7b 	bl	8000710 <printmsg>
		bootloader_uart_write_data(&rdp_level, 1);
 8000e1a:	f107 030f 	add.w	r3, r7, #15
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 fa53 	bl	80012cc <bootloader_uart_write_data>
		printmsg("BL_DEBUG_MSG: checksum fail !! \r\n");
		// checksum is wrong send neck
		bootloader_send_nack();
	}

}
 8000e26:	e004      	b.n	8000e32 <bootloader_handle_getrdp_cmd+0x7a>
		printmsg("BL_DEBUG_MSG: checksum fail !! \r\n");
 8000e28:	4807      	ldr	r0, [pc, #28]	; (8000e48 <bootloader_handle_getrdp_cmd+0x90>)
 8000e2a:	f7ff fc71 	bl	8000710 <printmsg>
		bootloader_send_nack();
 8000e2e:	f000 faaf 	bl	8001390 <bootloader_send_nack>
}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	08009528 	.word	0x08009528
 8000e40:	08009414 	.word	0x08009414
 8000e44:	08009558 	.word	0x08009558
 8000e48:	0800943c 	.word	0x0800943c

08000e4c <bootloader_handle_go_cmd>:

void bootloader_handle_go_cmd(uint8_t *pBuffer)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    uint32_t go_address=0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
    uint8_t addr_valid = ADDR_VALID;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]
    uint8_t addr_invalid = ADDR_INVALID;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73bb      	strb	r3, [r7, #14]

    printmsg("BL_DEBUG_MSG:bootloader_handle_go_cmd\n");
 8000e60:	4827      	ldr	r0, [pc, #156]	; (8000f00 <bootloader_handle_go_cmd+0xb4>)
 8000e62:	f7ff fc55 	bl	8000710 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = pBuffer[0]+1 ;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	61bb      	str	r3, [r7, #24]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (pBuffer+command_packet_len - 4) ) ;
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	3b04      	subs	r3, #4
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	617b      	str	r3, [r7, #20]

	if (!bootloader_verify_crc(&pBuffer[0],command_packet_len-4,host_crc))
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	3b04      	subs	r3, #4
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	4619      	mov	r1, r3
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 fa36 	bl	80012f4 <bootloader_verify_crc>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d12e      	bne.n	8000eec <bootloader_handle_go_cmd+0xa0>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000e8e:	481d      	ldr	r0, [pc, #116]	; (8000f04 <bootloader_handle_go_cmd+0xb8>)
 8000e90:	f7ff fc3e 	bl	8000710 <printmsg>

        bootloader_send_ack(pBuffer[0],1);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2101      	movs	r1, #1
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fa5e 	bl	800135c <bootloader_send_ack>

        //extract the go address
        go_address = *((uint32_t *)&pBuffer[2] );
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000ea6:	61fb      	str	r3, [r7, #28]
        printmsg("BL_DEBUG_MSG:GO addr: %#x\n",go_address);
 8000ea8:	69f9      	ldr	r1, [r7, #28]
 8000eaa:	4817      	ldr	r0, [pc, #92]	; (8000f08 <bootloader_handle_go_cmd+0xbc>)
 8000eac:	f7ff fc30 	bl	8000710 <printmsg>

        if( verify_address(go_address) == ADDR_VALID )
 8000eb0:	69f8      	ldr	r0, [r7, #28]
 8000eb2:	f000 faa5 	bl	8001400 <verify_address>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d10d      	bne.n	8000ed8 <bootloader_handle_go_cmd+0x8c>
        {
            //tell host that address is fine
            bootloader_uart_write_data(&addr_valid,1);
 8000ebc:	f107 030f 	add.w	r3, r7, #15
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fa02 	bl	80012cc <bootloader_uart_write_data>
            /* Not doing the below line will result in hardfault exception for ARM cortex M */
            //watch : https://www.youtube.com/watch?v=VX_12SjnNhY

//            go_address+=1; //make T bit =1

            void (*lets_jump)(void) = (void *)go_address;
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	613b      	str	r3, [r7, #16]

            printmsg("BL_DEBUG_MSG: jumping to go address! \n");
 8000ecc:	480f      	ldr	r0, [pc, #60]	; (8000f0c <bootloader_handle_go_cmd+0xc0>)
 8000ece:	f7ff fc1f 	bl	8000710 <printmsg>

            lets_jump();
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4798      	blx	r3
	}else
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}
}
 8000ed6:	e00e      	b.n	8000ef6 <bootloader_handle_go_cmd+0xaa>
            printmsg("BL_DEBUG_MSG:GO addr invalid ! \n");
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <bootloader_handle_go_cmd+0xc4>)
 8000eda:	f7ff fc19 	bl	8000710 <printmsg>
            bootloader_uart_write_data(&addr_invalid,1);
 8000ede:	f107 030e 	add.w	r3, r7, #14
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f9f1 	bl	80012cc <bootloader_uart_write_data>
}
 8000eea:	e004      	b.n	8000ef6 <bootloader_handle_go_cmd+0xaa>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <bootloader_handle_go_cmd+0xc8>)
 8000eee:	f7ff fc0f 	bl	8000710 <printmsg>
        bootloader_send_nack();
 8000ef2:	f000 fa4d 	bl	8001390 <bootloader_send_nack>
}
 8000ef6:	bf00      	nop
 8000ef8:	3720      	adds	r7, #32
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	08009580 	.word	0x08009580
 8000f04:	080095a8 	.word	0x080095a8
 8000f08:	080095cc 	.word	0x080095cc
 8000f0c:	080095e8 	.word	0x080095e8
 8000f10:	08009610 	.word	0x08009610
 8000f14:	08009634 	.word	0x08009634

08000f18 <bootloader_handle_flash_erase_cmd>:


void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
    uint8_t erase_status = 0x00;
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n");
 8000f24:	482b      	ldr	r0, [pc, #172]	; (8000fd4 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000f26:	f7ff fbf3 	bl	8000710 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = pBuffer[0]+1 ;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (pBuffer+command_packet_len - 4) ) ;
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3b04      	subs	r3, #4
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&pBuffer[0],command_packet_len-4,host_crc))
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3b04      	subs	r3, #4
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4619      	mov	r1, r3
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f9d4 	bl	80012f4 <bootloader_verify_crc>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d137      	bne.n	8000fc2 <bootloader_handle_flash_erase_cmd+0xaa>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000f52:	4821      	ldr	r0, [pc, #132]	; (8000fd8 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000f54:	f7ff fbdc 	bl	8000710 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f9fc 	bl	800135c <bootloader_send_ack>
        printmsg("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3302      	adds	r3, #2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3303      	adds	r3, #3
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	4819      	ldr	r0, [pc, #100]	; (8000fdc <bootloader_handle_flash_erase_cmd+0xc4>)
 8000f76:	f7ff fbcb 	bl	8000710 <printmsg>

        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f80:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000f82:	f001 fd51 	bl	8002a28 <HAL_GPIO_WritePin>
        erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3302      	adds	r3, #2
 8000f8a:	781a      	ldrb	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3303      	adds	r3, #3
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	4619      	mov	r1, r3
 8000f94:	4610      	mov	r0, r2
 8000f96:	f000 fa6f 	bl	8001478 <execute_flash_erase>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa4:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000fa6:	f001 fd3f 	bl	8002a28 <HAL_GPIO_WritePin>

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",erase_status);
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	4619      	mov	r1, r3
 8000fae:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <bootloader_handle_flash_erase_cmd+0xcc>)
 8000fb0:	f7ff fbae 	bl	8000710 <printmsg>

        bootloader_uart_write_data(&erase_status,1);
 8000fb4:	f107 030f 	add.w	r3, r7, #15
 8000fb8:	2101      	movs	r1, #1
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f986 	bl	80012cc <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8000fc0:	e004      	b.n	8000fcc <bootloader_handle_flash_erase_cmd+0xb4>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000fc2:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <bootloader_handle_flash_erase_cmd+0xd0>)
 8000fc4:	f7ff fba4 	bl	8000710 <printmsg>
        bootloader_send_nack();
 8000fc8:	f000 f9e2 	bl	8001390 <bootloader_send_nack>
}
 8000fcc:	bf00      	nop
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	08009654 	.word	0x08009654
 8000fd8:	080095a8 	.word	0x080095a8
 8000fdc:	08009684 	.word	0x08009684
 8000fe0:	40020c00 	.word	0x40020c00
 8000fe4:	080096b8 	.word	0x080096b8
 8000fe8:	08009634 	.word	0x08009634

08000fec <bootloader_handle_mem_write_cmd>:


/*Helper function to handle BL_MEM_WRITE command */
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	uint8_t write_status = 0x00;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]
	uint8_t payload_len = pBuffer[6];
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	799b      	ldrb	r3, [r3, #6]
 8000ffc:	77fb      	strb	r3, [r7, #31]

	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001004:	61bb      	str	r3, [r7, #24]

    printmsg("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n");
 8001006:	482f      	ldr	r0, [pc, #188]	; (80010c4 <bootloader_handle_mem_write_cmd+0xd8>)
 8001008:	f7ff fb82 	bl	8000710 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = pBuffer[0]+1 ;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (pBuffer+command_packet_len - 4) ) ;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	3b04      	subs	r3, #4
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	613b      	str	r3, [r7, #16]


	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3b04      	subs	r3, #4
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4619      	mov	r1, r3
 8001028:	4827      	ldr	r0, [pc, #156]	; (80010c8 <bootloader_handle_mem_write_cmd+0xdc>)
 800102a:	f000 f963 	bl	80012f4 <bootloader_verify_crc>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d13d      	bne.n	80010b0 <bootloader_handle_mem_write_cmd+0xc4>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8001034:	4825      	ldr	r0, [pc, #148]	; (80010cc <bootloader_handle_mem_write_cmd+0xe0>)
 8001036:	f7ff fb6b 	bl	8000710 <printmsg>

        bootloader_send_ack(pBuffer[0],1);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2101      	movs	r1, #1
 8001040:	4618      	mov	r0, r3
 8001042:	f000 f98b 	bl	800135c <bootloader_send_ack>

        printmsg("BL_DEBUG_MSG: mem write address : %#x\n",mem_address);
 8001046:	69b9      	ldr	r1, [r7, #24]
 8001048:	4821      	ldr	r0, [pc, #132]	; (80010d0 <bootloader_handle_mem_write_cmd+0xe4>)
 800104a:	f7ff fb61 	bl	8000710 <printmsg>

		if( verify_address(mem_address) == ADDR_VALID )
 800104e:	69b8      	ldr	r0, [r7, #24]
 8001050:	f000 f9d6 	bl	8001400 <verify_address>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d11e      	bne.n	8001098 <bootloader_handle_mem_write_cmd+0xac>
		{

            printmsg("BL_DEBUG_MSG: valid mem write address\n");
 800105a:	481e      	ldr	r0, [pc, #120]	; (80010d4 <bootloader_handle_mem_write_cmd+0xe8>)
 800105c:	f7ff fb58 	bl	8000710 <printmsg>

            //glow the led to indicate bootloader is currently writing to memory
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001066:	481c      	ldr	r0, [pc, #112]	; (80010d8 <bootloader_handle_mem_write_cmd+0xec>)
 8001068:	f001 fcde 	bl	8002a28 <HAL_GPIO_WritePin>

            //execute mem write
            write_status = execute_mem_write(&pBuffer[7], mem_address, payload_len);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3307      	adds	r3, #7
 8001070:	7ffa      	ldrb	r2, [r7, #31]
 8001072:	69b9      	ldr	r1, [r7, #24]
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fa46 	bl	8001506 <execute_mem_write>
 800107a:	4603      	mov	r3, r0
 800107c:	73fb      	strb	r3, [r7, #15]

            //turn off the led to indicate memory write is over
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001084:	4814      	ldr	r0, [pc, #80]	; (80010d8 <bootloader_handle_mem_write_cmd+0xec>)
 8001086:	f001 fccf 	bl	8002a28 <HAL_GPIO_WritePin>

            //inform host about the status
            bootloader_uart_write_data(&write_status,1);
 800108a:	f107 030f 	add.w	r3, r7, #15
 800108e:	2101      	movs	r1, #1
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f91b 	bl	80012cc <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 8001096:	e010      	b.n	80010ba <bootloader_handle_mem_write_cmd+0xce>
            printmsg("BL_DEBUG_MSG: invalid mem write address\n");
 8001098:	4810      	ldr	r0, [pc, #64]	; (80010dc <bootloader_handle_mem_write_cmd+0xf0>)
 800109a:	f7ff fb39 	bl	8000710 <printmsg>
            write_status = ADDR_INVALID;
 800109e:	2301      	movs	r3, #1
 80010a0:	73fb      	strb	r3, [r7, #15]
            bootloader_uart_write_data(&write_status,1);
 80010a2:	f107 030f 	add.w	r3, r7, #15
 80010a6:	2101      	movs	r1, #1
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f90f 	bl	80012cc <bootloader_uart_write_data>
}
 80010ae:	e004      	b.n	80010ba <bootloader_handle_mem_write_cmd+0xce>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80010b0:	480b      	ldr	r0, [pc, #44]	; (80010e0 <bootloader_handle_mem_write_cmd+0xf4>)
 80010b2:	f7ff fb2d 	bl	8000710 <printmsg>
        bootloader_send_nack();
 80010b6:	f000 f96b 	bl	8001390 <bootloader_send_nack>
}
 80010ba:	bf00      	nop
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	080096e0 	.word	0x080096e0
 80010c8:	2000024c 	.word	0x2000024c
 80010cc:	080095a8 	.word	0x080095a8
 80010d0:	08009710 	.word	0x08009710
 80010d4:	08009738 	.word	0x08009738
 80010d8:	40020c00 	.word	0x40020c00
 80010dc:	08009760 	.word	0x08009760
 80010e0:	08009634 	.word	0x08009634

080010e4 <bootloader_handle_en_rw_protect>:


/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_en_rw_protect(uint8_t *pBuffer)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_endis_rw_protect\n");
 80010f0:	4820      	ldr	r0, [pc, #128]	; (8001174 <bootloader_handle_en_rw_protect+0x90>)
 80010f2:	f7ff fb0d 	bl	8000710 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = pBuffer[0]+1 ;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (pBuffer+command_packet_len - 4) ) ;
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3b04      	subs	r3, #4
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&pBuffer[0],command_packet_len-4,host_crc))
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3b04      	subs	r3, #4
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4619      	mov	r1, r3
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f8ee 	bl	80012f4 <bootloader_verify_crc>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d120      	bne.n	8001160 <bootloader_handle_en_rw_protect+0x7c>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 800111e:	4816      	ldr	r0, [pc, #88]	; (8001178 <bootloader_handle_en_rw_protect+0x94>)
 8001120:	f7ff faf6 	bl	8000710 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2101      	movs	r1, #1
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f916 	bl	800135c <bootloader_send_ack>

        status = configure_flash_sector_rw_protection(pBuffer[2] , pBuffer[3], 0);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3302      	adds	r3, #2
 8001134:	7818      	ldrb	r0, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3303      	adds	r3, #3
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	4619      	mov	r1, r3
 8001140:	f000 fa0c 	bl	800155c <configure_flash_sector_rw_protection>
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	4619      	mov	r1, r3
 800114c:	480b      	ldr	r0, [pc, #44]	; (800117c <bootloader_handle_en_rw_protect+0x98>)
 800114e:	f7ff fadf 	bl	8000710 <printmsg>

        bootloader_uart_write_data(&status,1);
 8001152:	f107 030f 	add.w	r3, r7, #15
 8001156:	2101      	movs	r1, #1
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f8b7 	bl	80012cc <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 800115e:	e004      	b.n	800116a <bootloader_handle_en_rw_protect+0x86>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <bootloader_handle_en_rw_protect+0x9c>)
 8001162:	f7ff fad5 	bl	8000710 <printmsg>
        bootloader_send_nack();
 8001166:	f000 f913 	bl	8001390 <bootloader_send_nack>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	0800978c 	.word	0x0800978c
 8001178:	080095a8 	.word	0x080095a8
 800117c:	080096b8 	.word	0x080096b8
 8001180:	08009634 	.word	0x08009634

08001184 <bootloader_handle_dis_rw_protect>:

/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_dis_rw_protect(uint8_t *pBuffer)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_dis_rw_protect\n");
 8001190:	481d      	ldr	r0, [pc, #116]	; (8001208 <bootloader_handle_dis_rw_protect+0x84>)
 8001192:	f7ff fabd 	bl	8000710 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = pBuffer[0]+1 ;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (pBuffer+command_packet_len - 4) ) ;
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3b04      	subs	r3, #4
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&pBuffer[0],command_packet_len-4,host_crc))
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3b04      	subs	r3, #4
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4619      	mov	r1, r3
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f89e 	bl	80012f4 <bootloader_verify_crc>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d11b      	bne.n	80011f6 <bootloader_handle_dis_rw_protect+0x72>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 80011be:	4813      	ldr	r0, [pc, #76]	; (800120c <bootloader_handle_dis_rw_protect+0x88>)
 80011c0:	f7ff faa6 	bl	8000710 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2101      	movs	r1, #1
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f8c6 	bl	800135c <bootloader_send_ack>

        status = configure_flash_sector_rw_protection(0,0,1);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2100      	movs	r1, #0
 80011d4:	2000      	movs	r0, #0
 80011d6:	f000 f9c1 	bl	800155c <configure_flash_sector_rw_protection>
 80011da:	4603      	mov	r3, r0
 80011dc:	73fb      	strb	r3, [r7, #15]

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	4619      	mov	r1, r3
 80011e2:	480b      	ldr	r0, [pc, #44]	; (8001210 <bootloader_handle_dis_rw_protect+0x8c>)
 80011e4:	f7ff fa94 	bl	8000710 <printmsg>

        bootloader_uart_write_data(&status,1);
 80011e8:	f107 030f 	add.w	r3, r7, #15
 80011ec:	2101      	movs	r1, #1
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f86c 	bl	80012cc <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 80011f4:	e004      	b.n	8001200 <bootloader_handle_dis_rw_protect+0x7c>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80011f6:	4807      	ldr	r0, [pc, #28]	; (8001214 <bootloader_handle_dis_rw_protect+0x90>)
 80011f8:	f7ff fa8a 	bl	8000710 <printmsg>
        bootloader_send_nack();
 80011fc:	f000 f8c8 	bl	8001390 <bootloader_send_nack>
}
 8001200:	bf00      	nop
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	080097c0 	.word	0x080097c0
 800120c:	080095a8 	.word	0x080095a8
 8001210:	080096b8 	.word	0x080096b8
 8001214:	08009634 	.word	0x08009634

08001218 <bootloader_handle_mem_read>:


void bootloader_handle_mem_read(uint8_t *bl_rx_buffer)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <bootloader_handle_read_sector_protection_status>:


/*Helper function to handle _BL_READ_SECTOR_P_STATUS command */
void bootloader_handle_read_sector_protection_status(uint8_t *pBuffer)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	uint16_t status;
	printmsg("BL_DEBUG_MSG:bootloader_handle_read_sector_protection_status\n");
 8001234:	481c      	ldr	r0, [pc, #112]	; (80012a8 <bootloader_handle_read_sector_protection_status+0x7c>)
 8001236:	f7ff fa6b 	bl	8000710 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <bootloader_handle_read_sector_protection_status+0x80>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3b04      	subs	r3, #4
 8001246:	4a19      	ldr	r2, [pc, #100]	; (80012ac <bootloader_handle_read_sector_protection_status+0x80>)
 8001248:	4413      	add	r3, r2
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3b04      	subs	r3, #4
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4619      	mov	r1, r3
 8001256:	4815      	ldr	r0, [pc, #84]	; (80012ac <bootloader_handle_read_sector_protection_status+0x80>)
 8001258:	f000 f84c 	bl	80012f4 <bootloader_verify_crc>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d118      	bne.n	8001294 <bootloader_handle_read_sector_protection_status+0x68>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8001262:	4813      	ldr	r0, [pc, #76]	; (80012b0 <bootloader_handle_read_sector_protection_status+0x84>)
 8001264:	f7ff fa54 	bl	8000710 <printmsg>
        bootloader_send_ack(pBuffer[0],2);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2102      	movs	r1, #2
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f874 	bl	800135c <bootloader_send_ack>
        status=read_OB_rw_protection_status();
 8001274:	f000 fa08 	bl	8001688 <read_OB_rw_protection_status>
 8001278:	4603      	mov	r3, r0
 800127a:	81fb      	strh	r3, [r7, #14]
        printmsg("BL_DEBUG_MSG: nWRP status: %#x\n",status);
 800127c:	89fb      	ldrh	r3, [r7, #14]
 800127e:	4619      	mov	r1, r3
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <bootloader_handle_read_sector_protection_status+0x88>)
 8001282:	f7ff fa45 	bl	8000710 <printmsg>
        bootloader_uart_write_data((uint8_t*)&status,2);
 8001286:	f107 030e 	add.w	r3, r7, #14
 800128a:	2102      	movs	r1, #2
 800128c:	4618      	mov	r0, r3
 800128e:	f000 f81d 	bl	80012cc <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 8001292:	e004      	b.n	800129e <bootloader_handle_read_sector_protection_status+0x72>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8001294:	4808      	ldr	r0, [pc, #32]	; (80012b8 <bootloader_handle_read_sector_protection_status+0x8c>)
 8001296:	f7ff fa3b 	bl	8000710 <printmsg>
        bootloader_send_nack();
 800129a:	f000 f879 	bl	8001390 <bootloader_send_nack>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	080097f0 	.word	0x080097f0
 80012ac:	2000024c 	.word	0x2000024c
 80012b0:	080095a8 	.word	0x080095a8
 80012b4:	08009830 	.word	0x08009830
 80012b8:	08009634 	.word	0x08009634

080012bc <get_bootloader_version>:
{

}

uint8_t get_bootloader_version(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	return (uint8_t) BL_VERSION;
 80012c0:	2310      	movs	r3, #16
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *pBuffer, uint32_t len)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(C_UART, pBuffer, len, HAL_MAX_DELAY);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <bootloader_uart_write_data+0x24>)
 80012e2:	f004 fd7d 	bl	8005de0 <HAL_UART_Transmit>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200001c0 	.word	0x200001c0

080012f4 <bootloader_verify_crc>:

//This verifies the CRC of the given buffer in pData .
uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
    uint32_t uwCRCValue=0xff;
 8001300:	23ff      	movs	r3, #255	; 0xff
 8001302:	61fb      	str	r3, [r7, #28]

    for (uint32_t i=0 ; i < len ; i++)
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	e00f      	b.n	800132a <bootloader_verify_crc+0x36>
	{
        uint32_t i_data = pData[i];
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	617b      	str	r3, [r7, #20]
        uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2201      	movs	r2, #1
 800131a:	4619      	mov	r1, r3
 800131c:	480e      	ldr	r0, [pc, #56]	; (8001358 <bootloader_verify_crc+0x64>)
 800131e:	f000 fe30 	bl	8001f82 <HAL_CRC_Accumulate>
 8001322:	61f8      	str	r0, [r7, #28]
    for (uint32_t i=0 ; i < len ; i++)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	3301      	adds	r3, #1
 8001328:	61bb      	str	r3, [r7, #24]
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	429a      	cmp	r2, r3
 8001330:	d3eb      	bcc.n	800130a <bootloader_verify_crc+0x16>
	}

	 /* Reset CRC Calculation Unit */
    __HAL_CRC_DR_RESET(&hcrc);
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <bootloader_verify_crc+0x64>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <bootloader_verify_crc+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f042 0201 	orr.w	r2, r2, #1
 8001340:	609a      	str	r2, [r3, #8]

	if( uwCRCValue == crc_host)
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	429a      	cmp	r2, r3
 8001348:	d101      	bne.n	800134e <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <bootloader_verify_crc+0x5c>
	}

	return VERIFY_CRC_FAIL;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000160 	.word	0x20000160

0800135c <bootloader_send_ack>:

/* This function sends ACK if CRC matches along with "len to follow" */
void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	460a      	mov	r2, r1
 8001366:	71fb      	strb	r3, [r7, #7]
 8001368:	4613      	mov	r3, r2
 800136a:	71bb      	strb	r3, [r7, #6]
	// here we send 2 bytes...first byte is ack and second byte is len value
	uint8_t ack_buff[2];
	ack_buff[0] = BL_ACK;
 800136c:	23a5      	movs	r3, #165	; 0xa5
 800136e:	733b      	strb	r3, [r7, #12]
	ack_buff[1] = follow_len;
 8001370:	79bb      	ldrb	r3, [r7, #6]
 8001372:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART, ack_buff, 2, HAL_MAX_DELAY);
 8001374:	f107 010c 	add.w	r1, r7, #12
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
 800137c:	2202      	movs	r2, #2
 800137e:	4803      	ldr	r0, [pc, #12]	; (800138c <bootloader_send_ack+0x30>)
 8001380:	f004 fd2e 	bl	8005de0 <HAL_UART_Transmit>
}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200001c0 	.word	0x200001c0

08001390 <bootloader_send_nack>:

void bootloader_send_nack(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8001396:	237f      	movs	r3, #127	; 0x7f
 8001398:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART, &nack, 1, HAL_MAX_DELAY);
 800139a:	1df9      	adds	r1, r7, #7
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	2201      	movs	r2, #1
 80013a2:	4803      	ldr	r0, [pc, #12]	; (80013b0 <bootloader_send_nack+0x20>)
 80013a4:	f004 fd1c 	bl	8005de0 <HAL_UART_Transmit>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200001c0 	.word	0x200001c0

080013b4 <get_mcu_chip_id>:

uint16_t get_mcu_chip_id(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
	uint16_t cid;
	cid = (uint16_t) (DBGMCU -> IDCODE) & 0x0FFF;
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <get_mcu_chip_id+0x20>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013c4:	80fb      	strh	r3, [r7, #6]
	return cid;
 80013c6:	88fb      	ldrh	r3, [r7, #6]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e0042000 	.word	0xe0042000

080013d8 <get_flash_rdp_level>:

uint8_t get_flash_rdp_level(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
	uint8_t rdp_status = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	71fb      	strb	r3, [r7, #7]
	// use the HAL Flash API to get the rdp level
	FLASH_OBProgramInitTypeDef ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	rdp_status = (uint8_t) ob_handle.RDPLevel;
#else
	volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFC000;
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <get_flash_rdp_level+0x24>)
 80013e4:	603b      	str	r3, [r7, #0]
	rdp_status = (uint8_t)(*pOB_addr >> 8);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	71fb      	strb	r3, [r7, #7]
#endif
	return rdp_status;
 80013ee:	79fb      	ldrb	r3, [r7, #7]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	1fffc000 	.word	0x1fffc000

08001400 <verify_address>:

//verify the address sent by the host .
uint8_t verify_address(uint32_t go_address)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

//incomplete -poorly written .. optimize it
	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800140e:	d305      	bcc.n	800141c <verify_address+0x1c>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a15      	ldr	r2, [pc, #84]	; (8001468 <verify_address+0x68>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d801      	bhi.n	800141c <verify_address+0x1c>
	{
		return ADDR_VALID;
 8001418:	2300      	movs	r3, #0
 800141a:	e01e      	b.n	800145a <verify_address+0x5a>
	}
	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <verify_address+0x68>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d305      	bcc.n	8001430 <verify_address+0x30>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a11      	ldr	r2, [pc, #68]	; (800146c <verify_address+0x6c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d801      	bhi.n	8001430 <verify_address+0x30>
	{
		return ADDR_VALID;
 800142c:	2300      	movs	r3, #0
 800142e:	e014      	b.n	800145a <verify_address+0x5a>
	}
	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001436:	d305      	bcc.n	8001444 <verify_address+0x44>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800143e:	d201      	bcs.n	8001444 <verify_address+0x44>
	{
		return ADDR_VALID;
 8001440:	2300      	movs	r3, #0
 8001442:	e00a      	b.n	800145a <verify_address+0x5a>
	}
	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <verify_address+0x70>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d305      	bcc.n	8001458 <verify_address+0x58>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <verify_address+0x74>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d801      	bhi.n	8001458 <verify_address+0x58>
	{
		return ADDR_VALID;
 8001454:	2300      	movs	r3, #0
 8001456:	e000      	b.n	800145a <verify_address+0x5a>
	}
	else
		return ADDR_INVALID;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	2001c000 	.word	0x2001c000
 800146c:	20020000 	.word	0x20020000
 8001470:	40024000 	.word	0x40024000
 8001474:	40025000 	.word	0x40025000

08001478 <execute_flash_erase>:

uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	460a      	mov	r2, r1
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	4613      	mov	r3, r2
 8001486:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 12 )
 8001488:	79bb      	ldrb	r3, [r7, #6]
 800148a:	2b0c      	cmp	r3, #12
 800148c:	d901      	bls.n	8001492 <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 800148e:	2304      	movs	r3, #4
 8001490:	e035      	b.n	80014fe <execute_flash_erase+0x86>

	if( (sector_number == 0xff ) || (sector_number <= 11) )
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2bff      	cmp	r3, #255	; 0xff
 8001496:	d002      	beq.n	800149e <execute_flash_erase+0x26>
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	2b0b      	cmp	r3, #11
 800149c:	d82e      	bhi.n	80014fc <execute_flash_erase+0x84>
	{
		if(sector_number == (uint8_t) 0xff)
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2bff      	cmp	r3, #255	; 0xff
 80014a2:	d102      	bne.n	80014aa <execute_flash_erase+0x32>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80014a4:	2301      	movs	r3, #1
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	e012      	b.n	80014d0 <execute_flash_erase+0x58>
		}else
		{
		    /*Here we are just calculating how many sectors needs to erased */
			uint8_t remanining_sector = 12 - sector_number;
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	f1c3 030c 	rsb	r3, r3, #12
 80014b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           if( number_of_sector > remanining_sector)
 80014b4:	79ba      	ldrb	r2, [r7, #6]
 80014b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d902      	bls.n	80014c4 <execute_flash_erase+0x4c>
           {
           	number_of_sector = remanining_sector;
 80014be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014c2:	71bb      	strb	r3, [r7, #6]
           }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number; // this is the initial sector
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 80014cc:	79bb      	ldrb	r3, [r7, #6]
 80014ce:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 80014d4:	f000 fdd4 	bl	8002080 <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 80014d8:	2302      	movs	r3, #2
 80014da:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 80014dc:	f107 020c 	add.w	r2, r7, #12
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 ff58 	bl	800239c <HAL_FLASHEx_Erase>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 80014f2:	f000 fde7 	bl	80020c4 <HAL_FLASH_Lock>

		return status;
 80014f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014fa:	e000      	b.n	80014fe <execute_flash_erase+0x86>
	}


	return INVALID_SECTOR;
 80014fc:	2304      	movs	r3, #4
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3728      	adds	r7, #40	; 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <execute_mem_write>:

/*This function writes the contents of pBuffer to  "mem_address" byte by byte */
//Note1 : Currently this function supports writing to Flash only .
//Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
    uint8_t status=HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]

    //We have to unlock flash module to get control of registers
    HAL_FLASH_Unlock();
 8001516:	f000 fdb3 	bl	8002080 <HAL_FLASH_Unlock>

    for(uint32_t i = 0 ; i <len ; i++)
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	e011      	b.n	8001544 <execute_mem_write+0x3e>
    {
        //Here we program the flash byte by byte
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 8001520:	68ba      	ldr	r2, [r7, #8]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	18d1      	adds	r1, r2, r3
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4413      	add	r3, r2
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	2000      	movs	r0, #0
 8001536:	f000 fd4f 	bl	8001fd8 <HAL_FLASH_Program>
 800153a:	4603      	mov	r3, r0
 800153c:	75fb      	strb	r3, [r7, #23]
    for(uint32_t i = 0 ; i <len ; i++)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	3301      	adds	r3, #1
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	d3e9      	bcc.n	8001520 <execute_mem_write+0x1a>
    }

    HAL_FLASH_Lock();
 800154c:	f000 fdba 	bl	80020c4 <HAL_FLASH_Lock>

    return status;
 8001550:	7dfb      	ldrb	r3, [r7, #23]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <configure_flash_sector_rw_protection>:
2. Write the desired option value in the FLASH_OPTCR register.
3. Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
4. Wait for the BSY bit to be cleared.
*/
uint8_t configure_flash_sector_rw_protection(uint8_t sector_details, uint8_t protection_mode, uint8_t disable)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
 8001566:	460b      	mov	r3, r1
 8001568:	71bb      	strb	r3, [r7, #6]
 800156a:	4613      	mov	r3, r2
 800156c:	717b      	strb	r3, [r7, #5]
    //protection_mode =1 , means write protect of the user flash sectors
    //protection_mode =2, means read/write protect of the user flash sectors
    //According to RM of stm32f446xx TABLE 9, We have to modify the address 0x1FFF C008 bit 15(SPRMOD)

	 //Flash option control register (OPTCR)
    volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 800156e:	4b44      	ldr	r3, [pc, #272]	; (8001680 <configure_flash_sector_rw_protection+0x124>)
 8001570:	60fb      	str	r3, [r7, #12]

	  if(disable)
 8001572:	797b      	ldrb	r3, [r7, #5]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d025      	beq.n	80015c4 <configure_flash_sector_rw_protection+0x68>
		{
			//disable all r/w protection on sectors

			//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 8001578:	f000 fdb4 	bl	80020e4 <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 800157c:	bf00      	nop
 800157e:	4b41      	ldr	r3, [pc, #260]	; (8001684 <configure_flash_sector_rw_protection+0x128>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f9      	bne.n	800157e <configure_flash_sector_rw_protection+0x22>

			//clear the 31st bit (default state)
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR &= ~(1 << 31);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	601a      	str	r2, [r3, #0]

			//clear the protection : make all bits belonging to sectors as 1
			*pOPTCR |= (0xFF << 16);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f443 027f 	orr.w	r2, r3, #16711680	; 0xff0000
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f043 0202 	orr.w	r2, r3, #2
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80015ae:	bf00      	nop
 80015b0:	4b34      	ldr	r3, [pc, #208]	; (8001684 <configure_flash_sector_rw_protection+0x128>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f9      	bne.n	80015b0 <configure_flash_sector_rw_protection+0x54>

			HAL_FLASH_OB_Lock();
 80015bc:	f000 fdae 	bl	800211c <HAL_FLASH_OB_Lock>

			return 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e058      	b.n	8001676 <configure_flash_sector_rw_protection+0x11a>

		}

	   if(protection_mode == (uint8_t) 1)
 80015c4:	79bb      	ldrb	r3, [r7, #6]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d126      	bne.n	8001618 <configure_flash_sector_rw_protection+0xbc>
    {
           //we are putting write protection on the sectors encoded in sector_details argument

			//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 80015ca:	f000 fd8b 	bl	80020e4 <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80015ce:	bf00      	nop
 80015d0:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <configure_flash_sector_rw_protection+0x128>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f9      	bne.n	80015d0 <configure_flash_sector_rw_protection+0x74>

			//here we are setting just write protection for the sectors
			//clear the 31st bit
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR &= ~(1 << 31);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	601a      	str	r2, [r3, #0]

			//put write protection on sectors
			*pOPTCR &= ~ (sector_details << 16);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	79fa      	ldrb	r2, [r7, #7]
 80015ee:	0412      	lsls	r2, r2, #16
 80015f0:	43d2      	mvns	r2, r2
 80015f2:	401a      	ands	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f043 0202 	orr.w	r2, r3, #2
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001604:	bf00      	nop
 8001606:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <configure_flash_sector_rw_protection+0x128>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f9      	bne.n	8001606 <configure_flash_sector_rw_protection+0xaa>

			HAL_FLASH_OB_Lock();
 8001612:	f000 fd83 	bl	800211c <HAL_FLASH_OB_Lock>
 8001616:	e02d      	b.n	8001674 <configure_flash_sector_rw_protection+0x118>
		}

		else if (protection_mode == (uint8_t) 2)
 8001618:	79bb      	ldrb	r3, [r7, #6]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d12a      	bne.n	8001674 <configure_flash_sector_rw_protection+0x118>
    {
	  	//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 800161e:	f000 fd61 	bl	80020e4 <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001622:	bf00      	nop
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <configure_flash_sector_rw_protection+0x128>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f9      	bne.n	8001624 <configure_flash_sector_rw_protection+0xc8>

			//here wer are setting read and write protection for the sectors
			//set the 31st bit
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR |= (1 << 31);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	601a      	str	r2, [r3, #0]

			//put read and write protection on sectors
            *pOPTCR &= ~(0xff << 16);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	601a      	str	r2, [r3, #0]
			*pOPTCR |= (sector_details << 16);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	79fa      	ldrb	r2, [r7, #7]
 800164e:	0412      	lsls	r2, r2, #16
 8001650:	431a      	orrs	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f043 0202 	orr.w	r2, r3, #2
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001662:	bf00      	nop
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <configure_flash_sector_rw_protection+0x128>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f9      	bne.n	8001664 <configure_flash_sector_rw_protection+0x108>

			HAL_FLASH_OB_Lock();
 8001670:	f000 fd54 	bl	800211c <HAL_FLASH_OB_Lock>
    }

		return 0;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023c14 	.word	0x40023c14
 8001684:	40023c00 	.word	0x40023c00

08001688 <read_OB_rw_protection_status>:

uint16_t read_OB_rw_protection_status(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
    //This structure is given by ST Flash driver to hold the OB(Option Byte) contents .
	FLASH_OBProgramInitTypeDef OBInit;

	//First unlock the OB(Option Byte) memory access
	HAL_FLASH_OB_Unlock();
 800168e:	f000 fd29 	bl	80020e4 <HAL_FLASH_OB_Unlock>
	//get the OB configuration details
	HAL_FLASHEx_OBGetConfig(&OBInit);
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	4618      	mov	r0, r3
 8001696:	f000 fef1 	bl	800247c <HAL_FLASHEx_OBGetConfig>
	//Lock back .
	HAL_FLASH_Lock();
 800169a:	f000 fd13 	bl	80020c4 <HAL_FLASH_Lock>

	//We are just interested in r/w protection status of the sectors.
	return (uint16_t)OBInit.WRPSector;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	b29b      	uxth	r3, r3

}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016ae:	b672      	cpsid	i
}
 80016b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <Error_Handler+0x8>

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <HAL_MspInit+0x4c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <HAL_MspInit+0x4c>)
 80016c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HAL_MspInit+0x4c>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_MspInit+0x4c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a08      	ldr	r2, [pc, #32]	; (8001700 <HAL_MspInit+0x4c>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_MspInit+0x4c>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016f2:	2007      	movs	r0, #7
 80016f4:	f000 fbe8 	bl	8001ec8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800

08001704 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <HAL_CRC_MspInit+0x3c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d10d      	bne.n	8001732 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_CRC_MspInit+0x40>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a09      	ldr	r2, [pc, #36]	; (8001744 <HAL_CRC_MspInit+0x40>)
 8001720:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <HAL_CRC_MspInit+0x40>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40023000 	.word	0x40023000
 8001744:	40023800 	.word	0x40023800

08001748 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a19      	ldr	r2, [pc, #100]	; (80017cc <HAL_I2C_MspInit+0x84>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d12c      	bne.n	80017c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001786:	f44f 7310 	mov.w	r3, #576	; 0x240
 800178a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800178c:	2312      	movs	r3, #18
 800178e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001790:	2301      	movs	r3, #1
 8001792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001798:	2304      	movs	r3, #4
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	480c      	ldr	r0, [pc, #48]	; (80017d4 <HAL_I2C_MspInit+0x8c>)
 80017a4:	f000 ff8c 	bl	80026c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 80017b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017b6:	6413      	str	r3, [r2, #64]	; 0x40
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017c4:	bf00      	nop
 80017c6:	3728      	adds	r7, #40	; 0x28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40005400 	.word	0x40005400
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020400 	.word	0x40020400

080017d8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08e      	sub	sp, #56	; 0x38
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a31      	ldr	r2, [pc, #196]	; (80018c8 <HAL_I2S_MspInit+0xf0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d15a      	bne.n	80018be <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001808:	2301      	movs	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800180c:	23c0      	movs	r3, #192	; 0xc0
 800180e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001810:	2302      	movs	r3, #2
 8001812:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4618      	mov	r0, r3
 800181a:	f004 f8cb 	bl	80059b4 <HAL_RCCEx_PeriphCLKConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001824:	f7ff ff41 	bl	80016aa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_I2S_MspInit+0xf4>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	4a26      	ldr	r2, [pc, #152]	; (80018cc <HAL_I2S_MspInit+0xf4>)
 8001832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001836:	6413      	str	r3, [r2, #64]	; 0x40
 8001838:	4b24      	ldr	r3, [pc, #144]	; (80018cc <HAL_I2S_MspInit+0xf4>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	4b20      	ldr	r3, [pc, #128]	; (80018cc <HAL_I2S_MspInit+0xf4>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	4a1f      	ldr	r2, [pc, #124]	; (80018cc <HAL_I2S_MspInit+0xf4>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6313      	str	r3, [r2, #48]	; 0x30
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_I2S_MspInit+0xf4>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_I2S_MspInit+0xf4>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	4a18      	ldr	r2, [pc, #96]	; (80018cc <HAL_I2S_MspInit+0xf4>)
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	6313      	str	r3, [r2, #48]	; 0x30
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_I2S_MspInit+0xf4>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800187c:	2310      	movs	r3, #16
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800188c:	2306      	movs	r3, #6
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001894:	4619      	mov	r1, r3
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <HAL_I2S_MspInit+0xf8>)
 8001898:	f000 ff12 	bl	80026c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800189c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018ae:	2306      	movs	r3, #6
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b6:	4619      	mov	r1, r3
 80018b8:	4806      	ldr	r0, [pc, #24]	; (80018d4 <HAL_I2S_MspInit+0xfc>)
 80018ba:	f000 ff01 	bl	80026c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018be:	bf00      	nop
 80018c0:	3738      	adds	r7, #56	; 0x38
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40003c00 	.word	0x40003c00
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020000 	.word	0x40020000
 80018d4:	40020800 	.word	0x40020800

080018d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a19      	ldr	r2, [pc, #100]	; (800195c <HAL_SPI_MspInit+0x84>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d12b      	bne.n	8001952 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <HAL_SPI_MspInit+0x88>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a17      	ldr	r2, [pc, #92]	; (8001960 <HAL_SPI_MspInit+0x88>)
 8001904:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_SPI_MspInit+0x88>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_SPI_MspInit+0x88>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a10      	ldr	r2, [pc, #64]	; (8001960 <HAL_SPI_MspInit+0x88>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <HAL_SPI_MspInit+0x88>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001932:	23e0      	movs	r3, #224	; 0xe0
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001942:	2305      	movs	r3, #5
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	; (8001964 <HAL_SPI_MspInit+0x8c>)
 800194e:	f000 feb7 	bl	80026c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001952:	bf00      	nop
 8001954:	3728      	adds	r7, #40	; 0x28
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40013000 	.word	0x40013000
 8001960:	40023800 	.word	0x40023800
 8001964:	40020000 	.word	0x40020000

08001968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08c      	sub	sp, #48	; 0x30
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a42      	ldr	r2, [pc, #264]	; (8001a90 <HAL_UART_MspInit+0x128>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d12c      	bne.n	80019e4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	4b41      	ldr	r3, [pc, #260]	; (8001a94 <HAL_UART_MspInit+0x12c>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a40      	ldr	r2, [pc, #256]	; (8001a94 <HAL_UART_MspInit+0x12c>)
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b3e      	ldr	r3, [pc, #248]	; (8001a94 <HAL_UART_MspInit+0x12c>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	61bb      	str	r3, [r7, #24]
 80019a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	4b3a      	ldr	r3, [pc, #232]	; (8001a94 <HAL_UART_MspInit+0x12c>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a39      	ldr	r2, [pc, #228]	; (8001a94 <HAL_UART_MspInit+0x12c>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b37      	ldr	r3, [pc, #220]	; (8001a94 <HAL_UART_MspInit+0x12c>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019c2:	230c      	movs	r3, #12
 80019c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019d2:	2307      	movs	r3, #7
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	482e      	ldr	r0, [pc, #184]	; (8001a98 <HAL_UART_MspInit+0x130>)
 80019de:	f000 fe6f 	bl	80026c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019e2:	e050      	b.n	8001a86 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a2c      	ldr	r2, [pc, #176]	; (8001a9c <HAL_UART_MspInit+0x134>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d14b      	bne.n	8001a86 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <HAL_UART_MspInit+0x12c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a27      	ldr	r2, [pc, #156]	; (8001a94 <HAL_UART_MspInit+0x12c>)
 80019f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <HAL_UART_MspInit+0x12c>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <HAL_UART_MspInit+0x12c>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a20      	ldr	r2, [pc, #128]	; (8001a94 <HAL_UART_MspInit+0x12c>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <HAL_UART_MspInit+0x12c>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <HAL_UART_MspInit+0x12c>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a19      	ldr	r2, [pc, #100]	; (8001a94 <HAL_UART_MspInit+0x12c>)
 8001a30:	f043 0308 	orr.w	r3, r3, #8
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <HAL_UART_MspInit+0x12c>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a54:	2307      	movs	r3, #7
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4810      	ldr	r0, [pc, #64]	; (8001aa0 <HAL_UART_MspInit+0x138>)
 8001a60:	f000 fe2e 	bl	80026c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a76:	2307      	movs	r3, #7
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4808      	ldr	r0, [pc, #32]	; (8001aa4 <HAL_UART_MspInit+0x13c>)
 8001a82:	f000 fe1d 	bl	80026c0 <HAL_GPIO_Init>
}
 8001a86:	bf00      	nop
 8001a88:	3730      	adds	r7, #48	; 0x30
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40004400 	.word	0x40004400
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020000 	.word	0x40020000
 8001a9c:	40004800 	.word	0x40004800
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	40020c00 	.word	0x40020c00

08001aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <NMI_Handler+0x4>

08001aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <HardFault_Handler+0x4>

08001ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <MemManage_Handler+0x4>

08001aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <BusFault_Handler+0x4>

08001ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <UsageFault_Handler+0x4>

08001ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af4:	f000 f8d4 	bl	8001ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <OTG_FS_IRQHandler+0x10>)
 8001b02:	f001 fa15 	bl	8002f30 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000710 	.word	0x20000710

08001b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b18:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <_sbrk+0x5c>)
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <_sbrk+0x60>)
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b24:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d102      	bne.n	8001b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <_sbrk+0x64>)
 8001b2e:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <_sbrk+0x68>)
 8001b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d207      	bcs.n	8001b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b40:	f006 ff54 	bl	80089ec <__errno>
 8001b44:	4603      	mov	r3, r0
 8001b46:	220c      	movs	r2, #12
 8001b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	e009      	b.n	8001b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <_sbrk+0x64>)
 8001b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20020000 	.word	0x20020000
 8001b70:	00000400 	.word	0x00000400
 8001b74:	200000b8 	.word	0x200000b8
 8001b78:	20000a28 	.word	0x20000a28

08001b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <SystemInit+0x28>)
 8001b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b86:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <SystemInit+0x28>)
 8001b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <SystemInit+0x28>)
 8001b92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b96:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bac:	480d      	ldr	r0, [pc, #52]	; (8001be4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bae:	490e      	ldr	r1, [pc, #56]	; (8001be8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bc4:	4c0b      	ldr	r4, [pc, #44]	; (8001bf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bd2:	f7ff ffd3 	bl	8001b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd6:	f006 ff0f 	bl	80089f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bda:	f7fe fccd 	bl	8000578 <main>
  bx  lr    
 8001bde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001be0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001bec:	080098b0 	.word	0x080098b0
  ldr r2, =_sbss
 8001bf0:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001bf4:	20000a24 	.word	0x20000a24

08001bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf8:	e7fe      	b.n	8001bf8 <ADC_IRQHandler>
	...

08001bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c00:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0d      	ldr	r2, [pc, #52]	; (8001c3c <HAL_Init+0x40>)
 8001c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_Init+0x40>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <HAL_Init+0x40>)
 8001c12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_Init+0x40>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <HAL_Init+0x40>)
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f000 f94f 	bl	8001ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f000 f808 	bl	8001c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c30:	f7ff fd40 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023c00 	.word	0x40023c00

08001c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_InitTick+0x54>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x58>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f967 	bl	8001f32 <HAL_SYSTICK_Config>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00e      	b.n	8001c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b0f      	cmp	r3, #15
 8001c72:	d80a      	bhi.n	8001c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c74:	2200      	movs	r2, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f000 f92f 	bl	8001ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c80:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <HAL_InitTick+0x5c>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	2000000c 	.word	0x2000000c
 8001c98:	20000014 	.word	0x20000014
 8001c9c:	20000010 	.word	0x20000010

08001ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_IncTick+0x20>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_IncTick+0x24>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <HAL_IncTick+0x24>)
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000014 	.word	0x20000014
 8001cc4:	20000314 	.word	0x20000314

08001cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <HAL_GetTick+0x14>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000314 	.word	0x20000314

08001ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff ffee 	bl	8001cc8 <HAL_GetTick>
 8001cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d005      	beq.n	8001d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_Delay+0x44>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d06:	bf00      	nop
 8001d08:	f7ff ffde 	bl	8001cc8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d8f7      	bhi.n	8001d08 <HAL_Delay+0x28>
  {
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000014 	.word	0x20000014

08001d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5a:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	60d3      	str	r3, [r2, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <__NVIC_GetPriorityGrouping+0x18>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 0307 	and.w	r3, r3, #7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	db0b      	blt.n	8001db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	4907      	ldr	r1, [pc, #28]	; (8001dc4 <__NVIC_EnableIRQ+0x38>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	2001      	movs	r0, #1
 8001dae:	fa00 f202 	lsl.w	r2, r0, r2
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6039      	str	r1, [r7, #0]
 8001dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	db0a      	blt.n	8001df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	490c      	ldr	r1, [pc, #48]	; (8001e14 <__NVIC_SetPriority+0x4c>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	0112      	lsls	r2, r2, #4
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	440b      	add	r3, r1
 8001dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df0:	e00a      	b.n	8001e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4908      	ldr	r1, [pc, #32]	; (8001e18 <__NVIC_SetPriority+0x50>)
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	0112      	lsls	r2, r2, #4
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	440b      	add	r3, r1
 8001e06:	761a      	strb	r2, [r3, #24]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000e100 	.word	0xe000e100
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	; 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f1c3 0307 	rsb	r3, r3, #7
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	bf28      	it	cs
 8001e3a:	2304      	movcs	r3, #4
 8001e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3304      	adds	r3, #4
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d902      	bls.n	8001e4c <NVIC_EncodePriority+0x30>
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3b03      	subs	r3, #3
 8001e4a:	e000      	b.n	8001e4e <NVIC_EncodePriority+0x32>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	401a      	ands	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	43d9      	mvns	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	4313      	orrs	r3, r2
         );
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3724      	adds	r7, #36	; 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e94:	d301      	bcc.n	8001e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00f      	b.n	8001eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <SysTick_Config+0x40>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea2:	210f      	movs	r1, #15
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f7ff ff8e 	bl	8001dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <SysTick_Config+0x40>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <SysTick_Config+0x40>)
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	e000e010 	.word	0xe000e010

08001ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff29 	bl	8001d28 <__NVIC_SetPriorityGrouping>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef0:	f7ff ff3e 	bl	8001d70 <__NVIC_GetPriorityGrouping>
 8001ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	6978      	ldr	r0, [r7, #20]
 8001efc:	f7ff ff8e 	bl	8001e1c <NVIC_EncodePriority>
 8001f00:	4602      	mov	r2, r0
 8001f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff5d 	bl	8001dc8 <__NVIC_SetPriority>
}
 8001f0e:	bf00      	nop
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff31 	bl	8001d8c <__NVIC_EnableIRQ>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ffa2 	bl	8001e84 <SysTick_Config>
 8001f40:	4603      	mov	r3, r0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e00e      	b.n	8001f7a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	795b      	ldrb	r3, [r3, #5]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d105      	bne.n	8001f72 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff fbc9 	bl	8001704 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b087      	sub	sp, #28
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2202      	movs	r2, #2
 8001f96:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	e00a      	b.n	8001fb4 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	441a      	add	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d3f0      	bcc.n	8001f9e <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001fca:	693b      	ldr	r3, [r7, #16]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	371c      	adds	r7, #28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001fea:	4b23      	ldr	r3, [pc, #140]	; (8002078 <HAL_FLASH_Program+0xa0>)
 8001fec:	7e1b      	ldrb	r3, [r3, #24]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_FLASH_Program+0x1e>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e03b      	b.n	800206e <HAL_FLASH_Program+0x96>
 8001ff6:	4b20      	ldr	r3, [pc, #128]	; (8002078 <HAL_FLASH_Program+0xa0>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ffc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002000:	f000 f89c 	bl	800213c <FLASH_WaitForLastOperation>
 8002004:	4603      	mov	r3, r0
 8002006:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002008:	7dfb      	ldrb	r3, [r7, #23]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d12b      	bne.n	8002066 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002014:	783b      	ldrb	r3, [r7, #0]
 8002016:	4619      	mov	r1, r3
 8002018:	68b8      	ldr	r0, [r7, #8]
 800201a:	f000 f947 	bl	80022ac <FLASH_Program_Byte>
 800201e:	e016      	b.n	800204e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d105      	bne.n	8002032 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002026:	883b      	ldrh	r3, [r7, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	68b8      	ldr	r0, [r7, #8]
 800202c:	f000 f91a 	bl	8002264 <FLASH_Program_HalfWord>
 8002030:	e00d      	b.n	800204e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d105      	bne.n	8002044 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4619      	mov	r1, r3
 800203c:	68b8      	ldr	r0, [r7, #8]
 800203e:	f000 f8ef 	bl	8002220 <FLASH_Program_Word>
 8002042:	e004      	b.n	800204e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002044:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002048:	68b8      	ldr	r0, [r7, #8]
 800204a:	f000 f8b7 	bl	80021bc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800204e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002052:	f000 f873 	bl	800213c <FLASH_WaitForLastOperation>
 8002056:	4603      	mov	r3, r0
 8002058:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_FLASH_Program+0xa4>)
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	4a07      	ldr	r2, [pc, #28]	; (800207c <HAL_FLASH_Program+0xa4>)
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002066:	4b04      	ldr	r3, [pc, #16]	; (8002078 <HAL_FLASH_Program+0xa0>)
 8002068:	2200      	movs	r2, #0
 800206a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800206c:	7dfb      	ldrb	r3, [r7, #23]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000318 	.word	0x20000318
 800207c:	40023c00 	.word	0x40023c00

08002080 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_FLASH_Unlock+0x38>)
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	da0b      	bge.n	80020aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <HAL_FLASH_Unlock+0x38>)
 8002094:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_FLASH_Unlock+0x3c>)
 8002096:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <HAL_FLASH_Unlock+0x38>)
 800209a:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <HAL_FLASH_Unlock+0x40>)
 800209c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_FLASH_Unlock+0x38>)
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	da01      	bge.n	80020aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80020aa:	79fb      	ldrb	r3, [r7, #7]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	40023c00 	.word	0x40023c00
 80020bc:	45670123 	.word	0x45670123
 80020c0:	cdef89ab 	.word	0xcdef89ab

080020c4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_FLASH_Lock+0x1c>)
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_FLASH_Lock+0x1c>)
 80020ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020d2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	40023c00 	.word	0x40023c00

080020e4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 80020e8:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_FLASH_OB_Unlock+0x2c>)
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d007      	beq.n	8002104 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_FLASH_OB_Unlock+0x2c>)
 80020f6:	4a07      	ldr	r2, [pc, #28]	; (8002114 <HAL_FLASH_OB_Unlock+0x30>)
 80020f8:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_FLASH_OB_Unlock+0x2c>)
 80020fc:	4a06      	ldr	r2, [pc, #24]	; (8002118 <HAL_FLASH_OB_Unlock+0x34>)
 80020fe:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40023c00 	.word	0x40023c00
 8002114:	08192a3b 	.word	0x08192a3b
 8002118:	4c5d6e7f 	.word	0x4c5d6e7f

0800211c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_FLASH_OB_Lock+0x1c>)
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	4a04      	ldr	r2, [pc, #16]	; (8002138 <HAL_FLASH_OB_Lock+0x1c>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40023c00 	.word	0x40023c00

0800213c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <FLASH_WaitForLastOperation+0x78>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800214e:	f7ff fdbb 	bl	8001cc8 <HAL_GetTick>
 8002152:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002154:	e010      	b.n	8002178 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d00c      	beq.n	8002178 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d007      	beq.n	8002174 <FLASH_WaitForLastOperation+0x38>
 8002164:	f7ff fdb0 	bl	8001cc8 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	429a      	cmp	r2, r3
 8002172:	d201      	bcs.n	8002178 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e019      	b.n	80021ac <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002178:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <FLASH_WaitForLastOperation+0x7c>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1e8      	bne.n	8002156 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <FLASH_WaitForLastOperation+0x7c>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d002      	beq.n	8002196 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <FLASH_WaitForLastOperation+0x7c>)
 8002192:	2201      	movs	r2, #1
 8002194:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <FLASH_WaitForLastOperation+0x7c>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80021a2:	f000 f8a5 	bl	80022f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
  
}  
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000318 	.word	0x20000318
 80021b8:	40023c00 	.word	0x40023c00

080021bc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <FLASH_Program_DoubleWord+0x60>)
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	4a13      	ldr	r2, [pc, #76]	; (800221c <FLASH_Program_DoubleWord+0x60>)
 80021ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <FLASH_Program_DoubleWord+0x60>)
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	4a10      	ldr	r2, [pc, #64]	; (800221c <FLASH_Program_DoubleWord+0x60>)
 80021da:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80021de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80021e0:	4b0e      	ldr	r3, [pc, #56]	; (800221c <FLASH_Program_DoubleWord+0x60>)
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	4a0d      	ldr	r2, [pc, #52]	; (800221c <FLASH_Program_DoubleWord+0x60>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80021f2:	f3bf 8f6f 	isb	sy
}
 80021f6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80021f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	000a      	movs	r2, r1
 8002206:	2300      	movs	r3, #0
 8002208:	68f9      	ldr	r1, [r7, #12]
 800220a:	3104      	adds	r1, #4
 800220c:	4613      	mov	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40023c00 	.word	0x40023c00

08002220 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <FLASH_Program_Word+0x40>)
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	4a0c      	ldr	r2, [pc, #48]	; (8002260 <FLASH_Program_Word+0x40>)
 8002230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002234:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <FLASH_Program_Word+0x40>)
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	4a09      	ldr	r2, [pc, #36]	; (8002260 <FLASH_Program_Word+0x40>)
 800223c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002240:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <FLASH_Program_Word+0x40>)
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	4a06      	ldr	r2, [pc, #24]	; (8002260 <FLASH_Program_Word+0x40>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	601a      	str	r2, [r3, #0]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	40023c00 	.word	0x40023c00

08002264 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002270:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <FLASH_Program_HalfWord+0x44>)
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	4a0c      	ldr	r2, [pc, #48]	; (80022a8 <FLASH_Program_HalfWord+0x44>)
 8002276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800227a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800227c:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <FLASH_Program_HalfWord+0x44>)
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	4a09      	ldr	r2, [pc, #36]	; (80022a8 <FLASH_Program_HalfWord+0x44>)
 8002282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002286:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <FLASH_Program_HalfWord+0x44>)
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	4a06      	ldr	r2, [pc, #24]	; (80022a8 <FLASH_Program_HalfWord+0x44>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	801a      	strh	r2, [r3, #0]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023c00 	.word	0x40023c00

080022ac <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <FLASH_Program_Byte+0x40>)
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <FLASH_Program_Byte+0x40>)
 80022be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <FLASH_Program_Byte+0x40>)
 80022c6:	4a09      	ldr	r2, [pc, #36]	; (80022ec <FLASH_Program_Byte+0x40>)
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80022cc:	4b07      	ldr	r3, [pc, #28]	; (80022ec <FLASH_Program_Byte+0x40>)
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	4a06      	ldr	r2, [pc, #24]	; (80022ec <FLASH_Program_Byte+0x40>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	701a      	strb	r2, [r3, #0]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40023c00 	.word	0x40023c00

080022f0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80022f4:	4b27      	ldr	r3, [pc, #156]	; (8002394 <FLASH_SetErrorCode+0xa4>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002300:	4b25      	ldr	r3, [pc, #148]	; (8002398 <FLASH_SetErrorCode+0xa8>)
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	f043 0310 	orr.w	r3, r3, #16
 8002308:	4a23      	ldr	r2, [pc, #140]	; (8002398 <FLASH_SetErrorCode+0xa8>)
 800230a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800230c:	4b21      	ldr	r3, [pc, #132]	; (8002394 <FLASH_SetErrorCode+0xa4>)
 800230e:	2210      	movs	r2, #16
 8002310:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002312:	4b20      	ldr	r3, [pc, #128]	; (8002394 <FLASH_SetErrorCode+0xa4>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b00      	cmp	r3, #0
 800231c:	d008      	beq.n	8002330 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800231e:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <FLASH_SetErrorCode+0xa8>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f043 0308 	orr.w	r3, r3, #8
 8002326:	4a1c      	ldr	r2, [pc, #112]	; (8002398 <FLASH_SetErrorCode+0xa8>)
 8002328:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800232a:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <FLASH_SetErrorCode+0xa4>)
 800232c:	2220      	movs	r2, #32
 800232e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <FLASH_SetErrorCode+0xa4>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800233c:	4b16      	ldr	r3, [pc, #88]	; (8002398 <FLASH_SetErrorCode+0xa8>)
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	4a14      	ldr	r2, [pc, #80]	; (8002398 <FLASH_SetErrorCode+0xa8>)
 8002346:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <FLASH_SetErrorCode+0xa4>)
 800234a:	2240      	movs	r2, #64	; 0x40
 800234c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <FLASH_SetErrorCode+0xa4>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800235a:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <FLASH_SetErrorCode+0xa8>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f043 0302 	orr.w	r3, r3, #2
 8002362:	4a0d      	ldr	r2, [pc, #52]	; (8002398 <FLASH_SetErrorCode+0xa8>)
 8002364:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <FLASH_SetErrorCode+0xa4>)
 8002368:	2280      	movs	r2, #128	; 0x80
 800236a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <FLASH_SetErrorCode+0xa4>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <FLASH_SetErrorCode+0xa8>)
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	f043 0320 	orr.w	r3, r3, #32
 8002380:	4a05      	ldr	r2, [pc, #20]	; (8002398 <FLASH_SetErrorCode+0xa8>)
 8002382:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <FLASH_SetErrorCode+0xa4>)
 8002386:	2202      	movs	r2, #2
 8002388:	60da      	str	r2, [r3, #12]
  }
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	40023c00 	.word	0x40023c00
 8002398:	20000318 	.word	0x20000318

0800239c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80023ae:	4b31      	ldr	r3, [pc, #196]	; (8002474 <HAL_FLASHEx_Erase+0xd8>)
 80023b0:	7e1b      	ldrb	r3, [r3, #24]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_FLASHEx_Erase+0x1e>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e058      	b.n	800246c <HAL_FLASHEx_Erase+0xd0>
 80023ba:	4b2e      	ldr	r3, [pc, #184]	; (8002474 <HAL_FLASHEx_Erase+0xd8>)
 80023bc:	2201      	movs	r2, #1
 80023be:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023c4:	f7ff feba 	bl	800213c <FLASH_WaitForLastOperation>
 80023c8:	4603      	mov	r3, r0
 80023ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d148      	bne.n	8002464 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d115      	bne.n	800240e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4619      	mov	r1, r3
 80023ee:	4610      	mov	r0, r2
 80023f0:	f000 f868 	bl	80024c4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023f8:	f7ff fea0 	bl	800213c <FLASH_WaitForLastOperation>
 80023fc:	4603      	mov	r3, r0
 80023fe:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002400:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <HAL_FLASHEx_Erase+0xdc>)
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <HAL_FLASHEx_Erase+0xdc>)
 8002406:	f023 0304 	bic.w	r3, r3, #4
 800240a:	6113      	str	r3, [r2, #16]
 800240c:	e028      	b.n	8002460 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	e01c      	b.n	8002450 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	4619      	mov	r1, r3
 800241e:	68b8      	ldr	r0, [r7, #8]
 8002420:	f000 f874 	bl	800250c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002424:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002428:	f7ff fe88 	bl	800213c <FLASH_WaitForLastOperation>
 800242c:	4603      	mov	r3, r0
 800242e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <HAL_FLASHEx_Erase+0xdc>)
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	4a10      	ldr	r2, [pc, #64]	; (8002478 <HAL_FLASHEx_Erase+0xdc>)
 8002436:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800243a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	601a      	str	r2, [r3, #0]
          break;
 8002448:	e00a      	b.n	8002460 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	3301      	adds	r3, #1
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4413      	add	r3, r2
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	429a      	cmp	r2, r3
 800245e:	d3da      	bcc.n	8002416 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002460:	f000 f8e8 	bl	8002634 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_FLASHEx_Erase+0xd8>)
 8002466:	2200      	movs	r2, #0
 8002468:	761a      	strb	r2, [r3, #24]

  return status;
 800246a:	7bfb      	ldrb	r3, [r7, #15]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000318 	.word	0x20000318
 8002478:	40023c00 	.word	0x40023c00

0800247c <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	220f      	movs	r2, #15
 8002488:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800248a:	f000 f897 	bl	80025bc <FLASH_OB_GetWRP>
 800248e:	4603      	mov	r3, r0
 8002490:	461a      	mov	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8002496:	f000 f89d 	bl	80025d4 <FLASH_OB_GetRDP>
 800249a:	4603      	mov	r3, r0
 800249c:	461a      	mov	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 80024a2:	f000 f87b 	bl	800259c <FLASH_OB_GetUser>
 80024a6:	4603      	mov	r3, r0
 80024a8:	461a      	mov	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 80024ae:	f000 f8b1 	bl	8002614 <FLASH_OB_GetBOR>
 80024b2:	4603      	mov	r3, r0
 80024b4:	461a      	mov	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	615a      	str	r2, [r3, #20]
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	6039      	str	r1, [r7, #0]
 80024ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024d0:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <FLASH_MassErase+0x44>)
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	4a0c      	ldr	r2, [pc, #48]	; (8002508 <FLASH_MassErase+0x44>)
 80024d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80024dc:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <FLASH_MassErase+0x44>)
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	4a09      	ldr	r2, [pc, #36]	; (8002508 <FLASH_MassErase+0x44>)
 80024e2:	f043 0304 	orr.w	r3, r3, #4
 80024e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80024e8:	4b07      	ldr	r3, [pc, #28]	; (8002508 <FLASH_MassErase+0x44>)
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	4313      	orrs	r3, r2
 80024f2:	4a05      	ldr	r2, [pc, #20]	; (8002508 <FLASH_MassErase+0x44>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f8:	6113      	str	r3, [r2, #16]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40023c00 	.word	0x40023c00

0800250c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d102      	bne.n	8002528 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	e010      	b.n	800254a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d103      	bne.n	8002536 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800252e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	e009      	b.n	800254a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d103      	bne.n	8002544 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800253c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	e002      	b.n	800254a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002544:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002548:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <FLASH_Erase_Sector+0x8c>)
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	4a12      	ldr	r2, [pc, #72]	; (8002598 <FLASH_Erase_Sector+0x8c>)
 8002550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002554:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <FLASH_Erase_Sector+0x8c>)
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	490f      	ldr	r1, [pc, #60]	; (8002598 <FLASH_Erase_Sector+0x8c>)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <FLASH_Erase_Sector+0x8c>)
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	4a0c      	ldr	r2, [pc, #48]	; (8002598 <FLASH_Erase_Sector+0x8c>)
 8002568:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800256c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <FLASH_Erase_Sector+0x8c>)
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4313      	orrs	r3, r2
 8002578:	4a07      	ldr	r2, [pc, #28]	; (8002598 <FLASH_Erase_Sector+0x8c>)
 800257a:	f043 0302 	orr.w	r3, r3, #2
 800257e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <FLASH_Erase_Sector+0x8c>)
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <FLASH_Erase_Sector+0x8c>)
 8002586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258a:	6113      	str	r3, [r2, #16]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	40023c00 	.word	0x40023c00

0800259c <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <FLASH_OB_GetUser+0x1c>)
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f023 031f 	bic.w	r3, r3, #31
 80025aa:	b2db      	uxtb	r3, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40023c00 	.word	0x40023c00

080025bc <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <FLASH_OB_GetWRP+0x14>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40023c16 	.word	0x40023c16

080025d4 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 80025da:	23aa      	movs	r3, #170	; 0xaa
 80025dc:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <FLASH_OB_GetRDP+0x3c>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2bcc      	cmp	r3, #204	; 0xcc
 80025e6:	d102      	bne.n	80025ee <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 80025e8:	23cc      	movs	r3, #204	; 0xcc
 80025ea:	71fb      	strb	r3, [r7, #7]
 80025ec:	e009      	b.n	8002602 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <FLASH_OB_GetRDP+0x3c>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2baa      	cmp	r3, #170	; 0xaa
 80025f6:	d102      	bne.n	80025fe <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 80025f8:	23aa      	movs	r3, #170	; 0xaa
 80025fa:	71fb      	strb	r3, [r7, #7]
 80025fc:	e001      	b.n	8002602 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 80025fe:	2355      	movs	r3, #85	; 0x55
 8002600:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8002602:	79fb      	ldrb	r3, [r7, #7]
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	40023c15 	.word	0x40023c15

08002614 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <FLASH_OB_GetBOR+0x1c>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	b2db      	uxtb	r3, r3
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40023c14 	.word	0x40023c14

08002634 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002638:	4b20      	ldr	r3, [pc, #128]	; (80026bc <FLASH_FlushCaches+0x88>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002640:	2b00      	cmp	r3, #0
 8002642:	d017      	beq.n	8002674 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <FLASH_FlushCaches+0x88>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <FLASH_FlushCaches+0x88>)
 800264a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800264e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002650:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <FLASH_FlushCaches+0x88>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a19      	ldr	r2, [pc, #100]	; (80026bc <FLASH_FlushCaches+0x88>)
 8002656:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b17      	ldr	r3, [pc, #92]	; (80026bc <FLASH_FlushCaches+0x88>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a16      	ldr	r2, [pc, #88]	; (80026bc <FLASH_FlushCaches+0x88>)
 8002662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002666:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002668:	4b14      	ldr	r3, [pc, #80]	; (80026bc <FLASH_FlushCaches+0x88>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a13      	ldr	r2, [pc, #76]	; (80026bc <FLASH_FlushCaches+0x88>)
 800266e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002672:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002674:	4b11      	ldr	r3, [pc, #68]	; (80026bc <FLASH_FlushCaches+0x88>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	d017      	beq.n	80026b0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002680:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <FLASH_FlushCaches+0x88>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0d      	ldr	r2, [pc, #52]	; (80026bc <FLASH_FlushCaches+0x88>)
 8002686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800268a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <FLASH_FlushCaches+0x88>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <FLASH_FlushCaches+0x88>)
 8002692:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b08      	ldr	r3, [pc, #32]	; (80026bc <FLASH_FlushCaches+0x88>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a07      	ldr	r2, [pc, #28]	; (80026bc <FLASH_FlushCaches+0x88>)
 800269e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026a2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <FLASH_FlushCaches+0x88>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a04      	ldr	r2, [pc, #16]	; (80026bc <FLASH_FlushCaches+0x88>)
 80026aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ae:	6013      	str	r3, [r2, #0]
  }
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40023c00 	.word	0x40023c00

080026c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	; 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	e16b      	b.n	80029b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026dc:	2201      	movs	r2, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	f040 815a 	bne.w	80029ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d005      	beq.n	8002712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800270e:	2b02      	cmp	r3, #2
 8002710:	d130      	bne.n	8002774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	2203      	movs	r2, #3
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002748:	2201      	movs	r2, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 0201 	and.w	r2, r3, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b03      	cmp	r3, #3
 800277e:	d017      	beq.n	80027b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d123      	bne.n	8002804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	08da      	lsrs	r2, r3, #3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3208      	adds	r2, #8
 80027c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	220f      	movs	r2, #15
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	08da      	lsrs	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3208      	adds	r2, #8
 80027fe:	69b9      	ldr	r1, [r7, #24]
 8002800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2203      	movs	r2, #3
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0203 	and.w	r2, r3, #3
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80b4 	beq.w	80029ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	4b60      	ldr	r3, [pc, #384]	; (80029cc <HAL_GPIO_Init+0x30c>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	4a5f      	ldr	r2, [pc, #380]	; (80029cc <HAL_GPIO_Init+0x30c>)
 8002850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002854:	6453      	str	r3, [r2, #68]	; 0x44
 8002856:	4b5d      	ldr	r3, [pc, #372]	; (80029cc <HAL_GPIO_Init+0x30c>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002862:	4a5b      	ldr	r2, [pc, #364]	; (80029d0 <HAL_GPIO_Init+0x310>)
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	089b      	lsrs	r3, r3, #2
 8002868:	3302      	adds	r3, #2
 800286a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	220f      	movs	r2, #15
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a52      	ldr	r2, [pc, #328]	; (80029d4 <HAL_GPIO_Init+0x314>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d02b      	beq.n	80028e6 <HAL_GPIO_Init+0x226>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a51      	ldr	r2, [pc, #324]	; (80029d8 <HAL_GPIO_Init+0x318>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d025      	beq.n	80028e2 <HAL_GPIO_Init+0x222>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a50      	ldr	r2, [pc, #320]	; (80029dc <HAL_GPIO_Init+0x31c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01f      	beq.n	80028de <HAL_GPIO_Init+0x21e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4f      	ldr	r2, [pc, #316]	; (80029e0 <HAL_GPIO_Init+0x320>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d019      	beq.n	80028da <HAL_GPIO_Init+0x21a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a4e      	ldr	r2, [pc, #312]	; (80029e4 <HAL_GPIO_Init+0x324>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <HAL_GPIO_Init+0x216>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a4d      	ldr	r2, [pc, #308]	; (80029e8 <HAL_GPIO_Init+0x328>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00d      	beq.n	80028d2 <HAL_GPIO_Init+0x212>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a4c      	ldr	r2, [pc, #304]	; (80029ec <HAL_GPIO_Init+0x32c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d007      	beq.n	80028ce <HAL_GPIO_Init+0x20e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4b      	ldr	r2, [pc, #300]	; (80029f0 <HAL_GPIO_Init+0x330>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d101      	bne.n	80028ca <HAL_GPIO_Init+0x20a>
 80028c6:	2307      	movs	r3, #7
 80028c8:	e00e      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028ca:	2308      	movs	r3, #8
 80028cc:	e00c      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028ce:	2306      	movs	r3, #6
 80028d0:	e00a      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028d2:	2305      	movs	r3, #5
 80028d4:	e008      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028d6:	2304      	movs	r3, #4
 80028d8:	e006      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028da:	2303      	movs	r3, #3
 80028dc:	e004      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028de:	2302      	movs	r3, #2
 80028e0:	e002      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028e6:	2300      	movs	r3, #0
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	f002 0203 	and.w	r2, r2, #3
 80028ee:	0092      	lsls	r2, r2, #2
 80028f0:	4093      	lsls	r3, r2
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028f8:	4935      	ldr	r1, [pc, #212]	; (80029d0 <HAL_GPIO_Init+0x310>)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	3302      	adds	r3, #2
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002906:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <HAL_GPIO_Init+0x334>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800292a:	4a32      	ldr	r2, [pc, #200]	; (80029f4 <HAL_GPIO_Init+0x334>)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002930:	4b30      	ldr	r3, [pc, #192]	; (80029f4 <HAL_GPIO_Init+0x334>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002954:	4a27      	ldr	r2, [pc, #156]	; (80029f4 <HAL_GPIO_Init+0x334>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800295a:	4b26      	ldr	r3, [pc, #152]	; (80029f4 <HAL_GPIO_Init+0x334>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800297e:	4a1d      	ldr	r2, [pc, #116]	; (80029f4 <HAL_GPIO_Init+0x334>)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <HAL_GPIO_Init+0x334>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029a8:	4a12      	ldr	r2, [pc, #72]	; (80029f4 <HAL_GPIO_Init+0x334>)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3301      	adds	r3, #1
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	f67f ae90 	bls.w	80026dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40013800 	.word	0x40013800
 80029d4:	40020000 	.word	0x40020000
 80029d8:	40020400 	.word	0x40020400
 80029dc:	40020800 	.word	0x40020800
 80029e0:	40020c00 	.word	0x40020c00
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40021400 	.word	0x40021400
 80029ec:	40021800 	.word	0x40021800
 80029f0:	40021c00 	.word	0x40021c00
 80029f4:	40013c00 	.word	0x40013c00

080029f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	887b      	ldrh	r3, [r7, #2]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	e001      	b.n	8002a1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
 8002a34:	4613      	mov	r3, r2
 8002a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a38:	787b      	ldrb	r3, [r7, #1]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a3e:	887a      	ldrh	r2, [r7, #2]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a44:	e003      	b.n	8002a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	041a      	lsls	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	619a      	str	r2, [r3, #24]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5c:	b08f      	sub	sp, #60	; 0x3c
 8002a5e:	af0a      	add	r7, sp, #40	; 0x28
 8002a60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e054      	b.n	8002b16 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f005 fd54 	bl	8008534 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2203      	movs	r2, #3
 8002a90:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 fd74 	bl	8006598 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	687e      	ldr	r6, [r7, #4]
 8002ab8:	466d      	mov	r5, sp
 8002aba:	f106 0410 	add.w	r4, r6, #16
 8002abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aca:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ace:	1d33      	adds	r3, r6, #4
 8002ad0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad2:	6838      	ldr	r0, [r7, #0]
 8002ad4:	f003 fcee 	bl	80064b4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2101      	movs	r1, #1
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f003 fd6b 	bl	80065ba <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	687e      	ldr	r6, [r7, #4]
 8002aec:	466d      	mov	r5, sp
 8002aee:	f106 0410 	add.w	r4, r6, #16
 8002af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002afa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002afe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b02:	1d33      	adds	r3, r6, #4
 8002b04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b06:	6838      	ldr	r0, [r7, #0]
 8002b08:	f003 fed2 	bl	80068b0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b1e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002b1e:	b590      	push	{r4, r7, lr}
 8002b20:	b089      	sub	sp, #36	; 0x24
 8002b22:	af04      	add	r7, sp, #16
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	4608      	mov	r0, r1
 8002b28:	4611      	mov	r1, r2
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	70fb      	strb	r3, [r7, #3]
 8002b30:	460b      	mov	r3, r1
 8002b32:	70bb      	strb	r3, [r7, #2]
 8002b34:	4613      	mov	r3, r2
 8002b36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_HCD_HC_Init+0x28>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e076      	b.n	8002c34 <HAL_HCD_HC_Init+0x116>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	333d      	adds	r3, #61	; 0x3d
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3338      	adds	r3, #56	; 0x38
 8002b6e:	787a      	ldrb	r2, [r7, #1]
 8002b70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3340      	adds	r3, #64	; 0x40
 8002b80:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b82:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3339      	adds	r3, #57	; 0x39
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	333f      	adds	r3, #63	; 0x3f
 8002ba4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002ba8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	78ba      	ldrb	r2, [r7, #2]
 8002bae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bb2:	b2d0      	uxtb	r0, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	333a      	adds	r3, #58	; 0x3a
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002bc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	da09      	bge.n	8002be0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	333b      	adds	r3, #59	; 0x3b
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	e008      	b.n	8002bf2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	333b      	adds	r3, #59	; 0x3b
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	333c      	adds	r3, #60	; 0x3c
 8002c00:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c04:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	787c      	ldrb	r4, [r7, #1]
 8002c0c:	78ba      	ldrb	r2, [r7, #2]
 8002c0e:	78f9      	ldrb	r1, [r7, #3]
 8002c10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c12:	9302      	str	r3, [sp, #8]
 8002c14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c18:	9301      	str	r3, [sp, #4]
 8002c1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	4623      	mov	r3, r4
 8002c22:	f003 ff95 	bl	8006b50 <USB_HC_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd90      	pop	{r4, r7, pc}

08002c3c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_HCD_HC_Halt+0x1e>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e00f      	b.n	8002c7a <HAL_HCD_HC_Halt+0x3e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f004 f9d1 	bl	8007012 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	4608      	mov	r0, r1
 8002c8e:	4611      	mov	r1, r2
 8002c90:	461a      	mov	r2, r3
 8002c92:	4603      	mov	r3, r0
 8002c94:	70fb      	strb	r3, [r7, #3]
 8002c96:	460b      	mov	r3, r1
 8002c98:	70bb      	strb	r3, [r7, #2]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	333b      	adds	r3, #59	; 0x3b
 8002cac:	78ba      	ldrb	r2, [r7, #2]
 8002cae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	333f      	adds	r3, #63	; 0x3f
 8002cbe:	787a      	ldrb	r2, [r7, #1]
 8002cc0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002cc2:	7c3b      	ldrb	r3, [r7, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d112      	bne.n	8002cee <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	212c      	movs	r1, #44	; 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3342      	adds	r3, #66	; 0x42
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	333d      	adds	r3, #61	; 0x3d
 8002ce8:	7f3a      	ldrb	r2, [r7, #28]
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	e008      	b.n	8002d00 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	212c      	movs	r1, #44	; 0x2c
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3342      	adds	r3, #66	; 0x42
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002d00:	787b      	ldrb	r3, [r7, #1]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	f200 80c6 	bhi.w	8002e94 <HAL_HCD_HC_SubmitRequest+0x210>
 8002d08:	a201      	add	r2, pc, #4	; (adr r2, 8002d10 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0e:	bf00      	nop
 8002d10:	08002d21 	.word	0x08002d21
 8002d14:	08002e81 	.word	0x08002e81
 8002d18:	08002d85 	.word	0x08002d85
 8002d1c:	08002e03 	.word	0x08002e03
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002d20:	7c3b      	ldrb	r3, [r7, #16]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	f040 80b8 	bne.w	8002e98 <HAL_HCD_HC_SubmitRequest+0x214>
 8002d28:	78bb      	ldrb	r3, [r7, #2]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 80b4 	bne.w	8002e98 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002d30:	8b3b      	ldrh	r3, [r7, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d108      	bne.n	8002d48 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	3355      	adds	r3, #85	; 0x55
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	3355      	adds	r3, #85	; 0x55
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d109      	bne.n	8002d70 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	212c      	movs	r1, #44	; 0x2c
 8002d62:	fb01 f303 	mul.w	r3, r1, r3
 8002d66:	4413      	add	r3, r2
 8002d68:	3342      	adds	r3, #66	; 0x42
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d6e:	e093      	b.n	8002e98 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	212c      	movs	r1, #44	; 0x2c
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3342      	adds	r3, #66	; 0x42
 8002d7e:	2202      	movs	r2, #2
 8002d80:	701a      	strb	r2, [r3, #0]
      break;
 8002d82:	e089      	b.n	8002e98 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002d84:	78bb      	ldrb	r3, [r7, #2]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d11d      	bne.n	8002dc6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	212c      	movs	r1, #44	; 0x2c
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	3355      	adds	r3, #85	; 0x55
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	3342      	adds	r3, #66	; 0x42
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002db0:	e073      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3342      	adds	r3, #66	; 0x42
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	701a      	strb	r2, [r3, #0]
      break;
 8002dc4:	e069      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3354      	adds	r3, #84	; 0x54
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	3342      	adds	r3, #66	; 0x42
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
      break;
 8002dec:	e055      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	212c      	movs	r1, #44	; 0x2c
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	3342      	adds	r3, #66	; 0x42
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	701a      	strb	r2, [r3, #0]
      break;
 8002e00:	e04b      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002e02:	78bb      	ldrb	r3, [r7, #2]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d11d      	bne.n	8002e44 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	212c      	movs	r1, #44	; 0x2c
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	3355      	adds	r3, #85	; 0x55
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d109      	bne.n	8002e30 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	212c      	movs	r1, #44	; 0x2c
 8002e22:	fb01 f303 	mul.w	r3, r1, r3
 8002e26:	4413      	add	r3, r2
 8002e28:	3342      	adds	r3, #66	; 0x42
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002e2e:	e034      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3342      	adds	r3, #66	; 0x42
 8002e3e:	2202      	movs	r2, #2
 8002e40:	701a      	strb	r2, [r3, #0]
      break;
 8002e42:	e02a      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	3354      	adds	r3, #84	; 0x54
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	212c      	movs	r1, #44	; 0x2c
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	3342      	adds	r3, #66	; 0x42
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]
      break;
 8002e6a:	e016      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	212c      	movs	r1, #44	; 0x2c
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	3342      	adds	r3, #66	; 0x42
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	701a      	strb	r2, [r3, #0]
      break;
 8002e7e:	e00c      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	212c      	movs	r1, #44	; 0x2c
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3342      	adds	r3, #66	; 0x42
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
      break;
 8002e92:	e002      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002e94:	bf00      	nop
 8002e96:	e000      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002e98:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3344      	adds	r3, #68	; 0x44
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	8b3a      	ldrh	r2, [r7, #24]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	202c      	movs	r0, #44	; 0x2c
 8002eb4:	fb00 f303 	mul.w	r3, r0, r3
 8002eb8:	440b      	add	r3, r1
 8002eba:	334c      	adds	r3, #76	; 0x4c
 8002ebc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	3360      	adds	r3, #96	; 0x60
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3350      	adds	r3, #80	; 0x50
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	212c      	movs	r1, #44	; 0x2c
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	3339      	adds	r3, #57	; 0x39
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	212c      	movs	r1, #44	; 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	3361      	adds	r3, #97	; 0x61
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	222c      	movs	r2, #44	; 0x2c
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	3338      	adds	r3, #56	; 0x38
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	18d1      	adds	r1, r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f003 ff24 	bl	8006d6c <USB_HC_StartXfer>
 8002f24:	4603      	mov	r3, r0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop

08002f30 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f003 fc71 	bl	800682e <USB_GetMode>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	f040 80f6 	bne.w	8003140 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f003 fc55 	bl	8006808 <USB_ReadInterrupts>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80ec 	beq.w	800313e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f003 fc4c 	bl	8006808 <USB_ReadInterrupts>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f7a:	d104      	bne.n	8002f86 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f003 fc3c 	bl	8006808 <USB_ReadInterrupts>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f9a:	d104      	bne.n	8002fa6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fa4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f003 fc2c 	bl	8006808 <USB_ReadInterrupts>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fba:	d104      	bne.n	8002fc6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fc4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 fc1c 	bl	8006808 <USB_ReadInterrupts>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d103      	bne.n	8002fe2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f003 fc0e 	bl	8006808 <USB_ReadInterrupts>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ff6:	d11c      	bne.n	8003032 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003000:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10f      	bne.n	8003032 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003012:	2110      	movs	r1, #16
 8003014:	6938      	ldr	r0, [r7, #16]
 8003016:	f003 fb1d 	bl	8006654 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800301a:	6938      	ldr	r0, [r7, #16]
 800301c:	f003 fb3e 	bl	800669c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2101      	movs	r1, #1
 8003026:	4618      	mov	r0, r3
 8003028:	f003 fcf6 	bl	8006a18 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f005 faff 	bl	8008630 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f003 fbe6 	bl	8006808 <USB_ReadInterrupts>
 800303c:	4603      	mov	r3, r0
 800303e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003042:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003046:	d102      	bne.n	800304e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f001 f9e7 	bl	800441c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f003 fbd8 	bl	8006808 <USB_ReadInterrupts>
 8003058:	4603      	mov	r3, r0
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b08      	cmp	r3, #8
 8003060:	d106      	bne.n	8003070 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f005 fac8 	bl	80085f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2208      	movs	r2, #8
 800306e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f003 fbc7 	bl	8006808 <USB_ReadInterrupts>
 800307a:	4603      	mov	r3, r0
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b10      	cmp	r3, #16
 8003082:	d101      	bne.n	8003088 <HAL_HCD_IRQHandler+0x158>
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <HAL_HCD_IRQHandler+0x15a>
 8003088:	2300      	movs	r3, #0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d012      	beq.n	80030b4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0210 	bic.w	r2, r2, #16
 800309c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f001 f8ea 	bl	8004278 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0210 	orr.w	r2, r2, #16
 80030b2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f003 fba5 	bl	8006808 <USB_ReadInterrupts>
 80030be:	4603      	mov	r3, r0
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030c8:	d13a      	bne.n	8003140 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f003 ff8e 	bl	8006ff0 <USB_HC_ReadInterrupt>
 80030d4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	e025      	b.n	8003128 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d018      	beq.n	8003122 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003106:	d106      	bne.n	8003116 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	4619      	mov	r1, r3
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f88f 	bl	8003232 <HCD_HC_IN_IRQHandler>
 8003114:	e005      	b.n	8003122 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	4619      	mov	r1, r3
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fcaa 	bl	8003a76 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	3301      	adds	r3, #1
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	429a      	cmp	r2, r3
 8003130:	d3d4      	bcc.n	80030dc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800313a:	615a      	str	r2, [r3, #20]
 800313c:	e000      	b.n	8003140 <HAL_HCD_IRQHandler+0x210>
      return;
 800313e:	bf00      	nop
    }
  }
}
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_HCD_Start+0x16>
 8003158:	2302      	movs	r3, #2
 800315a:	e013      	b.n	8003184 <HAL_HCD_Start+0x3e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2101      	movs	r1, #1
 800316a:	4618      	mov	r0, r3
 800316c:	f003 fc8e 	bl	8006a8c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f003 f9fe 	bl	8006576 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_HCD_Stop+0x16>
 800319e:	2302      	movs	r3, #2
 80031a0:	e00d      	b.n	80031be <HAL_HCD_Stop+0x32>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f004 f888 	bl	80072c4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	460b      	mov	r3, r1
 80031d0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	212c      	movs	r1, #44	; 0x2c
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	4413      	add	r3, r2
 80031de:	3360      	adds	r3, #96	; 0x60
 80031e0:	781b      	ldrb	r3, [r3, #0]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	212c      	movs	r1, #44	; 0x2c
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	3350      	adds	r3, #80	; 0x50
 8003208:	681b      	ldr	r3, [r3, #0]
}
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f003 fc82 	bl	8006b2c <USB_GetCurrentFrame>
 8003228:	4603      	mov	r3, r0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b086      	sub	sp, #24
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	460b      	mov	r3, r1
 800323c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4413      	add	r3, r2
 8003254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b04      	cmp	r3, #4
 8003260:	d119      	bne.n	8003296 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4413      	add	r3, r2
 800326a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326e:	461a      	mov	r2, r3
 8003270:	2304      	movs	r3, #4
 8003272:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4413      	add	r3, r2
 800327c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	0151      	lsls	r1, r2, #5
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	440a      	add	r2, r1
 800328a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800328e:	f043 0302 	orr.w	r3, r3, #2
 8003292:	60d3      	str	r3, [r2, #12]
 8003294:	e101      	b.n	800349a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4413      	add	r3, r2
 800329e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ac:	d12b      	bne.n	8003306 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ba:	461a      	mov	r2, r3
 80032bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	212c      	movs	r1, #44	; 0x2c
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	3361      	adds	r3, #97	; 0x61
 80032d0:	2207      	movs	r2, #7
 80032d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	0151      	lsls	r1, r2, #5
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	440a      	add	r2, r1
 80032ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032ee:	f043 0302 	orr.w	r3, r3, #2
 80032f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f003 fe87 	bl	8007012 <USB_HC_Halt>
 8003304:	e0c9      	b.n	800349a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b20      	cmp	r3, #32
 800331a:	d109      	bne.n	8003330 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4413      	add	r3, r2
 8003324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003328:	461a      	mov	r2, r3
 800332a:	2320      	movs	r3, #32
 800332c:	6093      	str	r3, [r2, #8]
 800332e:	e0b4      	b.n	800349a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b08      	cmp	r3, #8
 8003344:	d133      	bne.n	80033ae <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	0151      	lsls	r1, r2, #5
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	440a      	add	r2, r1
 800335c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003360:	f043 0302 	orr.w	r3, r3, #2
 8003364:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	3361      	adds	r3, #97	; 0x61
 8003374:	2205      	movs	r2, #5
 8003376:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4413      	add	r3, r2
 8003380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003384:	461a      	mov	r2, r3
 8003386:	2310      	movs	r3, #16
 8003388:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003396:	461a      	mov	r2, r3
 8003398:	2308      	movs	r3, #8
 800339a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f003 fe33 	bl	8007012 <USB_HC_Halt>
 80033ac:	e075      	b.n	800349a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c4:	d134      	bne.n	8003430 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	0151      	lsls	r1, r2, #5
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	440a      	add	r2, r1
 80033dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	212c      	movs	r1, #44	; 0x2c
 80033ec:	fb01 f303 	mul.w	r3, r1, r3
 80033f0:	4413      	add	r3, r2
 80033f2:	3361      	adds	r3, #97	; 0x61
 80033f4:	2208      	movs	r2, #8
 80033f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003404:	461a      	mov	r2, r3
 8003406:	2310      	movs	r3, #16
 8003408:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4413      	add	r3, r2
 8003412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003416:	461a      	mov	r2, r3
 8003418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800341c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f003 fdf2 	bl	8007012 <USB_HC_Halt>
 800342e:	e034      	b.n	800349a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003442:	2b80      	cmp	r3, #128	; 0x80
 8003444:	d129      	bne.n	800349a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	0151      	lsls	r1, r2, #5
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	440a      	add	r2, r1
 800345c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003460:	f043 0302 	orr.w	r3, r3, #2
 8003464:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	212c      	movs	r1, #44	; 0x2c
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	4413      	add	r3, r2
 8003472:	3361      	adds	r3, #97	; 0x61
 8003474:	2206      	movs	r2, #6
 8003476:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f003 fdc5 	bl	8007012 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4413      	add	r3, r2
 8003490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003494:	461a      	mov	r2, r3
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034b0:	d122      	bne.n	80034f8 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	0151      	lsls	r1, r2, #5
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	440a      	add	r2, r1
 80034c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034cc:	f043 0302 	orr.w	r3, r3, #2
 80034d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f003 fd98 	bl	8007012 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ee:	461a      	mov	r2, r3
 80034f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034f4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80034f6:	e2ba      	b.n	8003a6e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b01      	cmp	r3, #1
 800350c:	f040 811b 	bne.w	8003746 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d019      	beq.n	800354c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	212c      	movs	r1, #44	; 0x2c
 800351e:	fb01 f303 	mul.w	r3, r1, r3
 8003522:	4413      	add	r3, r2
 8003524:	3348      	adds	r3, #72	; 0x48
 8003526:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	0159      	lsls	r1, r3, #5
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	440b      	add	r3, r1
 8003530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800353a:	1ad2      	subs	r2, r2, r3
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	202c      	movs	r0, #44	; 0x2c
 8003542:	fb00 f303 	mul.w	r3, r0, r3
 8003546:	440b      	add	r3, r1
 8003548:	3350      	adds	r3, #80	; 0x50
 800354a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	212c      	movs	r1, #44	; 0x2c
 8003552:	fb01 f303 	mul.w	r3, r1, r3
 8003556:	4413      	add	r3, r2
 8003558:	3361      	adds	r3, #97	; 0x61
 800355a:	2201      	movs	r2, #1
 800355c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	212c      	movs	r1, #44	; 0x2c
 8003564:	fb01 f303 	mul.w	r3, r1, r3
 8003568:	4413      	add	r3, r2
 800356a:	335c      	adds	r3, #92	; 0x5c
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4413      	add	r3, r2
 8003578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357c:	461a      	mov	r2, r3
 800357e:	2301      	movs	r3, #1
 8003580:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	212c      	movs	r1, #44	; 0x2c
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	4413      	add	r3, r2
 800358e:	333f      	adds	r3, #63	; 0x3f
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	212c      	movs	r1, #44	; 0x2c
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	333f      	adds	r3, #63	; 0x3f
 80035a4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d121      	bne.n	80035ee <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	0151      	lsls	r1, r2, #5
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	440a      	add	r2, r1
 80035c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035c4:	f043 0302 	orr.w	r3, r3, #2
 80035c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f003 fd1c 	bl	8007012 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e6:	461a      	mov	r2, r3
 80035e8:	2310      	movs	r3, #16
 80035ea:	6093      	str	r3, [r2, #8]
 80035ec:	e066      	b.n	80036bc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	212c      	movs	r1, #44	; 0x2c
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	4413      	add	r3, r2
 80035fa:	333f      	adds	r3, #63	; 0x3f
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d127      	bne.n	8003652 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4413      	add	r3, r2
 800360a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	0151      	lsls	r1, r2, #5
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	440a      	add	r2, r1
 8003618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800361c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003620:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	212c      	movs	r1, #44	; 0x2c
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	4413      	add	r3, r2
 800362e:	3360      	adds	r3, #96	; 0x60
 8003630:	2201      	movs	r2, #1
 8003632:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	b2d9      	uxtb	r1, r3
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	202c      	movs	r0, #44	; 0x2c
 800363e:	fb00 f303 	mul.w	r3, r0, r3
 8003642:	4413      	add	r3, r2
 8003644:	3360      	adds	r3, #96	; 0x60
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f004 fffe 	bl	800864c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003650:	e034      	b.n	80036bc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	212c      	movs	r1, #44	; 0x2c
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	4413      	add	r3, r2
 800365e:	333f      	adds	r3, #63	; 0x3f
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d12a      	bne.n	80036bc <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	3360      	adds	r3, #96	; 0x60
 8003674:	2201      	movs	r2, #1
 8003676:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	212c      	movs	r1, #44	; 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	3354      	adds	r3, #84	; 0x54
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	f083 0301 	eor.w	r3, r3, #1
 800368c:	b2d8      	uxtb	r0, r3
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	212c      	movs	r1, #44	; 0x2c
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	4413      	add	r3, r2
 800369a:	3354      	adds	r3, #84	; 0x54
 800369c:	4602      	mov	r2, r0
 800369e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	b2d9      	uxtb	r1, r3
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	202c      	movs	r0, #44	; 0x2c
 80036aa:	fb00 f303 	mul.w	r3, r0, r3
 80036ae:	4413      	add	r3, r2
 80036b0:	3360      	adds	r3, #96	; 0x60
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f004 ffc8 	bl	800864c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d12b      	bne.n	800371c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	212c      	movs	r1, #44	; 0x2c
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	4413      	add	r3, r2
 80036d0:	3348      	adds	r3, #72	; 0x48
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	202c      	movs	r0, #44	; 0x2c
 80036da:	fb00 f202 	mul.w	r2, r0, r2
 80036de:	440a      	add	r2, r1
 80036e0:	3240      	adds	r2, #64	; 0x40
 80036e2:	8812      	ldrh	r2, [r2, #0]
 80036e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 81be 	beq.w	8003a6e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	212c      	movs	r1, #44	; 0x2c
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	3354      	adds	r3, #84	; 0x54
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	f083 0301 	eor.w	r3, r3, #1
 8003706:	b2d8      	uxtb	r0, r3
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	212c      	movs	r1, #44	; 0x2c
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	4413      	add	r3, r2
 8003714:	3354      	adds	r3, #84	; 0x54
 8003716:	4602      	mov	r2, r0
 8003718:	701a      	strb	r2, [r3, #0]
}
 800371a:	e1a8      	b.n	8003a6e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	212c      	movs	r1, #44	; 0x2c
 8003722:	fb01 f303 	mul.w	r3, r1, r3
 8003726:	4413      	add	r3, r2
 8003728:	3354      	adds	r3, #84	; 0x54
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	f083 0301 	eor.w	r3, r3, #1
 8003730:	b2d8      	uxtb	r0, r3
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	212c      	movs	r1, #44	; 0x2c
 8003738:	fb01 f303 	mul.w	r3, r1, r3
 800373c:	4413      	add	r3, r2
 800373e:	3354      	adds	r3, #84	; 0x54
 8003740:	4602      	mov	r2, r0
 8003742:	701a      	strb	r2, [r3, #0]
}
 8003744:	e193      	b.n	8003a6e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b02      	cmp	r3, #2
 800375a:	f040 8106 	bne.w	800396a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4413      	add	r3, r2
 8003766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	0151      	lsls	r1, r2, #5
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	440a      	add	r2, r1
 8003774:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003778:	f023 0302 	bic.w	r3, r3, #2
 800377c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	212c      	movs	r1, #44	; 0x2c
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	4413      	add	r3, r2
 800378a:	3361      	adds	r3, #97	; 0x61
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d109      	bne.n	80037a6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	212c      	movs	r1, #44	; 0x2c
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	4413      	add	r3, r2
 800379e:	3360      	adds	r3, #96	; 0x60
 80037a0:	2201      	movs	r2, #1
 80037a2:	701a      	strb	r2, [r3, #0]
 80037a4:	e0c9      	b.n	800393a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	212c      	movs	r1, #44	; 0x2c
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	4413      	add	r3, r2
 80037b2:	3361      	adds	r3, #97	; 0x61
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d109      	bne.n	80037ce <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	212c      	movs	r1, #44	; 0x2c
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	4413      	add	r3, r2
 80037c6:	3360      	adds	r3, #96	; 0x60
 80037c8:	2205      	movs	r2, #5
 80037ca:	701a      	strb	r2, [r3, #0]
 80037cc:	e0b5      	b.n	800393a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	212c      	movs	r1, #44	; 0x2c
 80037d4:	fb01 f303 	mul.w	r3, r1, r3
 80037d8:	4413      	add	r3, r2
 80037da:	3361      	adds	r3, #97	; 0x61
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b06      	cmp	r3, #6
 80037e0:	d009      	beq.n	80037f6 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	212c      	movs	r1, #44	; 0x2c
 80037e8:	fb01 f303 	mul.w	r3, r1, r3
 80037ec:	4413      	add	r3, r2
 80037ee:	3361      	adds	r3, #97	; 0x61
 80037f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d150      	bne.n	8003898 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	212c      	movs	r1, #44	; 0x2c
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	4413      	add	r3, r2
 8003802:	335c      	adds	r3, #92	; 0x5c
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	202c      	movs	r0, #44	; 0x2c
 800380e:	fb00 f303 	mul.w	r3, r0, r3
 8003812:	440b      	add	r3, r1
 8003814:	335c      	adds	r3, #92	; 0x5c
 8003816:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	212c      	movs	r1, #44	; 0x2c
 800381e:	fb01 f303 	mul.w	r3, r1, r3
 8003822:	4413      	add	r3, r2
 8003824:	335c      	adds	r3, #92	; 0x5c
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d912      	bls.n	8003852 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	212c      	movs	r1, #44	; 0x2c
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	4413      	add	r3, r2
 8003838:	335c      	adds	r3, #92	; 0x5c
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	212c      	movs	r1, #44	; 0x2c
 8003844:	fb01 f303 	mul.w	r3, r1, r3
 8003848:	4413      	add	r3, r2
 800384a:	3360      	adds	r3, #96	; 0x60
 800384c:	2204      	movs	r2, #4
 800384e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003850:	e073      	b.n	800393a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	212c      	movs	r1, #44	; 0x2c
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	4413      	add	r3, r2
 800385e:	3360      	adds	r3, #96	; 0x60
 8003860:	2202      	movs	r2, #2
 8003862:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4413      	add	r3, r2
 800386c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800387a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003882:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4413      	add	r3, r2
 800388c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003890:	461a      	mov	r2, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003896:	e050      	b.n	800393a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	212c      	movs	r1, #44	; 0x2c
 800389e:	fb01 f303 	mul.w	r3, r1, r3
 80038a2:	4413      	add	r3, r2
 80038a4:	3361      	adds	r3, #97	; 0x61
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d122      	bne.n	80038f2 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	212c      	movs	r1, #44	; 0x2c
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	3360      	adds	r3, #96	; 0x60
 80038ba:	2202      	movs	r2, #2
 80038bc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038d4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038dc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ea:	461a      	mov	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	e023      	b.n	800393a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	212c      	movs	r1, #44	; 0x2c
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	4413      	add	r3, r2
 80038fe:	3361      	adds	r3, #97	; 0x61
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b07      	cmp	r3, #7
 8003904:	d119      	bne.n	800393a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	212c      	movs	r1, #44	; 0x2c
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	4413      	add	r3, r2
 8003912:	335c      	adds	r3, #92	; 0x5c
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	202c      	movs	r0, #44	; 0x2c
 800391e:	fb00 f303 	mul.w	r3, r0, r3
 8003922:	440b      	add	r3, r1
 8003924:	335c      	adds	r3, #92	; 0x5c
 8003926:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	212c      	movs	r1, #44	; 0x2c
 800392e:	fb01 f303 	mul.w	r3, r1, r3
 8003932:	4413      	add	r3, r2
 8003934:	3360      	adds	r3, #96	; 0x60
 8003936:	2204      	movs	r2, #4
 8003938:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4413      	add	r3, r2
 8003942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003946:	461a      	mov	r2, r3
 8003948:	2302      	movs	r3, #2
 800394a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	b2d9      	uxtb	r1, r3
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	202c      	movs	r0, #44	; 0x2c
 8003956:	fb00 f303 	mul.w	r3, r0, r3
 800395a:	4413      	add	r3, r2
 800395c:	3360      	adds	r3, #96	; 0x60
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f004 fe72 	bl	800864c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003968:	e081      	b.n	8003a6e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4413      	add	r3, r2
 8003972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b10      	cmp	r3, #16
 800397e:	d176      	bne.n	8003a6e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	212c      	movs	r1, #44	; 0x2c
 8003986:	fb01 f303 	mul.w	r3, r1, r3
 800398a:	4413      	add	r3, r2
 800398c:	333f      	adds	r3, #63	; 0x3f
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b03      	cmp	r3, #3
 8003992:	d121      	bne.n	80039d8 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	212c      	movs	r1, #44	; 0x2c
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	335c      	adds	r3, #92	; 0x5c
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	0151      	lsls	r1, r2, #5
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	440a      	add	r2, r1
 80039bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039c0:	f043 0302 	orr.w	r3, r3, #2
 80039c4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f003 fb1e 	bl	8007012 <USB_HC_Halt>
 80039d6:	e041      	b.n	8003a5c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	212c      	movs	r1, #44	; 0x2c
 80039de:	fb01 f303 	mul.w	r3, r1, r3
 80039e2:	4413      	add	r3, r2
 80039e4:	333f      	adds	r3, #63	; 0x3f
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d009      	beq.n	8003a00 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	333f      	adds	r3, #63	; 0x3f
 80039fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d12d      	bne.n	8003a5c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	212c      	movs	r1, #44	; 0x2c
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	335c      	adds	r3, #92	; 0x5c
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d120      	bne.n	8003a5c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	212c      	movs	r1, #44	; 0x2c
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	4413      	add	r3, r2
 8003a26:	3361      	adds	r3, #97	; 0x61
 8003a28:	2203      	movs	r2, #3
 8003a2a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	0151      	lsls	r1, r2, #5
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	440a      	add	r2, r1
 8003a42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a46:	f043 0302 	orr.w	r3, r3, #2
 8003a4a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f003 fadb 	bl	8007012 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	461a      	mov	r2, r3
 8003a6a:	2310      	movs	r3, #16
 8003a6c:	6093      	str	r3, [r2, #8]
}
 8003a6e:	bf00      	nop
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b088      	sub	sp, #32
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d119      	bne.n	8003ada <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	0151      	lsls	r1, r2, #5
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	440a      	add	r2, r1
 8003ace:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ad2:	f043 0302 	orr.w	r3, r3, #2
 8003ad6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003ad8:	e3ca      	b.n	8004270 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d13e      	bne.n	8003b6e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afc:	461a      	mov	r2, r3
 8003afe:	2320      	movs	r3, #32
 8003b00:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	212c      	movs	r1, #44	; 0x2c
 8003b08:	fb01 f303 	mul.w	r3, r1, r3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	333d      	adds	r3, #61	; 0x3d
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	f040 83ac 	bne.w	8004270 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	212c      	movs	r1, #44	; 0x2c
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	333d      	adds	r3, #61	; 0x3d
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	212c      	movs	r1, #44	; 0x2c
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	4413      	add	r3, r2
 8003b36:	3360      	adds	r3, #96	; 0x60
 8003b38:	2202      	movs	r2, #2
 8003b3a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	0151      	lsls	r1, r2, #5
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	440a      	add	r2, r1
 8003b52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b56:	f043 0302 	orr.w	r3, r3, #2
 8003b5a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f003 fa53 	bl	8007012 <USB_HC_Halt>
}
 8003b6c:	e380      	b.n	8004270 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b84:	d122      	bne.n	8003bcc <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	0151      	lsls	r1, r2, #5
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	440a      	add	r2, r1
 8003b9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ba0:	f043 0302 	orr.w	r3, r3, #2
 8003ba4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	4611      	mov	r1, r2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f003 fa2e 	bl	8007012 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bc8:	6093      	str	r3, [r2, #8]
}
 8003bca:	e351      	b.n	8004270 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d150      	bne.n	8003c84 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	212c      	movs	r1, #44	; 0x2c
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	335c      	adds	r3, #92	; 0x5c
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c06:	2b40      	cmp	r3, #64	; 0x40
 8003c08:	d111      	bne.n	8003c2e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	212c      	movs	r1, #44	; 0x2c
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	333d      	adds	r3, #61	; 0x3d
 8003c18:	2201      	movs	r2, #1
 8003c1a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2340      	movs	r3, #64	; 0x40
 8003c2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	0151      	lsls	r1, r2, #5
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	440a      	add	r2, r1
 8003c44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	4611      	mov	r1, r2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f003 f9da 	bl	8007012 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	212c      	movs	r1, #44	; 0x2c
 8003c76:	fb01 f303 	mul.w	r3, r1, r3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3361      	adds	r3, #97	; 0x61
 8003c7e:	2201      	movs	r2, #1
 8003c80:	701a      	strb	r2, [r3, #0]
}
 8003c82:	e2f5      	b.n	8004270 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c96:	2b40      	cmp	r3, #64	; 0x40
 8003c98:	d13c      	bne.n	8003d14 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	212c      	movs	r1, #44	; 0x2c
 8003ca0:	fb01 f303 	mul.w	r3, r1, r3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3361      	adds	r3, #97	; 0x61
 8003ca8:	2204      	movs	r2, #4
 8003caa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	212c      	movs	r1, #44	; 0x2c
 8003cb2:	fb01 f303 	mul.w	r3, r1, r3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	333d      	adds	r3, #61	; 0x3d
 8003cba:	2201      	movs	r2, #1
 8003cbc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	212c      	movs	r1, #44	; 0x2c
 8003cc4:	fb01 f303 	mul.w	r3, r1, r3
 8003cc8:	4413      	add	r3, r2
 8003cca:	335c      	adds	r3, #92	; 0x5c
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	0151      	lsls	r1, r2, #5
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	440a      	add	r2, r1
 8003ce6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cea:	f043 0302 	orr.w	r3, r3, #2
 8003cee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f003 f989 	bl	8007012 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2340      	movs	r3, #64	; 0x40
 8003d10:	6093      	str	r3, [r2, #8]
}
 8003d12:	e2ad      	b.n	8004270 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d12a      	bne.n	8003d80 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d36:	461a      	mov	r2, r3
 8003d38:	2308      	movs	r3, #8
 8003d3a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	0151      	lsls	r1, r2, #5
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	440a      	add	r2, r1
 8003d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d56:	f043 0302 	orr.w	r3, r3, #2
 8003d5a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f003 f953 	bl	8007012 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	212c      	movs	r1, #44	; 0x2c
 8003d72:	fb01 f303 	mul.w	r3, r1, r3
 8003d76:	4413      	add	r3, r2
 8003d78:	3361      	adds	r3, #97	; 0x61
 8003d7a:	2205      	movs	r2, #5
 8003d7c:	701a      	strb	r2, [r3, #0]
}
 8003d7e:	e277      	b.n	8004270 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	2b10      	cmp	r3, #16
 8003d94:	d150      	bne.n	8003e38 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	212c      	movs	r1, #44	; 0x2c
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	4413      	add	r3, r2
 8003da2:	335c      	adds	r3, #92	; 0x5c
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	212c      	movs	r1, #44	; 0x2c
 8003dae:	fb01 f303 	mul.w	r3, r1, r3
 8003db2:	4413      	add	r3, r2
 8003db4:	3361      	adds	r3, #97	; 0x61
 8003db6:	2203      	movs	r2, #3
 8003db8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	212c      	movs	r1, #44	; 0x2c
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	333d      	adds	r3, #61	; 0x3d
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d112      	bne.n	8003df4 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	212c      	movs	r1, #44	; 0x2c
 8003dd4:	fb01 f303 	mul.w	r3, r1, r3
 8003dd8:	4413      	add	r3, r2
 8003dda:	333c      	adds	r3, #60	; 0x3c
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d108      	bne.n	8003df4 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	212c      	movs	r1, #44	; 0x2c
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	4413      	add	r3, r2
 8003dee:	333d      	adds	r3, #61	; 0x3d
 8003df0:	2201      	movs	r2, #1
 8003df2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	0151      	lsls	r1, r2, #5
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	440a      	add	r2, r1
 8003e0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e0e:	f043 0302 	orr.w	r3, r3, #2
 8003e12:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f003 f8f7 	bl	8007012 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e30:	461a      	mov	r2, r3
 8003e32:	2310      	movs	r3, #16
 8003e34:	6093      	str	r3, [r2, #8]
}
 8003e36:	e21b      	b.n	8004270 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4a:	2b80      	cmp	r3, #128	; 0x80
 8003e4c:	d174      	bne.n	8003f38 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d121      	bne.n	8003e9a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	212c      	movs	r1, #44	; 0x2c
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	4413      	add	r3, r2
 8003e62:	3361      	adds	r3, #97	; 0x61
 8003e64:	2206      	movs	r2, #6
 8003e66:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	0151      	lsls	r1, r2, #5
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	440a      	add	r2, r1
 8003e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e82:	f043 0302 	orr.w	r3, r3, #2
 8003e86:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	4611      	mov	r1, r2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f003 f8bd 	bl	8007012 <USB_HC_Halt>
 8003e98:	e044      	b.n	8003f24 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	212c      	movs	r1, #44	; 0x2c
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	335c      	adds	r3, #92	; 0x5c
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	202c      	movs	r0, #44	; 0x2c
 8003eb2:	fb00 f303 	mul.w	r3, r0, r3
 8003eb6:	440b      	add	r3, r1
 8003eb8:	335c      	adds	r3, #92	; 0x5c
 8003eba:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	212c      	movs	r1, #44	; 0x2c
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	335c      	adds	r3, #92	; 0x5c
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d920      	bls.n	8003f12 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	212c      	movs	r1, #44	; 0x2c
 8003ed6:	fb01 f303 	mul.w	r3, r1, r3
 8003eda:	4413      	add	r3, r2
 8003edc:	335c      	adds	r3, #92	; 0x5c
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	212c      	movs	r1, #44	; 0x2c
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	4413      	add	r3, r2
 8003eee:	3360      	adds	r3, #96	; 0x60
 8003ef0:	2204      	movs	r2, #4
 8003ef2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	b2d9      	uxtb	r1, r3
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	202c      	movs	r0, #44	; 0x2c
 8003efe:	fb00 f303 	mul.w	r3, r0, r3
 8003f02:	4413      	add	r3, r2
 8003f04:	3360      	adds	r3, #96	; 0x60
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f004 fb9e 	bl	800864c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f10:	e008      	b.n	8003f24 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	212c      	movs	r1, #44	; 0x2c
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3360      	adds	r3, #96	; 0x60
 8003f20:	2202      	movs	r2, #2
 8003f22:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f30:	461a      	mov	r2, r3
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	6093      	str	r3, [r2, #8]
}
 8003f36:	e19b      	b.n	8004270 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4e:	d134      	bne.n	8003fba <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	0151      	lsls	r1, r2, #5
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	440a      	add	r2, r1
 8003f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f6a:	f043 0302 	orr.w	r3, r3, #2
 8003f6e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	4611      	mov	r1, r2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f003 f849 	bl	8007012 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	2310      	movs	r3, #16
 8003f90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fa4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	212c      	movs	r1, #44	; 0x2c
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3361      	adds	r3, #97	; 0x61
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	701a      	strb	r2, [r3, #0]
}
 8003fb8:	e15a      	b.n	8004270 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	f040 814f 	bne.w	8004270 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	0151      	lsls	r1, r2, #5
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	440a      	add	r2, r1
 8003fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fec:	f023 0302 	bic.w	r3, r3, #2
 8003ff0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	212c      	movs	r1, #44	; 0x2c
 8003ff8:	fb01 f303 	mul.w	r3, r1, r3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	3361      	adds	r3, #97	; 0x61
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d17d      	bne.n	8004102 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	212c      	movs	r1, #44	; 0x2c
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	4413      	add	r3, r2
 8004012:	3360      	adds	r3, #96	; 0x60
 8004014:	2201      	movs	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	212c      	movs	r1, #44	; 0x2c
 800401e:	fb01 f303 	mul.w	r3, r1, r3
 8004022:	4413      	add	r3, r2
 8004024:	333f      	adds	r3, #63	; 0x3f
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d00a      	beq.n	8004042 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	212c      	movs	r1, #44	; 0x2c
 8004032:	fb01 f303 	mul.w	r3, r1, r3
 8004036:	4413      	add	r3, r2
 8004038:	333f      	adds	r3, #63	; 0x3f
 800403a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800403c:	2b03      	cmp	r3, #3
 800403e:	f040 8100 	bne.w	8004242 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d113      	bne.n	8004072 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	212c      	movs	r1, #44	; 0x2c
 8004050:	fb01 f303 	mul.w	r3, r1, r3
 8004054:	4413      	add	r3, r2
 8004056:	3355      	adds	r3, #85	; 0x55
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	f083 0301 	eor.w	r3, r3, #1
 800405e:	b2d8      	uxtb	r0, r3
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	3355      	adds	r3, #85	; 0x55
 800406e:	4602      	mov	r2, r0
 8004070:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b01      	cmp	r3, #1
 8004078:	f040 80e3 	bne.w	8004242 <HCD_HC_OUT_IRQHandler+0x7cc>
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	212c      	movs	r1, #44	; 0x2c
 8004082:	fb01 f303 	mul.w	r3, r1, r3
 8004086:	4413      	add	r3, r2
 8004088:	334c      	adds	r3, #76	; 0x4c
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 80d8 	beq.w	8004242 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	212c      	movs	r1, #44	; 0x2c
 8004098:	fb01 f303 	mul.w	r3, r1, r3
 800409c:	4413      	add	r3, r2
 800409e:	334c      	adds	r3, #76	; 0x4c
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	202c      	movs	r0, #44	; 0x2c
 80040a8:	fb00 f202 	mul.w	r2, r0, r2
 80040ac:	440a      	add	r2, r1
 80040ae:	3240      	adds	r2, #64	; 0x40
 80040b0:	8812      	ldrh	r2, [r2, #0]
 80040b2:	4413      	add	r3, r2
 80040b4:	3b01      	subs	r3, #1
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	202c      	movs	r0, #44	; 0x2c
 80040bc:	fb00 f202 	mul.w	r2, r0, r2
 80040c0:	440a      	add	r2, r1
 80040c2:	3240      	adds	r2, #64	; 0x40
 80040c4:	8812      	ldrh	r2, [r2, #0]
 80040c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 80b5 	beq.w	8004242 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	212c      	movs	r1, #44	; 0x2c
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	4413      	add	r3, r2
 80040e4:	3355      	adds	r3, #85	; 0x55
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	f083 0301 	eor.w	r3, r3, #1
 80040ec:	b2d8      	uxtb	r0, r3
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	212c      	movs	r1, #44	; 0x2c
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	4413      	add	r3, r2
 80040fa:	3355      	adds	r3, #85	; 0x55
 80040fc:	4602      	mov	r2, r0
 80040fe:	701a      	strb	r2, [r3, #0]
 8004100:	e09f      	b.n	8004242 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	212c      	movs	r1, #44	; 0x2c
 8004108:	fb01 f303 	mul.w	r3, r1, r3
 800410c:	4413      	add	r3, r2
 800410e:	3361      	adds	r3, #97	; 0x61
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b03      	cmp	r3, #3
 8004114:	d109      	bne.n	800412a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	212c      	movs	r1, #44	; 0x2c
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	4413      	add	r3, r2
 8004122:	3360      	adds	r3, #96	; 0x60
 8004124:	2202      	movs	r2, #2
 8004126:	701a      	strb	r2, [r3, #0]
 8004128:	e08b      	b.n	8004242 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	212c      	movs	r1, #44	; 0x2c
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	4413      	add	r3, r2
 8004136:	3361      	adds	r3, #97	; 0x61
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b04      	cmp	r3, #4
 800413c:	d109      	bne.n	8004152 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	212c      	movs	r1, #44	; 0x2c
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	4413      	add	r3, r2
 800414a:	3360      	adds	r3, #96	; 0x60
 800414c:	2202      	movs	r2, #2
 800414e:	701a      	strb	r2, [r3, #0]
 8004150:	e077      	b.n	8004242 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	212c      	movs	r1, #44	; 0x2c
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4413      	add	r3, r2
 800415e:	3361      	adds	r3, #97	; 0x61
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b05      	cmp	r3, #5
 8004164:	d109      	bne.n	800417a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	212c      	movs	r1, #44	; 0x2c
 800416c:	fb01 f303 	mul.w	r3, r1, r3
 8004170:	4413      	add	r3, r2
 8004172:	3360      	adds	r3, #96	; 0x60
 8004174:	2205      	movs	r2, #5
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	e063      	b.n	8004242 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	212c      	movs	r1, #44	; 0x2c
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	4413      	add	r3, r2
 8004186:	3361      	adds	r3, #97	; 0x61
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b06      	cmp	r3, #6
 800418c:	d009      	beq.n	80041a2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	212c      	movs	r1, #44	; 0x2c
 8004194:	fb01 f303 	mul.w	r3, r1, r3
 8004198:	4413      	add	r3, r2
 800419a:	3361      	adds	r3, #97	; 0x61
 800419c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d14f      	bne.n	8004242 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	212c      	movs	r1, #44	; 0x2c
 80041a8:	fb01 f303 	mul.w	r3, r1, r3
 80041ac:	4413      	add	r3, r2
 80041ae:	335c      	adds	r3, #92	; 0x5c
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	202c      	movs	r0, #44	; 0x2c
 80041ba:	fb00 f303 	mul.w	r3, r0, r3
 80041be:	440b      	add	r3, r1
 80041c0:	335c      	adds	r3, #92	; 0x5c
 80041c2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	212c      	movs	r1, #44	; 0x2c
 80041ca:	fb01 f303 	mul.w	r3, r1, r3
 80041ce:	4413      	add	r3, r2
 80041d0:	335c      	adds	r3, #92	; 0x5c
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d912      	bls.n	80041fe <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	212c      	movs	r1, #44	; 0x2c
 80041de:	fb01 f303 	mul.w	r3, r1, r3
 80041e2:	4413      	add	r3, r2
 80041e4:	335c      	adds	r3, #92	; 0x5c
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	212c      	movs	r1, #44	; 0x2c
 80041f0:	fb01 f303 	mul.w	r3, r1, r3
 80041f4:	4413      	add	r3, r2
 80041f6:	3360      	adds	r3, #96	; 0x60
 80041f8:	2204      	movs	r2, #4
 80041fa:	701a      	strb	r2, [r3, #0]
 80041fc:	e021      	b.n	8004242 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	212c      	movs	r1, #44	; 0x2c
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	4413      	add	r3, r2
 800420a:	3360      	adds	r3, #96	; 0x60
 800420c:	2202      	movs	r2, #2
 800420e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	4413      	add	r3, r2
 8004218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004226:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800422e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	4413      	add	r3, r2
 8004238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423c:	461a      	mov	r2, r3
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	4413      	add	r3, r2
 800424a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424e:	461a      	mov	r2, r3
 8004250:	2302      	movs	r3, #2
 8004252:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	b2d9      	uxtb	r1, r3
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	202c      	movs	r0, #44	; 0x2c
 800425e:	fb00 f303 	mul.w	r3, r0, r3
 8004262:	4413      	add	r3, r2
 8004264:	3360      	adds	r3, #96	; 0x60
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f004 f9ee 	bl	800864c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004270:	bf00      	nop
 8004272:	3720      	adds	r7, #32
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08a      	sub	sp, #40	; 0x28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	0c5b      	lsrs	r3, r3, #17
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042ac:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d004      	beq.n	80042be <HCD_RXQLVL_IRQHandler+0x46>
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2b05      	cmp	r3, #5
 80042b8:	f000 80a9 	beq.w	800440e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80042bc:	e0aa      	b.n	8004414 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 80a6 	beq.w	8004412 <HCD_RXQLVL_IRQHandler+0x19a>
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	212c      	movs	r1, #44	; 0x2c
 80042cc:	fb01 f303 	mul.w	r3, r1, r3
 80042d0:	4413      	add	r3, r2
 80042d2:	3344      	adds	r3, #68	; 0x44
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 809b 	beq.w	8004412 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	212c      	movs	r1, #44	; 0x2c
 80042e2:	fb01 f303 	mul.w	r3, r1, r3
 80042e6:	4413      	add	r3, r2
 80042e8:	3350      	adds	r3, #80	; 0x50
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	441a      	add	r2, r3
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	202c      	movs	r0, #44	; 0x2c
 80042f6:	fb00 f303 	mul.w	r3, r0, r3
 80042fa:	440b      	add	r3, r1
 80042fc:	334c      	adds	r3, #76	; 0x4c
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d87a      	bhi.n	80043fa <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	212c      	movs	r1, #44	; 0x2c
 800430e:	fb01 f303 	mul.w	r3, r1, r3
 8004312:	4413      	add	r3, r2
 8004314:	3344      	adds	r3, #68	; 0x44
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	b292      	uxth	r2, r2
 800431c:	4619      	mov	r1, r3
 800431e:	f002 fa1b 	bl	8006758 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	212c      	movs	r1, #44	; 0x2c
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	4413      	add	r3, r2
 800432e:	3344      	adds	r3, #68	; 0x44
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	441a      	add	r2, r3
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	202c      	movs	r0, #44	; 0x2c
 800433c:	fb00 f303 	mul.w	r3, r0, r3
 8004340:	440b      	add	r3, r1
 8004342:	3344      	adds	r3, #68	; 0x44
 8004344:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	212c      	movs	r1, #44	; 0x2c
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	4413      	add	r3, r2
 8004352:	3350      	adds	r3, #80	; 0x50
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	441a      	add	r2, r3
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	202c      	movs	r0, #44	; 0x2c
 8004360:	fb00 f303 	mul.w	r3, r0, r3
 8004364:	440b      	add	r3, r1
 8004366:	3350      	adds	r3, #80	; 0x50
 8004368:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	4413      	add	r3, r2
 8004372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	0cdb      	lsrs	r3, r3, #19
 800437a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800437e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	212c      	movs	r1, #44	; 0x2c
 8004386:	fb01 f303 	mul.w	r3, r1, r3
 800438a:	4413      	add	r3, r2
 800438c:	3340      	adds	r3, #64	; 0x40
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4293      	cmp	r3, r2
 8004396:	d13c      	bne.n	8004412 <HCD_RXQLVL_IRQHandler+0x19a>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d039      	beq.n	8004412 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043b4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043bc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ca:	461a      	mov	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	212c      	movs	r1, #44	; 0x2c
 80043d6:	fb01 f303 	mul.w	r3, r1, r3
 80043da:	4413      	add	r3, r2
 80043dc:	3354      	adds	r3, #84	; 0x54
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	f083 0301 	eor.w	r3, r3, #1
 80043e4:	b2d8      	uxtb	r0, r3
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	212c      	movs	r1, #44	; 0x2c
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	4413      	add	r3, r2
 80043f2:	3354      	adds	r3, #84	; 0x54
 80043f4:	4602      	mov	r2, r0
 80043f6:	701a      	strb	r2, [r3, #0]
      break;
 80043f8:	e00b      	b.n	8004412 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	212c      	movs	r1, #44	; 0x2c
 8004400:	fb01 f303 	mul.w	r3, r1, r3
 8004404:	4413      	add	r3, r2
 8004406:	3360      	adds	r3, #96	; 0x60
 8004408:	2204      	movs	r2, #4
 800440a:	701a      	strb	r2, [r3, #0]
      break;
 800440c:	e001      	b.n	8004412 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800440e:	bf00      	nop
 8004410:	e000      	b.n	8004414 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004412:	bf00      	nop
  }
}
 8004414:	bf00      	nop
 8004416:	3728      	adds	r7, #40	; 0x28
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004448:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b02      	cmp	r3, #2
 8004452:	d10b      	bne.n	800446c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b01      	cmp	r3, #1
 800445c:	d102      	bne.n	8004464 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f004 f8d8 	bl	8008614 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f043 0302 	orr.w	r3, r3, #2
 800446a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b08      	cmp	r3, #8
 8004474:	d132      	bne.n	80044dc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f043 0308 	orr.w	r3, r3, #8
 800447c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b04      	cmp	r3, #4
 8004486:	d126      	bne.n	80044d6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d113      	bne.n	80044b8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004496:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800449a:	d106      	bne.n	80044aa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2102      	movs	r1, #2
 80044a2:	4618      	mov	r0, r3
 80044a4:	f002 fab8 	bl	8006a18 <USB_InitFSLSPClkSel>
 80044a8:	e011      	b.n	80044ce <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2101      	movs	r1, #1
 80044b0:	4618      	mov	r0, r3
 80044b2:	f002 fab1 	bl	8006a18 <USB_InitFSLSPClkSel>
 80044b6:	e00a      	b.n	80044ce <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d106      	bne.n	80044ce <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044c6:	461a      	mov	r2, r3
 80044c8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80044cc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f004 f8ca 	bl	8008668 <HAL_HCD_PortEnabled_Callback>
 80044d4:	e002      	b.n	80044dc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f004 f8d4 	bl	8008684 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b20      	cmp	r3, #32
 80044e4:	d103      	bne.n	80044ee <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f043 0320 	orr.w	r3, r3, #32
 80044ec:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044f4:	461a      	mov	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	6013      	str	r3, [r2, #0]
}
 80044fa:	bf00      	nop
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e12b      	b.n	800476e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fd f90c 	bl	8001748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2224      	movs	r2, #36	; 0x24
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0201 	bic.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004556:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004566:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004568:	f001 f9fc 	bl	8005964 <HAL_RCC_GetPCLK1Freq>
 800456c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	4a81      	ldr	r2, [pc, #516]	; (8004778 <HAL_I2C_Init+0x274>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d807      	bhi.n	8004588 <HAL_I2C_Init+0x84>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4a80      	ldr	r2, [pc, #512]	; (800477c <HAL_I2C_Init+0x278>)
 800457c:	4293      	cmp	r3, r2
 800457e:	bf94      	ite	ls
 8004580:	2301      	movls	r3, #1
 8004582:	2300      	movhi	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	e006      	b.n	8004596 <HAL_I2C_Init+0x92>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4a7d      	ldr	r2, [pc, #500]	; (8004780 <HAL_I2C_Init+0x27c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	bf94      	ite	ls
 8004590:	2301      	movls	r3, #1
 8004592:	2300      	movhi	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e0e7      	b.n	800476e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a78      	ldr	r2, [pc, #480]	; (8004784 <HAL_I2C_Init+0x280>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	0c9b      	lsrs	r3, r3, #18
 80045a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	4a6a      	ldr	r2, [pc, #424]	; (8004778 <HAL_I2C_Init+0x274>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d802      	bhi.n	80045d8 <HAL_I2C_Init+0xd4>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	3301      	adds	r3, #1
 80045d6:	e009      	b.n	80045ec <HAL_I2C_Init+0xe8>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045de:	fb02 f303 	mul.w	r3, r2, r3
 80045e2:	4a69      	ldr	r2, [pc, #420]	; (8004788 <HAL_I2C_Init+0x284>)
 80045e4:	fba2 2303 	umull	r2, r3, r2, r3
 80045e8:	099b      	lsrs	r3, r3, #6
 80045ea:	3301      	adds	r3, #1
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	430b      	orrs	r3, r1
 80045f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	495c      	ldr	r1, [pc, #368]	; (8004778 <HAL_I2C_Init+0x274>)
 8004608:	428b      	cmp	r3, r1
 800460a:	d819      	bhi.n	8004640 <HAL_I2C_Init+0x13c>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	1e59      	subs	r1, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	fbb1 f3f3 	udiv	r3, r1, r3
 800461a:	1c59      	adds	r1, r3, #1
 800461c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004620:	400b      	ands	r3, r1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_I2C_Init+0x138>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1e59      	subs	r1, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	fbb1 f3f3 	udiv	r3, r1, r3
 8004634:	3301      	adds	r3, #1
 8004636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463a:	e051      	b.n	80046e0 <HAL_I2C_Init+0x1dc>
 800463c:	2304      	movs	r3, #4
 800463e:	e04f      	b.n	80046e0 <HAL_I2C_Init+0x1dc>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d111      	bne.n	800466c <HAL_I2C_Init+0x168>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	1e58      	subs	r0, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	440b      	add	r3, r1
 8004656:	fbb0 f3f3 	udiv	r3, r0, r3
 800465a:	3301      	adds	r3, #1
 800465c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf0c      	ite	eq
 8004664:	2301      	moveq	r3, #1
 8004666:	2300      	movne	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	e012      	b.n	8004692 <HAL_I2C_Init+0x18e>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	1e58      	subs	r0, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6859      	ldr	r1, [r3, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	0099      	lsls	r1, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004682:	3301      	adds	r3, #1
 8004684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004688:	2b00      	cmp	r3, #0
 800468a:	bf0c      	ite	eq
 800468c:	2301      	moveq	r3, #1
 800468e:	2300      	movne	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_I2C_Init+0x196>
 8004696:	2301      	movs	r3, #1
 8004698:	e022      	b.n	80046e0 <HAL_I2C_Init+0x1dc>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10e      	bne.n	80046c0 <HAL_I2C_Init+0x1bc>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1e58      	subs	r0, r3, #1
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6859      	ldr	r1, [r3, #4]
 80046aa:	460b      	mov	r3, r1
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	440b      	add	r3, r1
 80046b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b4:	3301      	adds	r3, #1
 80046b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046be:	e00f      	b.n	80046e0 <HAL_I2C_Init+0x1dc>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	1e58      	subs	r0, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6859      	ldr	r1, [r3, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	0099      	lsls	r1, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d6:	3301      	adds	r3, #1
 80046d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	6809      	ldr	r1, [r1, #0]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69da      	ldr	r2, [r3, #28]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800470e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6911      	ldr	r1, [r2, #16]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	68d2      	ldr	r2, [r2, #12]
 800471a:	4311      	orrs	r1, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6812      	ldr	r2, [r2, #0]
 8004720:	430b      	orrs	r3, r1
 8004722:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695a      	ldr	r2, [r3, #20]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	000186a0 	.word	0x000186a0
 800477c:	001e847f 	.word	0x001e847f
 8004780:	003d08ff 	.word	0x003d08ff
 8004784:	431bde83 	.word	0x431bde83
 8004788:	10624dd3 	.word	0x10624dd3

0800478c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e128      	b.n	80049f0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d109      	bne.n	80047be <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a90      	ldr	r2, [pc, #576]	; (80049f8 <HAL_I2S_Init+0x26c>)
 80047b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7fd f80d 	bl	80017d8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2202      	movs	r2, #2
 80047c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80047d4:	f023 030f 	bic.w	r3, r3, #15
 80047d8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2202      	movs	r2, #2
 80047e0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d060      	beq.n	80048ac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d102      	bne.n	80047f8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80047f2:	2310      	movs	r3, #16
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	e001      	b.n	80047fc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80047f8:	2320      	movs	r3, #32
 80047fa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b20      	cmp	r3, #32
 8004802:	d802      	bhi.n	800480a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800480a:	2001      	movs	r0, #1
 800480c:	f001 f9b4 	bl	8005b78 <HAL_RCCEx_GetPeriphCLKFreq>
 8004810:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800481a:	d125      	bne.n	8004868 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d010      	beq.n	8004846 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	fbb2 f2f3 	udiv	r2, r2, r3
 800482e:	4613      	mov	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	461a      	mov	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004840:	3305      	adds	r3, #5
 8004842:	613b      	str	r3, [r7, #16]
 8004844:	e01f      	b.n	8004886 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	461a      	mov	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004862:	3305      	adds	r3, #5
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	e00e      	b.n	8004886 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	461a      	mov	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004882:	3305      	adds	r3, #5
 8004884:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4a5c      	ldr	r2, [pc, #368]	; (80049fc <HAL_I2S_Init+0x270>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	08db      	lsrs	r3, r3, #3
 8004890:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	085b      	lsrs	r3, r3, #1
 80048a2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	021b      	lsls	r3, r3, #8
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	e003      	b.n	80048b4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80048ac:	2302      	movs	r3, #2
 80048ae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d902      	bls.n	80048c0 <HAL_I2S_Init+0x134>
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	2bff      	cmp	r3, #255	; 0xff
 80048be:	d907      	bls.n	80048d0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c4:	f043 0210 	orr.w	r2, r3, #16
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e08f      	b.n	80049f0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	ea42 0103 	orr.w	r1, r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69fa      	ldr	r2, [r7, #28]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80048ee:	f023 030f 	bic.w	r3, r3, #15
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6851      	ldr	r1, [r2, #4]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6892      	ldr	r2, [r2, #8]
 80048fa:	4311      	orrs	r1, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68d2      	ldr	r2, [r2, #12]
 8004900:	4311      	orrs	r1, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6992      	ldr	r2, [r2, #24]
 8004906:	430a      	orrs	r2, r1
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004912:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d161      	bne.n	80049e0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a38      	ldr	r2, [pc, #224]	; (8004a00 <HAL_I2S_Init+0x274>)
 8004920:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a37      	ldr	r2, [pc, #220]	; (8004a04 <HAL_I2S_Init+0x278>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d101      	bne.n	8004930 <HAL_I2S_Init+0x1a4>
 800492c:	4b36      	ldr	r3, [pc, #216]	; (8004a08 <HAL_I2S_Init+0x27c>)
 800492e:	e001      	b.n	8004934 <HAL_I2S_Init+0x1a8>
 8004930:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	4932      	ldr	r1, [pc, #200]	; (8004a04 <HAL_I2S_Init+0x278>)
 800493c:	428a      	cmp	r2, r1
 800493e:	d101      	bne.n	8004944 <HAL_I2S_Init+0x1b8>
 8004940:	4a31      	ldr	r2, [pc, #196]	; (8004a08 <HAL_I2S_Init+0x27c>)
 8004942:	e001      	b.n	8004948 <HAL_I2S_Init+0x1bc>
 8004944:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004948:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800494c:	f023 030f 	bic.w	r3, r3, #15
 8004950:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a2b      	ldr	r2, [pc, #172]	; (8004a04 <HAL_I2S_Init+0x278>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d101      	bne.n	8004960 <HAL_I2S_Init+0x1d4>
 800495c:	4b2a      	ldr	r3, [pc, #168]	; (8004a08 <HAL_I2S_Init+0x27c>)
 800495e:	e001      	b.n	8004964 <HAL_I2S_Init+0x1d8>
 8004960:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004964:	2202      	movs	r2, #2
 8004966:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a25      	ldr	r2, [pc, #148]	; (8004a04 <HAL_I2S_Init+0x278>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d101      	bne.n	8004976 <HAL_I2S_Init+0x1ea>
 8004972:	4b25      	ldr	r3, [pc, #148]	; (8004a08 <HAL_I2S_Init+0x27c>)
 8004974:	e001      	b.n	800497a <HAL_I2S_Init+0x1ee>
 8004976:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004986:	d003      	beq.n	8004990 <HAL_I2S_Init+0x204>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d103      	bne.n	8004998 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	e001      	b.n	800499c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004998:	2300      	movs	r3, #0
 800499a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80049a6:	4313      	orrs	r3, r2
 80049a8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80049b0:	4313      	orrs	r3, r2
 80049b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80049ba:	4313      	orrs	r3, r2
 80049bc:	b29a      	uxth	r2, r3
 80049be:	897b      	ldrh	r3, [r7, #10]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049c8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a0d      	ldr	r2, [pc, #52]	; (8004a04 <HAL_I2S_Init+0x278>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d101      	bne.n	80049d8 <HAL_I2S_Init+0x24c>
 80049d4:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <HAL_I2S_Init+0x27c>)
 80049d6:	e001      	b.n	80049dc <HAL_I2S_Init+0x250>
 80049d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049dc:	897a      	ldrh	r2, [r7, #10]
 80049de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3720      	adds	r7, #32
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	08004b03 	.word	0x08004b03
 80049fc:	cccccccd 	.word	0xcccccccd
 8004a00:	08004c19 	.word	0x08004c19
 8004a04:	40003800 	.word	0x40003800
 8004a08:	40003400 	.word	0x40003400

08004a0c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	881a      	ldrh	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	1c9a      	adds	r2, r3, #2
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10e      	bne.n	8004a9c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a8c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff ffb8 	bl	8004a0c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a9c:	bf00      	nop
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	b292      	uxth	r2, r2
 8004ab8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	1c9a      	adds	r2, r3, #2
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10e      	bne.n	8004afa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004aea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff ff93 	bl	8004a20 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b086      	sub	sp, #24
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d13a      	bne.n	8004b94 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d109      	bne.n	8004b3c <I2S_IRQHandler+0x3a>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b32:	2b40      	cmp	r3, #64	; 0x40
 8004b34:	d102      	bne.n	8004b3c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff ffb4 	bl	8004aa4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b42:	2b40      	cmp	r3, #64	; 0x40
 8004b44:	d126      	bne.n	8004b94 <I2S_IRQHandler+0x92>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d11f      	bne.n	8004b94 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b64:	2300      	movs	r3, #0
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	f043 0202 	orr.w	r2, r3, #2
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff ff50 	bl	8004a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d136      	bne.n	8004c0e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d109      	bne.n	8004bbe <I2S_IRQHandler+0xbc>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb4:	2b80      	cmp	r3, #128	; 0x80
 8004bb6:	d102      	bne.n	8004bbe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff ff45 	bl	8004a48 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d122      	bne.n	8004c0e <I2S_IRQHandler+0x10c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	d11b      	bne.n	8004c0e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004be4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c00:	f043 0204 	orr.w	r2, r3, #4
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff ff13 	bl	8004a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c0e:	bf00      	nop
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
	...

08004c18 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4aa2      	ldr	r2, [pc, #648]	; (8004eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d101      	bne.n	8004c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004c32:	4ba2      	ldr	r3, [pc, #648]	; (8004ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c34:	e001      	b.n	8004c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004c36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a9b      	ldr	r2, [pc, #620]	; (8004eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d101      	bne.n	8004c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004c50:	4b9a      	ldr	r3, [pc, #616]	; (8004ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c52:	e001      	b.n	8004c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004c54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c64:	d004      	beq.n	8004c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f040 8099 	bne.w	8004da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d107      	bne.n	8004c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f925 	bl	8004ed4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d107      	bne.n	8004ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f9c8 	bl	8005034 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004caa:	2b40      	cmp	r3, #64	; 0x40
 8004cac:	d13a      	bne.n	8004d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d035      	beq.n	8004d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a7e      	ldr	r2, [pc, #504]	; (8004eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d101      	bne.n	8004cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004cc2:	4b7e      	ldr	r3, [pc, #504]	; (8004ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cc4:	e001      	b.n	8004cca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004cc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4979      	ldr	r1, [pc, #484]	; (8004eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cd2:	428b      	cmp	r3, r1
 8004cd4:	d101      	bne.n	8004cda <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004cd6:	4b79      	ldr	r3, [pc, #484]	; (8004ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cd8:	e001      	b.n	8004cde <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004cda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ce2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cf2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d16:	f043 0202 	orr.w	r2, r3, #2
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff fe88 	bl	8004a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	f040 80be 	bne.w	8004eac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 80b8 	beq.w	8004eac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d4a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a59      	ldr	r2, [pc, #356]	; (8004eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d101      	bne.n	8004d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004d56:	4b59      	ldr	r3, [pc, #356]	; (8004ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d58:	e001      	b.n	8004d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004d5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4954      	ldr	r1, [pc, #336]	; (8004eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d66:	428b      	cmp	r3, r1
 8004d68:	d101      	bne.n	8004d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004d6a:	4b54      	ldr	r3, [pc, #336]	; (8004ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d6c:	e001      	b.n	8004d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004d6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d76:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60bb      	str	r3, [r7, #8]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	60bb      	str	r3, [r7, #8]
 8004d84:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	f043 0204 	orr.w	r2, r3, #4
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff fe4a 	bl	8004a34 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004da0:	e084      	b.n	8004eac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d107      	bne.n	8004dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f8be 	bl	8004f38 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d107      	bne.n	8004dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f8fd 	bl	8004fd0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ddc:	2b40      	cmp	r3, #64	; 0x40
 8004dde:	d12f      	bne.n	8004e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d02a      	beq.n	8004e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004df8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a2e      	ldr	r2, [pc, #184]	; (8004eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d101      	bne.n	8004e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004e04:	4b2d      	ldr	r3, [pc, #180]	; (8004ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e06:	e001      	b.n	8004e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004e08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4929      	ldr	r1, [pc, #164]	; (8004eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e14:	428b      	cmp	r3, r1
 8004e16:	d101      	bne.n	8004e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004e18:	4b28      	ldr	r3, [pc, #160]	; (8004ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e1a:	e001      	b.n	8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004e1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e24:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	f043 0202 	orr.w	r2, r3, #2
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff fdfa 	bl	8004a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d131      	bne.n	8004eae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d02c      	beq.n	8004eae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a17      	ldr	r2, [pc, #92]	; (8004eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d101      	bne.n	8004e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004e5e:	4b17      	ldr	r3, [pc, #92]	; (8004ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e60:	e001      	b.n	8004e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004e62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4912      	ldr	r1, [pc, #72]	; (8004eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e6e:	428b      	cmp	r3, r1
 8004e70:	d101      	bne.n	8004e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004e72:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e74:	e001      	b.n	8004e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004e76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e7e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e8e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9c:	f043 0204 	orr.w	r2, r3, #4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7ff fdc5 	bl	8004a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004eaa:	e000      	b.n	8004eae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004eac:	bf00      	nop
}
 8004eae:	bf00      	nop
 8004eb0:	3720      	adds	r7, #32
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40003800 	.word	0x40003800
 8004ebc:	40003400 	.word	0x40003400

08004ec0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	1c99      	adds	r1, r3, #2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6251      	str	r1, [r2, #36]	; 0x24
 8004ee6:	881a      	ldrh	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d113      	bne.n	8004f2e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d106      	bne.n	8004f2e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff ffc9 	bl	8004ec0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f2e:	bf00      	nop
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	1c99      	adds	r1, r3, #2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6251      	str	r1, [r2, #36]	; 0x24
 8004f4a:	8819      	ldrh	r1, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1d      	ldr	r2, [pc, #116]	; (8004fc8 <I2SEx_TxISR_I2SExt+0x90>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d101      	bne.n	8004f5a <I2SEx_TxISR_I2SExt+0x22>
 8004f56:	4b1d      	ldr	r3, [pc, #116]	; (8004fcc <I2SEx_TxISR_I2SExt+0x94>)
 8004f58:	e001      	b.n	8004f5e <I2SEx_TxISR_I2SExt+0x26>
 8004f5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f5e:	460a      	mov	r2, r1
 8004f60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d121      	bne.n	8004fbe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a12      	ldr	r2, [pc, #72]	; (8004fc8 <I2SEx_TxISR_I2SExt+0x90>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d101      	bne.n	8004f88 <I2SEx_TxISR_I2SExt+0x50>
 8004f84:	4b11      	ldr	r3, [pc, #68]	; (8004fcc <I2SEx_TxISR_I2SExt+0x94>)
 8004f86:	e001      	b.n	8004f8c <I2SEx_TxISR_I2SExt+0x54>
 8004f88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	490d      	ldr	r1, [pc, #52]	; (8004fc8 <I2SEx_TxISR_I2SExt+0x90>)
 8004f94:	428b      	cmp	r3, r1
 8004f96:	d101      	bne.n	8004f9c <I2SEx_TxISR_I2SExt+0x64>
 8004f98:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <I2SEx_TxISR_I2SExt+0x94>)
 8004f9a:	e001      	b.n	8004fa0 <I2SEx_TxISR_I2SExt+0x68>
 8004f9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fa0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fa4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d106      	bne.n	8004fbe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7ff ff81 	bl	8004ec0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fbe:	bf00      	nop
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40003800 	.word	0x40003800
 8004fcc:	40003400 	.word	0x40003400

08004fd0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68d8      	ldr	r0, [r3, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe2:	1c99      	adds	r1, r3, #2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004fe8:	b282      	uxth	r2, r0
 8004fea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d113      	bne.n	800502c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005012:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff ff4a 	bl	8004ec0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800502c:	bf00      	nop
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a20      	ldr	r2, [pc, #128]	; (80050c4 <I2SEx_RxISR_I2SExt+0x90>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d101      	bne.n	800504a <I2SEx_RxISR_I2SExt+0x16>
 8005046:	4b20      	ldr	r3, [pc, #128]	; (80050c8 <I2SEx_RxISR_I2SExt+0x94>)
 8005048:	e001      	b.n	800504e <I2SEx_RxISR_I2SExt+0x1a>
 800504a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800504e:	68d8      	ldr	r0, [r3, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	1c99      	adds	r1, r3, #2
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	62d1      	str	r1, [r2, #44]	; 0x2c
 800505a:	b282      	uxth	r2, r0
 800505c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d121      	bne.n	80050ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a12      	ldr	r2, [pc, #72]	; (80050c4 <I2SEx_RxISR_I2SExt+0x90>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d101      	bne.n	8005084 <I2SEx_RxISR_I2SExt+0x50>
 8005080:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <I2SEx_RxISR_I2SExt+0x94>)
 8005082:	e001      	b.n	8005088 <I2SEx_RxISR_I2SExt+0x54>
 8005084:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	490d      	ldr	r1, [pc, #52]	; (80050c4 <I2SEx_RxISR_I2SExt+0x90>)
 8005090:	428b      	cmp	r3, r1
 8005092:	d101      	bne.n	8005098 <I2SEx_RxISR_I2SExt+0x64>
 8005094:	4b0c      	ldr	r3, [pc, #48]	; (80050c8 <I2SEx_RxISR_I2SExt+0x94>)
 8005096:	e001      	b.n	800509c <I2SEx_RxISR_I2SExt+0x68>
 8005098:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800509c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff ff03 	bl	8004ec0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050ba:	bf00      	nop
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	40003800 	.word	0x40003800
 80050c8:	40003400 	.word	0x40003400

080050cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e264      	b.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d075      	beq.n	80051d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050ea:	4ba3      	ldr	r3, [pc, #652]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 030c 	and.w	r3, r3, #12
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d00c      	beq.n	8005110 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050f6:	4ba0      	ldr	r3, [pc, #640]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050fe:	2b08      	cmp	r3, #8
 8005100:	d112      	bne.n	8005128 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005102:	4b9d      	ldr	r3, [pc, #628]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800510a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800510e:	d10b      	bne.n	8005128 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005110:	4b99      	ldr	r3, [pc, #612]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d05b      	beq.n	80051d4 <HAL_RCC_OscConfig+0x108>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d157      	bne.n	80051d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e23f      	b.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005130:	d106      	bne.n	8005140 <HAL_RCC_OscConfig+0x74>
 8005132:	4b91      	ldr	r3, [pc, #580]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a90      	ldr	r2, [pc, #576]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 8005138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	e01d      	b.n	800517c <HAL_RCC_OscConfig+0xb0>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005148:	d10c      	bne.n	8005164 <HAL_RCC_OscConfig+0x98>
 800514a:	4b8b      	ldr	r3, [pc, #556]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a8a      	ldr	r2, [pc, #552]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 8005150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	4b88      	ldr	r3, [pc, #544]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a87      	ldr	r2, [pc, #540]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 800515c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	e00b      	b.n	800517c <HAL_RCC_OscConfig+0xb0>
 8005164:	4b84      	ldr	r3, [pc, #528]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a83      	ldr	r2, [pc, #524]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 800516a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	4b81      	ldr	r3, [pc, #516]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a80      	ldr	r2, [pc, #512]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 8005176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800517a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d013      	beq.n	80051ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005184:	f7fc fda0 	bl	8001cc8 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800518c:	f7fc fd9c 	bl	8001cc8 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b64      	cmp	r3, #100	; 0x64
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e204      	b.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519e:	4b76      	ldr	r3, [pc, #472]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f0      	beq.n	800518c <HAL_RCC_OscConfig+0xc0>
 80051aa:	e014      	b.n	80051d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ac:	f7fc fd8c 	bl	8001cc8 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051b4:	f7fc fd88 	bl	8001cc8 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b64      	cmp	r3, #100	; 0x64
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e1f0      	b.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051c6:	4b6c      	ldr	r3, [pc, #432]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f0      	bne.n	80051b4 <HAL_RCC_OscConfig+0xe8>
 80051d2:	e000      	b.n	80051d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d063      	beq.n	80052aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051e2:	4b65      	ldr	r3, [pc, #404]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 030c 	and.w	r3, r3, #12
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00b      	beq.n	8005206 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ee:	4b62      	ldr	r3, [pc, #392]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d11c      	bne.n	8005234 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051fa:	4b5f      	ldr	r3, [pc, #380]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d116      	bne.n	8005234 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005206:	4b5c      	ldr	r3, [pc, #368]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <HAL_RCC_OscConfig+0x152>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d001      	beq.n	800521e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e1c4      	b.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800521e:	4b56      	ldr	r3, [pc, #344]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	4952      	ldr	r1, [pc, #328]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 800522e:	4313      	orrs	r3, r2
 8005230:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005232:	e03a      	b.n	80052aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d020      	beq.n	800527e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800523c:	4b4f      	ldr	r3, [pc, #316]	; (800537c <HAL_RCC_OscConfig+0x2b0>)
 800523e:	2201      	movs	r2, #1
 8005240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005242:	f7fc fd41 	bl	8001cc8 <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800524a:	f7fc fd3d 	bl	8001cc8 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e1a5      	b.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800525c:	4b46      	ldr	r3, [pc, #280]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005268:	4b43      	ldr	r3, [pc, #268]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	4940      	ldr	r1, [pc, #256]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 8005278:	4313      	orrs	r3, r2
 800527a:	600b      	str	r3, [r1, #0]
 800527c:	e015      	b.n	80052aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800527e:	4b3f      	ldr	r3, [pc, #252]	; (800537c <HAL_RCC_OscConfig+0x2b0>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fc fd20 	bl	8001cc8 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800528c:	f7fc fd1c 	bl	8001cc8 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e184      	b.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800529e:	4b36      	ldr	r3, [pc, #216]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d030      	beq.n	8005318 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d016      	beq.n	80052ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052be:	4b30      	ldr	r3, [pc, #192]	; (8005380 <HAL_RCC_OscConfig+0x2b4>)
 80052c0:	2201      	movs	r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c4:	f7fc fd00 	bl	8001cc8 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052cc:	f7fc fcfc 	bl	8001cc8 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e164      	b.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052de:	4b26      	ldr	r3, [pc, #152]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 80052e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCC_OscConfig+0x200>
 80052ea:	e015      	b.n	8005318 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ec:	4b24      	ldr	r3, [pc, #144]	; (8005380 <HAL_RCC_OscConfig+0x2b4>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f2:	f7fc fce9 	bl	8001cc8 <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f8:	e008      	b.n	800530c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052fa:	f7fc fce5 	bl	8001cc8 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e14d      	b.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800530c:	4b1a      	ldr	r3, [pc, #104]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 800530e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f0      	bne.n	80052fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 80a0 	beq.w	8005466 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005326:	2300      	movs	r3, #0
 8005328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800532a:	4b13      	ldr	r3, [pc, #76]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10f      	bne.n	8005356 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005336:	2300      	movs	r3, #0
 8005338:	60bb      	str	r3, [r7, #8]
 800533a:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	4a0e      	ldr	r2, [pc, #56]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 8005340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005344:	6413      	str	r3, [r2, #64]	; 0x40
 8005346:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <HAL_RCC_OscConfig+0x2ac>)
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534e:	60bb      	str	r3, [r7, #8]
 8005350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005352:	2301      	movs	r3, #1
 8005354:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005356:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <HAL_RCC_OscConfig+0x2b8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535e:	2b00      	cmp	r3, #0
 8005360:	d121      	bne.n	80053a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005362:	4b08      	ldr	r3, [pc, #32]	; (8005384 <HAL_RCC_OscConfig+0x2b8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a07      	ldr	r2, [pc, #28]	; (8005384 <HAL_RCC_OscConfig+0x2b8>)
 8005368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800536c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800536e:	f7fc fcab 	bl	8001cc8 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005374:	e011      	b.n	800539a <HAL_RCC_OscConfig+0x2ce>
 8005376:	bf00      	nop
 8005378:	40023800 	.word	0x40023800
 800537c:	42470000 	.word	0x42470000
 8005380:	42470e80 	.word	0x42470e80
 8005384:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005388:	f7fc fc9e 	bl	8001cc8 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e106      	b.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800539a:	4b85      	ldr	r3, [pc, #532]	; (80055b0 <HAL_RCC_OscConfig+0x4e4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0f0      	beq.n	8005388 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d106      	bne.n	80053bc <HAL_RCC_OscConfig+0x2f0>
 80053ae:	4b81      	ldr	r3, [pc, #516]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b2:	4a80      	ldr	r2, [pc, #512]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	6713      	str	r3, [r2, #112]	; 0x70
 80053ba:	e01c      	b.n	80053f6 <HAL_RCC_OscConfig+0x32a>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2b05      	cmp	r3, #5
 80053c2:	d10c      	bne.n	80053de <HAL_RCC_OscConfig+0x312>
 80053c4:	4b7b      	ldr	r3, [pc, #492]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 80053c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c8:	4a7a      	ldr	r2, [pc, #488]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 80053ca:	f043 0304 	orr.w	r3, r3, #4
 80053ce:	6713      	str	r3, [r2, #112]	; 0x70
 80053d0:	4b78      	ldr	r3, [pc, #480]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 80053d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d4:	4a77      	ldr	r2, [pc, #476]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 80053d6:	f043 0301 	orr.w	r3, r3, #1
 80053da:	6713      	str	r3, [r2, #112]	; 0x70
 80053dc:	e00b      	b.n	80053f6 <HAL_RCC_OscConfig+0x32a>
 80053de:	4b75      	ldr	r3, [pc, #468]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 80053e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e2:	4a74      	ldr	r2, [pc, #464]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 80053e4:	f023 0301 	bic.w	r3, r3, #1
 80053e8:	6713      	str	r3, [r2, #112]	; 0x70
 80053ea:	4b72      	ldr	r3, [pc, #456]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ee:	4a71      	ldr	r2, [pc, #452]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 80053f0:	f023 0304 	bic.w	r3, r3, #4
 80053f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d015      	beq.n	800542a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fe:	f7fc fc63 	bl	8001cc8 <HAL_GetTick>
 8005402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005404:	e00a      	b.n	800541c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005406:	f7fc fc5f 	bl	8001cc8 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	f241 3288 	movw	r2, #5000	; 0x1388
 8005414:	4293      	cmp	r3, r2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e0c5      	b.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800541c:	4b65      	ldr	r3, [pc, #404]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 800541e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0ee      	beq.n	8005406 <HAL_RCC_OscConfig+0x33a>
 8005428:	e014      	b.n	8005454 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800542a:	f7fc fc4d 	bl	8001cc8 <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005430:	e00a      	b.n	8005448 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005432:	f7fc fc49 	bl	8001cc8 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005440:	4293      	cmp	r3, r2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e0af      	b.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005448:	4b5a      	ldr	r3, [pc, #360]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 800544a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1ee      	bne.n	8005432 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005454:	7dfb      	ldrb	r3, [r7, #23]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d105      	bne.n	8005466 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800545a:	4b56      	ldr	r3, [pc, #344]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	4a55      	ldr	r2, [pc, #340]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 8005460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005464:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 809b 	beq.w	80055a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005470:	4b50      	ldr	r3, [pc, #320]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 030c 	and.w	r3, r3, #12
 8005478:	2b08      	cmp	r3, #8
 800547a:	d05c      	beq.n	8005536 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	2b02      	cmp	r3, #2
 8005482:	d141      	bne.n	8005508 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005484:	4b4c      	ldr	r3, [pc, #304]	; (80055b8 <HAL_RCC_OscConfig+0x4ec>)
 8005486:	2200      	movs	r2, #0
 8005488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548a:	f7fc fc1d 	bl	8001cc8 <HAL_GetTick>
 800548e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005492:	f7fc fc19 	bl	8001cc8 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e081      	b.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a4:	4b43      	ldr	r3, [pc, #268]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1f0      	bne.n	8005492 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	019b      	lsls	r3, r3, #6
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c6:	085b      	lsrs	r3, r3, #1
 80054c8:	3b01      	subs	r3, #1
 80054ca:	041b      	lsls	r3, r3, #16
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	061b      	lsls	r3, r3, #24
 80054d4:	4937      	ldr	r1, [pc, #220]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054da:	4b37      	ldr	r3, [pc, #220]	; (80055b8 <HAL_RCC_OscConfig+0x4ec>)
 80054dc:	2201      	movs	r2, #1
 80054de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e0:	f7fc fbf2 	bl	8001cc8 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054e8:	f7fc fbee 	bl	8001cc8 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e056      	b.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054fa:	4b2e      	ldr	r3, [pc, #184]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0f0      	beq.n	80054e8 <HAL_RCC_OscConfig+0x41c>
 8005506:	e04e      	b.n	80055a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005508:	4b2b      	ldr	r3, [pc, #172]	; (80055b8 <HAL_RCC_OscConfig+0x4ec>)
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550e:	f7fc fbdb 	bl	8001cc8 <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005516:	f7fc fbd7 	bl	8001cc8 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e03f      	b.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005528:	4b22      	ldr	r3, [pc, #136]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1f0      	bne.n	8005516 <HAL_RCC_OscConfig+0x44a>
 8005534:	e037      	b.n	80055a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e032      	b.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005542:	4b1c      	ldr	r3, [pc, #112]	; (80055b4 <HAL_RCC_OscConfig+0x4e8>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d028      	beq.n	80055a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800555a:	429a      	cmp	r2, r3
 800555c:	d121      	bne.n	80055a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005568:	429a      	cmp	r2, r3
 800556a:	d11a      	bne.n	80055a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005572:	4013      	ands	r3, r2
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005578:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800557a:	4293      	cmp	r3, r2
 800557c:	d111      	bne.n	80055a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005588:	085b      	lsrs	r3, r3, #1
 800558a:	3b01      	subs	r3, #1
 800558c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800558e:	429a      	cmp	r2, r3
 8005590:	d107      	bne.n	80055a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800559e:	429a      	cmp	r2, r3
 80055a0:	d001      	beq.n	80055a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40007000 	.word	0x40007000
 80055b4:	40023800 	.word	0x40023800
 80055b8:	42470060 	.word	0x42470060

080055bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e0cc      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055d0:	4b68      	ldr	r3, [pc, #416]	; (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d90c      	bls.n	80055f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055de:	4b65      	ldr	r3, [pc, #404]	; (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e6:	4b63      	ldr	r3, [pc, #396]	; (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d001      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e0b8      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d020      	beq.n	8005646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005610:	4b59      	ldr	r3, [pc, #356]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	4a58      	ldr	r2, [pc, #352]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800561a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005628:	4b53      	ldr	r3, [pc, #332]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4a52      	ldr	r2, [pc, #328]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005634:	4b50      	ldr	r3, [pc, #320]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	494d      	ldr	r1, [pc, #308]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	4313      	orrs	r3, r2
 8005644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d044      	beq.n	80056dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d107      	bne.n	800566a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800565a:	4b47      	ldr	r3, [pc, #284]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d119      	bne.n	800569a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e07f      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d003      	beq.n	800567a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005676:	2b03      	cmp	r3, #3
 8005678:	d107      	bne.n	800568a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800567a:	4b3f      	ldr	r3, [pc, #252]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d109      	bne.n	800569a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e06f      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568a:	4b3b      	ldr	r3, [pc, #236]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e067      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800569a:	4b37      	ldr	r3, [pc, #220]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f023 0203 	bic.w	r2, r3, #3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	4934      	ldr	r1, [pc, #208]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056ac:	f7fc fb0c 	bl	8001cc8 <HAL_GetTick>
 80056b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b2:	e00a      	b.n	80056ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056b4:	f7fc fb08 	bl	8001cc8 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e04f      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ca:	4b2b      	ldr	r3, [pc, #172]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 020c 	and.w	r2, r3, #12
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	429a      	cmp	r2, r3
 80056da:	d1eb      	bne.n	80056b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056dc:	4b25      	ldr	r3, [pc, #148]	; (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d20c      	bcs.n	8005704 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ea:	4b22      	ldr	r3, [pc, #136]	; (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f2:	4b20      	ldr	r3, [pc, #128]	; (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d001      	beq.n	8005704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e032      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d008      	beq.n	8005722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005710:	4b19      	ldr	r3, [pc, #100]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	4916      	ldr	r1, [pc, #88]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	4313      	orrs	r3, r2
 8005720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800572e:	4b12      	ldr	r3, [pc, #72]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	490e      	ldr	r1, [pc, #56]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800573e:	4313      	orrs	r3, r2
 8005740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005742:	f000 f821 	bl	8005788 <HAL_RCC_GetSysClockFreq>
 8005746:	4602      	mov	r2, r0
 8005748:	4b0b      	ldr	r3, [pc, #44]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	091b      	lsrs	r3, r3, #4
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	490a      	ldr	r1, [pc, #40]	; (800577c <HAL_RCC_ClockConfig+0x1c0>)
 8005754:	5ccb      	ldrb	r3, [r1, r3]
 8005756:	fa22 f303 	lsr.w	r3, r2, r3
 800575a:	4a09      	ldr	r2, [pc, #36]	; (8005780 <HAL_RCC_ClockConfig+0x1c4>)
 800575c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800575e:	4b09      	ldr	r3, [pc, #36]	; (8005784 <HAL_RCC_ClockConfig+0x1c8>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f7fc fa6c 	bl	8001c40 <HAL_InitTick>

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40023c00 	.word	0x40023c00
 8005778:	40023800 	.word	0x40023800
 800577c:	08009854 	.word	0x08009854
 8005780:	2000000c 	.word	0x2000000c
 8005784:	20000010 	.word	0x20000010

08005788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005788:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	607b      	str	r3, [r7, #4]
 8005794:	2300      	movs	r3, #0
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	2300      	movs	r3, #0
 800579a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057a0:	4b67      	ldr	r3, [pc, #412]	; (8005940 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 030c 	and.w	r3, r3, #12
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d00d      	beq.n	80057c8 <HAL_RCC_GetSysClockFreq+0x40>
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	f200 80bd 	bhi.w	800592c <HAL_RCC_GetSysClockFreq+0x1a4>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_RCC_GetSysClockFreq+0x34>
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d003      	beq.n	80057c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80057ba:	e0b7      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057bc:	4b61      	ldr	r3, [pc, #388]	; (8005944 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80057be:	60bb      	str	r3, [r7, #8]
       break;
 80057c0:	e0b7      	b.n	8005932 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057c2:	4b61      	ldr	r3, [pc, #388]	; (8005948 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80057c4:	60bb      	str	r3, [r7, #8]
      break;
 80057c6:	e0b4      	b.n	8005932 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057c8:	4b5d      	ldr	r3, [pc, #372]	; (8005940 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057d2:	4b5b      	ldr	r3, [pc, #364]	; (8005940 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d04d      	beq.n	800587a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057de:	4b58      	ldr	r3, [pc, #352]	; (8005940 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	099b      	lsrs	r3, r3, #6
 80057e4:	461a      	mov	r2, r3
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057ee:	f04f 0100 	mov.w	r1, #0
 80057f2:	ea02 0800 	and.w	r8, r2, r0
 80057f6:	ea03 0901 	and.w	r9, r3, r1
 80057fa:	4640      	mov	r0, r8
 80057fc:	4649      	mov	r1, r9
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	014b      	lsls	r3, r1, #5
 8005808:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800580c:	0142      	lsls	r2, r0, #5
 800580e:	4610      	mov	r0, r2
 8005810:	4619      	mov	r1, r3
 8005812:	ebb0 0008 	subs.w	r0, r0, r8
 8005816:	eb61 0109 	sbc.w	r1, r1, r9
 800581a:	f04f 0200 	mov.w	r2, #0
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	018b      	lsls	r3, r1, #6
 8005824:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005828:	0182      	lsls	r2, r0, #6
 800582a:	1a12      	subs	r2, r2, r0
 800582c:	eb63 0301 	sbc.w	r3, r3, r1
 8005830:	f04f 0000 	mov.w	r0, #0
 8005834:	f04f 0100 	mov.w	r1, #0
 8005838:	00d9      	lsls	r1, r3, #3
 800583a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800583e:	00d0      	lsls	r0, r2, #3
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	eb12 0208 	adds.w	r2, r2, r8
 8005848:	eb43 0309 	adc.w	r3, r3, r9
 800584c:	f04f 0000 	mov.w	r0, #0
 8005850:	f04f 0100 	mov.w	r1, #0
 8005854:	0259      	lsls	r1, r3, #9
 8005856:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800585a:	0250      	lsls	r0, r2, #9
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4610      	mov	r0, r2
 8005862:	4619      	mov	r1, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	461a      	mov	r2, r3
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	f7fa fd08 	bl	8000280 <__aeabi_uldivmod>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4613      	mov	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	e04a      	b.n	8005910 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800587a:	4b31      	ldr	r3, [pc, #196]	; (8005940 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	099b      	lsrs	r3, r3, #6
 8005880:	461a      	mov	r2, r3
 8005882:	f04f 0300 	mov.w	r3, #0
 8005886:	f240 10ff 	movw	r0, #511	; 0x1ff
 800588a:	f04f 0100 	mov.w	r1, #0
 800588e:	ea02 0400 	and.w	r4, r2, r0
 8005892:	ea03 0501 	and.w	r5, r3, r1
 8005896:	4620      	mov	r0, r4
 8005898:	4629      	mov	r1, r5
 800589a:	f04f 0200 	mov.w	r2, #0
 800589e:	f04f 0300 	mov.w	r3, #0
 80058a2:	014b      	lsls	r3, r1, #5
 80058a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058a8:	0142      	lsls	r2, r0, #5
 80058aa:	4610      	mov	r0, r2
 80058ac:	4619      	mov	r1, r3
 80058ae:	1b00      	subs	r0, r0, r4
 80058b0:	eb61 0105 	sbc.w	r1, r1, r5
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	f04f 0300 	mov.w	r3, #0
 80058bc:	018b      	lsls	r3, r1, #6
 80058be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80058c2:	0182      	lsls	r2, r0, #6
 80058c4:	1a12      	subs	r2, r2, r0
 80058c6:	eb63 0301 	sbc.w	r3, r3, r1
 80058ca:	f04f 0000 	mov.w	r0, #0
 80058ce:	f04f 0100 	mov.w	r1, #0
 80058d2:	00d9      	lsls	r1, r3, #3
 80058d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058d8:	00d0      	lsls	r0, r2, #3
 80058da:	4602      	mov	r2, r0
 80058dc:	460b      	mov	r3, r1
 80058de:	1912      	adds	r2, r2, r4
 80058e0:	eb45 0303 	adc.w	r3, r5, r3
 80058e4:	f04f 0000 	mov.w	r0, #0
 80058e8:	f04f 0100 	mov.w	r1, #0
 80058ec:	0299      	lsls	r1, r3, #10
 80058ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80058f2:	0290      	lsls	r0, r2, #10
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4610      	mov	r0, r2
 80058fa:	4619      	mov	r1, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	461a      	mov	r2, r3
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	f7fa fcbc 	bl	8000280 <__aeabi_uldivmod>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4613      	mov	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	0c1b      	lsrs	r3, r3, #16
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	3301      	adds	r3, #1
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	fbb2 f3f3 	udiv	r3, r2, r3
 8005928:	60bb      	str	r3, [r7, #8]
      break;
 800592a:	e002      	b.n	8005932 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800592c:	4b05      	ldr	r3, [pc, #20]	; (8005944 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800592e:	60bb      	str	r3, [r7, #8]
      break;
 8005930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005932:	68bb      	ldr	r3, [r7, #8]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800593e:	bf00      	nop
 8005940:	40023800 	.word	0x40023800
 8005944:	00f42400 	.word	0x00f42400
 8005948:	007a1200 	.word	0x007a1200

0800594c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005950:	4b03      	ldr	r3, [pc, #12]	; (8005960 <HAL_RCC_GetHCLKFreq+0x14>)
 8005952:	681b      	ldr	r3, [r3, #0]
}
 8005954:	4618      	mov	r0, r3
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	2000000c 	.word	0x2000000c

08005964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005968:	f7ff fff0 	bl	800594c <HAL_RCC_GetHCLKFreq>
 800596c:	4602      	mov	r2, r0
 800596e:	4b05      	ldr	r3, [pc, #20]	; (8005984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	0a9b      	lsrs	r3, r3, #10
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	4903      	ldr	r1, [pc, #12]	; (8005988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800597a:	5ccb      	ldrb	r3, [r1, r3]
 800597c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005980:	4618      	mov	r0, r3
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40023800 	.word	0x40023800
 8005988:	08009864 	.word	0x08009864

0800598c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005990:	f7ff ffdc 	bl	800594c <HAL_RCC_GetHCLKFreq>
 8005994:	4602      	mov	r2, r0
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	0b5b      	lsrs	r3, r3, #13
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	4903      	ldr	r1, [pc, #12]	; (80059b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059a2:	5ccb      	ldrb	r3, [r1, r3]
 80059a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	40023800 	.word	0x40023800
 80059b0:	08009864 	.word	0x08009864

080059b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d105      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d035      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059dc:	4b62      	ldr	r3, [pc, #392]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059e2:	f7fc f971 	bl	8001cc8 <HAL_GetTick>
 80059e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059e8:	e008      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059ea:	f7fc f96d 	bl	8001cc8 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e0b0      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059fc:	4b5b      	ldr	r3, [pc, #364]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1f0      	bne.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	019a      	lsls	r2, r3, #6
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	071b      	lsls	r3, r3, #28
 8005a14:	4955      	ldr	r1, [pc, #340]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a1c:	4b52      	ldr	r3, [pc, #328]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005a1e:	2201      	movs	r2, #1
 8005a20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a22:	f7fc f951 	bl	8001cc8 <HAL_GetTick>
 8005a26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a28:	e008      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a2a:	f7fc f94d 	bl	8001cc8 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e090      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a3c:	4b4b      	ldr	r3, [pc, #300]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0f0      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8083 	beq.w	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	4b44      	ldr	r3, [pc, #272]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	4a43      	ldr	r2, [pc, #268]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a64:	6413      	str	r3, [r2, #64]	; 0x40
 8005a66:	4b41      	ldr	r3, [pc, #260]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a72:	4b3f      	ldr	r3, [pc, #252]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a3e      	ldr	r2, [pc, #248]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a7c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a7e:	f7fc f923 	bl	8001cc8 <HAL_GetTick>
 8005a82:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a84:	e008      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005a86:	f7fc f91f 	bl	8001cc8 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e062      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a98:	4b35      	ldr	r3, [pc, #212]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0f0      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005aa4:	4b31      	ldr	r3, [pc, #196]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d02f      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d028      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ac2:	4b2a      	ldr	r3, [pc, #168]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005acc:	4b29      	ldr	r3, [pc, #164]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ace:	2201      	movs	r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ad2:	4b28      	ldr	r3, [pc, #160]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005ad8:	4a24      	ldr	r2, [pc, #144]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ade:	4b23      	ldr	r3, [pc, #140]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d114      	bne.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005aea:	f7fc f8ed 	bl	8001cc8 <HAL_GetTick>
 8005aee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005af0:	e00a      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005af2:	f7fc f8e9 	bl	8001cc8 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e02a      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b08:	4b18      	ldr	r3, [pc, #96]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0ee      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b20:	d10d      	bne.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005b22:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b36:	490d      	ldr	r1, [pc, #52]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	608b      	str	r3, [r1, #8]
 8005b3c:	e005      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	4a0a      	ldr	r2, [pc, #40]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b44:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b48:	6093      	str	r3, [r2, #8]
 8005b4a:	4b08      	ldr	r3, [pc, #32]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b56:	4905      	ldr	r1, [pc, #20]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	42470068 	.word	0x42470068
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	40007000 	.word	0x40007000
 8005b74:	42470e40 	.word	0x42470e40

08005b78 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d13e      	bne.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005b96:	4b23      	ldr	r3, [pc, #140]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d005      	beq.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d12f      	bne.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005bac:	4b1e      	ldr	r3, [pc, #120]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005bae:	617b      	str	r3, [r7, #20]
          break;
 8005bb0:	e02f      	b.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005bb2:	4b1c      	ldr	r3, [pc, #112]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bbe:	d108      	bne.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005bc0:	4b18      	ldr	r3, [pc, #96]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bc8:	4a18      	ldr	r2, [pc, #96]	; (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bce:	613b      	str	r3, [r7, #16]
 8005bd0:	e007      	b.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005bd2:	4b14      	ldr	r3, [pc, #80]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bda:	4a15      	ldr	r2, [pc, #84]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005be2:	4b10      	ldr	r3, [pc, #64]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005be8:	099b      	lsrs	r3, r3, #6
 8005bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	fb02 f303 	mul.w	r3, r2, r3
 8005bf4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005bf6:	4b0b      	ldr	r3, [pc, #44]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bfc:	0f1b      	lsrs	r3, r3, #28
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c08:	617b      	str	r3, [r7, #20]
          break;
 8005c0a:	e002      	b.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]
          break;
 8005c10:	bf00      	nop
        }
      }
      break;
 8005c12:	bf00      	nop
    }
  }
  return frequency;
 8005c14:	697b      	ldr	r3, [r7, #20]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	40023800 	.word	0x40023800
 8005c28:	00bb8000 	.word	0x00bb8000
 8005c2c:	007a1200 	.word	0x007a1200
 8005c30:	00f42400 	.word	0x00f42400

08005c34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e07b      	b.n	8005d3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d108      	bne.n	8005c60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c56:	d009      	beq.n	8005c6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	61da      	str	r2, [r3, #28]
 8005c5e:	e005      	b.n	8005c6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d106      	bne.n	8005c8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fb fe26 	bl	80018d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf0:	ea42 0103 	orr.w	r1, r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	0c1b      	lsrs	r3, r3, #16
 8005d0a:	f003 0104 	and.w	r1, r3, #4
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	f003 0210 	and.w	r2, r3, #16
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69da      	ldr	r2, [r3, #28]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b082      	sub	sp, #8
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e03f      	b.n	8005dd8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d106      	bne.n	8005d72 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7fb fdfb 	bl	8001968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2224      	movs	r2, #36	; 0x24
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d88:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f9ca 	bl	8006124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691a      	ldr	r2, [r3, #16]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d9e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695a      	ldr	r2, [r3, #20]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dbe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08a      	sub	sp, #40	; 0x28
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	4613      	mov	r3, r2
 8005dee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b20      	cmp	r3, #32
 8005dfe:	d17c      	bne.n	8005efa <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_UART_Transmit+0x2c>
 8005e06:	88fb      	ldrh	r3, [r7, #6]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e075      	b.n	8005efc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d101      	bne.n	8005e1e <HAL_UART_Transmit+0x3e>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e06e      	b.n	8005efc <HAL_UART_Transmit+0x11c>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2221      	movs	r2, #33	; 0x21
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e34:	f7fb ff48 	bl	8001cc8 <HAL_GetTick>
 8005e38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	88fa      	ldrh	r2, [r7, #6]
 8005e3e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	88fa      	ldrh	r2, [r7, #6]
 8005e44:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e4e:	d108      	bne.n	8005e62 <HAL_UART_Transmit+0x82>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d104      	bne.n	8005e62 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	61bb      	str	r3, [r7, #24]
 8005e60:	e003      	b.n	8005e6a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005e72:	e02a      	b.n	8005eca <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2180      	movs	r1, #128	; 0x80
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 f8e2 	bl	8006048 <UART_WaitOnFlagUntilTimeout>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e036      	b.n	8005efc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10b      	bne.n	8005eac <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ea2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	3302      	adds	r3, #2
 8005ea8:	61bb      	str	r3, [r7, #24]
 8005eaa:	e007      	b.n	8005ebc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	781a      	ldrb	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1cf      	bne.n	8005e74 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	2200      	movs	r2, #0
 8005edc:	2140      	movs	r1, #64	; 0x40
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 f8b2 	bl	8006048 <UART_WaitOnFlagUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e006      	b.n	8005efc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e000      	b.n	8005efc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005efa:	2302      	movs	r3, #2
  }
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3720      	adds	r7, #32
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08a      	sub	sp, #40	; 0x28
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	603b      	str	r3, [r7, #0]
 8005f10:	4613      	mov	r3, r2
 8005f12:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	f040 808c 	bne.w	800603e <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <HAL_UART_Receive+0x2e>
 8005f2c:	88fb      	ldrh	r3, [r7, #6]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e084      	b.n	8006040 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_UART_Receive+0x40>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e07d      	b.n	8006040 <HAL_UART_Receive+0x13c>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2222      	movs	r2, #34	; 0x22
 8005f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f60:	f7fb feb2 	bl	8001cc8 <HAL_GetTick>
 8005f64:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	88fa      	ldrh	r2, [r7, #6]
 8005f6a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	88fa      	ldrh	r2, [r7, #6]
 8005f70:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7a:	d108      	bne.n	8005f8e <HAL_UART_Receive+0x8a>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d104      	bne.n	8005f8e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	61bb      	str	r3, [r7, #24]
 8005f8c:	e003      	b.n	8005f96 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005f9e:	e043      	b.n	8006028 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	2120      	movs	r1, #32
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f84c 	bl	8006048 <UART_WaitOnFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e042      	b.n	8006040 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10c      	bne.n	8005fda <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	3302      	adds	r3, #2
 8005fd6:	61bb      	str	r3, [r7, #24]
 8005fd8:	e01f      	b.n	800601a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe2:	d007      	beq.n	8005ff4 <HAL_UART_Receive+0xf0>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10a      	bne.n	8006002 <HAL_UART_Receive+0xfe>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d106      	bne.n	8006002 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	e008      	b.n	8006014 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	b2db      	uxtb	r3, r3
 800600a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800600e:	b2da      	uxtb	r2, r3
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	3301      	adds	r3, #1
 8006018:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800601e:	b29b      	uxth	r3, r3
 8006020:	3b01      	subs	r3, #1
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800602c:	b29b      	uxth	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1b6      	bne.n	8005fa0 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	e000      	b.n	8006040 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800603e:	2302      	movs	r3, #2
  }
}
 8006040:	4618      	mov	r0, r3
 8006042:	3720      	adds	r7, #32
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b090      	sub	sp, #64	; 0x40
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	4613      	mov	r3, r2
 8006056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006058:	e050      	b.n	80060fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800605a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006060:	d04c      	beq.n	80060fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006064:	2b00      	cmp	r3, #0
 8006066:	d007      	beq.n	8006078 <UART_WaitOnFlagUntilTimeout+0x30>
 8006068:	f7fb fe2e 	bl	8001cc8 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006074:	429a      	cmp	r2, r3
 8006076:	d241      	bcs.n	80060fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	330c      	adds	r3, #12
 800607e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	e853 3f00 	ldrex	r3, [r3]
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800608e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	330c      	adds	r3, #12
 8006096:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006098:	637a      	str	r2, [r7, #52]	; 0x34
 800609a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800609e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060a0:	e841 2300 	strex	r3, r2, [r1]
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e5      	bne.n	8006078 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3314      	adds	r3, #20
 80060b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	e853 3f00 	ldrex	r3, [r3]
 80060ba:	613b      	str	r3, [r7, #16]
   return(result);
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f023 0301 	bic.w	r3, r3, #1
 80060c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3314      	adds	r3, #20
 80060ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060cc:	623a      	str	r2, [r7, #32]
 80060ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	69f9      	ldr	r1, [r7, #28]
 80060d2:	6a3a      	ldr	r2, [r7, #32]
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e5      	bne.n	80060ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e00f      	b.n	800611c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	4013      	ands	r3, r2
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	429a      	cmp	r2, r3
 800610a:	bf0c      	ite	eq
 800610c:	2301      	moveq	r3, #1
 800610e:	2300      	movne	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	429a      	cmp	r2, r3
 8006118:	d09f      	beq.n	800605a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3740      	adds	r7, #64	; 0x40
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006128:	b09f      	sub	sp, #124	; 0x7c
 800612a:	af00      	add	r7, sp, #0
 800612c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800612e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613a:	68d9      	ldr	r1, [r3, #12]
 800613c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	ea40 0301 	orr.w	r3, r0, r1
 8006144:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	431a      	orrs	r2, r3
 8006150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	431a      	orrs	r2, r3
 8006156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	4313      	orrs	r3, r2
 800615c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800615e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006168:	f021 010c 	bic.w	r1, r1, #12
 800616c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006172:	430b      	orrs	r3, r1
 8006174:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006182:	6999      	ldr	r1, [r3, #24]
 8006184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	ea40 0301 	orr.w	r3, r0, r1
 800618c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800618e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4bc5      	ldr	r3, [pc, #788]	; (80064a8 <UART_SetConfig+0x384>)
 8006194:	429a      	cmp	r2, r3
 8006196:	d004      	beq.n	80061a2 <UART_SetConfig+0x7e>
 8006198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	4bc3      	ldr	r3, [pc, #780]	; (80064ac <UART_SetConfig+0x388>)
 800619e:	429a      	cmp	r2, r3
 80061a0:	d103      	bne.n	80061aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061a2:	f7ff fbf3 	bl	800598c <HAL_RCC_GetPCLK2Freq>
 80061a6:	6778      	str	r0, [r7, #116]	; 0x74
 80061a8:	e002      	b.n	80061b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061aa:	f7ff fbdb 	bl	8005964 <HAL_RCC_GetPCLK1Freq>
 80061ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b8:	f040 80b6 	bne.w	8006328 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061be:	461c      	mov	r4, r3
 80061c0:	f04f 0500 	mov.w	r5, #0
 80061c4:	4622      	mov	r2, r4
 80061c6:	462b      	mov	r3, r5
 80061c8:	1891      	adds	r1, r2, r2
 80061ca:	6439      	str	r1, [r7, #64]	; 0x40
 80061cc:	415b      	adcs	r3, r3
 80061ce:	647b      	str	r3, [r7, #68]	; 0x44
 80061d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061d4:	1912      	adds	r2, r2, r4
 80061d6:	eb45 0303 	adc.w	r3, r5, r3
 80061da:	f04f 0000 	mov.w	r0, #0
 80061de:	f04f 0100 	mov.w	r1, #0
 80061e2:	00d9      	lsls	r1, r3, #3
 80061e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061e8:	00d0      	lsls	r0, r2, #3
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	1911      	adds	r1, r2, r4
 80061f0:	6639      	str	r1, [r7, #96]	; 0x60
 80061f2:	416b      	adcs	r3, r5
 80061f4:	667b      	str	r3, [r7, #100]	; 0x64
 80061f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	461a      	mov	r2, r3
 80061fc:	f04f 0300 	mov.w	r3, #0
 8006200:	1891      	adds	r1, r2, r2
 8006202:	63b9      	str	r1, [r7, #56]	; 0x38
 8006204:	415b      	adcs	r3, r3
 8006206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006208:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800620c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006210:	f7fa f836 	bl	8000280 <__aeabi_uldivmod>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4ba5      	ldr	r3, [pc, #660]	; (80064b0 <UART_SetConfig+0x38c>)
 800621a:	fba3 2302 	umull	r2, r3, r3, r2
 800621e:	095b      	lsrs	r3, r3, #5
 8006220:	011e      	lsls	r6, r3, #4
 8006222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006224:	461c      	mov	r4, r3
 8006226:	f04f 0500 	mov.w	r5, #0
 800622a:	4622      	mov	r2, r4
 800622c:	462b      	mov	r3, r5
 800622e:	1891      	adds	r1, r2, r2
 8006230:	6339      	str	r1, [r7, #48]	; 0x30
 8006232:	415b      	adcs	r3, r3
 8006234:	637b      	str	r3, [r7, #52]	; 0x34
 8006236:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800623a:	1912      	adds	r2, r2, r4
 800623c:	eb45 0303 	adc.w	r3, r5, r3
 8006240:	f04f 0000 	mov.w	r0, #0
 8006244:	f04f 0100 	mov.w	r1, #0
 8006248:	00d9      	lsls	r1, r3, #3
 800624a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800624e:	00d0      	lsls	r0, r2, #3
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	1911      	adds	r1, r2, r4
 8006256:	65b9      	str	r1, [r7, #88]	; 0x58
 8006258:	416b      	adcs	r3, r5
 800625a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800625c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	461a      	mov	r2, r3
 8006262:	f04f 0300 	mov.w	r3, #0
 8006266:	1891      	adds	r1, r2, r2
 8006268:	62b9      	str	r1, [r7, #40]	; 0x28
 800626a:	415b      	adcs	r3, r3
 800626c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800626e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006272:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006276:	f7fa f803 	bl	8000280 <__aeabi_uldivmod>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	4b8c      	ldr	r3, [pc, #560]	; (80064b0 <UART_SetConfig+0x38c>)
 8006280:	fba3 1302 	umull	r1, r3, r3, r2
 8006284:	095b      	lsrs	r3, r3, #5
 8006286:	2164      	movs	r1, #100	; 0x64
 8006288:	fb01 f303 	mul.w	r3, r1, r3
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	3332      	adds	r3, #50	; 0x32
 8006292:	4a87      	ldr	r2, [pc, #540]	; (80064b0 <UART_SetConfig+0x38c>)
 8006294:	fba2 2303 	umull	r2, r3, r2, r3
 8006298:	095b      	lsrs	r3, r3, #5
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062a0:	441e      	add	r6, r3
 80062a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062a4:	4618      	mov	r0, r3
 80062a6:	f04f 0100 	mov.w	r1, #0
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	1894      	adds	r4, r2, r2
 80062b0:	623c      	str	r4, [r7, #32]
 80062b2:	415b      	adcs	r3, r3
 80062b4:	627b      	str	r3, [r7, #36]	; 0x24
 80062b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062ba:	1812      	adds	r2, r2, r0
 80062bc:	eb41 0303 	adc.w	r3, r1, r3
 80062c0:	f04f 0400 	mov.w	r4, #0
 80062c4:	f04f 0500 	mov.w	r5, #0
 80062c8:	00dd      	lsls	r5, r3, #3
 80062ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80062ce:	00d4      	lsls	r4, r2, #3
 80062d0:	4622      	mov	r2, r4
 80062d2:	462b      	mov	r3, r5
 80062d4:	1814      	adds	r4, r2, r0
 80062d6:	653c      	str	r4, [r7, #80]	; 0x50
 80062d8:	414b      	adcs	r3, r1
 80062da:	657b      	str	r3, [r7, #84]	; 0x54
 80062dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	461a      	mov	r2, r3
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	1891      	adds	r1, r2, r2
 80062e8:	61b9      	str	r1, [r7, #24]
 80062ea:	415b      	adcs	r3, r3
 80062ec:	61fb      	str	r3, [r7, #28]
 80062ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80062f6:	f7f9 ffc3 	bl	8000280 <__aeabi_uldivmod>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	4b6c      	ldr	r3, [pc, #432]	; (80064b0 <UART_SetConfig+0x38c>)
 8006300:	fba3 1302 	umull	r1, r3, r3, r2
 8006304:	095b      	lsrs	r3, r3, #5
 8006306:	2164      	movs	r1, #100	; 0x64
 8006308:	fb01 f303 	mul.w	r3, r1, r3
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	3332      	adds	r3, #50	; 0x32
 8006312:	4a67      	ldr	r2, [pc, #412]	; (80064b0 <UART_SetConfig+0x38c>)
 8006314:	fba2 2303 	umull	r2, r3, r2, r3
 8006318:	095b      	lsrs	r3, r3, #5
 800631a:	f003 0207 	and.w	r2, r3, #7
 800631e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4432      	add	r2, r6
 8006324:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006326:	e0b9      	b.n	800649c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800632a:	461c      	mov	r4, r3
 800632c:	f04f 0500 	mov.w	r5, #0
 8006330:	4622      	mov	r2, r4
 8006332:	462b      	mov	r3, r5
 8006334:	1891      	adds	r1, r2, r2
 8006336:	6139      	str	r1, [r7, #16]
 8006338:	415b      	adcs	r3, r3
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006340:	1912      	adds	r2, r2, r4
 8006342:	eb45 0303 	adc.w	r3, r5, r3
 8006346:	f04f 0000 	mov.w	r0, #0
 800634a:	f04f 0100 	mov.w	r1, #0
 800634e:	00d9      	lsls	r1, r3, #3
 8006350:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006354:	00d0      	lsls	r0, r2, #3
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	eb12 0804 	adds.w	r8, r2, r4
 800635e:	eb43 0905 	adc.w	r9, r3, r5
 8006362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	4618      	mov	r0, r3
 8006368:	f04f 0100 	mov.w	r1, #0
 800636c:	f04f 0200 	mov.w	r2, #0
 8006370:	f04f 0300 	mov.w	r3, #0
 8006374:	008b      	lsls	r3, r1, #2
 8006376:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800637a:	0082      	lsls	r2, r0, #2
 800637c:	4640      	mov	r0, r8
 800637e:	4649      	mov	r1, r9
 8006380:	f7f9 ff7e 	bl	8000280 <__aeabi_uldivmod>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	4b49      	ldr	r3, [pc, #292]	; (80064b0 <UART_SetConfig+0x38c>)
 800638a:	fba3 2302 	umull	r2, r3, r3, r2
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	011e      	lsls	r6, r3, #4
 8006392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006394:	4618      	mov	r0, r3
 8006396:	f04f 0100 	mov.w	r1, #0
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	1894      	adds	r4, r2, r2
 80063a0:	60bc      	str	r4, [r7, #8]
 80063a2:	415b      	adcs	r3, r3
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063aa:	1812      	adds	r2, r2, r0
 80063ac:	eb41 0303 	adc.w	r3, r1, r3
 80063b0:	f04f 0400 	mov.w	r4, #0
 80063b4:	f04f 0500 	mov.w	r5, #0
 80063b8:	00dd      	lsls	r5, r3, #3
 80063ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063be:	00d4      	lsls	r4, r2, #3
 80063c0:	4622      	mov	r2, r4
 80063c2:	462b      	mov	r3, r5
 80063c4:	1814      	adds	r4, r2, r0
 80063c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80063c8:	414b      	adcs	r3, r1
 80063ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f04f 0100 	mov.w	r1, #0
 80063d6:	f04f 0200 	mov.w	r2, #0
 80063da:	f04f 0300 	mov.w	r3, #0
 80063de:	008b      	lsls	r3, r1, #2
 80063e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80063e4:	0082      	lsls	r2, r0, #2
 80063e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80063ea:	f7f9 ff49 	bl	8000280 <__aeabi_uldivmod>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4b2f      	ldr	r3, [pc, #188]	; (80064b0 <UART_SetConfig+0x38c>)
 80063f4:	fba3 1302 	umull	r1, r3, r3, r2
 80063f8:	095b      	lsrs	r3, r3, #5
 80063fa:	2164      	movs	r1, #100	; 0x64
 80063fc:	fb01 f303 	mul.w	r3, r1, r3
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	3332      	adds	r3, #50	; 0x32
 8006406:	4a2a      	ldr	r2, [pc, #168]	; (80064b0 <UART_SetConfig+0x38c>)
 8006408:	fba2 2303 	umull	r2, r3, r2, r3
 800640c:	095b      	lsrs	r3, r3, #5
 800640e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006412:	441e      	add	r6, r3
 8006414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006416:	4618      	mov	r0, r3
 8006418:	f04f 0100 	mov.w	r1, #0
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	1894      	adds	r4, r2, r2
 8006422:	603c      	str	r4, [r7, #0]
 8006424:	415b      	adcs	r3, r3
 8006426:	607b      	str	r3, [r7, #4]
 8006428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800642c:	1812      	adds	r2, r2, r0
 800642e:	eb41 0303 	adc.w	r3, r1, r3
 8006432:	f04f 0400 	mov.w	r4, #0
 8006436:	f04f 0500 	mov.w	r5, #0
 800643a:	00dd      	lsls	r5, r3, #3
 800643c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006440:	00d4      	lsls	r4, r2, #3
 8006442:	4622      	mov	r2, r4
 8006444:	462b      	mov	r3, r5
 8006446:	eb12 0a00 	adds.w	sl, r2, r0
 800644a:	eb43 0b01 	adc.w	fp, r3, r1
 800644e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	4618      	mov	r0, r3
 8006454:	f04f 0100 	mov.w	r1, #0
 8006458:	f04f 0200 	mov.w	r2, #0
 800645c:	f04f 0300 	mov.w	r3, #0
 8006460:	008b      	lsls	r3, r1, #2
 8006462:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006466:	0082      	lsls	r2, r0, #2
 8006468:	4650      	mov	r0, sl
 800646a:	4659      	mov	r1, fp
 800646c:	f7f9 ff08 	bl	8000280 <__aeabi_uldivmod>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4b0e      	ldr	r3, [pc, #56]	; (80064b0 <UART_SetConfig+0x38c>)
 8006476:	fba3 1302 	umull	r1, r3, r3, r2
 800647a:	095b      	lsrs	r3, r3, #5
 800647c:	2164      	movs	r1, #100	; 0x64
 800647e:	fb01 f303 	mul.w	r3, r1, r3
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	3332      	adds	r3, #50	; 0x32
 8006488:	4a09      	ldr	r2, [pc, #36]	; (80064b0 <UART_SetConfig+0x38c>)
 800648a:	fba2 2303 	umull	r2, r3, r2, r3
 800648e:	095b      	lsrs	r3, r3, #5
 8006490:	f003 020f 	and.w	r2, r3, #15
 8006494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4432      	add	r2, r6
 800649a:	609a      	str	r2, [r3, #8]
}
 800649c:	bf00      	nop
 800649e:	377c      	adds	r7, #124	; 0x7c
 80064a0:	46bd      	mov	sp, r7
 80064a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a6:	bf00      	nop
 80064a8:	40011000 	.word	0x40011000
 80064ac:	40011400 	.word	0x40011400
 80064b0:	51eb851f 	.word	0x51eb851f

080064b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064b4:	b084      	sub	sp, #16
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	f107 001c 	add.w	r0, r7, #28
 80064c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d122      	bne.n	8006512 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80064e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d105      	bne.n	8006506 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f9a0 	bl	800684c <USB_CoreReset>
 800650c:	4603      	mov	r3, r0
 800650e:	73fb      	strb	r3, [r7, #15]
 8006510:	e01a      	b.n	8006548 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f994 	bl	800684c <USB_CoreReset>
 8006524:	4603      	mov	r3, r0
 8006526:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006532:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	639a      	str	r2, [r3, #56]	; 0x38
 800653a:	e005      	b.n	8006548 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654a:	2b01      	cmp	r3, #1
 800654c:	d10b      	bne.n	8006566 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f043 0206 	orr.w	r2, r3, #6
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f043 0220 	orr.w	r2, r3, #32
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006566:	7bfb      	ldrb	r3, [r7, #15]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006572:	b004      	add	sp, #16
 8006574:	4770      	bx	lr

08006576 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f043 0201 	orr.w	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f023 0201 	bic.w	r2, r3, #1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b084      	sub	sp, #16
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	460b      	mov	r3, r1
 80065c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065d6:	78fb      	ldrb	r3, [r7, #3]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d115      	bne.n	8006608 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065e8:	2001      	movs	r0, #1
 80065ea:	f7fb fb79 	bl	8001ce0 <HAL_Delay>
      ms++;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3301      	adds	r3, #1
 80065f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f91a 	bl	800682e <USB_GetMode>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d01e      	beq.n	800663e <USB_SetCurrentMode+0x84>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2b31      	cmp	r3, #49	; 0x31
 8006604:	d9f0      	bls.n	80065e8 <USB_SetCurrentMode+0x2e>
 8006606:	e01a      	b.n	800663e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d115      	bne.n	800663a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800661a:	2001      	movs	r0, #1
 800661c:	f7fb fb60 	bl	8001ce0 <HAL_Delay>
      ms++;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3301      	adds	r3, #1
 8006624:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f901 	bl	800682e <USB_GetMode>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d005      	beq.n	800663e <USB_SetCurrentMode+0x84>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b31      	cmp	r3, #49	; 0x31
 8006636:	d9f0      	bls.n	800661a <USB_SetCurrentMode+0x60>
 8006638:	e001      	b.n	800663e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e005      	b.n	800664a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b32      	cmp	r3, #50	; 0x32
 8006642:	d101      	bne.n	8006648 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e000      	b.n	800664a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
	...

08006654 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	019b      	lsls	r3, r3, #6
 8006666:	f043 0220 	orr.w	r2, r3, #32
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3301      	adds	r3, #1
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	4a08      	ldr	r2, [pc, #32]	; (8006698 <USB_FlushTxFifo+0x44>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d901      	bls.n	800667e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e006      	b.n	800668c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b20      	cmp	r3, #32
 8006688:	d0f1      	beq.n	800666e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	00030d40 	.word	0x00030d40

0800669c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2210      	movs	r2, #16
 80066ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3301      	adds	r3, #1
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	4a08      	ldr	r2, [pc, #32]	; (80066d8 <USB_FlushRxFifo+0x3c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d901      	bls.n	80066be <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e006      	b.n	80066cc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f003 0310 	and.w	r3, r3, #16
 80066c6:	2b10      	cmp	r3, #16
 80066c8:	d0f1      	beq.n	80066ae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	00030d40 	.word	0x00030d40

080066dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80066dc:	b480      	push	{r7}
 80066de:	b089      	sub	sp, #36	; 0x24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	4611      	mov	r1, r2
 80066e8:	461a      	mov	r2, r3
 80066ea:	460b      	mov	r3, r1
 80066ec:	71fb      	strb	r3, [r7, #7]
 80066ee:	4613      	mov	r3, r2
 80066f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80066fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d123      	bne.n	800674a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006702:	88bb      	ldrh	r3, [r7, #4]
 8006704:	3303      	adds	r3, #3
 8006706:	089b      	lsrs	r3, r3, #2
 8006708:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800670a:	2300      	movs	r3, #0
 800670c:	61bb      	str	r3, [r7, #24]
 800670e:	e018      	b.n	8006742 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	031a      	lsls	r2, r3, #12
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	4413      	add	r3, r2
 8006718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671c:	461a      	mov	r2, r3
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	3301      	adds	r3, #1
 8006728:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	3301      	adds	r3, #1
 800672e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	3301      	adds	r3, #1
 8006734:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	3301      	adds	r3, #1
 800673a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	3301      	adds	r3, #1
 8006740:	61bb      	str	r3, [r7, #24]
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	429a      	cmp	r2, r3
 8006748:	d3e2      	bcc.n	8006710 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3724      	adds	r7, #36	; 0x24
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006758:	b480      	push	{r7}
 800675a:	b08b      	sub	sp, #44	; 0x2c
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	4613      	mov	r3, r2
 8006764:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800676e:	88fb      	ldrh	r3, [r7, #6]
 8006770:	089b      	lsrs	r3, r3, #2
 8006772:	b29b      	uxth	r3, r3
 8006774:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006776:	88fb      	ldrh	r3, [r7, #6]
 8006778:	f003 0303 	and.w	r3, r3, #3
 800677c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800677e:	2300      	movs	r3, #0
 8006780:	623b      	str	r3, [r7, #32]
 8006782:	e014      	b.n	80067ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	3301      	adds	r3, #1
 8006794:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	3301      	adds	r3, #1
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	3301      	adds	r3, #1
 80067a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	3301      	adds	r3, #1
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	3301      	adds	r3, #1
 80067ac:	623b      	str	r3, [r7, #32]
 80067ae:	6a3a      	ldr	r2, [r7, #32]
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d3e6      	bcc.n	8006784 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067b6:	8bfb      	ldrh	r3, [r7, #30]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01e      	beq.n	80067fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c6:	461a      	mov	r2, r3
 80067c8:	f107 0310 	add.w	r3, r7, #16
 80067cc:	6812      	ldr	r2, [r2, #0]
 80067ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	fa22 f303 	lsr.w	r3, r2, r3
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	701a      	strb	r2, [r3, #0]
      i++;
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	3301      	adds	r3, #1
 80067e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	3301      	adds	r3, #1
 80067ec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80067ee:	8bfb      	ldrh	r3, [r7, #30]
 80067f0:	3b01      	subs	r3, #1
 80067f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80067f4:	8bfb      	ldrh	r3, [r7, #30]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1ea      	bne.n	80067d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	372c      	adds	r7, #44	; 0x2c
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	4013      	ands	r3, r2
 800681e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006820:	68fb      	ldr	r3, [r7, #12]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	f003 0301 	and.w	r3, r3, #1
}
 800683e:	4618      	mov	r0, r3
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
	...

0800684c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	3301      	adds	r3, #1
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	4a13      	ldr	r2, [pc, #76]	; (80068ac <USB_CoreReset+0x60>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d901      	bls.n	8006868 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e01a      	b.n	800689e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	daf3      	bge.n	8006858 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f043 0201 	orr.w	r2, r3, #1
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3301      	adds	r3, #1
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	4a09      	ldr	r2, [pc, #36]	; (80068ac <USB_CoreReset+0x60>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d901      	bls.n	8006890 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e006      	b.n	800689e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b01      	cmp	r3, #1
 800689a:	d0f1      	beq.n	8006880 <USB_CoreReset+0x34>

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	00030d40 	.word	0x00030d40

080068b0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068b0:	b084      	sub	sp, #16
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	f107 001c 	add.w	r0, r7, #28
 80068be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068cc:	461a      	mov	r2, r3
 80068ce:	2300      	movs	r3, #0
 80068d0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d018      	beq.n	8006934 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	2b01      	cmp	r3, #1
 8006906:	d10a      	bne.n	800691e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006916:	f043 0304 	orr.w	r3, r3, #4
 800691a:	6013      	str	r3, [r2, #0]
 800691c:	e014      	b.n	8006948 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800692c:	f023 0304 	bic.w	r3, r3, #4
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	e009      	b.n	8006948 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006942:	f023 0304 	bic.w	r3, r3, #4
 8006946:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006948:	2110      	movs	r1, #16
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7ff fe82 	bl	8006654 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff fea3 	bl	800669c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006956:	2300      	movs	r3, #0
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	e015      	b.n	8006988 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4413      	add	r3, r2
 8006964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006968:	461a      	mov	r2, r3
 800696a:	f04f 33ff 	mov.w	r3, #4294967295
 800696e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4413      	add	r3, r2
 8006978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800697c:	461a      	mov	r2, r3
 800697e:	2300      	movs	r3, #0
 8006980:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3301      	adds	r3, #1
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	429a      	cmp	r2, r3
 800698e:	d3e5      	bcc.n	800695c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f04f 32ff 	mov.w	r2, #4294967295
 800699c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00b      	beq.n	80069c2 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069b0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a13      	ldr	r2, [pc, #76]	; (8006a04 <USB_HostInit+0x154>)
 80069b6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a13      	ldr	r2, [pc, #76]	; (8006a08 <USB_HostInit+0x158>)
 80069bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80069c0:	e009      	b.n	80069d6 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2280      	movs	r2, #128	; 0x80
 80069c6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a10      	ldr	r2, [pc, #64]	; (8006a0c <USB_HostInit+0x15c>)
 80069cc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a0f      	ldr	r2, [pc, #60]	; (8006a10 <USB_HostInit+0x160>)
 80069d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d105      	bne.n	80069e8 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	f043 0210 	orr.w	r2, r3, #16
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	699a      	ldr	r2, [r3, #24]
 80069ec:	4b09      	ldr	r3, [pc, #36]	; (8006a14 <USB_HostInit+0x164>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a00:	b004      	add	sp, #16
 8006a02:	4770      	bx	lr
 8006a04:	01000200 	.word	0x01000200
 8006a08:	00e00300 	.word	0x00e00300
 8006a0c:	00600080 	.word	0x00600080
 8006a10:	004000e0 	.word	0x004000e0
 8006a14:	a3200008 	.word	0xa3200008

08006a18 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a36:	f023 0303 	bic.w	r3, r3, #3
 8006a3a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	78fb      	ldrb	r3, [r7, #3]
 8006a46:	f003 0303 	and.w	r3, r3, #3
 8006a4a:	68f9      	ldr	r1, [r7, #12]
 8006a4c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a50:	4313      	orrs	r3, r2
 8006a52:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d107      	bne.n	8006a6a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a60:	461a      	mov	r2, r3
 8006a62:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006a66:	6053      	str	r3, [r2, #4]
 8006a68:	e009      	b.n	8006a7e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006a6a:	78fb      	ldrb	r3, [r7, #3]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d106      	bne.n	8006a7e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a76:	461a      	mov	r2, r3
 8006a78:	f241 7370 	movw	r3, #6000	; 0x1770
 8006a7c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	460b      	mov	r3, r1
 8006a96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ab0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d109      	bne.n	8006ad0 <USB_DriveVbus+0x44>
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d106      	bne.n	8006ad0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006aca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ace:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ada:	d109      	bne.n	8006af0 <USB_DriveVbus+0x64>
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d106      	bne.n	8006af0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006aea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006aee:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b085      	sub	sp, #20
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	0c5b      	lsrs	r3, r3, #17
 8006b1c:	f003 0303 	and.w	r3, r3, #3
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	b29b      	uxth	r3, r3
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
	...

08006b50 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b088      	sub	sp, #32
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	4608      	mov	r0, r1
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	4603      	mov	r3, r0
 8006b60:	70fb      	strb	r3, [r7, #3]
 8006b62:	460b      	mov	r3, r1
 8006b64:	70bb      	strb	r3, [r7, #2]
 8006b66:	4613      	mov	r3, r2
 8006b68:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006b72:	78fb      	ldrb	r3, [r7, #3]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f04f 33ff 	mov.w	r3, #4294967295
 8006b84:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006b86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d87e      	bhi.n	8006c8c <USB_HC_Init+0x13c>
 8006b8e:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <USB_HC_Init+0x44>)
 8006b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b94:	08006ba5 	.word	0x08006ba5
 8006b98:	08006c4f 	.word	0x08006c4f
 8006b9c:	08006ba5 	.word	0x08006ba5
 8006ba0:	08006c11 	.word	0x08006c11
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ba4:	78fb      	ldrb	r3, [r7, #3]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	f240 439d 	movw	r3, #1181	; 0x49d
 8006bb6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006bb8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	da10      	bge.n	8006be2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	78fa      	ldrb	r2, [r7, #3]
 8006bd0:	0151      	lsls	r1, r2, #5
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	440a      	add	r2, r1
 8006bd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bde:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006be0:	e057      	b.n	8006c92 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d051      	beq.n	8006c92 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006bee:	78fb      	ldrb	r3, [r7, #3]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	78fa      	ldrb	r2, [r7, #3]
 8006bfe:	0151      	lsls	r1, r2, #5
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	440a      	add	r2, r1
 8006c04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c08:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c0c:	60d3      	str	r3, [r2, #12]
      break;
 8006c0e:	e040      	b.n	8006c92 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006c22:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	da34      	bge.n	8006c96 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	78fa      	ldrb	r2, [r7, #3]
 8006c3c:	0151      	lsls	r1, r2, #5
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	440a      	add	r2, r1
 8006c42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c4a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006c4c:	e023      	b.n	8006c96 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c4e:	78fb      	ldrb	r3, [r7, #3]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f240 2325 	movw	r3, #549	; 0x225
 8006c60:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	da17      	bge.n	8006c9a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006c6a:	78fb      	ldrb	r3, [r7, #3]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	78fa      	ldrb	r2, [r7, #3]
 8006c7a:	0151      	lsls	r1, r2, #5
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	440a      	add	r2, r1
 8006c80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c84:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006c88:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006c8a:	e006      	b.n	8006c9a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	77fb      	strb	r3, [r7, #31]
      break;
 8006c90:	e004      	b.n	8006c9c <USB_HC_Init+0x14c>
      break;
 8006c92:	bf00      	nop
 8006c94:	e002      	b.n	8006c9c <USB_HC_Init+0x14c>
      break;
 8006c96:	bf00      	nop
 8006c98:	e000      	b.n	8006c9c <USB_HC_Init+0x14c>
      break;
 8006c9a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ca2:	699a      	ldr	r2, [r3, #24]
 8006ca4:	78fb      	ldrb	r3, [r7, #3]
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	2101      	movs	r1, #1
 8006cac:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb0:	6939      	ldr	r1, [r7, #16]
 8006cb2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006cc6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	da03      	bge.n	8006cd6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cd2:	61bb      	str	r3, [r7, #24]
 8006cd4:	e001      	b.n	8006cda <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff ff0f 	bl	8006afe <USB_GetHostSpeed>
 8006ce0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006ce2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d106      	bne.n	8006cf8 <USB_HC_Init+0x1a8>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d003      	beq.n	8006cf8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006cf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	e001      	b.n	8006cfc <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006cfc:	787b      	ldrb	r3, [r7, #1]
 8006cfe:	059b      	lsls	r3, r3, #22
 8006d00:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d04:	78bb      	ldrb	r3, [r7, #2]
 8006d06:	02db      	lsls	r3, r3, #11
 8006d08:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d0c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d12:	049b      	lsls	r3, r3, #18
 8006d14:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d18:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d1a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006d1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d20:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d26:	78fb      	ldrb	r3, [r7, #3]
 8006d28:	0159      	lsls	r1, r3, #5
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	440b      	add	r3, r1
 8006d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d32:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d38:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006d3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d10f      	bne.n	8006d62 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006d42:	78fb      	ldrb	r3, [r7, #3]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	78fa      	ldrb	r2, [r7, #3]
 8006d52:	0151      	lsls	r1, r2, #5
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	440a      	add	r2, r1
 8006d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d60:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006d62:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3720      	adds	r7, #32
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08c      	sub	sp, #48	; 0x30
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	4613      	mov	r3, r2
 8006d78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	785b      	ldrb	r3, [r3, #1]
 8006d82:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d88:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d02d      	beq.n	8006df2 <USB_HC_StartXfer+0x86>
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	791b      	ldrb	r3, [r3, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d129      	bne.n	8006df2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006d9e:	79fb      	ldrb	r3, [r7, #7]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d117      	bne.n	8006dd4 <USB_HC_StartXfer+0x68>
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	79db      	ldrb	r3, [r3, #7]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <USB_HC_StartXfer+0x48>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	79db      	ldrb	r3, [r3, #7]
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d10f      	bne.n	8006dd4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	69fa      	ldr	r2, [r7, #28]
 8006dc4:	0151      	lsls	r1, r2, #5
 8006dc6:	6a3a      	ldr	r2, [r7, #32]
 8006dc8:	440a      	add	r2, r1
 8006dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006dd4:	79fb      	ldrb	r3, [r7, #7]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10b      	bne.n	8006df2 <USB_HC_StartXfer+0x86>
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	795b      	ldrb	r3, [r3, #5]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d107      	bne.n	8006df2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	785b      	ldrb	r3, [r3, #1]
 8006de6:	4619      	mov	r1, r3
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 fa2f 	bl	800724c <USB_DoPing>
      return HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	e0f8      	b.n	8006fe4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d018      	beq.n	8006e2c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	8912      	ldrh	r2, [r2, #8]
 8006e02:	4413      	add	r3, r2
 8006e04:	3b01      	subs	r3, #1
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	8912      	ldrh	r2, [r2, #8]
 8006e0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e0e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006e10:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e12:	8b7b      	ldrh	r3, [r7, #26]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d90b      	bls.n	8006e30 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006e18:	8b7b      	ldrh	r3, [r7, #26]
 8006e1a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	8912      	ldrh	r2, [r2, #8]
 8006e22:	fb02 f203 	mul.w	r2, r2, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	611a      	str	r2, [r3, #16]
 8006e2a:	e001      	b.n	8006e30 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	78db      	ldrb	r3, [r3, #3]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d007      	beq.n	8006e48 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	8912      	ldrh	r2, [r2, #8]
 8006e3e:	fb02 f203 	mul.w	r2, r2, r3
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	611a      	str	r2, [r3, #16]
 8006e46:	e003      	b.n	8006e50 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	695a      	ldr	r2, [r3, #20]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e5a:	04d9      	lsls	r1, r3, #19
 8006e5c:	4b63      	ldr	r3, [pc, #396]	; (8006fec <USB_HC_StartXfer+0x280>)
 8006e5e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e60:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	7a9b      	ldrb	r3, [r3, #10]
 8006e66:	075b      	lsls	r3, r3, #29
 8006e68:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e6c:	69f9      	ldr	r1, [r7, #28]
 8006e6e:	0148      	lsls	r0, r1, #5
 8006e70:	6a39      	ldr	r1, [r7, #32]
 8006e72:	4401      	add	r1, r0
 8006e74:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e78:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e7a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006e7c:	79fb      	ldrb	r3, [r7, #7]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d009      	beq.n	8006e96 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	68d9      	ldr	r1, [r3, #12]
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e92:	460a      	mov	r2, r1
 8006e94:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	bf0c      	ite	eq
 8006ea6:	2301      	moveq	r3, #1
 8006ea8:	2300      	movne	r3, #0
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	69fa      	ldr	r2, [r7, #28]
 8006ebe:	0151      	lsls	r1, r2, #5
 8006ec0:	6a3a      	ldr	r2, [r7, #32]
 8006ec2:	440a      	add	r2, r1
 8006ec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ec8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ecc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	7e7b      	ldrb	r3, [r7, #25]
 8006ede:	075b      	lsls	r3, r3, #29
 8006ee0:	69f9      	ldr	r1, [r7, #28]
 8006ee2:	0148      	lsls	r0, r1, #5
 8006ee4:	6a39      	ldr	r1, [r7, #32]
 8006ee6:	4401      	add	r1, r0
 8006ee8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006eec:	4313      	orrs	r3, r2
 8006eee:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f06:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	78db      	ldrb	r3, [r3, #3]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d004      	beq.n	8006f1a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	e003      	b.n	8006f22 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f20:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f28:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f36:	461a      	mov	r2, r3
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006f3c:	79fb      	ldrb	r3, [r7, #7]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	e04e      	b.n	8006fe4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	78db      	ldrb	r3, [r3, #3]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d149      	bne.n	8006fe2 <USB_HC_StartXfer+0x276>
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d045      	beq.n	8006fe2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	79db      	ldrb	r3, [r3, #7]
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d830      	bhi.n	8006fc0 <USB_HC_StartXfer+0x254>
 8006f5e:	a201      	add	r2, pc, #4	; (adr r2, 8006f64 <USB_HC_StartXfer+0x1f8>)
 8006f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f64:	08006f75 	.word	0x08006f75
 8006f68:	08006f99 	.word	0x08006f99
 8006f6c:	08006f75 	.word	0x08006f75
 8006f70:	08006f99 	.word	0x08006f99
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	695b      	ldr	r3, [r3, #20]
 8006f78:	3303      	adds	r3, #3
 8006f7a:	089b      	lsrs	r3, r3, #2
 8006f7c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006f7e:	8afa      	ldrh	r2, [r7, #22]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d91c      	bls.n	8006fc4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	f043 0220 	orr.w	r2, r3, #32
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	619a      	str	r2, [r3, #24]
        }
        break;
 8006f96:	e015      	b.n	8006fc4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	3303      	adds	r3, #3
 8006f9e:	089b      	lsrs	r3, r3, #2
 8006fa0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006fa2:	8afa      	ldrh	r2, [r7, #22]
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d90a      	bls.n	8006fc8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fbe:	e003      	b.n	8006fc8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006fc0:	bf00      	nop
 8006fc2:	e002      	b.n	8006fca <USB_HC_StartXfer+0x25e>
        break;
 8006fc4:	bf00      	nop
 8006fc6:	e000      	b.n	8006fca <USB_HC_StartXfer+0x25e>
        break;
 8006fc8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	68d9      	ldr	r1, [r3, #12]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	785a      	ldrb	r2, [r3, #1]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	2000      	movs	r0, #0
 8006fda:	9000      	str	r0, [sp, #0]
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f7ff fb7d 	bl	80066dc <USB_WritePacket>
  }

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3728      	adds	r7, #40	; 0x28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	1ff80000 	.word	0x1ff80000

08006ff0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	b29b      	uxth	r3, r3
}
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007012:	b480      	push	{r7}
 8007014:	b089      	sub	sp, #36	; 0x24
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	460b      	mov	r3, r1
 800701c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007022:	78fb      	ldrb	r3, [r7, #3]
 8007024:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	4413      	add	r3, r2
 8007032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	0c9b      	lsrs	r3, r3, #18
 800703a:	f003 0303 	and.w	r3, r3, #3
 800703e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	4413      	add	r3, r2
 8007048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	0fdb      	lsrs	r3, r3, #31
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 0320 	and.w	r3, r3, #32
 800705e:	2b20      	cmp	r3, #32
 8007060:	d104      	bne.n	800706c <USB_HC_Halt+0x5a>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d101      	bne.n	800706c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	e0e8      	b.n	800723e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <USB_HC_Halt+0x66>
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b02      	cmp	r3, #2
 8007076:	d173      	bne.n	8007160 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	4413      	add	r3, r2
 8007080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	0151      	lsls	r1, r2, #5
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	440a      	add	r2, r1
 800708e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007092:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007096:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 0320 	and.w	r3, r3, #32
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f040 80cb 	bne.w	800723c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d143      	bne.n	800713a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	015a      	lsls	r2, r3, #5
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	0151      	lsls	r1, r2, #5
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	440a      	add	r2, r1
 80070c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070d0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	0151      	lsls	r1, r2, #5
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	440a      	add	r2, r1
 80070e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070f0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	0151      	lsls	r1, r2, #5
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	440a      	add	r2, r1
 8007108:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800710c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007110:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	3301      	adds	r3, #1
 8007116:	61fb      	str	r3, [r7, #28]
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800711e:	d81d      	bhi.n	800715c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	4413      	add	r3, r2
 8007128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007136:	d0ec      	beq.n	8007112 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007138:	e080      	b.n	800723c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	4413      	add	r3, r2
 8007142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	0151      	lsls	r1, r2, #5
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	440a      	add	r2, r1
 8007150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007158:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800715a:	e06f      	b.n	800723c <USB_HC_Halt+0x22a>
            break;
 800715c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800715e:	e06d      	b.n	800723c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	4413      	add	r3, r2
 8007168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	0151      	lsls	r1, r2, #5
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	440a      	add	r2, r1
 8007176:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800717a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800717e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d143      	bne.n	8007218 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	4413      	add	r3, r2
 8007198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	0151      	lsls	r1, r2, #5
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	440a      	add	r2, r1
 80071a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	0151      	lsls	r1, r2, #5
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	440a      	add	r2, r1
 80071c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071ce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	0151      	lsls	r1, r2, #5
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	440a      	add	r2, r1
 80071e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071ee:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	3301      	adds	r3, #1
 80071f4:	61fb      	str	r3, [r7, #28]
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071fc:	d81d      	bhi.n	800723a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	015a      	lsls	r2, r3, #5
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	4413      	add	r3, r2
 8007206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007214:	d0ec      	beq.n	80071f0 <USB_HC_Halt+0x1de>
 8007216:	e011      	b.n	800723c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	4413      	add	r3, r2
 8007220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	0151      	lsls	r1, r2, #5
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	440a      	add	r2, r1
 800722e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	e000      	b.n	800723c <USB_HC_Halt+0x22a>
          break;
 800723a:	bf00      	nop
    }
  }

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3724      	adds	r7, #36	; 0x24
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
	...

0800724c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800725c:	78fb      	ldrb	r3, [r7, #3]
 800725e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007260:	2301      	movs	r3, #1
 8007262:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	04da      	lsls	r2, r3, #19
 8007268:	4b15      	ldr	r3, [pc, #84]	; (80072c0 <USB_DoPing+0x74>)
 800726a:	4013      	ands	r3, r2
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	0151      	lsls	r1, r2, #5
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	440a      	add	r2, r1
 8007274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800727c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	4413      	add	r3, r2
 8007286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007294:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800729c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072aa:	461a      	mov	r2, r3
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	371c      	adds	r7, #28
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	1ff80000 	.word	0x1ff80000

080072c4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80072d0:	2300      	movs	r3, #0
 80072d2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7ff f95f 	bl	8006598 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80072da:	2110      	movs	r1, #16
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff f9b9 	bl	8006654 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff f9da 	bl	800669c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80072e8:	2300      	movs	r3, #0
 80072ea:	613b      	str	r3, [r7, #16]
 80072ec:	e01f      	b.n	800732e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007304:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800730c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007314:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	4413      	add	r3, r2
 800731e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007322:	461a      	mov	r2, r3
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	3301      	adds	r3, #1
 800732c:	613b      	str	r3, [r7, #16]
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	2b0f      	cmp	r3, #15
 8007332:	d9dc      	bls.n	80072ee <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007334:	2300      	movs	r3, #0
 8007336:	613b      	str	r3, [r7, #16]
 8007338:	e034      	b.n	80073a4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4413      	add	r3, r2
 8007342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007350:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007358:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007360:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4413      	add	r3, r2
 800736a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800736e:	461a      	mov	r2, r3
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	3301      	adds	r3, #1
 8007378:	617b      	str	r3, [r7, #20]
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007380:	d80c      	bhi.n	800739c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4413      	add	r3, r2
 800738a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007394:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007398:	d0ec      	beq.n	8007374 <USB_StopHost+0xb0>
 800739a:	e000      	b.n	800739e <USB_StopHost+0xda>
        break;
 800739c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	3301      	adds	r3, #1
 80073a2:	613b      	str	r3, [r7, #16]
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	2b0f      	cmp	r3, #15
 80073a8:	d9c7      	bls.n	800733a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073b0:	461a      	mov	r2, r3
 80073b2:	f04f 33ff 	mov.w	r3, #4294967295
 80073b6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f04f 32ff 	mov.w	r2, #4294967295
 80073be:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff f8d8 	bl	8006576 <USB_EnableGlobalInt>

  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80073d0:	b590      	push	{r4, r7, lr}
 80073d2:	b089      	sub	sp, #36	; 0x24
 80073d4:	af04      	add	r7, sp, #16
 80073d6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80073d8:	2301      	movs	r3, #1
 80073da:	2202      	movs	r2, #2
 80073dc:	2102      	movs	r1, #2
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fc66 	bl	8007cb0 <USBH_FindInterface>
 80073e4:	4603      	mov	r3, r0
 80073e6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80073e8:	7bfb      	ldrb	r3, [r7, #15]
 80073ea:	2bff      	cmp	r3, #255	; 0xff
 80073ec:	d002      	beq.n	80073f4 <USBH_CDC_InterfaceInit+0x24>
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d901      	bls.n	80073f8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80073f4:	2302      	movs	r3, #2
 80073f6:	e13d      	b.n	8007674 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fc3b 	bl	8007c78 <USBH_SelectInterface>
 8007402:	4603      	mov	r3, r0
 8007404:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800740c:	2302      	movs	r3, #2
 800740e:	e131      	b.n	8007674 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007416:	2050      	movs	r0, #80	; 0x50
 8007418:	f001 fb12 	bl	8008a40 <malloc>
 800741c:	4603      	mov	r3, r0
 800741e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007430:	2302      	movs	r3, #2
 8007432:	e11f      	b.n	8007674 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007434:	2250      	movs	r2, #80	; 0x50
 8007436:	2100      	movs	r1, #0
 8007438:	68b8      	ldr	r0, [r7, #8]
 800743a:	f001 fb11 	bl	8008a60 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	211a      	movs	r1, #26
 8007444:	fb01 f303 	mul.w	r3, r1, r3
 8007448:	4413      	add	r3, r2
 800744a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	b25b      	sxtb	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	da15      	bge.n	8007482 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	211a      	movs	r1, #26
 800745c:	fb01 f303 	mul.w	r3, r1, r3
 8007460:	4413      	add	r3, r2
 8007462:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007466:	781a      	ldrb	r2, [r3, #0]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	211a      	movs	r1, #26
 8007472:	fb01 f303 	mul.w	r3, r1, r3
 8007476:	4413      	add	r3, r2
 8007478:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800747c:	881a      	ldrh	r2, [r3, #0]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	785b      	ldrb	r3, [r3, #1]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 ff9c 	bl	80083c6 <USBH_AllocPipe>
 800748e:	4603      	mov	r3, r0
 8007490:	461a      	mov	r2, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	7819      	ldrb	r1, [r3, #0]
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	7858      	ldrb	r0, [r3, #1]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	8952      	ldrh	r2, [r2, #10]
 80074ae:	9202      	str	r2, [sp, #8]
 80074b0:	2203      	movs	r2, #3
 80074b2:	9201      	str	r2, [sp, #4]
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	4623      	mov	r3, r4
 80074b8:	4602      	mov	r2, r0
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 ff54 	bl	8008368 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	2200      	movs	r2, #0
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 fa17 	bl	80088fc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80074ce:	2300      	movs	r3, #0
 80074d0:	2200      	movs	r2, #0
 80074d2:	210a      	movs	r1, #10
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fbeb 	bl	8007cb0 <USBH_FindInterface>
 80074da:	4603      	mov	r3, r0
 80074dc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80074de:	7bfb      	ldrb	r3, [r7, #15]
 80074e0:	2bff      	cmp	r3, #255	; 0xff
 80074e2:	d002      	beq.n	80074ea <USBH_CDC_InterfaceInit+0x11a>
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d901      	bls.n	80074ee <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80074ea:	2302      	movs	r3, #2
 80074ec:	e0c2      	b.n	8007674 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	211a      	movs	r1, #26
 80074f4:	fb01 f303 	mul.w	r3, r1, r3
 80074f8:	4413      	add	r3, r2
 80074fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	b25b      	sxtb	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	da16      	bge.n	8007534 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007506:	7bfb      	ldrb	r3, [r7, #15]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	211a      	movs	r1, #26
 800750c:	fb01 f303 	mul.w	r3, r1, r3
 8007510:	4413      	add	r3, r2
 8007512:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007516:	781a      	ldrb	r2, [r3, #0]
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	211a      	movs	r1, #26
 8007522:	fb01 f303 	mul.w	r3, r1, r3
 8007526:	4413      	add	r3, r2
 8007528:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800752c:	881a      	ldrh	r2, [r3, #0]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	835a      	strh	r2, [r3, #26]
 8007532:	e015      	b.n	8007560 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	211a      	movs	r1, #26
 800753a:	fb01 f303 	mul.w	r3, r1, r3
 800753e:	4413      	add	r3, r2
 8007540:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007544:	781a      	ldrb	r2, [r3, #0]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800754a:	7bfb      	ldrb	r3, [r7, #15]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	211a      	movs	r1, #26
 8007550:	fb01 f303 	mul.w	r3, r1, r3
 8007554:	4413      	add	r3, r2
 8007556:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800755a:	881a      	ldrh	r2, [r3, #0]
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	211a      	movs	r1, #26
 8007566:	fb01 f303 	mul.w	r3, r1, r3
 800756a:	4413      	add	r3, r2
 800756c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	b25b      	sxtb	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	da16      	bge.n	80075a6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	211a      	movs	r1, #26
 800757e:	fb01 f303 	mul.w	r3, r1, r3
 8007582:	4413      	add	r3, r2
 8007584:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007588:	781a      	ldrb	r2, [r3, #0]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	211a      	movs	r1, #26
 8007594:	fb01 f303 	mul.w	r3, r1, r3
 8007598:	4413      	add	r3, r2
 800759a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800759e:	881a      	ldrh	r2, [r3, #0]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	835a      	strh	r2, [r3, #26]
 80075a4:	e015      	b.n	80075d2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	211a      	movs	r1, #26
 80075ac:	fb01 f303 	mul.w	r3, r1, r3
 80075b0:	4413      	add	r3, r2
 80075b2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075b6:	781a      	ldrb	r2, [r3, #0]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	211a      	movs	r1, #26
 80075c2:	fb01 f303 	mul.w	r3, r1, r3
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075cc:	881a      	ldrh	r2, [r3, #0]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	7b9b      	ldrb	r3, [r3, #14]
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fef4 	bl	80083c6 <USBH_AllocPipe>
 80075de:	4603      	mov	r3, r0
 80075e0:	461a      	mov	r2, r3
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	7bdb      	ldrb	r3, [r3, #15]
 80075ea:	4619      	mov	r1, r3
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 feea 	bl	80083c6 <USBH_AllocPipe>
 80075f2:	4603      	mov	r3, r0
 80075f4:	461a      	mov	r2, r3
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	7b59      	ldrb	r1, [r3, #13]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	7b98      	ldrb	r0, [r3, #14]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	8b12      	ldrh	r2, [r2, #24]
 8007612:	9202      	str	r2, [sp, #8]
 8007614:	2202      	movs	r2, #2
 8007616:	9201      	str	r2, [sp, #4]
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	4623      	mov	r3, r4
 800761c:	4602      	mov	r2, r0
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fea2 	bl	8008368 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	7b19      	ldrb	r1, [r3, #12]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	7bd8      	ldrb	r0, [r3, #15]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	8b52      	ldrh	r2, [r2, #26]
 800763c:	9202      	str	r2, [sp, #8]
 800763e:	2202      	movs	r2, #2
 8007640:	9201      	str	r2, [sp, #4]
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	4623      	mov	r3, r4
 8007646:	4602      	mov	r2, r0
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fe8d 	bl	8008368 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	7b5b      	ldrb	r3, [r3, #13]
 800765a:	2200      	movs	r2, #0
 800765c:	4619      	mov	r1, r3
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f001 f94c 	bl	80088fc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	7b1b      	ldrb	r3, [r3, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 f945 	bl	80088fc <USBH_LL_SetToggle>

  return USBH_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	bd90      	pop	{r4, r7, pc}

0800767c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00e      	beq.n	80076b4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fe82 	bl	80083a6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fead 	bl	8008408 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	7b1b      	ldrb	r3, [r3, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00e      	beq.n	80076da <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	7b1b      	ldrb	r3, [r3, #12]
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fe6f 	bl	80083a6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	7b1b      	ldrb	r3, [r3, #12]
 80076cc:	4619      	mov	r1, r3
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fe9a 	bl	8008408 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	7b5b      	ldrb	r3, [r3, #13]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00e      	beq.n	8007700 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	7b5b      	ldrb	r3, [r3, #13]
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fe5c 	bl	80083a6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	7b5b      	ldrb	r3, [r3, #13]
 80076f2:	4619      	mov	r1, r3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fe87 	bl	8008408 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007706:	69db      	ldr	r3, [r3, #28]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00b      	beq.n	8007724 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007712:	69db      	ldr	r3, [r3, #28]
 8007714:	4618      	mov	r0, r3
 8007716:	f001 f99b 	bl	8008a50 <free>
    phost->pActiveClass->pData = 0U;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007720:	2200      	movs	r2, #0
 8007722:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3340      	adds	r3, #64	; 0x40
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f8b1 	bl	80078ae <GetLineCoding>
 800774c:	4603      	mov	r3, r0
 800774e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007750:	7afb      	ldrb	r3, [r7, #11]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d105      	bne.n	8007762 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800775c:	2102      	movs	r1, #2
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007762:	7afb      	ldrb	r3, [r7, #11]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007774:	2301      	movs	r3, #1
 8007776:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800778c:	2b04      	cmp	r3, #4
 800778e:	d877      	bhi.n	8007880 <USBH_CDC_Process+0x114>
 8007790:	a201      	add	r2, pc, #4	; (adr r2, 8007798 <USBH_CDC_Process+0x2c>)
 8007792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007796:	bf00      	nop
 8007798:	080077ad 	.word	0x080077ad
 800779c:	080077b3 	.word	0x080077b3
 80077a0:	080077e3 	.word	0x080077e3
 80077a4:	08007857 	.word	0x08007857
 80077a8:	08007865 	.word	0x08007865
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	73fb      	strb	r3, [r7, #15]
      break;
 80077b0:	e06d      	b.n	800788e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f897 	bl	80078ec <SetLineCoding>
 80077be:	4603      	mov	r3, r0
 80077c0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d104      	bne.n	80077d2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80077d0:	e058      	b.n	8007884 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d055      	beq.n	8007884 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2204      	movs	r2, #4
 80077dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80077e0:	e050      	b.n	8007884 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	3340      	adds	r3, #64	; 0x40
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f860 	bl	80078ae <GetLineCoding>
 80077ee:	4603      	mov	r3, r0
 80077f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d126      	bne.n	8007846 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780a:	791b      	ldrb	r3, [r3, #4]
 800780c:	429a      	cmp	r2, r3
 800780e:	d13b      	bne.n	8007888 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800781a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800781c:	429a      	cmp	r2, r3
 800781e:	d133      	bne.n	8007888 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800782a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800782c:	429a      	cmp	r2, r3
 800782e:	d12b      	bne.n	8007888 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007838:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800783a:	429a      	cmp	r2, r3
 800783c:	d124      	bne.n	8007888 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f958 	bl	8007af4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007844:	e020      	b.n	8007888 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d01d      	beq.n	8007888 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2204      	movs	r2, #4
 8007850:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007854:	e018      	b.n	8007888 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f867 	bl	800792a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f8da 	bl	8007a16 <CDC_ProcessReception>
      break;
 8007862:	e014      	b.n	800788e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007864:	2100      	movs	r1, #0
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fb08 	bl	8007e7c <USBH_ClrFeature>
 800786c:	4603      	mov	r3, r0
 800786e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007870:	7bbb      	ldrb	r3, [r7, #14]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10a      	bne.n	800788c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800787e:	e005      	b.n	800788c <USBH_CDC_Process+0x120>

    default:
      break;
 8007880:	bf00      	nop
 8007882:	e004      	b.n	800788e <USBH_CDC_Process+0x122>
      break;
 8007884:	bf00      	nop
 8007886:	e002      	b.n	800788e <USBH_CDC_Process+0x122>
      break;
 8007888:	bf00      	nop
 800788a:	e000      	b.n	800788e <USBH_CDC_Process+0x122>
      break;
 800788c:	bf00      	nop

  }

  return status;
 800788e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b082      	sub	sp, #8
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	22a1      	movs	r2, #161	; 0xa1
 80078bc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2221      	movs	r2, #33	; 0x21
 80078c2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2207      	movs	r2, #7
 80078d4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2207      	movs	r2, #7
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 faf1 	bl	8007ec4 <USBH_CtlReq>
 80078e2:	4603      	mov	r3, r0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2221      	movs	r2, #33	; 0x21
 80078fa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2220      	movs	r2, #32
 8007900:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2207      	movs	r2, #7
 8007912:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2207      	movs	r2, #7
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fad2 	bl	8007ec4 <USBH_CtlReq>
 8007920:	4603      	mov	r3, r0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b086      	sub	sp, #24
 800792e:	af02      	add	r7, sp, #8
 8007930:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007938:	69db      	ldr	r3, [r3, #28]
 800793a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800793c:	2300      	movs	r3, #0
 800793e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007946:	2b01      	cmp	r3, #1
 8007948:	d002      	beq.n	8007950 <CDC_ProcessTransmission+0x26>
 800794a:	2b02      	cmp	r3, #2
 800794c:	d023      	beq.n	8007996 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800794e:	e05e      	b.n	8007a0e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	8b12      	ldrh	r2, [r2, #24]
 8007958:	4293      	cmp	r3, r2
 800795a:	d90b      	bls.n	8007974 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	69d9      	ldr	r1, [r3, #28]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8b1a      	ldrh	r2, [r3, #24]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	7b5b      	ldrb	r3, [r3, #13]
 8007968:	2001      	movs	r0, #1
 800796a:	9000      	str	r0, [sp, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fcb8 	bl	80082e2 <USBH_BulkSendData>
 8007972:	e00b      	b.n	800798c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800797c:	b29a      	uxth	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	7b5b      	ldrb	r3, [r3, #13]
 8007982:	2001      	movs	r0, #1
 8007984:	9000      	str	r0, [sp, #0]
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fcab 	bl	80082e2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007994:	e03b      	b.n	8007a0e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	7b5b      	ldrb	r3, [r3, #13]
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 ff83 	bl	80088a8 <USBH_LL_GetURBState>
 80079a2:	4603      	mov	r3, r0
 80079a4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80079a6:	7afb      	ldrb	r3, [r7, #11]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d128      	bne.n	80079fe <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	8b12      	ldrh	r2, [r2, #24]
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d90e      	bls.n	80079d6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	8b12      	ldrh	r2, [r2, #24]
 80079c0:	1a9a      	subs	r2, r3, r2
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	8b12      	ldrh	r2, [r2, #24]
 80079ce:	441a      	add	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	61da      	str	r2, [r3, #28]
 80079d4:	e002      	b.n	80079dc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d004      	beq.n	80079ee <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80079ec:	e00e      	b.n	8007a0c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f868 	bl	8007acc <USBH_CDC_TransmitCallback>
      break;
 80079fc:	e006      	b.n	8007a0c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80079fe:	7afb      	ldrb	r3, [r7, #11]
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d103      	bne.n	8007a0c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a0c:	bf00      	nop
  }
}
 8007a0e:	bf00      	nop
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b086      	sub	sp, #24
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d002      	beq.n	8007a3c <CDC_ProcessReception+0x26>
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d00e      	beq.n	8007a58 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007a3a:	e043      	b.n	8007ac4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	6a19      	ldr	r1, [r3, #32]
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	8b5a      	ldrh	r2, [r3, #26]
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	7b1b      	ldrb	r3, [r3, #12]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fc6f 	bl	800832c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	2204      	movs	r2, #4
 8007a52:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007a56:	e035      	b.n	8007ac4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	7b1b      	ldrb	r3, [r3, #12]
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 ff22 	bl	80088a8 <USBH_LL_GetURBState>
 8007a64:	4603      	mov	r3, r0
 8007a66:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007a68:	7cfb      	ldrb	r3, [r7, #19]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d129      	bne.n	8007ac2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	7b1b      	ldrb	r3, [r3, #12]
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fe85 	bl	8008784 <USBH_LL_GetLastXferSize>
 8007a7a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d016      	beq.n	8007ab4 <CDC_ProcessReception+0x9e>
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	8b5b      	ldrh	r3, [r3, #26]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d910      	bls.n	8007ab4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	1ad2      	subs	r2, r2, r3
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	6a1a      	ldr	r2, [r3, #32]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	441a      	add	r2, r3
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2203      	movs	r2, #3
 8007aae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007ab2:	e006      	b.n	8007ac2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f80f 	bl	8007ae0 <USBH_CDC_ReceiveCallback>
      break;
 8007ac2:	bf00      	nop
  }
}
 8007ac4:	bf00      	nop
 8007ac6:	3718      	adds	r7, #24
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	4613      	mov	r3, r2
 8007b14:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e029      	b.n	8007b74 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	79fa      	ldrb	r2, [r7, #7]
 8007b24:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 f81f 	bl	8007b7c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d003      	beq.n	8007b6c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 fd97 	bl	80086a0 <USBH_LL_Init>

  return USBH_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b88:	2300      	movs	r3, #0
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	e009      	b.n	8007ba2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	33e0      	adds	r3, #224	; 0xe0
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	2200      	movs	r2, #0
 8007b9a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	60fb      	str	r3, [r7, #12]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2b0e      	cmp	r3, #14
 8007ba6:	d9f2      	bls.n	8007b8e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ba8:	2300      	movs	r3, #0
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	e009      	b.n	8007bc2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007bb8:	2200      	movs	r2, #0
 8007bba:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bc8:	d3f1      	bcc.n	8007bae <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2240      	movs	r2, #64	; 0x40
 8007bee:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d016      	beq.n	8007c66 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10e      	bne.n	8007c60 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c48:	1c59      	adds	r1, r3, #1
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	33de      	adds	r3, #222	; 0xde
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73fb      	strb	r3, [r7, #15]
 8007c5e:	e004      	b.n	8007c6a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007c60:	2302      	movs	r3, #2
 8007c62:	73fb      	strb	r3, [r7, #15]
 8007c64:	e001      	b.n	8007c6a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007c66:	2302      	movs	r3, #2
 8007c68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007c84:	2300      	movs	r3, #0
 8007c86:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007c8e:	78fa      	ldrb	r2, [r7, #3]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d204      	bcs.n	8007c9e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	78fa      	ldrb	r2, [r7, #3]
 8007c98:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007c9c:	e001      	b.n	8007ca2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	4608      	mov	r0, r1
 8007cba:	4611      	mov	r1, r2
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	70fb      	strb	r3, [r7, #3]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	70bb      	strb	r3, [r7, #2]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007cd8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007cda:	e025      	b.n	8007d28 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007cdc:	7dfb      	ldrb	r3, [r7, #23]
 8007cde:	221a      	movs	r2, #26
 8007ce0:	fb02 f303 	mul.w	r3, r2, r3
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	4413      	add	r3, r2
 8007cea:	3302      	adds	r3, #2
 8007cec:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	795b      	ldrb	r3, [r3, #5]
 8007cf2:	78fa      	ldrb	r2, [r7, #3]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d002      	beq.n	8007cfe <USBH_FindInterface+0x4e>
 8007cf8:	78fb      	ldrb	r3, [r7, #3]
 8007cfa:	2bff      	cmp	r3, #255	; 0xff
 8007cfc:	d111      	bne.n	8007d22 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d02:	78ba      	ldrb	r2, [r7, #2]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d002      	beq.n	8007d0e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d08:	78bb      	ldrb	r3, [r7, #2]
 8007d0a:	2bff      	cmp	r3, #255	; 0xff
 8007d0c:	d109      	bne.n	8007d22 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d12:	787a      	ldrb	r2, [r7, #1]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d002      	beq.n	8007d1e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d18:	787b      	ldrb	r3, [r7, #1]
 8007d1a:	2bff      	cmp	r3, #255	; 0xff
 8007d1c:	d101      	bne.n	8007d22 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
 8007d20:	e006      	b.n	8007d30 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	3301      	adds	r3, #1
 8007d26:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d9d6      	bls.n	8007cdc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007d2e:	23ff      	movs	r3, #255	; 0xff
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	371c      	adds	r7, #28
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fce7 	bl	8008718 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fdbe 	bl	80088ce <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007d6e:	bf00      	nop
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f804 	bl	8007d9e <USBH_HandleSof>
}
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b0b      	cmp	r3, #11
 8007dae:	d10a      	bne.n	8007dc6 <USBH_HandleSof+0x28>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d005      	beq.n	8007dc6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
  }
}
 8007dc6:	bf00      	nop
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007dde:	bf00      	nop
}
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007dfa:	bf00      	nop
}
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fc7a 	bl	800874e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	791b      	ldrb	r3, [r3, #4]
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fad1 	bl	8008408 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	795b      	ldrb	r3, [r3, #5]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 facb 	bl	8008408 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	460b      	mov	r3, r1
 8007e86:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	789b      	ldrb	r3, [r3, #2]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d10f      	bne.n	8007eb0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007ea2:	78fb      	ldrb	r3, [r7, #3]
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f805 	bl	8007ec4 <USBH_CtlReq>
 8007eba:	4603      	mov	r3, r0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	789b      	ldrb	r3, [r3, #2]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d002      	beq.n	8007ee4 <USBH_CtlReq+0x20>
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d00f      	beq.n	8007f02 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007ee2:	e027      	b.n	8007f34 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	88fa      	ldrh	r2, [r7, #6]
 8007eee:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007efc:	2301      	movs	r3, #1
 8007efe:	75fb      	strb	r3, [r7, #23]
      break;
 8007f00:	e018      	b.n	8007f34 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f000 f81c 	bl	8007f40 <USBH_HandleControl>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007f0c:	7dfb      	ldrb	r3, [r7, #23]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <USBH_CtlReq+0x54>
 8007f12:	7dfb      	ldrb	r3, [r7, #23]
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d106      	bne.n	8007f26 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	761a      	strb	r2, [r3, #24]
      break;
 8007f24:	e005      	b.n	8007f32 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d102      	bne.n	8007f32 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	709a      	strb	r2, [r3, #2]
      break;
 8007f32:	bf00      	nop
  }
  return status;
 8007f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	7e1b      	ldrb	r3, [r3, #24]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	2b0a      	cmp	r3, #10
 8007f58:	f200 8156 	bhi.w	8008208 <USBH_HandleControl+0x2c8>
 8007f5c:	a201      	add	r2, pc, #4	; (adr r2, 8007f64 <USBH_HandleControl+0x24>)
 8007f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f62:	bf00      	nop
 8007f64:	08007f91 	.word	0x08007f91
 8007f68:	08007fab 	.word	0x08007fab
 8007f6c:	08008015 	.word	0x08008015
 8007f70:	0800803b 	.word	0x0800803b
 8007f74:	08008073 	.word	0x08008073
 8007f78:	0800809d 	.word	0x0800809d
 8007f7c:	080080ef 	.word	0x080080ef
 8007f80:	08008111 	.word	0x08008111
 8007f84:	0800814d 	.word	0x0800814d
 8007f88:	08008173 	.word	0x08008173
 8007f8c:	080081b1 	.word	0x080081b1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f103 0110 	add.w	r1, r3, #16
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	795b      	ldrb	r3, [r3, #5]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f943 	bl	8008228 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	761a      	strb	r2, [r3, #24]
      break;
 8007fa8:	e139      	b.n	800821e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	795b      	ldrb	r3, [r3, #5]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fc79 	bl	80088a8 <USBH_LL_GetURBState>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007fba:	7bbb      	ldrb	r3, [r7, #14]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d11e      	bne.n	8007ffe <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	7c1b      	ldrb	r3, [r3, #16]
 8007fc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fc8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	8adb      	ldrh	r3, [r3, #22]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00a      	beq.n	8007fe8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007fd2:	7b7b      	ldrb	r3, [r7, #13]
 8007fd4:	2b80      	cmp	r3, #128	; 0x80
 8007fd6:	d103      	bne.n	8007fe0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2203      	movs	r2, #3
 8007fdc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007fde:	e115      	b.n	800820c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2205      	movs	r2, #5
 8007fe4:	761a      	strb	r2, [r3, #24]
      break;
 8007fe6:	e111      	b.n	800820c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007fe8:	7b7b      	ldrb	r3, [r7, #13]
 8007fea:	2b80      	cmp	r3, #128	; 0x80
 8007fec:	d103      	bne.n	8007ff6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2209      	movs	r2, #9
 8007ff2:	761a      	strb	r2, [r3, #24]
      break;
 8007ff4:	e10a      	b.n	800820c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2207      	movs	r2, #7
 8007ffa:	761a      	strb	r2, [r3, #24]
      break;
 8007ffc:	e106      	b.n	800820c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	2b04      	cmp	r3, #4
 8008002:	d003      	beq.n	800800c <USBH_HandleControl+0xcc>
 8008004:	7bbb      	ldrb	r3, [r7, #14]
 8008006:	2b02      	cmp	r3, #2
 8008008:	f040 8100 	bne.w	800820c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	220b      	movs	r2, #11
 8008010:	761a      	strb	r2, [r3, #24]
      break;
 8008012:	e0fb      	b.n	800820c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800801a:	b29a      	uxth	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6899      	ldr	r1, [r3, #8]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	899a      	ldrh	r2, [r3, #12]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	791b      	ldrb	r3, [r3, #4]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f93a 	bl	80082a6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2204      	movs	r2, #4
 8008036:	761a      	strb	r2, [r3, #24]
      break;
 8008038:	e0f1      	b.n	800821e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	791b      	ldrb	r3, [r3, #4]
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fc31 	bl	80088a8 <USBH_LL_GetURBState>
 8008046:	4603      	mov	r3, r0
 8008048:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d102      	bne.n	8008056 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2209      	movs	r2, #9
 8008054:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008056:	7bbb      	ldrb	r3, [r7, #14]
 8008058:	2b05      	cmp	r3, #5
 800805a:	d102      	bne.n	8008062 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800805c:	2303      	movs	r3, #3
 800805e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008060:	e0d6      	b.n	8008210 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	2b04      	cmp	r3, #4
 8008066:	f040 80d3 	bne.w	8008210 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	220b      	movs	r2, #11
 800806e:	761a      	strb	r2, [r3, #24]
      break;
 8008070:	e0ce      	b.n	8008210 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6899      	ldr	r1, [r3, #8]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	899a      	ldrh	r2, [r3, #12]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	795b      	ldrb	r3, [r3, #5]
 800807e:	2001      	movs	r0, #1
 8008080:	9000      	str	r0, [sp, #0]
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f8ea 	bl	800825c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800808e:	b29a      	uxth	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2206      	movs	r2, #6
 8008098:	761a      	strb	r2, [r3, #24]
      break;
 800809a:	e0c0      	b.n	800821e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	795b      	ldrb	r3, [r3, #5]
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fc00 	bl	80088a8 <USBH_LL_GetURBState>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d103      	bne.n	80080ba <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2207      	movs	r2, #7
 80080b6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80080b8:	e0ac      	b.n	8008214 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80080ba:	7bbb      	ldrb	r3, [r7, #14]
 80080bc:	2b05      	cmp	r3, #5
 80080be:	d105      	bne.n	80080cc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	220c      	movs	r2, #12
 80080c4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80080c6:	2303      	movs	r3, #3
 80080c8:	73fb      	strb	r3, [r7, #15]
      break;
 80080ca:	e0a3      	b.n	8008214 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d103      	bne.n	80080da <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2205      	movs	r2, #5
 80080d6:	761a      	strb	r2, [r3, #24]
      break;
 80080d8:	e09c      	b.n	8008214 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	2b04      	cmp	r3, #4
 80080de:	f040 8099 	bne.w	8008214 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	220b      	movs	r2, #11
 80080e6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80080e8:	2302      	movs	r3, #2
 80080ea:	73fb      	strb	r3, [r7, #15]
      break;
 80080ec:	e092      	b.n	8008214 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	791b      	ldrb	r3, [r3, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	2100      	movs	r1, #0
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f8d5 	bl	80082a6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008102:	b29a      	uxth	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2208      	movs	r2, #8
 800810c:	761a      	strb	r2, [r3, #24]

      break;
 800810e:	e086      	b.n	800821e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	791b      	ldrb	r3, [r3, #4]
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fbc6 	bl	80088a8 <USBH_LL_GetURBState>
 800811c:	4603      	mov	r3, r0
 800811e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d105      	bne.n	8008132 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	220d      	movs	r2, #13
 800812a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008130:	e072      	b.n	8008218 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008132:	7bbb      	ldrb	r3, [r7, #14]
 8008134:	2b04      	cmp	r3, #4
 8008136:	d103      	bne.n	8008140 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	220b      	movs	r2, #11
 800813c:	761a      	strb	r2, [r3, #24]
      break;
 800813e:	e06b      	b.n	8008218 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008140:	7bbb      	ldrb	r3, [r7, #14]
 8008142:	2b05      	cmp	r3, #5
 8008144:	d168      	bne.n	8008218 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008146:	2303      	movs	r3, #3
 8008148:	73fb      	strb	r3, [r7, #15]
      break;
 800814a:	e065      	b.n	8008218 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	795b      	ldrb	r3, [r3, #5]
 8008150:	2201      	movs	r2, #1
 8008152:	9200      	str	r2, [sp, #0]
 8008154:	2200      	movs	r2, #0
 8008156:	2100      	movs	r1, #0
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f87f 	bl	800825c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008164:	b29a      	uxth	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	220a      	movs	r2, #10
 800816e:	761a      	strb	r2, [r3, #24]
      break;
 8008170:	e055      	b.n	800821e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	795b      	ldrb	r3, [r3, #5]
 8008176:	4619      	mov	r1, r3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fb95 	bl	80088a8 <USBH_LL_GetURBState>
 800817e:	4603      	mov	r3, r0
 8008180:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008182:	7bbb      	ldrb	r3, [r7, #14]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d105      	bne.n	8008194 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	220d      	movs	r2, #13
 8008190:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008192:	e043      	b.n	800821c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	2b02      	cmp	r3, #2
 8008198:	d103      	bne.n	80081a2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2209      	movs	r2, #9
 800819e:	761a      	strb	r2, [r3, #24]
      break;
 80081a0:	e03c      	b.n	800821c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d139      	bne.n	800821c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	220b      	movs	r2, #11
 80081ac:	761a      	strb	r2, [r3, #24]
      break;
 80081ae:	e035      	b.n	800821c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	7e5b      	ldrb	r3, [r3, #25]
 80081b4:	3301      	adds	r3, #1
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	765a      	strb	r2, [r3, #25]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	7e5b      	ldrb	r3, [r3, #25]
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d806      	bhi.n	80081d2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80081d0:	e025      	b.n	800821e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081d8:	2106      	movs	r1, #6
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	795b      	ldrb	r3, [r3, #5]
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f90c 	bl	8008408 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	791b      	ldrb	r3, [r3, #4]
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f906 	bl	8008408 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008202:	2302      	movs	r3, #2
 8008204:	73fb      	strb	r3, [r7, #15]
      break;
 8008206:	e00a      	b.n	800821e <USBH_HandleControl+0x2de>

    default:
      break;
 8008208:	bf00      	nop
 800820a:	e008      	b.n	800821e <USBH_HandleControl+0x2de>
      break;
 800820c:	bf00      	nop
 800820e:	e006      	b.n	800821e <USBH_HandleControl+0x2de>
      break;
 8008210:	bf00      	nop
 8008212:	e004      	b.n	800821e <USBH_HandleControl+0x2de>
      break;
 8008214:	bf00      	nop
 8008216:	e002      	b.n	800821e <USBH_HandleControl+0x2de>
      break;
 8008218:	bf00      	nop
 800821a:	e000      	b.n	800821e <USBH_HandleControl+0x2de>
      break;
 800821c:	bf00      	nop
  }

  return status;
 800821e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af04      	add	r7, sp, #16
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	4613      	mov	r3, r2
 8008234:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008236:	79f9      	ldrb	r1, [r7, #7]
 8008238:	2300      	movs	r3, #0
 800823a:	9303      	str	r3, [sp, #12]
 800823c:	2308      	movs	r3, #8
 800823e:	9302      	str	r3, [sp, #8]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	9301      	str	r3, [sp, #4]
 8008244:	2300      	movs	r3, #0
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	2300      	movs	r3, #0
 800824a:	2200      	movs	r2, #0
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f000 fafa 	bl	8008846 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b088      	sub	sp, #32
 8008260:	af04      	add	r7, sp, #16
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	4611      	mov	r1, r2
 8008268:	461a      	mov	r2, r3
 800826a:	460b      	mov	r3, r1
 800826c:	80fb      	strh	r3, [r7, #6]
 800826e:	4613      	mov	r3, r2
 8008270:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008280:	7979      	ldrb	r1, [r7, #5]
 8008282:	7e3b      	ldrb	r3, [r7, #24]
 8008284:	9303      	str	r3, [sp, #12]
 8008286:	88fb      	ldrh	r3, [r7, #6]
 8008288:	9302      	str	r3, [sp, #8]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	9301      	str	r3, [sp, #4]
 800828e:	2301      	movs	r3, #1
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	2300      	movs	r3, #0
 8008294:	2200      	movs	r2, #0
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 fad5 	bl	8008846 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b088      	sub	sp, #32
 80082aa:	af04      	add	r7, sp, #16
 80082ac:	60f8      	str	r0, [r7, #12]
 80082ae:	60b9      	str	r1, [r7, #8]
 80082b0:	4611      	mov	r1, r2
 80082b2:	461a      	mov	r2, r3
 80082b4:	460b      	mov	r3, r1
 80082b6:	80fb      	strh	r3, [r7, #6]
 80082b8:	4613      	mov	r3, r2
 80082ba:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80082bc:	7979      	ldrb	r1, [r7, #5]
 80082be:	2300      	movs	r3, #0
 80082c0:	9303      	str	r3, [sp, #12]
 80082c2:	88fb      	ldrh	r3, [r7, #6]
 80082c4:	9302      	str	r3, [sp, #8]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	2301      	movs	r3, #1
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	2300      	movs	r3, #0
 80082d0:	2201      	movs	r2, #1
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 fab7 	bl	8008846 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80082d8:	2300      	movs	r3, #0

}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b088      	sub	sp, #32
 80082e6:	af04      	add	r7, sp, #16
 80082e8:	60f8      	str	r0, [r7, #12]
 80082ea:	60b9      	str	r1, [r7, #8]
 80082ec:	4611      	mov	r1, r2
 80082ee:	461a      	mov	r2, r3
 80082f0:	460b      	mov	r3, r1
 80082f2:	80fb      	strh	r3, [r7, #6]
 80082f4:	4613      	mov	r3, r2
 80082f6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008306:	7979      	ldrb	r1, [r7, #5]
 8008308:	7e3b      	ldrb	r3, [r7, #24]
 800830a:	9303      	str	r3, [sp, #12]
 800830c:	88fb      	ldrh	r3, [r7, #6]
 800830e:	9302      	str	r3, [sp, #8]
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	9301      	str	r3, [sp, #4]
 8008314:	2301      	movs	r3, #1
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	2302      	movs	r3, #2
 800831a:	2200      	movs	r2, #0
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 fa92 	bl	8008846 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b088      	sub	sp, #32
 8008330:	af04      	add	r7, sp, #16
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	4611      	mov	r1, r2
 8008338:	461a      	mov	r2, r3
 800833a:	460b      	mov	r3, r1
 800833c:	80fb      	strh	r3, [r7, #6]
 800833e:	4613      	mov	r3, r2
 8008340:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008342:	7979      	ldrb	r1, [r7, #5]
 8008344:	2300      	movs	r3, #0
 8008346:	9303      	str	r3, [sp, #12]
 8008348:	88fb      	ldrh	r3, [r7, #6]
 800834a:	9302      	str	r3, [sp, #8]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	2301      	movs	r3, #1
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	2302      	movs	r3, #2
 8008356:	2201      	movs	r2, #1
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 fa74 	bl	8008846 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af04      	add	r7, sp, #16
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	4608      	mov	r0, r1
 8008372:	4611      	mov	r1, r2
 8008374:	461a      	mov	r2, r3
 8008376:	4603      	mov	r3, r0
 8008378:	70fb      	strb	r3, [r7, #3]
 800837a:	460b      	mov	r3, r1
 800837c:	70bb      	strb	r3, [r7, #2]
 800837e:	4613      	mov	r3, r2
 8008380:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008382:	7878      	ldrb	r0, [r7, #1]
 8008384:	78ba      	ldrb	r2, [r7, #2]
 8008386:	78f9      	ldrb	r1, [r7, #3]
 8008388:	8b3b      	ldrh	r3, [r7, #24]
 800838a:	9302      	str	r3, [sp, #8]
 800838c:	7d3b      	ldrb	r3, [r7, #20]
 800838e:	9301      	str	r3, [sp, #4]
 8008390:	7c3b      	ldrb	r3, [r7, #16]
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	4603      	mov	r3, r0
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa07 	bl	80087aa <USBH_LL_OpenPipe>

  return USBH_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b082      	sub	sp, #8
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	460b      	mov	r3, r1
 80083b0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80083b2:	78fb      	ldrb	r3, [r7, #3]
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fa26 	bl	8008808 <USBH_LL_ClosePipe>

  return USBH_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	460b      	mov	r3, r1
 80083d0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f836 	bl	8008444 <USBH_GetFreePipe>
 80083d8:	4603      	mov	r3, r0
 80083da:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80083dc:	89fb      	ldrh	r3, [r7, #14]
 80083de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d00a      	beq.n	80083fc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80083e6:	78fa      	ldrb	r2, [r7, #3]
 80083e8:	89fb      	ldrh	r3, [r7, #14]
 80083ea:	f003 030f 	and.w	r3, r3, #15
 80083ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083f2:	6879      	ldr	r1, [r7, #4]
 80083f4:	33e0      	adds	r3, #224	; 0xe0
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80083fc:	89fb      	ldrh	r3, [r7, #14]
 80083fe:	b2db      	uxtb	r3, r3
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	460b      	mov	r3, r1
 8008412:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008414:	78fb      	ldrb	r3, [r7, #3]
 8008416:	2b0a      	cmp	r3, #10
 8008418:	d80d      	bhi.n	8008436 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800841a:	78fb      	ldrb	r3, [r7, #3]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	33e0      	adds	r3, #224	; 0xe0
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	78fb      	ldrb	r3, [r7, #3]
 8008428:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800842c:	6879      	ldr	r1, [r7, #4]
 800842e:	33e0      	adds	r3, #224	; 0xe0
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	440b      	add	r3, r1
 8008434:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]
 8008454:	e00f      	b.n	8008476 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008456:	7bfb      	ldrb	r3, [r7, #15]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	33e0      	adds	r3, #224	; 0xe0
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d102      	bne.n	8008470 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800846a:	7bfb      	ldrb	r3, [r7, #15]
 800846c:	b29b      	uxth	r3, r3
 800846e:	e007      	b.n	8008480 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	3301      	adds	r3, #1
 8008474:	73fb      	strb	r3, [r7, #15]
 8008476:	7bfb      	ldrb	r3, [r7, #15]
 8008478:	2b0a      	cmp	r3, #10
 800847a:	d9ec      	bls.n	8008456 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800847c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008480:	4618      	mov	r0, r3
 8008482:	3714      	adds	r7, #20
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008490:	2201      	movs	r2, #1
 8008492:	490e      	ldr	r1, [pc, #56]	; (80084cc <MX_USB_HOST_Init+0x40>)
 8008494:	480e      	ldr	r0, [pc, #56]	; (80084d0 <MX_USB_HOST_Init+0x44>)
 8008496:	f7ff fb37 	bl	8007b08 <USBH_Init>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80084a0:	f7f9 f903 	bl	80016aa <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80084a4:	490b      	ldr	r1, [pc, #44]	; (80084d4 <MX_USB_HOST_Init+0x48>)
 80084a6:	480a      	ldr	r0, [pc, #40]	; (80084d0 <MX_USB_HOST_Init+0x44>)
 80084a8:	f7ff fbbc 	bl	8007c24 <USBH_RegisterClass>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d001      	beq.n	80084b6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80084b2:	f7f9 f8fa 	bl	80016aa <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80084b6:	4806      	ldr	r0, [pc, #24]	; (80084d0 <MX_USB_HOST_Init+0x44>)
 80084b8:	f7ff fc40 	bl	8007d3c <USBH_Start>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80084c2:	f7f9 f8f2 	bl	80016aa <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80084c6:	bf00      	nop
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	080084d9 	.word	0x080084d9
 80084d0:	20000338 	.word	0x20000338
 80084d4:	20000018 	.word	0x20000018

080084d8 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	460b      	mov	r3, r1
 80084e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80084e4:	78fb      	ldrb	r3, [r7, #3]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	2b04      	cmp	r3, #4
 80084ea:	d819      	bhi.n	8008520 <USBH_UserProcess+0x48>
 80084ec:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <USBH_UserProcess+0x1c>)
 80084ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f2:	bf00      	nop
 80084f4:	08008521 	.word	0x08008521
 80084f8:	08008511 	.word	0x08008511
 80084fc:	08008521 	.word	0x08008521
 8008500:	08008519 	.word	0x08008519
 8008504:	08008509 	.word	0x08008509
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008508:	4b09      	ldr	r3, [pc, #36]	; (8008530 <USBH_UserProcess+0x58>)
 800850a:	2203      	movs	r2, #3
 800850c:	701a      	strb	r2, [r3, #0]
  break;
 800850e:	e008      	b.n	8008522 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008510:	4b07      	ldr	r3, [pc, #28]	; (8008530 <USBH_UserProcess+0x58>)
 8008512:	2202      	movs	r2, #2
 8008514:	701a      	strb	r2, [r3, #0]
  break;
 8008516:	e004      	b.n	8008522 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008518:	4b05      	ldr	r3, [pc, #20]	; (8008530 <USBH_UserProcess+0x58>)
 800851a:	2201      	movs	r2, #1
 800851c:	701a      	strb	r2, [r3, #0]
  break;
 800851e:	e000      	b.n	8008522 <USBH_UserProcess+0x4a>

  default:
  break;
 8008520:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008522:	bf00      	nop
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	200000bc 	.word	0x200000bc

08008534 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08a      	sub	sp, #40	; 0x28
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800853c:	f107 0314 	add.w	r3, r7, #20
 8008540:	2200      	movs	r2, #0
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	605a      	str	r2, [r3, #4]
 8008546:	609a      	str	r2, [r3, #8]
 8008548:	60da      	str	r2, [r3, #12]
 800854a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008554:	d147      	bne.n	80085e6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008556:	2300      	movs	r3, #0
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	4b25      	ldr	r3, [pc, #148]	; (80085f0 <HAL_HCD_MspInit+0xbc>)
 800855c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855e:	4a24      	ldr	r2, [pc, #144]	; (80085f0 <HAL_HCD_MspInit+0xbc>)
 8008560:	f043 0301 	orr.w	r3, r3, #1
 8008564:	6313      	str	r3, [r2, #48]	; 0x30
 8008566:	4b22      	ldr	r3, [pc, #136]	; (80085f0 <HAL_HCD_MspInit+0xbc>)
 8008568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	613b      	str	r3, [r7, #16]
 8008570:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008578:	2300      	movs	r3, #0
 800857a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800857c:	2300      	movs	r3, #0
 800857e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008580:	f107 0314 	add.w	r3, r7, #20
 8008584:	4619      	mov	r1, r3
 8008586:	481b      	ldr	r0, [pc, #108]	; (80085f4 <HAL_HCD_MspInit+0xc0>)
 8008588:	f7fa f89a 	bl	80026c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800858c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008592:	2302      	movs	r3, #2
 8008594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008596:	2300      	movs	r3, #0
 8008598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800859a:	2300      	movs	r3, #0
 800859c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800859e:	230a      	movs	r3, #10
 80085a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085a2:	f107 0314 	add.w	r3, r7, #20
 80085a6:	4619      	mov	r1, r3
 80085a8:	4812      	ldr	r0, [pc, #72]	; (80085f4 <HAL_HCD_MspInit+0xc0>)
 80085aa:	f7fa f889 	bl	80026c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80085ae:	4b10      	ldr	r3, [pc, #64]	; (80085f0 <HAL_HCD_MspInit+0xbc>)
 80085b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b2:	4a0f      	ldr	r2, [pc, #60]	; (80085f0 <HAL_HCD_MspInit+0xbc>)
 80085b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085b8:	6353      	str	r3, [r2, #52]	; 0x34
 80085ba:	2300      	movs	r3, #0
 80085bc:	60fb      	str	r3, [r7, #12]
 80085be:	4b0c      	ldr	r3, [pc, #48]	; (80085f0 <HAL_HCD_MspInit+0xbc>)
 80085c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c2:	4a0b      	ldr	r2, [pc, #44]	; (80085f0 <HAL_HCD_MspInit+0xbc>)
 80085c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085c8:	6453      	str	r3, [r2, #68]	; 0x44
 80085ca:	4b09      	ldr	r3, [pc, #36]	; (80085f0 <HAL_HCD_MspInit+0xbc>)
 80085cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80085d6:	2200      	movs	r2, #0
 80085d8:	2100      	movs	r1, #0
 80085da:	2043      	movs	r0, #67	; 0x43
 80085dc:	f7f9 fc7f 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80085e0:	2043      	movs	r0, #67	; 0x43
 80085e2:	f7f9 fc98 	bl	8001f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80085e6:	bf00      	nop
 80085e8:	3728      	adds	r7, #40	; 0x28
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	40023800 	.word	0x40023800
 80085f4:	40020000 	.word	0x40020000

080085f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff fbb7 	bl	8007d7a <USBH_LL_IncTimer>
}
 800860c:	bf00      	nop
 800860e:	3708      	adds	r7, #8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008622:	4618      	mov	r0, r3
 8008624:	f7ff fbef 	bl	8007e06 <USBH_LL_Connect>
}
 8008628:	bf00      	nop
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800863e:	4618      	mov	r0, r3
 8008640:	f7ff fbf8 	bl	8007e34 <USBH_LL_Disconnect>
}
 8008644:	bf00      	nop
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	70fb      	strb	r3, [r7, #3]
 8008658:	4613      	mov	r3, r2
 800865a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008676:	4618      	mov	r0, r3
 8008678:	f7ff fba9 	bl	8007dce <USBH_LL_PortEnabled>
}
 800867c:	bf00      	nop
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008692:	4618      	mov	r0, r3
 8008694:	f7ff fba9 	bl	8007dea <USBH_LL_PortDisabled>
}
 8008698:	bf00      	nop
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d12a      	bne.n	8008708 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80086b2:	4a18      	ldr	r2, [pc, #96]	; (8008714 <USBH_LL_Init+0x74>)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a15      	ldr	r2, [pc, #84]	; (8008714 <USBH_LL_Init+0x74>)
 80086be:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80086c2:	4b14      	ldr	r3, [pc, #80]	; (8008714 <USBH_LL_Init+0x74>)
 80086c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80086c8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80086ca:	4b12      	ldr	r3, [pc, #72]	; (8008714 <USBH_LL_Init+0x74>)
 80086cc:	2208      	movs	r2, #8
 80086ce:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80086d0:	4b10      	ldr	r3, [pc, #64]	; (8008714 <USBH_LL_Init+0x74>)
 80086d2:	2201      	movs	r2, #1
 80086d4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80086d6:	4b0f      	ldr	r3, [pc, #60]	; (8008714 <USBH_LL_Init+0x74>)
 80086d8:	2200      	movs	r2, #0
 80086da:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80086dc:	4b0d      	ldr	r3, [pc, #52]	; (8008714 <USBH_LL_Init+0x74>)
 80086de:	2202      	movs	r2, #2
 80086e0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80086e2:	4b0c      	ldr	r3, [pc, #48]	; (8008714 <USBH_LL_Init+0x74>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80086e8:	480a      	ldr	r0, [pc, #40]	; (8008714 <USBH_LL_Init+0x74>)
 80086ea:	f7fa f9b6 	bl	8002a5a <HAL_HCD_Init>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d001      	beq.n	80086f8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80086f4:	f7f8 ffd9 	bl	80016aa <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80086f8:	4806      	ldr	r0, [pc, #24]	; (8008714 <USBH_LL_Init+0x74>)
 80086fa:	f7fa fd8c 	bl	8003216 <HAL_HCD_GetCurrentFrame>
 80086fe:	4603      	mov	r3, r0
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7ff fb2a 	bl	8007d5c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	20000710 	.word	0x20000710

08008718 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800872e:	4618      	mov	r0, r3
 8008730:	f7fa fd09 	bl	8003146 <HAL_HCD_Start>
 8008734:	4603      	mov	r3, r0
 8008736:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	4618      	mov	r0, r3
 800873c:	f000 f90e 	bl	800895c <USBH_Get_USB_Status>
 8008740:	4603      	mov	r3, r0
 8008742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008744:	7bbb      	ldrb	r3, [r7, #14]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b084      	sub	sp, #16
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008764:	4618      	mov	r0, r3
 8008766:	f7fa fd11 	bl	800318c <HAL_HCD_Stop>
 800876a:	4603      	mov	r3, r0
 800876c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800876e:	7bfb      	ldrb	r3, [r7, #15]
 8008770:	4618      	mov	r0, r3
 8008772:	f000 f8f3 	bl	800895c <USBH_Get_USB_Status>
 8008776:	4603      	mov	r3, r0
 8008778:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800877a:	7bbb      	ldrb	r3, [r7, #14]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008796:	78fa      	ldrb	r2, [r7, #3]
 8008798:	4611      	mov	r1, r2
 800879a:	4618      	mov	r0, r3
 800879c:	f7fa fd27 	bl	80031ee <HAL_HCD_HC_GetXferCount>
 80087a0:	4603      	mov	r3, r0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80087aa:	b590      	push	{r4, r7, lr}
 80087ac:	b089      	sub	sp, #36	; 0x24
 80087ae:	af04      	add	r7, sp, #16
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	4608      	mov	r0, r1
 80087b4:	4611      	mov	r1, r2
 80087b6:	461a      	mov	r2, r3
 80087b8:	4603      	mov	r3, r0
 80087ba:	70fb      	strb	r3, [r7, #3]
 80087bc:	460b      	mov	r3, r1
 80087be:	70bb      	strb	r3, [r7, #2]
 80087c0:	4613      	mov	r3, r2
 80087c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80087d2:	787c      	ldrb	r4, [r7, #1]
 80087d4:	78ba      	ldrb	r2, [r7, #2]
 80087d6:	78f9      	ldrb	r1, [r7, #3]
 80087d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087da:	9302      	str	r3, [sp, #8]
 80087dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80087e0:	9301      	str	r3, [sp, #4]
 80087e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	4623      	mov	r3, r4
 80087ea:	f7fa f998 	bl	8002b1e <HAL_HCD_HC_Init>
 80087ee:	4603      	mov	r3, r0
 80087f0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f000 f8b1 	bl	800895c <USBH_Get_USB_Status>
 80087fa:	4603      	mov	r3, r0
 80087fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	bd90      	pop	{r4, r7, pc}

08008808 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	460b      	mov	r3, r1
 8008812:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008822:	78fa      	ldrb	r2, [r7, #3]
 8008824:	4611      	mov	r1, r2
 8008826:	4618      	mov	r0, r3
 8008828:	f7fa fa08 	bl	8002c3c <HAL_HCD_HC_Halt>
 800882c:	4603      	mov	r3, r0
 800882e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	4618      	mov	r0, r3
 8008834:	f000 f892 	bl	800895c <USBH_Get_USB_Status>
 8008838:	4603      	mov	r3, r0
 800883a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800883c:	7bbb      	ldrb	r3, [r7, #14]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008846:	b590      	push	{r4, r7, lr}
 8008848:	b089      	sub	sp, #36	; 0x24
 800884a:	af04      	add	r7, sp, #16
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	4608      	mov	r0, r1
 8008850:	4611      	mov	r1, r2
 8008852:	461a      	mov	r2, r3
 8008854:	4603      	mov	r3, r0
 8008856:	70fb      	strb	r3, [r7, #3]
 8008858:	460b      	mov	r3, r1
 800885a:	70bb      	strb	r3, [r7, #2]
 800885c:	4613      	mov	r3, r2
 800885e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800886e:	787c      	ldrb	r4, [r7, #1]
 8008870:	78ba      	ldrb	r2, [r7, #2]
 8008872:	78f9      	ldrb	r1, [r7, #3]
 8008874:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008878:	9303      	str	r3, [sp, #12]
 800887a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800887c:	9302      	str	r3, [sp, #8]
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	4623      	mov	r3, r4
 800888a:	f7fa f9fb 	bl	8002c84 <HAL_HCD_HC_SubmitRequest>
 800888e:	4603      	mov	r3, r0
 8008890:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	4618      	mov	r0, r3
 8008896:	f000 f861 	bl	800895c <USBH_Get_USB_Status>
 800889a:	4603      	mov	r3, r0
 800889c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800889e:	7bbb      	ldrb	r3, [r7, #14]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd90      	pop	{r4, r7, pc}

080088a8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088ba:	78fa      	ldrb	r2, [r7, #3]
 80088bc:	4611      	mov	r1, r2
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fa fc81 	bl	80031c6 <HAL_HCD_HC_GetURBState>
 80088c4:	4603      	mov	r3, r0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b082      	sub	sp, #8
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	460b      	mov	r3, r1
 80088d8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d103      	bne.n	80088ec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80088e4:	78fb      	ldrb	r3, [r7, #3]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 f864 	bl	80089b4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80088ec:	20c8      	movs	r0, #200	; 0xc8
 80088ee:	f7f9 f9f7 	bl	8001ce0 <HAL_Delay>
  return USBH_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	70fb      	strb	r3, [r7, #3]
 8008908:	4613      	mov	r3, r2
 800890a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008912:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008914:	78fb      	ldrb	r3, [r7, #3]
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	212c      	movs	r1, #44	; 0x2c
 800891a:	fb01 f303 	mul.w	r3, r1, r3
 800891e:	4413      	add	r3, r2
 8008920:	333b      	adds	r3, #59	; 0x3b
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d009      	beq.n	800893c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008928:	78fb      	ldrb	r3, [r7, #3]
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	212c      	movs	r1, #44	; 0x2c
 800892e:	fb01 f303 	mul.w	r3, r1, r3
 8008932:	4413      	add	r3, r2
 8008934:	3354      	adds	r3, #84	; 0x54
 8008936:	78ba      	ldrb	r2, [r7, #2]
 8008938:	701a      	strb	r2, [r3, #0]
 800893a:	e008      	b.n	800894e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800893c:	78fb      	ldrb	r3, [r7, #3]
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	212c      	movs	r1, #44	; 0x2c
 8008942:	fb01 f303 	mul.w	r3, r1, r3
 8008946:	4413      	add	r3, r2
 8008948:	3355      	adds	r3, #85	; 0x55
 800894a:	78ba      	ldrb	r2, [r7, #2]
 800894c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800896a:	79fb      	ldrb	r3, [r7, #7]
 800896c:	2b03      	cmp	r3, #3
 800896e:	d817      	bhi.n	80089a0 <USBH_Get_USB_Status+0x44>
 8008970:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <USBH_Get_USB_Status+0x1c>)
 8008972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008976:	bf00      	nop
 8008978:	08008989 	.word	0x08008989
 800897c:	0800898f 	.word	0x0800898f
 8008980:	08008995 	.word	0x08008995
 8008984:	0800899b 	.word	0x0800899b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	73fb      	strb	r3, [r7, #15]
    break;
 800898c:	e00b      	b.n	80089a6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800898e:	2302      	movs	r3, #2
 8008990:	73fb      	strb	r3, [r7, #15]
    break;
 8008992:	e008      	b.n	80089a6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008994:	2301      	movs	r3, #1
 8008996:	73fb      	strb	r3, [r7, #15]
    break;
 8008998:	e005      	b.n	80089a6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800899a:	2302      	movs	r3, #2
 800899c:	73fb      	strb	r3, [r7, #15]
    break;
 800899e:	e002      	b.n	80089a6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80089a0:	2302      	movs	r3, #2
 80089a2:	73fb      	strb	r3, [r7, #15]
    break;
 80089a4:	bf00      	nop
  }
  return usb_status;
 80089a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	4603      	mov	r3, r0
 80089bc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80089be:	79fb      	ldrb	r3, [r7, #7]
 80089c0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80089c2:	79fb      	ldrb	r3, [r7, #7]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d102      	bne.n	80089ce <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80089c8:	2301      	movs	r3, #1
 80089ca:	73fb      	strb	r3, [r7, #15]
 80089cc:	e001      	b.n	80089d2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
 80089d4:	461a      	mov	r2, r3
 80089d6:	2101      	movs	r1, #1
 80089d8:	4803      	ldr	r0, [pc, #12]	; (80089e8 <MX_DriverVbusFS+0x34>)
 80089da:	f7fa f825 	bl	8002a28 <HAL_GPIO_WritePin>
}
 80089de:	bf00      	nop
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	40020800 	.word	0x40020800

080089ec <__errno>:
 80089ec:	4b01      	ldr	r3, [pc, #4]	; (80089f4 <__errno+0x8>)
 80089ee:	6818      	ldr	r0, [r3, #0]
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	20000038 	.word	0x20000038

080089f8 <__libc_init_array>:
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	4d0d      	ldr	r5, [pc, #52]	; (8008a30 <__libc_init_array+0x38>)
 80089fc:	4c0d      	ldr	r4, [pc, #52]	; (8008a34 <__libc_init_array+0x3c>)
 80089fe:	1b64      	subs	r4, r4, r5
 8008a00:	10a4      	asrs	r4, r4, #2
 8008a02:	2600      	movs	r6, #0
 8008a04:	42a6      	cmp	r6, r4
 8008a06:	d109      	bne.n	8008a1c <__libc_init_array+0x24>
 8008a08:	4d0b      	ldr	r5, [pc, #44]	; (8008a38 <__libc_init_array+0x40>)
 8008a0a:	4c0c      	ldr	r4, [pc, #48]	; (8008a3c <__libc_init_array+0x44>)
 8008a0c:	f000 fc5e 	bl	80092cc <_init>
 8008a10:	1b64      	subs	r4, r4, r5
 8008a12:	10a4      	asrs	r4, r4, #2
 8008a14:	2600      	movs	r6, #0
 8008a16:	42a6      	cmp	r6, r4
 8008a18:	d105      	bne.n	8008a26 <__libc_init_array+0x2e>
 8008a1a:	bd70      	pop	{r4, r5, r6, pc}
 8008a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a20:	4798      	blx	r3
 8008a22:	3601      	adds	r6, #1
 8008a24:	e7ee      	b.n	8008a04 <__libc_init_array+0xc>
 8008a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a2a:	4798      	blx	r3
 8008a2c:	3601      	adds	r6, #1
 8008a2e:	e7f2      	b.n	8008a16 <__libc_init_array+0x1e>
 8008a30:	080098a8 	.word	0x080098a8
 8008a34:	080098a8 	.word	0x080098a8
 8008a38:	080098a8 	.word	0x080098a8
 8008a3c:	080098ac 	.word	0x080098ac

08008a40 <malloc>:
 8008a40:	4b02      	ldr	r3, [pc, #8]	; (8008a4c <malloc+0xc>)
 8008a42:	4601      	mov	r1, r0
 8008a44:	6818      	ldr	r0, [r3, #0]
 8008a46:	f000 b863 	b.w	8008b10 <_malloc_r>
 8008a4a:	bf00      	nop
 8008a4c:	20000038 	.word	0x20000038

08008a50 <free>:
 8008a50:	4b02      	ldr	r3, [pc, #8]	; (8008a5c <free+0xc>)
 8008a52:	4601      	mov	r1, r0
 8008a54:	6818      	ldr	r0, [r3, #0]
 8008a56:	f000 b80b 	b.w	8008a70 <_free_r>
 8008a5a:	bf00      	nop
 8008a5c:	20000038 	.word	0x20000038

08008a60 <memset>:
 8008a60:	4402      	add	r2, r0
 8008a62:	4603      	mov	r3, r0
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d100      	bne.n	8008a6a <memset+0xa>
 8008a68:	4770      	bx	lr
 8008a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a6e:	e7f9      	b.n	8008a64 <memset+0x4>

08008a70 <_free_r>:
 8008a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a72:	2900      	cmp	r1, #0
 8008a74:	d048      	beq.n	8008b08 <_free_r+0x98>
 8008a76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a7a:	9001      	str	r0, [sp, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a82:	bfb8      	it	lt
 8008a84:	18e4      	addlt	r4, r4, r3
 8008a86:	f000 f8cd 	bl	8008c24 <__malloc_lock>
 8008a8a:	4a20      	ldr	r2, [pc, #128]	; (8008b0c <_free_r+0x9c>)
 8008a8c:	9801      	ldr	r0, [sp, #4]
 8008a8e:	6813      	ldr	r3, [r2, #0]
 8008a90:	4615      	mov	r5, r2
 8008a92:	b933      	cbnz	r3, 8008aa2 <_free_r+0x32>
 8008a94:	6063      	str	r3, [r4, #4]
 8008a96:	6014      	str	r4, [r2, #0]
 8008a98:	b003      	add	sp, #12
 8008a9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a9e:	f000 b8c7 	b.w	8008c30 <__malloc_unlock>
 8008aa2:	42a3      	cmp	r3, r4
 8008aa4:	d90b      	bls.n	8008abe <_free_r+0x4e>
 8008aa6:	6821      	ldr	r1, [r4, #0]
 8008aa8:	1862      	adds	r2, r4, r1
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	bf04      	itt	eq
 8008aae:	681a      	ldreq	r2, [r3, #0]
 8008ab0:	685b      	ldreq	r3, [r3, #4]
 8008ab2:	6063      	str	r3, [r4, #4]
 8008ab4:	bf04      	itt	eq
 8008ab6:	1852      	addeq	r2, r2, r1
 8008ab8:	6022      	streq	r2, [r4, #0]
 8008aba:	602c      	str	r4, [r5, #0]
 8008abc:	e7ec      	b.n	8008a98 <_free_r+0x28>
 8008abe:	461a      	mov	r2, r3
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	b10b      	cbz	r3, 8008ac8 <_free_r+0x58>
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	d9fa      	bls.n	8008abe <_free_r+0x4e>
 8008ac8:	6811      	ldr	r1, [r2, #0]
 8008aca:	1855      	adds	r5, r2, r1
 8008acc:	42a5      	cmp	r5, r4
 8008ace:	d10b      	bne.n	8008ae8 <_free_r+0x78>
 8008ad0:	6824      	ldr	r4, [r4, #0]
 8008ad2:	4421      	add	r1, r4
 8008ad4:	1854      	adds	r4, r2, r1
 8008ad6:	42a3      	cmp	r3, r4
 8008ad8:	6011      	str	r1, [r2, #0]
 8008ada:	d1dd      	bne.n	8008a98 <_free_r+0x28>
 8008adc:	681c      	ldr	r4, [r3, #0]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	6053      	str	r3, [r2, #4]
 8008ae2:	4421      	add	r1, r4
 8008ae4:	6011      	str	r1, [r2, #0]
 8008ae6:	e7d7      	b.n	8008a98 <_free_r+0x28>
 8008ae8:	d902      	bls.n	8008af0 <_free_r+0x80>
 8008aea:	230c      	movs	r3, #12
 8008aec:	6003      	str	r3, [r0, #0]
 8008aee:	e7d3      	b.n	8008a98 <_free_r+0x28>
 8008af0:	6825      	ldr	r5, [r4, #0]
 8008af2:	1961      	adds	r1, r4, r5
 8008af4:	428b      	cmp	r3, r1
 8008af6:	bf04      	itt	eq
 8008af8:	6819      	ldreq	r1, [r3, #0]
 8008afa:	685b      	ldreq	r3, [r3, #4]
 8008afc:	6063      	str	r3, [r4, #4]
 8008afe:	bf04      	itt	eq
 8008b00:	1949      	addeq	r1, r1, r5
 8008b02:	6021      	streq	r1, [r4, #0]
 8008b04:	6054      	str	r4, [r2, #4]
 8008b06:	e7c7      	b.n	8008a98 <_free_r+0x28>
 8008b08:	b003      	add	sp, #12
 8008b0a:	bd30      	pop	{r4, r5, pc}
 8008b0c:	200000c0 	.word	0x200000c0

08008b10 <_malloc_r>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	1ccd      	adds	r5, r1, #3
 8008b14:	f025 0503 	bic.w	r5, r5, #3
 8008b18:	3508      	adds	r5, #8
 8008b1a:	2d0c      	cmp	r5, #12
 8008b1c:	bf38      	it	cc
 8008b1e:	250c      	movcc	r5, #12
 8008b20:	2d00      	cmp	r5, #0
 8008b22:	4606      	mov	r6, r0
 8008b24:	db01      	blt.n	8008b2a <_malloc_r+0x1a>
 8008b26:	42a9      	cmp	r1, r5
 8008b28:	d903      	bls.n	8008b32 <_malloc_r+0x22>
 8008b2a:	230c      	movs	r3, #12
 8008b2c:	6033      	str	r3, [r6, #0]
 8008b2e:	2000      	movs	r0, #0
 8008b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b32:	f000 f877 	bl	8008c24 <__malloc_lock>
 8008b36:	4921      	ldr	r1, [pc, #132]	; (8008bbc <_malloc_r+0xac>)
 8008b38:	680a      	ldr	r2, [r1, #0]
 8008b3a:	4614      	mov	r4, r2
 8008b3c:	b99c      	cbnz	r4, 8008b66 <_malloc_r+0x56>
 8008b3e:	4f20      	ldr	r7, [pc, #128]	; (8008bc0 <_malloc_r+0xb0>)
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	b923      	cbnz	r3, 8008b4e <_malloc_r+0x3e>
 8008b44:	4621      	mov	r1, r4
 8008b46:	4630      	mov	r0, r6
 8008b48:	f000 f83c 	bl	8008bc4 <_sbrk_r>
 8008b4c:	6038      	str	r0, [r7, #0]
 8008b4e:	4629      	mov	r1, r5
 8008b50:	4630      	mov	r0, r6
 8008b52:	f000 f837 	bl	8008bc4 <_sbrk_r>
 8008b56:	1c43      	adds	r3, r0, #1
 8008b58:	d123      	bne.n	8008ba2 <_malloc_r+0x92>
 8008b5a:	230c      	movs	r3, #12
 8008b5c:	6033      	str	r3, [r6, #0]
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f000 f866 	bl	8008c30 <__malloc_unlock>
 8008b64:	e7e3      	b.n	8008b2e <_malloc_r+0x1e>
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	1b5b      	subs	r3, r3, r5
 8008b6a:	d417      	bmi.n	8008b9c <_malloc_r+0x8c>
 8008b6c:	2b0b      	cmp	r3, #11
 8008b6e:	d903      	bls.n	8008b78 <_malloc_r+0x68>
 8008b70:	6023      	str	r3, [r4, #0]
 8008b72:	441c      	add	r4, r3
 8008b74:	6025      	str	r5, [r4, #0]
 8008b76:	e004      	b.n	8008b82 <_malloc_r+0x72>
 8008b78:	6863      	ldr	r3, [r4, #4]
 8008b7a:	42a2      	cmp	r2, r4
 8008b7c:	bf0c      	ite	eq
 8008b7e:	600b      	streq	r3, [r1, #0]
 8008b80:	6053      	strne	r3, [r2, #4]
 8008b82:	4630      	mov	r0, r6
 8008b84:	f000 f854 	bl	8008c30 <__malloc_unlock>
 8008b88:	f104 000b 	add.w	r0, r4, #11
 8008b8c:	1d23      	adds	r3, r4, #4
 8008b8e:	f020 0007 	bic.w	r0, r0, #7
 8008b92:	1ac2      	subs	r2, r0, r3
 8008b94:	d0cc      	beq.n	8008b30 <_malloc_r+0x20>
 8008b96:	1a1b      	subs	r3, r3, r0
 8008b98:	50a3      	str	r3, [r4, r2]
 8008b9a:	e7c9      	b.n	8008b30 <_malloc_r+0x20>
 8008b9c:	4622      	mov	r2, r4
 8008b9e:	6864      	ldr	r4, [r4, #4]
 8008ba0:	e7cc      	b.n	8008b3c <_malloc_r+0x2c>
 8008ba2:	1cc4      	adds	r4, r0, #3
 8008ba4:	f024 0403 	bic.w	r4, r4, #3
 8008ba8:	42a0      	cmp	r0, r4
 8008baa:	d0e3      	beq.n	8008b74 <_malloc_r+0x64>
 8008bac:	1a21      	subs	r1, r4, r0
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f000 f808 	bl	8008bc4 <_sbrk_r>
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	d1dd      	bne.n	8008b74 <_malloc_r+0x64>
 8008bb8:	e7cf      	b.n	8008b5a <_malloc_r+0x4a>
 8008bba:	bf00      	nop
 8008bbc:	200000c0 	.word	0x200000c0
 8008bc0:	200000c4 	.word	0x200000c4

08008bc4 <_sbrk_r>:
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	4d06      	ldr	r5, [pc, #24]	; (8008be0 <_sbrk_r+0x1c>)
 8008bc8:	2300      	movs	r3, #0
 8008bca:	4604      	mov	r4, r0
 8008bcc:	4608      	mov	r0, r1
 8008bce:	602b      	str	r3, [r5, #0]
 8008bd0:	f7f8 ff9e 	bl	8001b10 <_sbrk>
 8008bd4:	1c43      	adds	r3, r0, #1
 8008bd6:	d102      	bne.n	8008bde <_sbrk_r+0x1a>
 8008bd8:	682b      	ldr	r3, [r5, #0]
 8008bda:	b103      	cbz	r3, 8008bde <_sbrk_r+0x1a>
 8008bdc:	6023      	str	r3, [r4, #0]
 8008bde:	bd38      	pop	{r3, r4, r5, pc}
 8008be0:	20000a14 	.word	0x20000a14

08008be4 <_vsiprintf_r>:
 8008be4:	b500      	push	{lr}
 8008be6:	b09b      	sub	sp, #108	; 0x6c
 8008be8:	9100      	str	r1, [sp, #0]
 8008bea:	9104      	str	r1, [sp, #16]
 8008bec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bf0:	9105      	str	r1, [sp, #20]
 8008bf2:	9102      	str	r1, [sp, #8]
 8008bf4:	4905      	ldr	r1, [pc, #20]	; (8008c0c <_vsiprintf_r+0x28>)
 8008bf6:	9103      	str	r1, [sp, #12]
 8008bf8:	4669      	mov	r1, sp
 8008bfa:	f000 f87b 	bl	8008cf4 <_svfiprintf_r>
 8008bfe:	9b00      	ldr	r3, [sp, #0]
 8008c00:	2200      	movs	r2, #0
 8008c02:	701a      	strb	r2, [r3, #0]
 8008c04:	b01b      	add	sp, #108	; 0x6c
 8008c06:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c0a:	bf00      	nop
 8008c0c:	ffff0208 	.word	0xffff0208

08008c10 <vsiprintf>:
 8008c10:	4613      	mov	r3, r2
 8008c12:	460a      	mov	r2, r1
 8008c14:	4601      	mov	r1, r0
 8008c16:	4802      	ldr	r0, [pc, #8]	; (8008c20 <vsiprintf+0x10>)
 8008c18:	6800      	ldr	r0, [r0, #0]
 8008c1a:	f7ff bfe3 	b.w	8008be4 <_vsiprintf_r>
 8008c1e:	bf00      	nop
 8008c20:	20000038 	.word	0x20000038

08008c24 <__malloc_lock>:
 8008c24:	4801      	ldr	r0, [pc, #4]	; (8008c2c <__malloc_lock+0x8>)
 8008c26:	f000 baf9 	b.w	800921c <__retarget_lock_acquire_recursive>
 8008c2a:	bf00      	nop
 8008c2c:	20000a1c 	.word	0x20000a1c

08008c30 <__malloc_unlock>:
 8008c30:	4801      	ldr	r0, [pc, #4]	; (8008c38 <__malloc_unlock+0x8>)
 8008c32:	f000 baf4 	b.w	800921e <__retarget_lock_release_recursive>
 8008c36:	bf00      	nop
 8008c38:	20000a1c 	.word	0x20000a1c

08008c3c <__ssputs_r>:
 8008c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c40:	688e      	ldr	r6, [r1, #8]
 8008c42:	429e      	cmp	r6, r3
 8008c44:	4682      	mov	sl, r0
 8008c46:	460c      	mov	r4, r1
 8008c48:	4690      	mov	r8, r2
 8008c4a:	461f      	mov	r7, r3
 8008c4c:	d838      	bhi.n	8008cc0 <__ssputs_r+0x84>
 8008c4e:	898a      	ldrh	r2, [r1, #12]
 8008c50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c54:	d032      	beq.n	8008cbc <__ssputs_r+0x80>
 8008c56:	6825      	ldr	r5, [r4, #0]
 8008c58:	6909      	ldr	r1, [r1, #16]
 8008c5a:	eba5 0901 	sub.w	r9, r5, r1
 8008c5e:	6965      	ldr	r5, [r4, #20]
 8008c60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c68:	3301      	adds	r3, #1
 8008c6a:	444b      	add	r3, r9
 8008c6c:	106d      	asrs	r5, r5, #1
 8008c6e:	429d      	cmp	r5, r3
 8008c70:	bf38      	it	cc
 8008c72:	461d      	movcc	r5, r3
 8008c74:	0553      	lsls	r3, r2, #21
 8008c76:	d531      	bpl.n	8008cdc <__ssputs_r+0xa0>
 8008c78:	4629      	mov	r1, r5
 8008c7a:	f7ff ff49 	bl	8008b10 <_malloc_r>
 8008c7e:	4606      	mov	r6, r0
 8008c80:	b950      	cbnz	r0, 8008c98 <__ssputs_r+0x5c>
 8008c82:	230c      	movs	r3, #12
 8008c84:	f8ca 3000 	str.w	r3, [sl]
 8008c88:	89a3      	ldrh	r3, [r4, #12]
 8008c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c8e:	81a3      	strh	r3, [r4, #12]
 8008c90:	f04f 30ff 	mov.w	r0, #4294967295
 8008c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c98:	6921      	ldr	r1, [r4, #16]
 8008c9a:	464a      	mov	r2, r9
 8008c9c:	f000 fac0 	bl	8009220 <memcpy>
 8008ca0:	89a3      	ldrh	r3, [r4, #12]
 8008ca2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008caa:	81a3      	strh	r3, [r4, #12]
 8008cac:	6126      	str	r6, [r4, #16]
 8008cae:	6165      	str	r5, [r4, #20]
 8008cb0:	444e      	add	r6, r9
 8008cb2:	eba5 0509 	sub.w	r5, r5, r9
 8008cb6:	6026      	str	r6, [r4, #0]
 8008cb8:	60a5      	str	r5, [r4, #8]
 8008cba:	463e      	mov	r6, r7
 8008cbc:	42be      	cmp	r6, r7
 8008cbe:	d900      	bls.n	8008cc2 <__ssputs_r+0x86>
 8008cc0:	463e      	mov	r6, r7
 8008cc2:	4632      	mov	r2, r6
 8008cc4:	6820      	ldr	r0, [r4, #0]
 8008cc6:	4641      	mov	r1, r8
 8008cc8:	f000 fab8 	bl	800923c <memmove>
 8008ccc:	68a3      	ldr	r3, [r4, #8]
 8008cce:	6822      	ldr	r2, [r4, #0]
 8008cd0:	1b9b      	subs	r3, r3, r6
 8008cd2:	4432      	add	r2, r6
 8008cd4:	60a3      	str	r3, [r4, #8]
 8008cd6:	6022      	str	r2, [r4, #0]
 8008cd8:	2000      	movs	r0, #0
 8008cda:	e7db      	b.n	8008c94 <__ssputs_r+0x58>
 8008cdc:	462a      	mov	r2, r5
 8008cde:	f000 fac7 	bl	8009270 <_realloc_r>
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d1e1      	bne.n	8008cac <__ssputs_r+0x70>
 8008ce8:	6921      	ldr	r1, [r4, #16]
 8008cea:	4650      	mov	r0, sl
 8008cec:	f7ff fec0 	bl	8008a70 <_free_r>
 8008cf0:	e7c7      	b.n	8008c82 <__ssputs_r+0x46>
	...

08008cf4 <_svfiprintf_r>:
 8008cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf8:	4698      	mov	r8, r3
 8008cfa:	898b      	ldrh	r3, [r1, #12]
 8008cfc:	061b      	lsls	r3, r3, #24
 8008cfe:	b09d      	sub	sp, #116	; 0x74
 8008d00:	4607      	mov	r7, r0
 8008d02:	460d      	mov	r5, r1
 8008d04:	4614      	mov	r4, r2
 8008d06:	d50e      	bpl.n	8008d26 <_svfiprintf_r+0x32>
 8008d08:	690b      	ldr	r3, [r1, #16]
 8008d0a:	b963      	cbnz	r3, 8008d26 <_svfiprintf_r+0x32>
 8008d0c:	2140      	movs	r1, #64	; 0x40
 8008d0e:	f7ff feff 	bl	8008b10 <_malloc_r>
 8008d12:	6028      	str	r0, [r5, #0]
 8008d14:	6128      	str	r0, [r5, #16]
 8008d16:	b920      	cbnz	r0, 8008d22 <_svfiprintf_r+0x2e>
 8008d18:	230c      	movs	r3, #12
 8008d1a:	603b      	str	r3, [r7, #0]
 8008d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d20:	e0d1      	b.n	8008ec6 <_svfiprintf_r+0x1d2>
 8008d22:	2340      	movs	r3, #64	; 0x40
 8008d24:	616b      	str	r3, [r5, #20]
 8008d26:	2300      	movs	r3, #0
 8008d28:	9309      	str	r3, [sp, #36]	; 0x24
 8008d2a:	2320      	movs	r3, #32
 8008d2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d30:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d34:	2330      	movs	r3, #48	; 0x30
 8008d36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ee0 <_svfiprintf_r+0x1ec>
 8008d3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d3e:	f04f 0901 	mov.w	r9, #1
 8008d42:	4623      	mov	r3, r4
 8008d44:	469a      	mov	sl, r3
 8008d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d4a:	b10a      	cbz	r2, 8008d50 <_svfiprintf_r+0x5c>
 8008d4c:	2a25      	cmp	r2, #37	; 0x25
 8008d4e:	d1f9      	bne.n	8008d44 <_svfiprintf_r+0x50>
 8008d50:	ebba 0b04 	subs.w	fp, sl, r4
 8008d54:	d00b      	beq.n	8008d6e <_svfiprintf_r+0x7a>
 8008d56:	465b      	mov	r3, fp
 8008d58:	4622      	mov	r2, r4
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	4638      	mov	r0, r7
 8008d5e:	f7ff ff6d 	bl	8008c3c <__ssputs_r>
 8008d62:	3001      	adds	r0, #1
 8008d64:	f000 80aa 	beq.w	8008ebc <_svfiprintf_r+0x1c8>
 8008d68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d6a:	445a      	add	r2, fp
 8008d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 80a2 	beq.w	8008ebc <_svfiprintf_r+0x1c8>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d82:	f10a 0a01 	add.w	sl, sl, #1
 8008d86:	9304      	str	r3, [sp, #16]
 8008d88:	9307      	str	r3, [sp, #28]
 8008d8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d8e:	931a      	str	r3, [sp, #104]	; 0x68
 8008d90:	4654      	mov	r4, sl
 8008d92:	2205      	movs	r2, #5
 8008d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d98:	4851      	ldr	r0, [pc, #324]	; (8008ee0 <_svfiprintf_r+0x1ec>)
 8008d9a:	f7f7 fa21 	bl	80001e0 <memchr>
 8008d9e:	9a04      	ldr	r2, [sp, #16]
 8008da0:	b9d8      	cbnz	r0, 8008dda <_svfiprintf_r+0xe6>
 8008da2:	06d0      	lsls	r0, r2, #27
 8008da4:	bf44      	itt	mi
 8008da6:	2320      	movmi	r3, #32
 8008da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dac:	0711      	lsls	r1, r2, #28
 8008dae:	bf44      	itt	mi
 8008db0:	232b      	movmi	r3, #43	; 0x2b
 8008db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008db6:	f89a 3000 	ldrb.w	r3, [sl]
 8008dba:	2b2a      	cmp	r3, #42	; 0x2a
 8008dbc:	d015      	beq.n	8008dea <_svfiprintf_r+0xf6>
 8008dbe:	9a07      	ldr	r2, [sp, #28]
 8008dc0:	4654      	mov	r4, sl
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	f04f 0c0a 	mov.w	ip, #10
 8008dc8:	4621      	mov	r1, r4
 8008dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dce:	3b30      	subs	r3, #48	; 0x30
 8008dd0:	2b09      	cmp	r3, #9
 8008dd2:	d94e      	bls.n	8008e72 <_svfiprintf_r+0x17e>
 8008dd4:	b1b0      	cbz	r0, 8008e04 <_svfiprintf_r+0x110>
 8008dd6:	9207      	str	r2, [sp, #28]
 8008dd8:	e014      	b.n	8008e04 <_svfiprintf_r+0x110>
 8008dda:	eba0 0308 	sub.w	r3, r0, r8
 8008dde:	fa09 f303 	lsl.w	r3, r9, r3
 8008de2:	4313      	orrs	r3, r2
 8008de4:	9304      	str	r3, [sp, #16]
 8008de6:	46a2      	mov	sl, r4
 8008de8:	e7d2      	b.n	8008d90 <_svfiprintf_r+0x9c>
 8008dea:	9b03      	ldr	r3, [sp, #12]
 8008dec:	1d19      	adds	r1, r3, #4
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	9103      	str	r1, [sp, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	bfbb      	ittet	lt
 8008df6:	425b      	neglt	r3, r3
 8008df8:	f042 0202 	orrlt.w	r2, r2, #2
 8008dfc:	9307      	strge	r3, [sp, #28]
 8008dfe:	9307      	strlt	r3, [sp, #28]
 8008e00:	bfb8      	it	lt
 8008e02:	9204      	strlt	r2, [sp, #16]
 8008e04:	7823      	ldrb	r3, [r4, #0]
 8008e06:	2b2e      	cmp	r3, #46	; 0x2e
 8008e08:	d10c      	bne.n	8008e24 <_svfiprintf_r+0x130>
 8008e0a:	7863      	ldrb	r3, [r4, #1]
 8008e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e0e:	d135      	bne.n	8008e7c <_svfiprintf_r+0x188>
 8008e10:	9b03      	ldr	r3, [sp, #12]
 8008e12:	1d1a      	adds	r2, r3, #4
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	9203      	str	r2, [sp, #12]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	bfb8      	it	lt
 8008e1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e20:	3402      	adds	r4, #2
 8008e22:	9305      	str	r3, [sp, #20]
 8008e24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ef0 <_svfiprintf_r+0x1fc>
 8008e28:	7821      	ldrb	r1, [r4, #0]
 8008e2a:	2203      	movs	r2, #3
 8008e2c:	4650      	mov	r0, sl
 8008e2e:	f7f7 f9d7 	bl	80001e0 <memchr>
 8008e32:	b140      	cbz	r0, 8008e46 <_svfiprintf_r+0x152>
 8008e34:	2340      	movs	r3, #64	; 0x40
 8008e36:	eba0 000a 	sub.w	r0, r0, sl
 8008e3a:	fa03 f000 	lsl.w	r0, r3, r0
 8008e3e:	9b04      	ldr	r3, [sp, #16]
 8008e40:	4303      	orrs	r3, r0
 8008e42:	3401      	adds	r4, #1
 8008e44:	9304      	str	r3, [sp, #16]
 8008e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e4a:	4826      	ldr	r0, [pc, #152]	; (8008ee4 <_svfiprintf_r+0x1f0>)
 8008e4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e50:	2206      	movs	r2, #6
 8008e52:	f7f7 f9c5 	bl	80001e0 <memchr>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d038      	beq.n	8008ecc <_svfiprintf_r+0x1d8>
 8008e5a:	4b23      	ldr	r3, [pc, #140]	; (8008ee8 <_svfiprintf_r+0x1f4>)
 8008e5c:	bb1b      	cbnz	r3, 8008ea6 <_svfiprintf_r+0x1b2>
 8008e5e:	9b03      	ldr	r3, [sp, #12]
 8008e60:	3307      	adds	r3, #7
 8008e62:	f023 0307 	bic.w	r3, r3, #7
 8008e66:	3308      	adds	r3, #8
 8008e68:	9303      	str	r3, [sp, #12]
 8008e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e6c:	4433      	add	r3, r6
 8008e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e70:	e767      	b.n	8008d42 <_svfiprintf_r+0x4e>
 8008e72:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e76:	460c      	mov	r4, r1
 8008e78:	2001      	movs	r0, #1
 8008e7a:	e7a5      	b.n	8008dc8 <_svfiprintf_r+0xd4>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	3401      	adds	r4, #1
 8008e80:	9305      	str	r3, [sp, #20]
 8008e82:	4619      	mov	r1, r3
 8008e84:	f04f 0c0a 	mov.w	ip, #10
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e8e:	3a30      	subs	r2, #48	; 0x30
 8008e90:	2a09      	cmp	r2, #9
 8008e92:	d903      	bls.n	8008e9c <_svfiprintf_r+0x1a8>
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d0c5      	beq.n	8008e24 <_svfiprintf_r+0x130>
 8008e98:	9105      	str	r1, [sp, #20]
 8008e9a:	e7c3      	b.n	8008e24 <_svfiprintf_r+0x130>
 8008e9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ea0:	4604      	mov	r4, r0
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e7f0      	b.n	8008e88 <_svfiprintf_r+0x194>
 8008ea6:	ab03      	add	r3, sp, #12
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	462a      	mov	r2, r5
 8008eac:	4b0f      	ldr	r3, [pc, #60]	; (8008eec <_svfiprintf_r+0x1f8>)
 8008eae:	a904      	add	r1, sp, #16
 8008eb0:	4638      	mov	r0, r7
 8008eb2:	f3af 8000 	nop.w
 8008eb6:	1c42      	adds	r2, r0, #1
 8008eb8:	4606      	mov	r6, r0
 8008eba:	d1d6      	bne.n	8008e6a <_svfiprintf_r+0x176>
 8008ebc:	89ab      	ldrh	r3, [r5, #12]
 8008ebe:	065b      	lsls	r3, r3, #25
 8008ec0:	f53f af2c 	bmi.w	8008d1c <_svfiprintf_r+0x28>
 8008ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ec6:	b01d      	add	sp, #116	; 0x74
 8008ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ecc:	ab03      	add	r3, sp, #12
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	462a      	mov	r2, r5
 8008ed2:	4b06      	ldr	r3, [pc, #24]	; (8008eec <_svfiprintf_r+0x1f8>)
 8008ed4:	a904      	add	r1, sp, #16
 8008ed6:	4638      	mov	r0, r7
 8008ed8:	f000 f87a 	bl	8008fd0 <_printf_i>
 8008edc:	e7eb      	b.n	8008eb6 <_svfiprintf_r+0x1c2>
 8008ede:	bf00      	nop
 8008ee0:	0800986c 	.word	0x0800986c
 8008ee4:	08009876 	.word	0x08009876
 8008ee8:	00000000 	.word	0x00000000
 8008eec:	08008c3d 	.word	0x08008c3d
 8008ef0:	08009872 	.word	0x08009872

08008ef4 <_printf_common>:
 8008ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef8:	4616      	mov	r6, r2
 8008efa:	4699      	mov	r9, r3
 8008efc:	688a      	ldr	r2, [r1, #8]
 8008efe:	690b      	ldr	r3, [r1, #16]
 8008f00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f04:	4293      	cmp	r3, r2
 8008f06:	bfb8      	it	lt
 8008f08:	4613      	movlt	r3, r2
 8008f0a:	6033      	str	r3, [r6, #0]
 8008f0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f10:	4607      	mov	r7, r0
 8008f12:	460c      	mov	r4, r1
 8008f14:	b10a      	cbz	r2, 8008f1a <_printf_common+0x26>
 8008f16:	3301      	adds	r3, #1
 8008f18:	6033      	str	r3, [r6, #0]
 8008f1a:	6823      	ldr	r3, [r4, #0]
 8008f1c:	0699      	lsls	r1, r3, #26
 8008f1e:	bf42      	ittt	mi
 8008f20:	6833      	ldrmi	r3, [r6, #0]
 8008f22:	3302      	addmi	r3, #2
 8008f24:	6033      	strmi	r3, [r6, #0]
 8008f26:	6825      	ldr	r5, [r4, #0]
 8008f28:	f015 0506 	ands.w	r5, r5, #6
 8008f2c:	d106      	bne.n	8008f3c <_printf_common+0x48>
 8008f2e:	f104 0a19 	add.w	sl, r4, #25
 8008f32:	68e3      	ldr	r3, [r4, #12]
 8008f34:	6832      	ldr	r2, [r6, #0]
 8008f36:	1a9b      	subs	r3, r3, r2
 8008f38:	42ab      	cmp	r3, r5
 8008f3a:	dc26      	bgt.n	8008f8a <_printf_common+0x96>
 8008f3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f40:	1e13      	subs	r3, r2, #0
 8008f42:	6822      	ldr	r2, [r4, #0]
 8008f44:	bf18      	it	ne
 8008f46:	2301      	movne	r3, #1
 8008f48:	0692      	lsls	r2, r2, #26
 8008f4a:	d42b      	bmi.n	8008fa4 <_printf_common+0xb0>
 8008f4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f50:	4649      	mov	r1, r9
 8008f52:	4638      	mov	r0, r7
 8008f54:	47c0      	blx	r8
 8008f56:	3001      	adds	r0, #1
 8008f58:	d01e      	beq.n	8008f98 <_printf_common+0xa4>
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	68e5      	ldr	r5, [r4, #12]
 8008f5e:	6832      	ldr	r2, [r6, #0]
 8008f60:	f003 0306 	and.w	r3, r3, #6
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	bf08      	it	eq
 8008f68:	1aad      	subeq	r5, r5, r2
 8008f6a:	68a3      	ldr	r3, [r4, #8]
 8008f6c:	6922      	ldr	r2, [r4, #16]
 8008f6e:	bf0c      	ite	eq
 8008f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f74:	2500      	movne	r5, #0
 8008f76:	4293      	cmp	r3, r2
 8008f78:	bfc4      	itt	gt
 8008f7a:	1a9b      	subgt	r3, r3, r2
 8008f7c:	18ed      	addgt	r5, r5, r3
 8008f7e:	2600      	movs	r6, #0
 8008f80:	341a      	adds	r4, #26
 8008f82:	42b5      	cmp	r5, r6
 8008f84:	d11a      	bne.n	8008fbc <_printf_common+0xc8>
 8008f86:	2000      	movs	r0, #0
 8008f88:	e008      	b.n	8008f9c <_printf_common+0xa8>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	4652      	mov	r2, sl
 8008f8e:	4649      	mov	r1, r9
 8008f90:	4638      	mov	r0, r7
 8008f92:	47c0      	blx	r8
 8008f94:	3001      	adds	r0, #1
 8008f96:	d103      	bne.n	8008fa0 <_printf_common+0xac>
 8008f98:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa0:	3501      	adds	r5, #1
 8008fa2:	e7c6      	b.n	8008f32 <_printf_common+0x3e>
 8008fa4:	18e1      	adds	r1, r4, r3
 8008fa6:	1c5a      	adds	r2, r3, #1
 8008fa8:	2030      	movs	r0, #48	; 0x30
 8008faa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fae:	4422      	add	r2, r4
 8008fb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fb8:	3302      	adds	r3, #2
 8008fba:	e7c7      	b.n	8008f4c <_printf_common+0x58>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	4622      	mov	r2, r4
 8008fc0:	4649      	mov	r1, r9
 8008fc2:	4638      	mov	r0, r7
 8008fc4:	47c0      	blx	r8
 8008fc6:	3001      	adds	r0, #1
 8008fc8:	d0e6      	beq.n	8008f98 <_printf_common+0xa4>
 8008fca:	3601      	adds	r6, #1
 8008fcc:	e7d9      	b.n	8008f82 <_printf_common+0x8e>
	...

08008fd0 <_printf_i>:
 8008fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd4:	460c      	mov	r4, r1
 8008fd6:	4691      	mov	r9, r2
 8008fd8:	7e27      	ldrb	r7, [r4, #24]
 8008fda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008fdc:	2f78      	cmp	r7, #120	; 0x78
 8008fde:	4680      	mov	r8, r0
 8008fe0:	469a      	mov	sl, r3
 8008fe2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fe6:	d807      	bhi.n	8008ff8 <_printf_i+0x28>
 8008fe8:	2f62      	cmp	r7, #98	; 0x62
 8008fea:	d80a      	bhi.n	8009002 <_printf_i+0x32>
 8008fec:	2f00      	cmp	r7, #0
 8008fee:	f000 80d8 	beq.w	80091a2 <_printf_i+0x1d2>
 8008ff2:	2f58      	cmp	r7, #88	; 0x58
 8008ff4:	f000 80a3 	beq.w	800913e <_printf_i+0x16e>
 8008ff8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ffc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009000:	e03a      	b.n	8009078 <_printf_i+0xa8>
 8009002:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009006:	2b15      	cmp	r3, #21
 8009008:	d8f6      	bhi.n	8008ff8 <_printf_i+0x28>
 800900a:	a001      	add	r0, pc, #4	; (adr r0, 8009010 <_printf_i+0x40>)
 800900c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009010:	08009069 	.word	0x08009069
 8009014:	0800907d 	.word	0x0800907d
 8009018:	08008ff9 	.word	0x08008ff9
 800901c:	08008ff9 	.word	0x08008ff9
 8009020:	08008ff9 	.word	0x08008ff9
 8009024:	08008ff9 	.word	0x08008ff9
 8009028:	0800907d 	.word	0x0800907d
 800902c:	08008ff9 	.word	0x08008ff9
 8009030:	08008ff9 	.word	0x08008ff9
 8009034:	08008ff9 	.word	0x08008ff9
 8009038:	08008ff9 	.word	0x08008ff9
 800903c:	08009189 	.word	0x08009189
 8009040:	080090ad 	.word	0x080090ad
 8009044:	0800916b 	.word	0x0800916b
 8009048:	08008ff9 	.word	0x08008ff9
 800904c:	08008ff9 	.word	0x08008ff9
 8009050:	080091ab 	.word	0x080091ab
 8009054:	08008ff9 	.word	0x08008ff9
 8009058:	080090ad 	.word	0x080090ad
 800905c:	08008ff9 	.word	0x08008ff9
 8009060:	08008ff9 	.word	0x08008ff9
 8009064:	08009173 	.word	0x08009173
 8009068:	680b      	ldr	r3, [r1, #0]
 800906a:	1d1a      	adds	r2, r3, #4
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	600a      	str	r2, [r1, #0]
 8009070:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009078:	2301      	movs	r3, #1
 800907a:	e0a3      	b.n	80091c4 <_printf_i+0x1f4>
 800907c:	6825      	ldr	r5, [r4, #0]
 800907e:	6808      	ldr	r0, [r1, #0]
 8009080:	062e      	lsls	r6, r5, #24
 8009082:	f100 0304 	add.w	r3, r0, #4
 8009086:	d50a      	bpl.n	800909e <_printf_i+0xce>
 8009088:	6805      	ldr	r5, [r0, #0]
 800908a:	600b      	str	r3, [r1, #0]
 800908c:	2d00      	cmp	r5, #0
 800908e:	da03      	bge.n	8009098 <_printf_i+0xc8>
 8009090:	232d      	movs	r3, #45	; 0x2d
 8009092:	426d      	negs	r5, r5
 8009094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009098:	485e      	ldr	r0, [pc, #376]	; (8009214 <_printf_i+0x244>)
 800909a:	230a      	movs	r3, #10
 800909c:	e019      	b.n	80090d2 <_printf_i+0x102>
 800909e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80090a2:	6805      	ldr	r5, [r0, #0]
 80090a4:	600b      	str	r3, [r1, #0]
 80090a6:	bf18      	it	ne
 80090a8:	b22d      	sxthne	r5, r5
 80090aa:	e7ef      	b.n	800908c <_printf_i+0xbc>
 80090ac:	680b      	ldr	r3, [r1, #0]
 80090ae:	6825      	ldr	r5, [r4, #0]
 80090b0:	1d18      	adds	r0, r3, #4
 80090b2:	6008      	str	r0, [r1, #0]
 80090b4:	0628      	lsls	r0, r5, #24
 80090b6:	d501      	bpl.n	80090bc <_printf_i+0xec>
 80090b8:	681d      	ldr	r5, [r3, #0]
 80090ba:	e002      	b.n	80090c2 <_printf_i+0xf2>
 80090bc:	0669      	lsls	r1, r5, #25
 80090be:	d5fb      	bpl.n	80090b8 <_printf_i+0xe8>
 80090c0:	881d      	ldrh	r5, [r3, #0]
 80090c2:	4854      	ldr	r0, [pc, #336]	; (8009214 <_printf_i+0x244>)
 80090c4:	2f6f      	cmp	r7, #111	; 0x6f
 80090c6:	bf0c      	ite	eq
 80090c8:	2308      	moveq	r3, #8
 80090ca:	230a      	movne	r3, #10
 80090cc:	2100      	movs	r1, #0
 80090ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090d2:	6866      	ldr	r6, [r4, #4]
 80090d4:	60a6      	str	r6, [r4, #8]
 80090d6:	2e00      	cmp	r6, #0
 80090d8:	bfa2      	ittt	ge
 80090da:	6821      	ldrge	r1, [r4, #0]
 80090dc:	f021 0104 	bicge.w	r1, r1, #4
 80090e0:	6021      	strge	r1, [r4, #0]
 80090e2:	b90d      	cbnz	r5, 80090e8 <_printf_i+0x118>
 80090e4:	2e00      	cmp	r6, #0
 80090e6:	d04d      	beq.n	8009184 <_printf_i+0x1b4>
 80090e8:	4616      	mov	r6, r2
 80090ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80090ee:	fb03 5711 	mls	r7, r3, r1, r5
 80090f2:	5dc7      	ldrb	r7, [r0, r7]
 80090f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090f8:	462f      	mov	r7, r5
 80090fa:	42bb      	cmp	r3, r7
 80090fc:	460d      	mov	r5, r1
 80090fe:	d9f4      	bls.n	80090ea <_printf_i+0x11a>
 8009100:	2b08      	cmp	r3, #8
 8009102:	d10b      	bne.n	800911c <_printf_i+0x14c>
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	07df      	lsls	r7, r3, #31
 8009108:	d508      	bpl.n	800911c <_printf_i+0x14c>
 800910a:	6923      	ldr	r3, [r4, #16]
 800910c:	6861      	ldr	r1, [r4, #4]
 800910e:	4299      	cmp	r1, r3
 8009110:	bfde      	ittt	le
 8009112:	2330      	movle	r3, #48	; 0x30
 8009114:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009118:	f106 36ff 	addle.w	r6, r6, #4294967295
 800911c:	1b92      	subs	r2, r2, r6
 800911e:	6122      	str	r2, [r4, #16]
 8009120:	f8cd a000 	str.w	sl, [sp]
 8009124:	464b      	mov	r3, r9
 8009126:	aa03      	add	r2, sp, #12
 8009128:	4621      	mov	r1, r4
 800912a:	4640      	mov	r0, r8
 800912c:	f7ff fee2 	bl	8008ef4 <_printf_common>
 8009130:	3001      	adds	r0, #1
 8009132:	d14c      	bne.n	80091ce <_printf_i+0x1fe>
 8009134:	f04f 30ff 	mov.w	r0, #4294967295
 8009138:	b004      	add	sp, #16
 800913a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800913e:	4835      	ldr	r0, [pc, #212]	; (8009214 <_printf_i+0x244>)
 8009140:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009144:	6823      	ldr	r3, [r4, #0]
 8009146:	680e      	ldr	r6, [r1, #0]
 8009148:	061f      	lsls	r7, r3, #24
 800914a:	f856 5b04 	ldr.w	r5, [r6], #4
 800914e:	600e      	str	r6, [r1, #0]
 8009150:	d514      	bpl.n	800917c <_printf_i+0x1ac>
 8009152:	07d9      	lsls	r1, r3, #31
 8009154:	bf44      	itt	mi
 8009156:	f043 0320 	orrmi.w	r3, r3, #32
 800915a:	6023      	strmi	r3, [r4, #0]
 800915c:	b91d      	cbnz	r5, 8009166 <_printf_i+0x196>
 800915e:	6823      	ldr	r3, [r4, #0]
 8009160:	f023 0320 	bic.w	r3, r3, #32
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	2310      	movs	r3, #16
 8009168:	e7b0      	b.n	80090cc <_printf_i+0xfc>
 800916a:	6823      	ldr	r3, [r4, #0]
 800916c:	f043 0320 	orr.w	r3, r3, #32
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	2378      	movs	r3, #120	; 0x78
 8009174:	4828      	ldr	r0, [pc, #160]	; (8009218 <_printf_i+0x248>)
 8009176:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800917a:	e7e3      	b.n	8009144 <_printf_i+0x174>
 800917c:	065e      	lsls	r6, r3, #25
 800917e:	bf48      	it	mi
 8009180:	b2ad      	uxthmi	r5, r5
 8009182:	e7e6      	b.n	8009152 <_printf_i+0x182>
 8009184:	4616      	mov	r6, r2
 8009186:	e7bb      	b.n	8009100 <_printf_i+0x130>
 8009188:	680b      	ldr	r3, [r1, #0]
 800918a:	6826      	ldr	r6, [r4, #0]
 800918c:	6960      	ldr	r0, [r4, #20]
 800918e:	1d1d      	adds	r5, r3, #4
 8009190:	600d      	str	r5, [r1, #0]
 8009192:	0635      	lsls	r5, r6, #24
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	d501      	bpl.n	800919c <_printf_i+0x1cc>
 8009198:	6018      	str	r0, [r3, #0]
 800919a:	e002      	b.n	80091a2 <_printf_i+0x1d2>
 800919c:	0671      	lsls	r1, r6, #25
 800919e:	d5fb      	bpl.n	8009198 <_printf_i+0x1c8>
 80091a0:	8018      	strh	r0, [r3, #0]
 80091a2:	2300      	movs	r3, #0
 80091a4:	6123      	str	r3, [r4, #16]
 80091a6:	4616      	mov	r6, r2
 80091a8:	e7ba      	b.n	8009120 <_printf_i+0x150>
 80091aa:	680b      	ldr	r3, [r1, #0]
 80091ac:	1d1a      	adds	r2, r3, #4
 80091ae:	600a      	str	r2, [r1, #0]
 80091b0:	681e      	ldr	r6, [r3, #0]
 80091b2:	6862      	ldr	r2, [r4, #4]
 80091b4:	2100      	movs	r1, #0
 80091b6:	4630      	mov	r0, r6
 80091b8:	f7f7 f812 	bl	80001e0 <memchr>
 80091bc:	b108      	cbz	r0, 80091c2 <_printf_i+0x1f2>
 80091be:	1b80      	subs	r0, r0, r6
 80091c0:	6060      	str	r0, [r4, #4]
 80091c2:	6863      	ldr	r3, [r4, #4]
 80091c4:	6123      	str	r3, [r4, #16]
 80091c6:	2300      	movs	r3, #0
 80091c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091cc:	e7a8      	b.n	8009120 <_printf_i+0x150>
 80091ce:	6923      	ldr	r3, [r4, #16]
 80091d0:	4632      	mov	r2, r6
 80091d2:	4649      	mov	r1, r9
 80091d4:	4640      	mov	r0, r8
 80091d6:	47d0      	blx	sl
 80091d8:	3001      	adds	r0, #1
 80091da:	d0ab      	beq.n	8009134 <_printf_i+0x164>
 80091dc:	6823      	ldr	r3, [r4, #0]
 80091de:	079b      	lsls	r3, r3, #30
 80091e0:	d413      	bmi.n	800920a <_printf_i+0x23a>
 80091e2:	68e0      	ldr	r0, [r4, #12]
 80091e4:	9b03      	ldr	r3, [sp, #12]
 80091e6:	4298      	cmp	r0, r3
 80091e8:	bfb8      	it	lt
 80091ea:	4618      	movlt	r0, r3
 80091ec:	e7a4      	b.n	8009138 <_printf_i+0x168>
 80091ee:	2301      	movs	r3, #1
 80091f0:	4632      	mov	r2, r6
 80091f2:	4649      	mov	r1, r9
 80091f4:	4640      	mov	r0, r8
 80091f6:	47d0      	blx	sl
 80091f8:	3001      	adds	r0, #1
 80091fa:	d09b      	beq.n	8009134 <_printf_i+0x164>
 80091fc:	3501      	adds	r5, #1
 80091fe:	68e3      	ldr	r3, [r4, #12]
 8009200:	9903      	ldr	r1, [sp, #12]
 8009202:	1a5b      	subs	r3, r3, r1
 8009204:	42ab      	cmp	r3, r5
 8009206:	dcf2      	bgt.n	80091ee <_printf_i+0x21e>
 8009208:	e7eb      	b.n	80091e2 <_printf_i+0x212>
 800920a:	2500      	movs	r5, #0
 800920c:	f104 0619 	add.w	r6, r4, #25
 8009210:	e7f5      	b.n	80091fe <_printf_i+0x22e>
 8009212:	bf00      	nop
 8009214:	0800987d 	.word	0x0800987d
 8009218:	0800988e 	.word	0x0800988e

0800921c <__retarget_lock_acquire_recursive>:
 800921c:	4770      	bx	lr

0800921e <__retarget_lock_release_recursive>:
 800921e:	4770      	bx	lr

08009220 <memcpy>:
 8009220:	440a      	add	r2, r1
 8009222:	4291      	cmp	r1, r2
 8009224:	f100 33ff 	add.w	r3, r0, #4294967295
 8009228:	d100      	bne.n	800922c <memcpy+0xc>
 800922a:	4770      	bx	lr
 800922c:	b510      	push	{r4, lr}
 800922e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009232:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009236:	4291      	cmp	r1, r2
 8009238:	d1f9      	bne.n	800922e <memcpy+0xe>
 800923a:	bd10      	pop	{r4, pc}

0800923c <memmove>:
 800923c:	4288      	cmp	r0, r1
 800923e:	b510      	push	{r4, lr}
 8009240:	eb01 0402 	add.w	r4, r1, r2
 8009244:	d902      	bls.n	800924c <memmove+0x10>
 8009246:	4284      	cmp	r4, r0
 8009248:	4623      	mov	r3, r4
 800924a:	d807      	bhi.n	800925c <memmove+0x20>
 800924c:	1e43      	subs	r3, r0, #1
 800924e:	42a1      	cmp	r1, r4
 8009250:	d008      	beq.n	8009264 <memmove+0x28>
 8009252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009256:	f803 2f01 	strb.w	r2, [r3, #1]!
 800925a:	e7f8      	b.n	800924e <memmove+0x12>
 800925c:	4402      	add	r2, r0
 800925e:	4601      	mov	r1, r0
 8009260:	428a      	cmp	r2, r1
 8009262:	d100      	bne.n	8009266 <memmove+0x2a>
 8009264:	bd10      	pop	{r4, pc}
 8009266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800926a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800926e:	e7f7      	b.n	8009260 <memmove+0x24>

08009270 <_realloc_r>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	4607      	mov	r7, r0
 8009274:	4614      	mov	r4, r2
 8009276:	460e      	mov	r6, r1
 8009278:	b921      	cbnz	r1, 8009284 <_realloc_r+0x14>
 800927a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800927e:	4611      	mov	r1, r2
 8009280:	f7ff bc46 	b.w	8008b10 <_malloc_r>
 8009284:	b922      	cbnz	r2, 8009290 <_realloc_r+0x20>
 8009286:	f7ff fbf3 	bl	8008a70 <_free_r>
 800928a:	4625      	mov	r5, r4
 800928c:	4628      	mov	r0, r5
 800928e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009290:	f000 f814 	bl	80092bc <_malloc_usable_size_r>
 8009294:	42a0      	cmp	r0, r4
 8009296:	d20f      	bcs.n	80092b8 <_realloc_r+0x48>
 8009298:	4621      	mov	r1, r4
 800929a:	4638      	mov	r0, r7
 800929c:	f7ff fc38 	bl	8008b10 <_malloc_r>
 80092a0:	4605      	mov	r5, r0
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d0f2      	beq.n	800928c <_realloc_r+0x1c>
 80092a6:	4631      	mov	r1, r6
 80092a8:	4622      	mov	r2, r4
 80092aa:	f7ff ffb9 	bl	8009220 <memcpy>
 80092ae:	4631      	mov	r1, r6
 80092b0:	4638      	mov	r0, r7
 80092b2:	f7ff fbdd 	bl	8008a70 <_free_r>
 80092b6:	e7e9      	b.n	800928c <_realloc_r+0x1c>
 80092b8:	4635      	mov	r5, r6
 80092ba:	e7e7      	b.n	800928c <_realloc_r+0x1c>

080092bc <_malloc_usable_size_r>:
 80092bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092c0:	1f18      	subs	r0, r3, #4
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	bfbc      	itt	lt
 80092c6:	580b      	ldrlt	r3, [r1, r0]
 80092c8:	18c0      	addlt	r0, r0, r3
 80092ca:	4770      	bx	lr

080092cc <_init>:
 80092cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ce:	bf00      	nop
 80092d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d2:	bc08      	pop	{r3}
 80092d4:	469e      	mov	lr, r3
 80092d6:	4770      	bx	lr

080092d8 <_fini>:
 80092d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092da:	bf00      	nop
 80092dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092de:	bc08      	pop	{r3}
 80092e0:	469e      	mov	lr, r3
 80092e2:	4770      	bx	lr
